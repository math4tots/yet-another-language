from 'js/type/math' import Math

export class SomeClass {
  "These are some comments"

  var someField: Number

  function someMethod() {
    "someMethod is a method on SomeClass"
    const value = this.someField + 3
    "this.someMethod()"
  }
}

export class SomeOtherClass {}

export interface SomeInterface {
  """
  These are some comments for SomeInterface.
  Some more comments
  """

  function someMethod() {
    "someMethod is a method on SomeInterface"
  }
}

export const someValue = 'hello some value'
export const someOtherValue = 'some other value'

const instance "instance is an instance of SomeClass" = new SomeClass(0)

instance.someMethod()

function foo(x: SomeInterface): Any {
  "comments for function foo"
  x.someMethod()
  return "hello"
}

function baz(a: Number, b: Number): Number {
  return a + b
}

print(someValue)
"print(foo(3))"
print(baz(2, 3))
print((x: Number) => x)
print((x: Number) => x + 2)
print((x: Number) => x + 100)
"print((x: Number) => x + asdfasdf)"

const f = (x: Number) => x + 100
print(f(30))
print(f(50))

function rangeSum(n: Number): Number {
  var i = 0
  var total = 0
  while (i < n) {
    total = total + i
    i = i + 1
  }
  return total
}

print(rangeSum(10))
print(rangeSum(30))
print(rangeSum(40))

print(null)
print(0)
print(if 3 then 1 else 2)
print(if false then 1 else 2)
print('hello' and 'world')
print('hello' or 'world')
print(true and false)
print(true or false)

print(repr)
print(str)
print(Math.cos(3.2))
print(Math.cos(4))
print(Math.cos(5))
print(Math.sin(30))
print(Math.sin(4))
print(Math.sin(5))
print(Math)
print(33 + 47)

print(['a', 'b', 'c'])
print([1, 2, 3][0])
print([1, 2, 3].size)
print("hello world".size)
print(print)

const ix = 2
const iy = 3
print(2 + 3)
print(ix + iy)

const x = "x value"
const y = "y value"

print(x + " " + y)

const now = native function(): Number { js "return Date.now()" }
print(now())


export interface Foo {
  function foo() {
    "Some comments"
    aliasFor(__js_foo)
  }
}
