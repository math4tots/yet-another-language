

# SOME COMMENTS

interface Node {
  const baseURI: String = aliasFor(__js_baseURI)
  function appendChild(node: Node): Node { aliasFor(__js_appendChild) }
}
interface Element extends Node {
  var id: String = aliasFor(__js_id)
  var innerHTML: String = aliasFor(__js_innerHTML)
  const tagName: String = aliasFor(__js_tagName)
  var textContent: String = aliasFor(__js_textContent)
  function append(node: Node) { aliasFor(__js_append) }
}
interface HTMLElement extends Element {}
interface HTMLBodyElement extends HTMLElement {}
interface HTMLCanvasElement extends HTMLElement {
  var width: Number = aliasFor(__js_width)
  var height: Number = aliasFor(__js_height)
  function get2DContext(contextType: String = "2d"): CanvasRenderingContext2D {
    """
    Calls canvas.getContext() to get the rendering context.
    The default parameter automatically passes "2d" to the method to get the correct
    context type.
    """
    aliasFor(__js_getContext)
  }
}

interface Document {
  const body: HTMLBodyElement = aliasFor(__js_body)
  function getElementById(id: String): Element? { aliasFor(__js_getElementById) }
}

interface CanvasRenderingContext2D {
  var fillStyle: String = aliasFor(__js_fillStyle)
  function fillRect(x: Number, y: Number, width: Number, height: Number) {
    aliasFor(__js_fillRect)
  }
}

const createElement = native(tagName: String): Element {
  js "return createElement(tagName)"
}

const document = native "document" as Document
