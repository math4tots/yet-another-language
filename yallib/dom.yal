"""
AUTOGENERATED FROM lib.dom.d.ts
WITH dom-gen/run.mjs
"""
export as dom
from './js' import ArrayBuffer
from './js' import ArrayBufferView
from './js' import Date
from './js' import Error
from './js' import Float32Array
from './js' import Float64Array
from './js' import Function
from './js' import Int32Array
from './js' import Uint32Array
from './js' import Uint8Array
from './js' import Uint8ClampedArray
export enum MutationRecordType {
  const attributes = "attributes"
  const characterData = "characterData"
  const childList = "childList"
}
export enum AlignSetting {
  const center = "center"
  const end = "end"
  const left = "left"
  const right = "right"
  const start = "start"
}
export enum AlphaOption {
  const discard = "discard"
  const keep = "keep"
}
export enum AnimationPlayState {
  const finished = "finished"
  const idle = "idle"
  const paused = "paused"
  const running = "running"
}
export enum AnimationReplaceState {
  const active = "active"
  const persisted = "persisted"
  const removed = "removed"
}
export enum AppendMode {
  const segments = "segments"
  const sequence = "sequence"
}
export enum AttestationConveyancePreference {
  const direct = "direct"
  const enterprise = "enterprise"
  const indirect = "indirect"
  const none = "none"
}
export enum AudioContextLatencyCategory {
  const balanced = "balanced"
  const interactive = "interactive"
  const playback = "playback"
}
export enum AudioContextState {
  const closed = "closed"
  const running = "running"
  const suspended = "suspended"
}
export enum AuthenticatorAttachment {
  const _value0 = "cross-platform"
  const platform = "platform"
}
export enum AuthenticatorTransport {
  const ble = "ble"
  const hybrid = "hybrid"
  const internal = "internal"
  const nfc = "nfc"
  const usb = "usb"
}
export enum AutoFillAddressKind {
  const billing = "billing"
  const shipping = "shipping"
}
export enum AutoFillBase {
  const _value0 = ""
  const off = "off"
  const on = "on"
}
export enum AutoFillContactField {
  const email = "email"
  const tel = "tel"
  const _value2 = "tel-area-code"
  const _value3 = "tel-country-code"
  const _value4 = "tel-extension"
  const _value5 = "tel-local"
  const _value6 = "tel-local-prefix"
  const _value7 = "tel-local-suffix"
  const _value8 = "tel-national"
}
export enum AutoFillContactKind {
  const home = "home"
  const mobile = "mobile"
  const work = "work"
}
export enum AutoFillNormalField {
  const _value0 = "additional-name"
  const _value1 = "address-level1"
  const _value2 = "address-level2"
  const _value3 = "address-level3"
  const _value4 = "address-level4"
  const _value5 = "address-line1"
  const _value6 = "address-line2"
  const _value7 = "address-line3"
  const _value8 = "bday-day"
  const _value9 = "bday-month"
  const _value10 = "bday-year"
  const _value11 = "cc-csc"
  const _value12 = "cc-exp"
  const _value13 = "cc-exp-month"
  const _value14 = "cc-exp-year"
  const _value15 = "cc-family-name"
  const _value16 = "cc-given-name"
  const _value17 = "cc-name"
  const _value18 = "cc-number"
  const _value19 = "cc-type"
  const country = "country"
  const _value21 = "country-name"
  const _value22 = "current-password"
  const _value23 = "family-name"
  const _value24 = "given-name"
  const _value25 = "honorific-prefix"
  const _value26 = "honorific-suffix"
  const name = "name"
  const _value28 = "new-password"
  const _value29 = "one-time-code"
  const organization = "organization"
  const _value31 = "postal-code"
  const _value32 = "street-address"
  const _value33 = "transaction-amount"
  const _value34 = "transaction-currency"
  const username = "username"
}
export enum AutomationRate {
  const _value0 = "a-rate"
  const _value1 = "k-rate"
}
export enum AvcBitstreamFormat {
  const annexb = "annexb"
  const avc = "avc"
}
export enum BinaryType {
  const arraybuffer = "arraybuffer"
  const blob = "blob"
}
export enum BiquadFilterType {
  const allpass = "allpass"
  const bandpass = "bandpass"
  const highpass = "highpass"
  const highshelf = "highshelf"
  const lowpass = "lowpass"
  const lowshelf = "lowshelf"
  const notch = "notch"
  const peaking = "peaking"
}
export enum CSSMathOperator {
  const clamp = "clamp"
  const invert = "invert"
  const max = "max"
  const min = "min"
  const negate = "negate"
  const product = "product"
  const sum = "sum"
}
export enum CSSNumericBaseType {
  const angle = "angle"
  const flex = "flex"
  const frequency = "frequency"
  const length = "length"
  const percent = "percent"
  const resolution = "resolution"
  const time = "time"
}
export enum CanPlayTypeResult {
  const _value0 = ""
  const maybe = "maybe"
  const probably = "probably"
}
export enum CanvasDirection {
  const inherit = "inherit"
  const ltr = "ltr"
  const rtl = "rtl"
}
export enum CanvasFillRule {
  const evenodd = "evenodd"
  const nonzero = "nonzero"
}
export enum CanvasFontKerning {
  const auto = "auto"
  const none = "none"
  const normal = "normal"
}
export enum CanvasFontStretch {
  const condensed = "condensed"
  const expanded = "expanded"
  const _value2 = "extra-condensed"
  const _value3 = "extra-expanded"
  const normal = "normal"
  const _value5 = "semi-condensed"
  const _value6 = "semi-expanded"
  const _value7 = "ultra-condensed"
  const _value8 = "ultra-expanded"
}
export enum CanvasFontVariantCaps {
  const _value0 = "all-petite-caps"
  const _value1 = "all-small-caps"
  const normal = "normal"
  const _value3 = "petite-caps"
  const _value4 = "small-caps"
  const _value5 = "titling-caps"
  const unicase = "unicase"
}
export enum CanvasLineCap {
  const butt = "butt"
  const round = "round"
  const square = "square"
}
export enum CanvasLineJoin {
  const bevel = "bevel"
  const miter = "miter"
  const round = "round"
}
export enum CanvasTextAlign {
  const center = "center"
  const end = "end"
  const left = "left"
  const right = "right"
  const start = "start"
}
export enum CanvasTextBaseline {
  const alphabetic = "alphabetic"
  const bottom = "bottom"
  const hanging = "hanging"
  const ideographic = "ideographic"
  const middle = "middle"
  const top = "top"
}
export enum CanvasTextRendering {
  const auto = "auto"
  const geometricPrecision = "geometricPrecision"
  const optimizeLegibility = "optimizeLegibility"
  const optimizeSpeed = "optimizeSpeed"
}
export enum ChannelCountMode {
  const _value0 = "clamped-max"
  const explicit = "explicit"
  const max = "max"
}
export enum ChannelInterpretation {
  const discrete = "discrete"
  const speakers = "speakers"
}
export enum ClientTypes {
  const all = "all"
  const sharedworker = "sharedworker"
  const window = "window"
  const worker = "worker"
}
export enum CodecState {
  const closed = "closed"
  const configured = "configured"
  const unconfigured = "unconfigured"
}
export enum ColorGamut {
  const p3 = "p3"
  const rec2020 = "rec2020"
  const srgb = "srgb"
}
export enum ColorSpaceConversion {
  const default = "default"
  const none = "none"
}
export enum CompositeOperation {
  const accumulate = "accumulate"
  const add = "add"
  const replace = "replace"
}
export enum CompositeOperationOrAuto {
  const accumulate = "accumulate"
  const add = "add"
  const auto = "auto"
  const replace = "replace"
}
export enum CompressionFormat {
  const deflate = "deflate"
  const _value1 = "deflate-raw"
  const gzip = "gzip"
}
export enum CredentialMediationRequirement {
  const conditional = "conditional"
  const optional = "optional"
  const required = "required"
  const silent = "silent"
}
export enum DOMParserSupportedType {
  const _value0 = "application/xhtml+xml"
  const _value1 = "application/xml"
  const _value2 = "image/svg+xml"
  const _value3 = "text/html"
  const _value4 = "text/xml"
}
export enum DirectionSetting {
  const _value0 = ""
  const lr = "lr"
  const rl = "rl"
}
export enum DisplayCaptureSurfaceType {
  const browser = "browser"
  const monitor = "monitor"
  const window = "window"
}
export enum DistanceModelType {
  const exponential = "exponential"
  const inverse = "inverse"
  const linear = "linear"
}
export enum DocumentReadyState {
  const complete = "complete"
  const interactive = "interactive"
  const loading = "loading"
}
export enum DocumentVisibilityState {
  const hidden = "hidden"
  const visible = "visible"
}
export enum EncodedVideoChunkType {
  const delta = "delta"
  const key = "key"
}
export enum EndOfStreamError {
  const decode = "decode"
  const network = "network"
}
export enum EndingType {
  const native = "native"
  const transparent = "transparent"
}
export enum FileSystemHandleKind {
  const directory = "directory"
  const file = "file"
}
export enum FillMode {
  const auto = "auto"
  const backwards = "backwards"
  const both = "both"
  const forwards = "forwards"
  const none = "none"
}
export enum FontDisplay {
  const auto = "auto"
  const block = "block"
  const fallback = "fallback"
  const optional = "optional"
  const swap = "swap"
}
export enum FontFaceLoadStatus {
  const error = "error"
  const loaded = "loaded"
  const loading = "loading"
  const unloaded = "unloaded"
}
export enum FontFaceSetLoadStatus {
  const loaded = "loaded"
  const loading = "loading"
}
export enum FullscreenNavigationUI {
  const auto = "auto"
  const hide = "hide"
  const show = "show"
}
export enum GamepadHapticsResult {
  const complete = "complete"
  const preempted = "preempted"
}
export enum GamepadMappingType {
  const _value0 = ""
  const standard = "standard"
  const _value2 = "xr-standard"
}
export enum GlobalCompositeOperation {
  const color = "color"
  const _value1 = "color-burn"
  const _value2 = "color-dodge"
  const copy = "copy"
  const darken = "darken"
  const _value5 = "destination-atop"
  const _value6 = "destination-in"
  const _value7 = "destination-out"
  const _value8 = "destination-over"
  const difference = "difference"
  const exclusion = "exclusion"
  const _value11 = "hard-light"
  const hue = "hue"
  const lighten = "lighten"
  const lighter = "lighter"
  const luminosity = "luminosity"
  const multiply = "multiply"
  const overlay = "overlay"
  const saturation = "saturation"
  const screen = "screen"
  const _value20 = "soft-light"
  const _value21 = "source-atop"
  const _value22 = "source-in"
  const _value23 = "source-out"
  const _value24 = "source-over"
  const xor = "xor"
}
export enum HardwareAcceleration {
  const _value0 = "no-preference"
  const _value1 = "prefer-hardware"
  const _value2 = "prefer-software"
}
export enum HdrMetadataType {
  const smpteSt2086 = "smpteSt2086"
  const _value1 = "smpteSt2094-10"
  const _value2 = "smpteSt2094-40"
}
export enum HighlightType {
  const _value0 = "grammar-error"
  const highlight = "highlight"
  const _value2 = "spelling-error"
}
export enum IDBCursorDirection {
  const next = "next"
  const nextunique = "nextunique"
  const prev = "prev"
  const prevunique = "prevunique"
}
export enum IDBRequestReadyState {
  const done = "done"
  const pending = "pending"
}
export enum IDBTransactionDurability {
  const default = "default"
  const relaxed = "relaxed"
  const strict = "strict"
}
export enum IDBTransactionMode {
  const readonly = "readonly"
  const readwrite = "readwrite"
  const versionchange = "versionchange"
}
export enum ImageOrientation {
  const flipY = "flipY"
  const _value1 = "from-image"
  const none = "none"
}
export enum ImageSmoothingQuality {
  const high = "high"
  const low = "low"
  const medium = "medium"
}
export enum InsertPosition {
  const afterbegin = "afterbegin"
  const afterend = "afterend"
  const beforebegin = "beforebegin"
  const beforeend = "beforeend"
}
export enum IterationCompositeOperation {
  const accumulate = "accumulate"
  const replace = "replace"
}
export enum KeyFormat {
  const jwk = "jwk"
  const pkcs8 = "pkcs8"
  const raw = "raw"
  const spki = "spki"
}
export enum KeyType {
  const private = "private"
  const public = "public"
  const secret = "secret"
}
export enum KeyUsage {
  const decrypt = "decrypt"
  const deriveBits = "deriveBits"
  const deriveKey = "deriveKey"
  const encrypt = "encrypt"
  const sign = "sign"
  const unwrapKey = "unwrapKey"
  const verify = "verify"
  const wrapKey = "wrapKey"
}
export enum LatencyMode {
  const quality = "quality"
  const realtime = "realtime"
}
export enum LineAlignSetting {
  const center = "center"
  const end = "end"
  const start = "start"
}
export enum LockMode {
  const exclusive = "exclusive"
  const shared = "shared"
}
export enum MIDIPortConnectionState {
  const closed = "closed"
  const open = "open"
  const pending = "pending"
}
export enum MIDIPortDeviceState {
  const connected = "connected"
  const disconnected = "disconnected"
}
export enum MIDIPortType {
  const input = "input"
  const output = "output"
}
export enum MediaDecodingType {
  const file = "file"
  const _value1 = "media-source"
  const webrtc = "webrtc"
}
export enum MediaDeviceKind {
  const audioinput = "audioinput"
  const audiooutput = "audiooutput"
  const videoinput = "videoinput"
}
export enum MediaEncodingType {
  const record = "record"
  const webrtc = "webrtc"
}
export enum MediaKeyMessageType {
  const _value0 = "individualization-request"
  const _value1 = "license-release"
  const _value2 = "license-renewal"
  const _value3 = "license-request"
}
export enum MediaKeySessionClosedReason {
  const _value0 = "closed-by-application"
  const _value1 = "hardware-context-reset"
  const _value2 = "internal-error"
  const _value3 = "release-acknowledged"
  const _value4 = "resource-evicted"
}
export enum MediaKeySessionType {
  const _value0 = "persistent-license"
  const temporary = "temporary"
}
export enum MediaKeyStatus {
  const expired = "expired"
  const _value1 = "internal-error"
  const _value2 = "output-downscaled"
  const _value3 = "output-restricted"
  const released = "released"
  const _value5 = "status-pending"
  const usable = "usable"
  const _value7 = "usable-in-future"
}
export enum MediaKeysRequirement {
  const _value0 = "not-allowed"
  const optional = "optional"
  const required = "required"
}
export enum MediaSessionAction {
  const nexttrack = "nexttrack"
  const pause = "pause"
  const play = "play"
  const previoustrack = "previoustrack"
  const seekbackward = "seekbackward"
  const seekforward = "seekforward"
  const seekto = "seekto"
  const skipad = "skipad"
  const stop = "stop"
}
export enum MediaSessionPlaybackState {
  const none = "none"
  const paused = "paused"
  const playing = "playing"
}
export enum MediaStreamTrackState {
  const ended = "ended"
  const live = "live"
}
export enum NavigationTimingType {
  const back_forward = "back_forward"
  const navigate = "navigate"
  const prerender = "prerender"
  const reload = "reload"
}
export enum NotificationDirection {
  const auto = "auto"
  const ltr = "ltr"
  const rtl = "rtl"
}
export enum NotificationPermission {
  const default = "default"
  const denied = "denied"
  const granted = "granted"
}
export enum OffscreenRenderingContextId {
  const _value0 = "2d"
  const bitmaprenderer = "bitmaprenderer"
  const webgl = "webgl"
  const webgl2 = "webgl2"
  const webgpu = "webgpu"
}
export enum OrientationType {
  const _value0 = "landscape-primary"
  const _value1 = "landscape-secondary"
  const _value2 = "portrait-primary"
  const _value3 = "portrait-secondary"
}
export enum OscillatorType {
  const custom = "custom"
  const sawtooth = "sawtooth"
  const sine = "sine"
  const square = "square"
  const triangle = "triangle"
}
export enum OverSampleType {
  const _value0 = "2x"
  const _value1 = "4x"
  const none = "none"
}
export enum PanningModelType {
  const HRTF = "HRTF"
  const equalpower = "equalpower"
}
export enum PaymentComplete {
  const fail = "fail"
  const success = "success"
  const unknown = "unknown"
}
export enum PermissionName {
  const geolocation = "geolocation"
  const notifications = "notifications"
  const _value2 = "persistent-storage"
  const push = "push"
  const _value4 = "screen-wake-lock"
  const _value5 = "xr-spatial-tracking"
}
export enum PermissionState {
  const denied = "denied"
  const granted = "granted"
  const prompt = "prompt"
}
export enum PlaybackDirection {
  const alternate = "alternate"
  const _value1 = "alternate-reverse"
  const normal = "normal"
  const reverse = "reverse"
}
export enum PositionAlignSetting {
  const auto = "auto"
  const center = "center"
  const _value2 = "line-left"
  const _value3 = "line-right"
}
export enum PredefinedColorSpace {
  const _value0 = "display-p3"
  const srgb = "srgb"
}
export enum PremultiplyAlpha {
  const default = "default"
  const none = "none"
  const premultiply = "premultiply"
}
export enum PresentationStyle {
  const attachment = "attachment"
  const inline = "inline"
  const unspecified = "unspecified"
}
export enum PushEncryptionKeyName {
  const auth = "auth"
  const p256dh = "p256dh"
}
export enum RTCBundlePolicy {
  const balanced = "balanced"
  const _value1 = "max-bundle"
  const _value2 = "max-compat"
}
export enum RTCDataChannelState {
  const closed = "closed"
  const closing = "closing"
  const connecting = "connecting"
  const open = "open"
}
export enum RTCDegradationPreference {
  const balanced = "balanced"
  const _value1 = "maintain-framerate"
  const _value2 = "maintain-resolution"
}
export enum RTCDtlsTransportState {
  const closed = "closed"
  const connected = "connected"
  const connecting = "connecting"
  const failed = "failed"
  const new = "new"
}
export enum RTCEncodedVideoFrameType {
  const delta = "delta"
  const empty = "empty"
  const key = "key"
}
export enum RTCErrorDetailType {
  const _value0 = "data-channel-failure"
  const _value1 = "dtls-failure"
  const _value2 = "fingerprint-failure"
  const _value3 = "hardware-encoder-error"
  const _value4 = "hardware-encoder-not-available"
  const _value5 = "sctp-failure"
  const _value6 = "sdp-syntax-error"
}
export enum RTCIceCandidateType {
  const host = "host"
  const prflx = "prflx"
  const relay = "relay"
  const srflx = "srflx"
}
export enum RTCIceComponent {
  const rtcp = "rtcp"
  const rtp = "rtp"
}
export enum RTCIceConnectionState {
  const checking = "checking"
  const closed = "closed"
  const completed = "completed"
  const connected = "connected"
  const disconnected = "disconnected"
  const failed = "failed"
  const new = "new"
}
export enum RTCIceGathererState {
  const complete = "complete"
  const gathering = "gathering"
  const new = "new"
}
export enum RTCIceGatheringState {
  const complete = "complete"
  const gathering = "gathering"
  const new = "new"
}
export enum RTCIceProtocol {
  const tcp = "tcp"
  const udp = "udp"
}
export enum RTCIceTcpCandidateType {
  const active = "active"
  const passive = "passive"
  const so = "so"
}
export enum RTCIceTransportPolicy {
  const all = "all"
  const relay = "relay"
}
export enum RTCIceTransportState {
  const checking = "checking"
  const closed = "closed"
  const completed = "completed"
  const connected = "connected"
  const disconnected = "disconnected"
  const failed = "failed"
  const new = "new"
}
export enum RTCPeerConnectionState {
  const closed = "closed"
  const connected = "connected"
  const connecting = "connecting"
  const disconnected = "disconnected"
  const failed = "failed"
  const new = "new"
}
export enum RTCPriorityType {
  const high = "high"
  const low = "low"
  const medium = "medium"
  const _value3 = "very-low"
}
export enum RTCRtpTransceiverDirection {
  const inactive = "inactive"
  const recvonly = "recvonly"
  const sendonly = "sendonly"
  const sendrecv = "sendrecv"
  const stopped = "stopped"
}
export enum RTCSctpTransportState {
  const closed = "closed"
  const connected = "connected"
  const connecting = "connecting"
}
export enum RTCSdpType {
  const answer = "answer"
  const offer = "offer"
  const pranswer = "pranswer"
  const rollback = "rollback"
}
export enum RTCSignalingState {
  const closed = "closed"
  const _value1 = "have-local-offer"
  const _value2 = "have-local-pranswer"
  const _value3 = "have-remote-offer"
  const _value4 = "have-remote-pranswer"
  const stable = "stable"
}
export enum RTCStatsIceCandidatePairState {
  const failed = "failed"
  const frozen = "frozen"
  const _value2 = "in-progress"
  const inprogress = "inprogress"
  const succeeded = "succeeded"
  const waiting = "waiting"
}
export enum RTCStatsType {
  const _value0 = "candidate-pair"
  const certificate = "certificate"
  const codec = "codec"
  const _value3 = "data-channel"
  const _value4 = "inbound-rtp"
  const _value5 = "local-candidate"
  const _value6 = "media-playout"
  const _value7 = "media-source"
  const _value8 = "outbound-rtp"
  const _value9 = "peer-connection"
  const _value10 = "remote-candidate"
  const _value11 = "remote-inbound-rtp"
  const _value12 = "remote-outbound-rtp"
  const transport = "transport"
}
export enum ReadyState {
  const closed = "closed"
  const ended = "ended"
  const open = "open"
}
export enum RecordingState {
  const inactive = "inactive"
  const paused = "paused"
  const recording = "recording"
}
export enum ReferrerPolicy {
  const _value0 = ""
  const _value1 = "no-referrer"
  const _value2 = "no-referrer-when-downgrade"
  const origin = "origin"
  const _value4 = "origin-when-cross-origin"
  const _value5 = "same-origin"
  const _value6 = "strict-origin"
  const _value7 = "strict-origin-when-cross-origin"
  const _value8 = "unsafe-url"
}
export enum RemotePlaybackState {
  const connected = "connected"
  const connecting = "connecting"
  const disconnected = "disconnected"
}
export enum RequestCache {
  const default = "default"
  const _value1 = "force-cache"
  const _value2 = "no-cache"
  const _value3 = "no-store"
  const _value4 = "only-if-cached"
  const reload = "reload"
}
export enum RequestCredentials {
  const include = "include"
  const omit = "omit"
  const _value2 = "same-origin"
}
export enum RequestDestination {
  const _value0 = ""
  const audio = "audio"
  const audioworklet = "audioworklet"
  const document = "document"
  const embed = "embed"
  const font = "font"
  const frame = "frame"
  const iframe = "iframe"
  const image = "image"
  const manifest = "manifest"
  const object = "object"
  const paintworklet = "paintworklet"
  const report = "report"
  const script = "script"
  const sharedworker = "sharedworker"
  const style = "style"
  const track = "track"
  const video = "video"
  const worker = "worker"
  const xslt = "xslt"
}
export enum RequestMode {
  const cors = "cors"
  const navigate = "navigate"
  const _value2 = "no-cors"
  const _value3 = "same-origin"
}
export enum RequestPriority {
  const auto = "auto"
  const high = "high"
  const low = "low"
}
export enum RequestRedirect {
  const error = "error"
  const follow = "follow"
  const manual = "manual"
}
export enum ResidentKeyRequirement {
  const discouraged = "discouraged"
  const preferred = "preferred"
  const required = "required"
}
export enum ResizeObserverBoxOptions {
  const _value0 = "border-box"
  const _value1 = "content-box"
  const _value2 = "device-pixel-content-box"
}
export enum ResizeQuality {
  const high = "high"
  const low = "low"
  const medium = "medium"
  const pixelated = "pixelated"
}
export enum ResponseType {
  const basic = "basic"
  const cors = "cors"
  const default = "default"
  const error = "error"
  const opaque = "opaque"
  const opaqueredirect = "opaqueredirect"
}
export enum ScrollBehavior {
  const auto = "auto"
  const instant = "instant"
  const smooth = "smooth"
}
export enum ScrollLogicalPosition {
  const center = "center"
  const end = "end"
  const nearest = "nearest"
  const start = "start"
}
export enum ScrollRestoration {
  const auto = "auto"
  const manual = "manual"
}
export enum ScrollSetting {
  const _value0 = ""
  const up = "up"
}
export enum SecurityPolicyViolationEventDisposition {
  const enforce = "enforce"
  const report = "report"
}
export enum SelectionMode {
  const end = "end"
  const preserve = "preserve"
  const select = "select"
  const start = "start"
}
export enum ServiceWorkerState {
  const activated = "activated"
  const activating = "activating"
  const installed = "installed"
  const installing = "installing"
  const parsed = "parsed"
  const redundant = "redundant"
}
export enum ServiceWorkerUpdateViaCache {
  const all = "all"
  const imports = "imports"
  const none = "none"
}
export enum ShadowRootMode {
  const closed = "closed"
  const open = "open"
}
export enum SlotAssignmentMode {
  const manual = "manual"
  const named = "named"
}
export enum SpeechSynthesisErrorCode {
  const _value0 = "audio-busy"
  const _value1 = "audio-hardware"
  const canceled = "canceled"
  const interrupted = "interrupted"
  const _value4 = "invalid-argument"
  const _value5 = "language-unavailable"
  const network = "network"
  const _value7 = "not-allowed"
  const _value8 = "synthesis-failed"
  const _value9 = "synthesis-unavailable"
  const _value10 = "text-too-long"
  const _value11 = "voice-unavailable"
}
export enum TextTrackKind {
  const captions = "captions"
  const chapters = "chapters"
  const descriptions = "descriptions"
  const metadata = "metadata"
  const subtitles = "subtitles"
}
export enum TextTrackMode {
  const disabled = "disabled"
  const hidden = "hidden"
  const showing = "showing"
}
export enum TouchType {
  const direct = "direct"
  const stylus = "stylus"
}
export enum TransferFunction {
  const hlg = "hlg"
  const pq = "pq"
  const srgb = "srgb"
}
export enum UserVerificationRequirement {
  const discouraged = "discouraged"
  const preferred = "preferred"
  const required = "required"
}
export enum VideoColorPrimaries {
  const bt470bg = "bt470bg"
  const bt709 = "bt709"
  const smpte170m = "smpte170m"
}
export enum VideoEncoderBitrateMode {
  const constant = "constant"
  const quantizer = "quantizer"
  const variable = "variable"
}
export enum VideoFacingModeEnum {
  const environment = "environment"
  const left = "left"
  const right = "right"
  const user = "user"
}
export enum VideoMatrixCoefficients {
  const bt470bg = "bt470bg"
  const bt709 = "bt709"
  const rgb = "rgb"
  const smpte170m = "smpte170m"
}
export enum VideoPixelFormat {
  const BGRA = "BGRA"
  const BGRX = "BGRX"
  const I420 = "I420"
  const I420A = "I420A"
  const I422 = "I422"
  const I444 = "I444"
  const NV12 = "NV12"
  const RGBA = "RGBA"
  const RGBX = "RGBX"
}
export enum VideoTransferCharacteristics {
  const bt709 = "bt709"
  const _value1 = "iec61966-2-1"
  const smpte170m = "smpte170m"
}
export enum WebGLPowerPreference {
  const default = "default"
  const _value1 = "high-performance"
  const _value2 = "low-power"
}
export enum WebTransportCongestionControl {
  const default = "default"
  const _value1 = "low-latency"
  const throughput = "throughput"
}
export enum WebTransportErrorSource {
  const session = "session"
  const stream = "stream"
}
export enum WorkerType {
  const classic = "classic"
  const module = "module"
}
export enum WriteCommandType {
  const seek = "seek"
  const truncate = "truncate"
  const write = "write"
}
export enum XMLHttpRequestResponseType {
  const _value0 = ""
  const arraybuffer = "arraybuffer"
  const blob = "blob"
  const document = "document"
  const json = "json"
  const text = "text"
}
export interface AddEventListenerOptions extends EventListenerOptions {
  var once: Nullable[Bool] = aliasFor(__js_once)
  var passive: Nullable[Bool] = aliasFor(__js_passive)
  var signal: Nullable[AbortSignal] = aliasFor(__js_signal)
}
export interface AesCbcParams extends Algorithm {
  var iv: BufferSource = aliasFor(__js_iv)
}
export interface AesCtrParams extends Algorithm {
  var counter: BufferSource = aliasFor(__js_counter)
  var length: Number = aliasFor(__js_length)
}
export interface AesDerivedKeyParams extends Algorithm {
  var length: Number = aliasFor(__js_length)
}
export interface AesGcmParams extends Algorithm {
  var additionalData: Nullable[BufferSource] = aliasFor(__js_additionalData)
  var iv: BufferSource = aliasFor(__js_iv)
  var tagLength: Nullable[Number] = aliasFor(__js_tagLength)
}
export interface AesKeyAlgorithm extends KeyAlgorithm {
  var length: Number = aliasFor(__js_length)
}
export interface AesKeyGenParams extends Algorithm {
  var length: Number = aliasFor(__js_length)
}
export interface Algorithm {
  var name: String = aliasFor(__js_name)
}
export interface AnalyserOptions extends AudioNodeOptions {
  var fftSize: Nullable[Number] = aliasFor(__js_fftSize)
  var maxDecibels: Nullable[Number] = aliasFor(__js_maxDecibels)
  var minDecibels: Nullable[Number] = aliasFor(__js_minDecibels)
  var smoothingTimeConstant: Nullable[Number] = aliasFor(__js_smoothingTimeConstant)
}
export interface AnimationEventInit extends EventInit {
  var animationName: Nullable[String] = aliasFor(__js_animationName)
  var elapsedTime: Nullable[Number] = aliasFor(__js_elapsedTime)
  var pseudoElement: Nullable[String] = aliasFor(__js_pseudoElement)
}
export interface AnimationPlaybackEventInit extends EventInit {
  var currentTime: Nullable[Union[CSSNumberish, Null]] = aliasFor(__js_currentTime)
  var timelineTime: Nullable[Union[CSSNumberish, Null]] = aliasFor(__js_timelineTime)
}
export interface AssignedNodesOptions {
  var flatten: Nullable[Bool] = aliasFor(__js_flatten)
}
export interface AudioBufferOptions {
  var length: Number = aliasFor(__js_length)
  var numberOfChannels: Nullable[Number] = aliasFor(__js_numberOfChannels)
  var sampleRate: Number = aliasFor(__js_sampleRate)
}
export interface AudioBufferSourceOptions {
  var buffer: Nullable[Union[AudioBuffer, Null]] = aliasFor(__js_buffer)
  var detune: Nullable[Number] = aliasFor(__js_detune)
  var loop: Nullable[Bool] = aliasFor(__js_loop)
  var loopEnd: Nullable[Number] = aliasFor(__js_loopEnd)
  var loopStart: Nullable[Number] = aliasFor(__js_loopStart)
  var playbackRate: Nullable[Number] = aliasFor(__js_playbackRate)
}
export interface AudioConfiguration {
  var bitrate: Nullable[Number] = aliasFor(__js_bitrate)
  var channels: Nullable[String] = aliasFor(__js_channels)
  var contentType: String = aliasFor(__js_contentType)
  var samplerate: Nullable[Number] = aliasFor(__js_samplerate)
  var spatialRendering: Nullable[Bool] = aliasFor(__js_spatialRendering)
}
export interface AudioContextOptions {
  var latencyHint: Nullable[Union[AudioContextLatencyCategory, Number]] = aliasFor(__js_latencyHint)
  var sampleRate: Nullable[Number] = aliasFor(__js_sampleRate)
}
export interface AudioNodeOptions {
  var channelCount: Nullable[Number] = aliasFor(__js_channelCount)
  var channelCountMode: Nullable[ChannelCountMode] = aliasFor(__js_channelCountMode)
  var channelInterpretation: Nullable[ChannelInterpretation] = aliasFor(__js_channelInterpretation)
}
export interface AudioProcessingEventInit extends EventInit {
  var inputBuffer: AudioBuffer = aliasFor(__js_inputBuffer)
  var outputBuffer: AudioBuffer = aliasFor(__js_outputBuffer)
  var playbackTime: Number = aliasFor(__js_playbackTime)
}
export interface AudioTimestamp {
  var contextTime: Nullable[Number] = aliasFor(__js_contextTime)
  var performanceTime: Nullable[DOMHighResTimeStamp] = aliasFor(__js_performanceTime)
}
export interface AudioWorkletNodeOptions extends AudioNodeOptions {
  var numberOfInputs: Nullable[Number] = aliasFor(__js_numberOfInputs)
  var numberOfOutputs: Nullable[Number] = aliasFor(__js_numberOfOutputs)
  var outputChannelCount: Nullable[List[Number]] = aliasFor(__js_outputChannelCount)
  var parameterData: Nullable[Any] = aliasFor(__js_parameterData)
  var processorOptions: Nullable[Any] = aliasFor(__js_processorOptions)
}
export interface AuthenticationExtensionsClientInputs {
  var appid: Nullable[String] = aliasFor(__js_appid)
  var credProps: Nullable[Bool] = aliasFor(__js_credProps)
  var hmacCreateSecret: Nullable[Bool] = aliasFor(__js_hmacCreateSecret)
  var minPinLength: Nullable[Bool] = aliasFor(__js_minPinLength)
}
export interface AuthenticationExtensionsClientOutputs {
  var appid: Nullable[Bool] = aliasFor(__js_appid)
  var credProps: Nullable[CredentialPropertiesOutput] = aliasFor(__js_credProps)
  var hmacCreateSecret: Nullable[Bool] = aliasFor(__js_hmacCreateSecret)
}
export interface AuthenticatorSelectionCriteria {
  var authenticatorAttachment: Nullable[AuthenticatorAttachment] = aliasFor(__js_authenticatorAttachment)
  var requireResidentKey: Nullable[Bool] = aliasFor(__js_requireResidentKey)
  var residentKey: Nullable[ResidentKeyRequirement] = aliasFor(__js_residentKey)
  var userVerification: Nullable[UserVerificationRequirement] = aliasFor(__js_userVerification)
}
export interface AvcEncoderConfig {
  var format: Nullable[AvcBitstreamFormat] = aliasFor(__js_format)
}
export interface BiquadFilterOptions extends AudioNodeOptions {
  var Q: Nullable[Number] = aliasFor(__js_Q)
  var detune: Nullable[Number] = aliasFor(__js_detune)
  var frequency: Nullable[Number] = aliasFor(__js_frequency)
  var gain: Nullable[Number] = aliasFor(__js_gain)
  var type: Nullable[BiquadFilterType] = aliasFor(__js_type)
}
export interface BlobEventInit {
  var data: Blob = aliasFor(__js_data)
  var timecode: Nullable[DOMHighResTimeStamp] = aliasFor(__js_timecode)
}
export interface BlobPropertyBag {
  var endings: Nullable[EndingType] = aliasFor(__js_endings)
  var type: Nullable[String] = aliasFor(__js_type)
}
export interface CSSMatrixComponentOptions {
  var is2D: Nullable[Bool] = aliasFor(__js_is2D)
}
export interface CSSNumericType {
  var angle: Nullable[Number] = aliasFor(__js_angle)
  var flex: Nullable[Number] = aliasFor(__js_flex)
  var frequency: Nullable[Number] = aliasFor(__js_frequency)
  var length: Nullable[Number] = aliasFor(__js_length)
  var percent: Nullable[Number] = aliasFor(__js_percent)
  var percentHint: Nullable[CSSNumericBaseType] = aliasFor(__js_percentHint)
  var resolution: Nullable[Number] = aliasFor(__js_resolution)
  var time: Nullable[Number] = aliasFor(__js_time)
}
export interface CSSStyleSheetInit {
  var baseURL: Nullable[String] = aliasFor(__js_baseURL)
  var disabled: Nullable[Bool] = aliasFor(__js_disabled)
  var media: Nullable[Union[MediaList, String]] = aliasFor(__js_media)
}
export interface CacheQueryOptions {
  var ignoreMethod: Nullable[Bool] = aliasFor(__js_ignoreMethod)
  var ignoreSearch: Nullable[Bool] = aliasFor(__js_ignoreSearch)
  var ignoreVary: Nullable[Bool] = aliasFor(__js_ignoreVary)
}
export interface CanvasRenderingContext2DSettings {
  var alpha: Nullable[Bool] = aliasFor(__js_alpha)
  var colorSpace: Nullable[PredefinedColorSpace] = aliasFor(__js_colorSpace)
  var desynchronized: Nullable[Bool] = aliasFor(__js_desynchronized)
  var willReadFrequently: Nullable[Bool] = aliasFor(__js_willReadFrequently)
}
export interface ChannelMergerOptions extends AudioNodeOptions {
  var numberOfInputs: Nullable[Number] = aliasFor(__js_numberOfInputs)
}
export interface ChannelSplitterOptions extends AudioNodeOptions {
  var numberOfOutputs: Nullable[Number] = aliasFor(__js_numberOfOutputs)
}
export interface CheckVisibilityOptions {
  var checkOpacity: Nullable[Bool] = aliasFor(__js_checkOpacity)
  var checkVisibilityCSS: Nullable[Bool] = aliasFor(__js_checkVisibilityCSS)
}
export interface ClientQueryOptions {
  var includeUncontrolled: Nullable[Bool] = aliasFor(__js_includeUncontrolled)
  var type: Nullable[ClientTypes] = aliasFor(__js_type)
}
export interface ClipboardEventInit extends EventInit {
  var clipboardData: Nullable[Union[DataTransfer, Null]] = aliasFor(__js_clipboardData)
}
export interface ClipboardItemOptions {
  var presentationStyle: Nullable[PresentationStyle] = aliasFor(__js_presentationStyle)
}
export interface CloseEventInit extends EventInit {
  var code: Nullable[Number] = aliasFor(__js_code)
  var reason: Nullable[String] = aliasFor(__js_reason)
  var wasClean: Nullable[Bool] = aliasFor(__js_wasClean)
}
export interface CompositionEventInit extends UIEventInit {
  var data: Nullable[String] = aliasFor(__js_data)
}
export interface ComputedEffectTiming extends EffectTiming {
  var activeDuration: Nullable[CSSNumberish] = aliasFor(__js_activeDuration)
  var currentIteration: Nullable[Union[Number, Null]] = aliasFor(__js_currentIteration)
  var endTime: Nullable[CSSNumberish] = aliasFor(__js_endTime)
  var localTime: Nullable[Union[CSSNumberish, Null]] = aliasFor(__js_localTime)
  var progress: Nullable[Union[Number, Null]] = aliasFor(__js_progress)
  var startTime: Nullable[CSSNumberish] = aliasFor(__js_startTime)
}
export interface ComputedKeyframe {
  var composite: CompositeOperationOrAuto = aliasFor(__js_composite)
  var computedOffset: Number = aliasFor(__js_computedOffset)
  var easing: String = aliasFor(__js_easing)
  var offset: Union[Number, Null] = aliasFor(__js_offset)
  function __getitem__(property: String): Union[String, Number, Null] { aliasFor(__op_getitem__) }
  function __setitem__(property: String, value: Union[String, Number, Null]): Union[String, Number, Null] { aliasFor(__op_setitem__) }
}
export interface ConstantSourceOptions {
  var offset: Nullable[Number] = aliasFor(__js_offset)
}
export interface ConstrainBooleanParameters {
  var exact: Nullable[Bool] = aliasFor(__js_exact)
  var ideal: Nullable[Bool] = aliasFor(__js_ideal)
}
export interface ConstrainDOMStringParameters {
  var exact: Nullable[Union[String, List[String]]] = aliasFor(__js_exact)
  var ideal: Nullable[Union[String, List[String]]] = aliasFor(__js_ideal)
}
export interface ConstrainDoubleRange extends DoubleRange {
  var exact: Nullable[Number] = aliasFor(__js_exact)
  var ideal: Nullable[Number] = aliasFor(__js_ideal)
}
export interface ConstrainULongRange extends ULongRange {
  var exact: Nullable[Number] = aliasFor(__js_exact)
  var ideal: Nullable[Number] = aliasFor(__js_ideal)
}
export interface ConvolverOptions extends AudioNodeOptions {
  var buffer: Nullable[Union[AudioBuffer, Null]] = aliasFor(__js_buffer)
  var disableNormalization: Nullable[Bool] = aliasFor(__js_disableNormalization)
}
export interface CredentialCreationOptions {
  var publicKey: Nullable[PublicKeyCredentialCreationOptions] = aliasFor(__js_publicKey)
  var signal: Nullable[AbortSignal] = aliasFor(__js_signal)
}
export interface CredentialPropertiesOutput {
  var rk: Nullable[Bool] = aliasFor(__js_rk)
}
export interface CredentialRequestOptions {
  var mediation: Nullable[CredentialMediationRequirement] = aliasFor(__js_mediation)
  var publicKey: Nullable[PublicKeyCredentialRequestOptions] = aliasFor(__js_publicKey)
  var signal: Nullable[AbortSignal] = aliasFor(__js_signal)
}
export interface CryptoKeyPair {
  var privateKey: CryptoKey = aliasFor(__js_privateKey)
  var publicKey: CryptoKey = aliasFor(__js_publicKey)
}
export interface DOMMatrix2DInit {
  var a: Nullable[Number] = aliasFor(__js_a)
  var b: Nullable[Number] = aliasFor(__js_b)
  var c: Nullable[Number] = aliasFor(__js_c)
  var d: Nullable[Number] = aliasFor(__js_d)
  var e: Nullable[Number] = aliasFor(__js_e)
  var f: Nullable[Number] = aliasFor(__js_f)
  var m11: Nullable[Number] = aliasFor(__js_m11)
  var m12: Nullable[Number] = aliasFor(__js_m12)
  var m21: Nullable[Number] = aliasFor(__js_m21)
  var m22: Nullable[Number] = aliasFor(__js_m22)
  var m41: Nullable[Number] = aliasFor(__js_m41)
  var m42: Nullable[Number] = aliasFor(__js_m42)
}
export interface DOMMatrixInit extends DOMMatrix2DInit {
  var is2D: Nullable[Bool] = aliasFor(__js_is2D)
  var m13: Nullable[Number] = aliasFor(__js_m13)
  var m14: Nullable[Number] = aliasFor(__js_m14)
  var m23: Nullable[Number] = aliasFor(__js_m23)
  var m24: Nullable[Number] = aliasFor(__js_m24)
  var m31: Nullable[Number] = aliasFor(__js_m31)
  var m32: Nullable[Number] = aliasFor(__js_m32)
  var m33: Nullable[Number] = aliasFor(__js_m33)
  var m34: Nullable[Number] = aliasFor(__js_m34)
  var m43: Nullable[Number] = aliasFor(__js_m43)
  var m44: Nullable[Number] = aliasFor(__js_m44)
}
export interface DOMPointInit {
  var w: Nullable[Number] = aliasFor(__js_w)
  var x: Nullable[Number] = aliasFor(__js_x)
  var y: Nullable[Number] = aliasFor(__js_y)
  var z: Nullable[Number] = aliasFor(__js_z)
}
export interface DOMQuadInit {
  var p1: Nullable[DOMPointInit] = aliasFor(__js_p1)
  var p2: Nullable[DOMPointInit] = aliasFor(__js_p2)
  var p3: Nullable[DOMPointInit] = aliasFor(__js_p3)
  var p4: Nullable[DOMPointInit] = aliasFor(__js_p4)
}
export interface DOMRectInit {
  var height: Nullable[Number] = aliasFor(__js_height)
  var width: Nullable[Number] = aliasFor(__js_width)
  var x: Nullable[Number] = aliasFor(__js_x)
  var y: Nullable[Number] = aliasFor(__js_y)
}
export interface DelayOptions extends AudioNodeOptions {
  var delayTime: Nullable[Number] = aliasFor(__js_delayTime)
  var maxDelayTime: Nullable[Number] = aliasFor(__js_maxDelayTime)
}
export interface DeviceMotionEventAccelerationInit {
  var x: Nullable[Union[Number, Null]] = aliasFor(__js_x)
  var y: Nullable[Union[Number, Null]] = aliasFor(__js_y)
  var z: Nullable[Union[Number, Null]] = aliasFor(__js_z)
}
export interface DeviceMotionEventInit extends EventInit {
  var acceleration: Nullable[DeviceMotionEventAccelerationInit] = aliasFor(__js_acceleration)
  var accelerationIncludingGravity: Nullable[DeviceMotionEventAccelerationInit] = aliasFor(__js_accelerationIncludingGravity)
  var interval: Nullable[Number] = aliasFor(__js_interval)
  var rotationRate: Nullable[DeviceMotionEventRotationRateInit] = aliasFor(__js_rotationRate)
}
export interface DeviceMotionEventRotationRateInit {
  var alpha: Nullable[Union[Number, Null]] = aliasFor(__js_alpha)
  var beta: Nullable[Union[Number, Null]] = aliasFor(__js_beta)
  var gamma: Nullable[Union[Number, Null]] = aliasFor(__js_gamma)
}
export interface DeviceOrientationEventInit extends EventInit {
  var absolute: Nullable[Bool] = aliasFor(__js_absolute)
  var alpha: Nullable[Union[Number, Null]] = aliasFor(__js_alpha)
  var beta: Nullable[Union[Number, Null]] = aliasFor(__js_beta)
  var gamma: Nullable[Union[Number, Null]] = aliasFor(__js_gamma)
}
export interface DisplayMediaStreamOptions {
  var audio: Nullable[Union[Bool, MediaTrackConstraints]] = aliasFor(__js_audio)
  var video: Nullable[Union[Bool, MediaTrackConstraints]] = aliasFor(__js_video)
}
export interface DocumentTimelineOptions {
  var originTime: Nullable[DOMHighResTimeStamp] = aliasFor(__js_originTime)
}
export interface DoubleRange {
  var max: Nullable[Number] = aliasFor(__js_max)
  var min: Nullable[Number] = aliasFor(__js_min)
}
export interface DragEventInit extends MouseEventInit {
  var dataTransfer: Nullable[Union[DataTransfer, Null]] = aliasFor(__js_dataTransfer)
}
export interface DynamicsCompressorOptions extends AudioNodeOptions {
  var attack: Nullable[Number] = aliasFor(__js_attack)
  var knee: Nullable[Number] = aliasFor(__js_knee)
  var ratio: Nullable[Number] = aliasFor(__js_ratio)
  var release: Nullable[Number] = aliasFor(__js_release)
  var threshold: Nullable[Number] = aliasFor(__js_threshold)
}
export interface EcKeyAlgorithm extends KeyAlgorithm {
  var namedCurve: NamedCurve = aliasFor(__js_namedCurve)
}
export interface EcKeyGenParams extends Algorithm {
  var namedCurve: NamedCurve = aliasFor(__js_namedCurve)
}
export interface EcKeyImportParams extends Algorithm {
  var namedCurve: NamedCurve = aliasFor(__js_namedCurve)
}
export interface EcdhKeyDeriveParams extends Algorithm {
  var public: CryptoKey = aliasFor(__js_public)
}
export interface EcdsaParams extends Algorithm {
  var hash: HashAlgorithmIdentifier = aliasFor(__js_hash)
}
export interface EffectTiming {
  var delay: Nullable[Number] = aliasFor(__js_delay)
  var direction: Nullable[PlaybackDirection] = aliasFor(__js_direction)
  var duration: Nullable[Union[Number, CSSNumericValue, String]] = aliasFor(__js_duration)
  var easing: Nullable[String] = aliasFor(__js_easing)
  var endDelay: Nullable[Number] = aliasFor(__js_endDelay)
  var fill: Nullable[FillMode] = aliasFor(__js_fill)
  var iterationStart: Nullable[Number] = aliasFor(__js_iterationStart)
  var iterations: Nullable[Number] = aliasFor(__js_iterations)
  var playbackRate: Nullable[Number] = aliasFor(__js_playbackRate)
}
export interface ElementCreationOptions {
  var is: Nullable[String] = aliasFor(__js_is)
}
export interface ElementDefinitionOptions {
  var extends: Nullable[String] = aliasFor(__js_extends)
}
export interface EncodedVideoChunkInit {
  var data: AllowSharedBufferSource = aliasFor(__js_data)
  var duration: Nullable[Number] = aliasFor(__js_duration)
  var timestamp: Number = aliasFor(__js_timestamp)
  var type: EncodedVideoChunkType = aliasFor(__js_type)
}
export interface EncodedVideoChunkMetadata {
  var decoderConfig: Nullable[VideoDecoderConfig] = aliasFor(__js_decoderConfig)
}
export interface ErrorEventInit extends EventInit {
  var colno: Nullable[Number] = aliasFor(__js_colno)
  var error: Nullable[Any] = aliasFor(__js_error)
  var filename: Nullable[String] = aliasFor(__js_filename)
  var lineno: Nullable[Number] = aliasFor(__js_lineno)
  var message: Nullable[String] = aliasFor(__js_message)
}
export interface EventInit {
  var bubbles: Nullable[Bool] = aliasFor(__js_bubbles)
  var cancelable: Nullable[Bool] = aliasFor(__js_cancelable)
  var composed: Nullable[Bool] = aliasFor(__js_composed)
}
export interface EventListenerOptions {
  var capture: Nullable[Bool] = aliasFor(__js_capture)
}
export interface EventModifierInit extends UIEventInit {
  var altKey: Nullable[Bool] = aliasFor(__js_altKey)
  var ctrlKey: Nullable[Bool] = aliasFor(__js_ctrlKey)
  var metaKey: Nullable[Bool] = aliasFor(__js_metaKey)
  var modifierAltGraph: Nullable[Bool] = aliasFor(__js_modifierAltGraph)
  var modifierCapsLock: Nullable[Bool] = aliasFor(__js_modifierCapsLock)
  var modifierFn: Nullable[Bool] = aliasFor(__js_modifierFn)
  var modifierFnLock: Nullable[Bool] = aliasFor(__js_modifierFnLock)
  var modifierHyper: Nullable[Bool] = aliasFor(__js_modifierHyper)
  var modifierNumLock: Nullable[Bool] = aliasFor(__js_modifierNumLock)
  var modifierScrollLock: Nullable[Bool] = aliasFor(__js_modifierScrollLock)
  var modifierSuper: Nullable[Bool] = aliasFor(__js_modifierSuper)
  var modifierSymbol: Nullable[Bool] = aliasFor(__js_modifierSymbol)
  var modifierSymbolLock: Nullable[Bool] = aliasFor(__js_modifierSymbolLock)
  var shiftKey: Nullable[Bool] = aliasFor(__js_shiftKey)
}
export interface EventSourceInit {
  var withCredentials: Nullable[Bool] = aliasFor(__js_withCredentials)
}
export interface FilePropertyBag extends BlobPropertyBag {
  var lastModified: Nullable[Number] = aliasFor(__js_lastModified)
}
export interface FileSystemCreateWritableOptions {
  var keepExistingData: Nullable[Bool] = aliasFor(__js_keepExistingData)
}
export interface FileSystemFlags {
  var create: Nullable[Bool] = aliasFor(__js_create)
  var exclusive: Nullable[Bool] = aliasFor(__js_exclusive)
}
export interface FileSystemGetDirectoryOptions {
  var create: Nullable[Bool] = aliasFor(__js_create)
}
export interface FileSystemGetFileOptions {
  var create: Nullable[Bool] = aliasFor(__js_create)
}
export interface FileSystemRemoveOptions {
  var recursive: Nullable[Bool] = aliasFor(__js_recursive)
}
export interface FocusEventInit extends UIEventInit {
  var relatedTarget: Nullable[Union[EventTarget, Null]] = aliasFor(__js_relatedTarget)
}
export interface FocusOptions {
  var preventScroll: Nullable[Bool] = aliasFor(__js_preventScroll)
}
export interface FontFaceDescriptors {
  var ascentOverride: Nullable[String] = aliasFor(__js_ascentOverride)
  var descentOverride: Nullable[String] = aliasFor(__js_descentOverride)
  var display: Nullable[FontDisplay] = aliasFor(__js_display)
  var featureSettings: Nullable[String] = aliasFor(__js_featureSettings)
  var lineGapOverride: Nullable[String] = aliasFor(__js_lineGapOverride)
  var stretch: Nullable[String] = aliasFor(__js_stretch)
  var style: Nullable[String] = aliasFor(__js_style)
  var unicodeRange: Nullable[String] = aliasFor(__js_unicodeRange)
  var weight: Nullable[String] = aliasFor(__js_weight)
}
export interface FontFaceSetLoadEventInit extends EventInit {
  var fontfaces: Nullable[List[FontFace]] = aliasFor(__js_fontfaces)
}
export interface FormDataEventInit extends EventInit {
  var formData: FormData = aliasFor(__js_formData)
}
export interface FullscreenOptions {
  var navigationUI: Nullable[FullscreenNavigationUI] = aliasFor(__js_navigationUI)
}
export interface GainOptions extends AudioNodeOptions {
  var gain: Nullable[Number] = aliasFor(__js_gain)
}
export interface GamepadEffectParameters {
  var duration: Nullable[Number] = aliasFor(__js_duration)
  var startDelay: Nullable[Number] = aliasFor(__js_startDelay)
  var strongMagnitude: Nullable[Number] = aliasFor(__js_strongMagnitude)
  var weakMagnitude: Nullable[Number] = aliasFor(__js_weakMagnitude)
}
export interface GamepadEventInit extends EventInit {
  var gamepad: Gamepad = aliasFor(__js_gamepad)
}
export interface GetAnimationsOptions {
  var subtree: Nullable[Bool] = aliasFor(__js_subtree)
}
export interface GetNotificationOptions {
  var tag: Nullable[String] = aliasFor(__js_tag)
}
export interface GetRootNodeOptions {
  var composed: Nullable[Bool] = aliasFor(__js_composed)
}
export interface HashChangeEventInit extends EventInit {
  var newURL: Nullable[String] = aliasFor(__js_newURL)
  var oldURL: Nullable[String] = aliasFor(__js_oldURL)
}
export interface HkdfParams extends Algorithm {
  var hash: HashAlgorithmIdentifier = aliasFor(__js_hash)
  var info: BufferSource = aliasFor(__js_info)
  var salt: BufferSource = aliasFor(__js_salt)
}
export interface HmacImportParams extends Algorithm {
  var hash: HashAlgorithmIdentifier = aliasFor(__js_hash)
  var length: Nullable[Number] = aliasFor(__js_length)
}
export interface HmacKeyAlgorithm extends KeyAlgorithm {
  var hash: KeyAlgorithm = aliasFor(__js_hash)
  var length: Number = aliasFor(__js_length)
}
export interface HmacKeyGenParams extends Algorithm {
  var hash: HashAlgorithmIdentifier = aliasFor(__js_hash)
  var length: Nullable[Number] = aliasFor(__js_length)
}
export interface IDBDatabaseInfo {
  var name: Nullable[String] = aliasFor(__js_name)
  var version: Nullable[Number] = aliasFor(__js_version)
}
export interface IDBIndexParameters {
  var multiEntry: Nullable[Bool] = aliasFor(__js_multiEntry)
  var unique: Nullable[Bool] = aliasFor(__js_unique)
}
export interface IDBObjectStoreParameters {
  var autoIncrement: Nullable[Bool] = aliasFor(__js_autoIncrement)
  var keyPath: Nullable[Union[String, List[String], Null]] = aliasFor(__js_keyPath)
}
export interface IDBTransactionOptions {
  var durability: Nullable[IDBTransactionDurability] = aliasFor(__js_durability)
}
export interface IDBVersionChangeEventInit extends EventInit {
  var newVersion: Nullable[Union[Number, Null]] = aliasFor(__js_newVersion)
  var oldVersion: Nullable[Number] = aliasFor(__js_oldVersion)
}
export interface IIRFilterOptions extends AudioNodeOptions {
  var feedback: List[Number] = aliasFor(__js_feedback)
  var feedforward: List[Number] = aliasFor(__js_feedforward)
}
export interface IdleRequestOptions {
  var timeout: Nullable[Number] = aliasFor(__js_timeout)
}
export interface ImageBitmapOptions {
  var colorSpaceConversion: Nullable[ColorSpaceConversion] = aliasFor(__js_colorSpaceConversion)
  var imageOrientation: Nullable[ImageOrientation] = aliasFor(__js_imageOrientation)
  var premultiplyAlpha: Nullable[PremultiplyAlpha] = aliasFor(__js_premultiplyAlpha)
  var resizeHeight: Nullable[Number] = aliasFor(__js_resizeHeight)
  var resizeQuality: Nullable[ResizeQuality] = aliasFor(__js_resizeQuality)
  var resizeWidth: Nullable[Number] = aliasFor(__js_resizeWidth)
}
export interface ImageBitmapRenderingContextSettings {
  var alpha: Nullable[Bool] = aliasFor(__js_alpha)
}
export interface ImageDataSettings {
  var colorSpace: Nullable[PredefinedColorSpace] = aliasFor(__js_colorSpace)
}
export interface ImageEncodeOptions {
  var quality: Nullable[Number] = aliasFor(__js_quality)
  var type: Nullable[String] = aliasFor(__js_type)
}
export interface ImportMeta {
  var url: String = aliasFor(__js_url)
}
export interface InputEventInit extends UIEventInit {
  var data: Nullable[Union[String, Null]] = aliasFor(__js_data)
  var dataTransfer: Nullable[Union[DataTransfer, Null]] = aliasFor(__js_dataTransfer)
  var inputType: Nullable[String] = aliasFor(__js_inputType)
  var isComposing: Nullable[Bool] = aliasFor(__js_isComposing)
  var targetRanges: Nullable[List[StaticRange]] = aliasFor(__js_targetRanges)
}
export interface IntersectionObserverEntryInit {
  var boundingClientRect: DOMRectInit = aliasFor(__js_boundingClientRect)
  var intersectionRatio: Number = aliasFor(__js_intersectionRatio)
  var intersectionRect: DOMRectInit = aliasFor(__js_intersectionRect)
  var isIntersecting: Bool = aliasFor(__js_isIntersecting)
  var rootBounds: Union[DOMRectInit, Null] = aliasFor(__js_rootBounds)
  var target: Element = aliasFor(__js_target)
  var time: DOMHighResTimeStamp = aliasFor(__js_time)
}
export interface IntersectionObserverInit {
  var root: Nullable[Union[Element, Document, Null]] = aliasFor(__js_root)
  var rootMargin: Nullable[String] = aliasFor(__js_rootMargin)
  var threshold: Nullable[Union[Number, List[Number]]] = aliasFor(__js_threshold)
}
export interface JsonWebKey {
  var alg: Nullable[String] = aliasFor(__js_alg)
  var crv: Nullable[String] = aliasFor(__js_crv)
  var d: Nullable[String] = aliasFor(__js_d)
  var dp: Nullable[String] = aliasFor(__js_dp)
  var dq: Nullable[String] = aliasFor(__js_dq)
  var e: Nullable[String] = aliasFor(__js_e)
  var ext: Nullable[Bool] = aliasFor(__js_ext)
  var k: Nullable[String] = aliasFor(__js_k)
  var key_ops: Nullable[List[String]] = aliasFor(__js_key_ops)
  var kty: Nullable[String] = aliasFor(__js_kty)
  var n: Nullable[String] = aliasFor(__js_n)
  var oth: Nullable[List[RsaOtherPrimesInfo]] = aliasFor(__js_oth)
  var p: Nullable[String] = aliasFor(__js_p)
  var q: Nullable[String] = aliasFor(__js_q)
  var qi: Nullable[String] = aliasFor(__js_qi)
  var use: Nullable[String] = aliasFor(__js_use)
  var x: Nullable[String] = aliasFor(__js_x)
  var y: Nullable[String] = aliasFor(__js_y)
}
export interface KeyAlgorithm {
  var name: String = aliasFor(__js_name)
}
export interface KeyboardEventInit extends EventModifierInit {
  var code: Nullable[String] = aliasFor(__js_code)
  var isComposing: Nullable[Bool] = aliasFor(__js_isComposing)
  var key: Nullable[String] = aliasFor(__js_key)
  var location: Nullable[Number] = aliasFor(__js_location)
  var repeat: Nullable[Bool] = aliasFor(__js_repeat)
}
export interface Keyframe {
  var composite: Nullable[CompositeOperationOrAuto] = aliasFor(__js_composite)
  var easing: Nullable[String] = aliasFor(__js_easing)
  var offset: Nullable[Union[Number, Null]] = aliasFor(__js_offset)
  function __getitem__(property: String): Union[String, Number, Null] { aliasFor(__op_getitem__) }
  function __setitem__(property: String, value: Union[String, Number, Null]): Union[String, Number, Null] { aliasFor(__op_setitem__) }
}
export interface KeyframeAnimationOptions extends KeyframeEffectOptions {
  var id: Nullable[String] = aliasFor(__js_id)
  var timeline: Nullable[Union[AnimationTimeline, Null]] = aliasFor(__js_timeline)
}
export interface KeyframeEffectOptions extends EffectTiming {
  var composite: Nullable[CompositeOperation] = aliasFor(__js_composite)
  var iterationComposite: Nullable[IterationCompositeOperation] = aliasFor(__js_iterationComposite)
  var pseudoElement: Nullable[Union[String, Null]] = aliasFor(__js_pseudoElement)
}
export interface LockInfo {
  var clientId: Nullable[String] = aliasFor(__js_clientId)
  var mode: Nullable[LockMode] = aliasFor(__js_mode)
  var name: Nullable[String] = aliasFor(__js_name)
}
export interface LockManagerSnapshot {
  var held: Nullable[List[LockInfo]] = aliasFor(__js_held)
  var pending: Nullable[List[LockInfo]] = aliasFor(__js_pending)
}
export interface LockOptions {
  var ifAvailable: Nullable[Bool] = aliasFor(__js_ifAvailable)
  var mode: Nullable[LockMode] = aliasFor(__js_mode)
  var signal: Nullable[AbortSignal] = aliasFor(__js_signal)
  var steal: Nullable[Bool] = aliasFor(__js_steal)
}
export interface MIDIConnectionEventInit extends EventInit {
  var port: Nullable[MIDIPort] = aliasFor(__js_port)
}
export interface MIDIMessageEventInit extends EventInit {
  var data: Nullable[Uint8Array] = aliasFor(__js_data)
}
export interface MIDIOptions {
  var software: Nullable[Bool] = aliasFor(__js_software)
  var sysex: Nullable[Bool] = aliasFor(__js_sysex)
}
export interface MediaCapabilitiesDecodingInfo extends MediaCapabilitiesInfo {
  var configuration: Nullable[MediaDecodingConfiguration] = aliasFor(__js_configuration)
}
export interface MediaCapabilitiesEncodingInfo extends MediaCapabilitiesInfo {
  var configuration: Nullable[MediaEncodingConfiguration] = aliasFor(__js_configuration)
}
export interface MediaCapabilitiesInfo {
  var powerEfficient: Bool = aliasFor(__js_powerEfficient)
  var smooth: Bool = aliasFor(__js_smooth)
  var supported: Bool = aliasFor(__js_supported)
}
export interface MediaConfiguration {
  var audio: Nullable[AudioConfiguration] = aliasFor(__js_audio)
  var video: Nullable[VideoConfiguration] = aliasFor(__js_video)
}
export interface MediaDecodingConfiguration extends MediaConfiguration {
  var type: MediaDecodingType = aliasFor(__js_type)
}
export interface MediaElementAudioSourceOptions {
  var mediaElement: HTMLMediaElement = aliasFor(__js_mediaElement)
}
export interface MediaEncodingConfiguration extends MediaConfiguration {
  var type: MediaEncodingType = aliasFor(__js_type)
}
export interface MediaEncryptedEventInit extends EventInit {
  var initData: Nullable[Union[ArrayBuffer, Null]] = aliasFor(__js_initData)
  var initDataType: Nullable[String] = aliasFor(__js_initDataType)
}
export interface MediaImage {
  var sizes: Nullable[String] = aliasFor(__js_sizes)
  var src: String = aliasFor(__js_src)
  var type: Nullable[String] = aliasFor(__js_type)
}
export interface MediaKeyMessageEventInit extends EventInit {
  var message: ArrayBuffer = aliasFor(__js_message)
  var messageType: MediaKeyMessageType = aliasFor(__js_messageType)
}
export interface MediaKeySystemConfiguration {
  var audioCapabilities: Nullable[List[MediaKeySystemMediaCapability]] = aliasFor(__js_audioCapabilities)
  var distinctiveIdentifier: Nullable[MediaKeysRequirement] = aliasFor(__js_distinctiveIdentifier)
  var initDataTypes: Nullable[List[String]] = aliasFor(__js_initDataTypes)
  var label: Nullable[String] = aliasFor(__js_label)
  var persistentState: Nullable[MediaKeysRequirement] = aliasFor(__js_persistentState)
  var sessionTypes: Nullable[List[String]] = aliasFor(__js_sessionTypes)
  var videoCapabilities: Nullable[List[MediaKeySystemMediaCapability]] = aliasFor(__js_videoCapabilities)
}
export interface MediaKeySystemMediaCapability {
  var contentType: Nullable[String] = aliasFor(__js_contentType)
  var encryptionScheme: Nullable[Union[String, Null]] = aliasFor(__js_encryptionScheme)
  var robustness: Nullable[String] = aliasFor(__js_robustness)
}
export interface MediaMetadataInit {
  var album: Nullable[String] = aliasFor(__js_album)
  var artist: Nullable[String] = aliasFor(__js_artist)
  var artwork: Nullable[List[MediaImage]] = aliasFor(__js_artwork)
  var title: Nullable[String] = aliasFor(__js_title)
}
export interface MediaPositionState {
  var duration: Nullable[Number] = aliasFor(__js_duration)
  var playbackRate: Nullable[Number] = aliasFor(__js_playbackRate)
  var position: Nullable[Number] = aliasFor(__js_position)
}
export interface MediaQueryListEventInit extends EventInit {
  var matches: Nullable[Bool] = aliasFor(__js_matches)
  var media: Nullable[String] = aliasFor(__js_media)
}
export interface MediaRecorderOptions {
  var audioBitsPerSecond: Nullable[Number] = aliasFor(__js_audioBitsPerSecond)
  var bitsPerSecond: Nullable[Number] = aliasFor(__js_bitsPerSecond)
  var mimeType: Nullable[String] = aliasFor(__js_mimeType)
  var videoBitsPerSecond: Nullable[Number] = aliasFor(__js_videoBitsPerSecond)
}
export interface MediaSessionActionDetails {
  var action: MediaSessionAction = aliasFor(__js_action)
  var fastSeek: Nullable[Bool] = aliasFor(__js_fastSeek)
  var seekOffset: Nullable[Number] = aliasFor(__js_seekOffset)
  var seekTime: Nullable[Number] = aliasFor(__js_seekTime)
}
export interface MediaStreamAudioSourceOptions {
  var mediaStream: MediaStream = aliasFor(__js_mediaStream)
}
export interface MediaStreamConstraints {
  var audio: Nullable[Union[Bool, MediaTrackConstraints]] = aliasFor(__js_audio)
  var peerIdentity: Nullable[String] = aliasFor(__js_peerIdentity)
  var preferCurrentTab: Nullable[Bool] = aliasFor(__js_preferCurrentTab)
  var video: Nullable[Union[Bool, MediaTrackConstraints]] = aliasFor(__js_video)
}
export interface MediaStreamTrackEventInit extends EventInit {
  var track: MediaStreamTrack = aliasFor(__js_track)
}
export interface MediaTrackCapabilities {
  var aspectRatio: Nullable[DoubleRange] = aliasFor(__js_aspectRatio)
  var autoGainControl: Nullable[List[Bool]] = aliasFor(__js_autoGainControl)
  var channelCount: Nullable[ULongRange] = aliasFor(__js_channelCount)
  var deviceId: Nullable[String] = aliasFor(__js_deviceId)
  var displaySurface: Nullable[String] = aliasFor(__js_displaySurface)
  var echoCancellation: Nullable[List[Bool]] = aliasFor(__js_echoCancellation)
  var facingMode: Nullable[List[String]] = aliasFor(__js_facingMode)
  var frameRate: Nullable[DoubleRange] = aliasFor(__js_frameRate)
  var groupId: Nullable[String] = aliasFor(__js_groupId)
  var height: Nullable[ULongRange] = aliasFor(__js_height)
  var noiseSuppression: Nullable[List[Bool]] = aliasFor(__js_noiseSuppression)
  var sampleRate: Nullable[ULongRange] = aliasFor(__js_sampleRate)
  var sampleSize: Nullable[ULongRange] = aliasFor(__js_sampleSize)
  var width: Nullable[ULongRange] = aliasFor(__js_width)
}
export interface MediaTrackConstraintSet {
  var aspectRatio: Nullable[ConstrainDouble] = aliasFor(__js_aspectRatio)
  var autoGainControl: Nullable[ConstrainBoolean] = aliasFor(__js_autoGainControl)
  var channelCount: Nullable[ConstrainULong] = aliasFor(__js_channelCount)
  var deviceId: Nullable[ConstrainDOMString] = aliasFor(__js_deviceId)
  var displaySurface: Nullable[ConstrainDOMString] = aliasFor(__js_displaySurface)
  var echoCancellation: Nullable[ConstrainBoolean] = aliasFor(__js_echoCancellation)
  var facingMode: Nullable[ConstrainDOMString] = aliasFor(__js_facingMode)
  var frameRate: Nullable[ConstrainDouble] = aliasFor(__js_frameRate)
  var groupId: Nullable[ConstrainDOMString] = aliasFor(__js_groupId)
  var height: Nullable[ConstrainULong] = aliasFor(__js_height)
  var noiseSuppression: Nullable[ConstrainBoolean] = aliasFor(__js_noiseSuppression)
  var sampleRate: Nullable[ConstrainULong] = aliasFor(__js_sampleRate)
  var sampleSize: Nullable[ConstrainULong] = aliasFor(__js_sampleSize)
  var width: Nullable[ConstrainULong] = aliasFor(__js_width)
}
export interface MediaTrackConstraints extends MediaTrackConstraintSet {
  var advanced: Nullable[List[MediaTrackConstraintSet]] = aliasFor(__js_advanced)
}
export interface MediaTrackSettings {
  var aspectRatio: Nullable[Number] = aliasFor(__js_aspectRatio)
  var autoGainControl: Nullable[Bool] = aliasFor(__js_autoGainControl)
  var channelCount: Nullable[Number] = aliasFor(__js_channelCount)
  var deviceId: Nullable[String] = aliasFor(__js_deviceId)
  var displaySurface: Nullable[String] = aliasFor(__js_displaySurface)
  var echoCancellation: Nullable[Bool] = aliasFor(__js_echoCancellation)
  var facingMode: Nullable[String] = aliasFor(__js_facingMode)
  var frameRate: Nullable[Number] = aliasFor(__js_frameRate)
  var groupId: Nullable[String] = aliasFor(__js_groupId)
  var height: Nullable[Number] = aliasFor(__js_height)
  var noiseSuppression: Nullable[Bool] = aliasFor(__js_noiseSuppression)
  var sampleRate: Nullable[Number] = aliasFor(__js_sampleRate)
  var sampleSize: Nullable[Number] = aliasFor(__js_sampleSize)
  var width: Nullable[Number] = aliasFor(__js_width)
}
export interface MediaTrackSupportedConstraints {
  var aspectRatio: Nullable[Bool] = aliasFor(__js_aspectRatio)
  var autoGainControl: Nullable[Bool] = aliasFor(__js_autoGainControl)
  var channelCount: Nullable[Bool] = aliasFor(__js_channelCount)
  var deviceId: Nullable[Bool] = aliasFor(__js_deviceId)
  var displaySurface: Nullable[Bool] = aliasFor(__js_displaySurface)
  var echoCancellation: Nullable[Bool] = aliasFor(__js_echoCancellation)
  var facingMode: Nullable[Bool] = aliasFor(__js_facingMode)
  var frameRate: Nullable[Bool] = aliasFor(__js_frameRate)
  var groupId: Nullable[Bool] = aliasFor(__js_groupId)
  var height: Nullable[Bool] = aliasFor(__js_height)
  var noiseSuppression: Nullable[Bool] = aliasFor(__js_noiseSuppression)
  var sampleRate: Nullable[Bool] = aliasFor(__js_sampleRate)
  var sampleSize: Nullable[Bool] = aliasFor(__js_sampleSize)
  var width: Nullable[Bool] = aliasFor(__js_width)
}
export interface MouseEventInit extends EventModifierInit {
  var button: Nullable[Number] = aliasFor(__js_button)
  var buttons: Nullable[Number] = aliasFor(__js_buttons)
  var clientX: Nullable[Number] = aliasFor(__js_clientX)
  var clientY: Nullable[Number] = aliasFor(__js_clientY)
  var movementX: Nullable[Number] = aliasFor(__js_movementX)
  var movementY: Nullable[Number] = aliasFor(__js_movementY)
  var relatedTarget: Nullable[Union[EventTarget, Null]] = aliasFor(__js_relatedTarget)
  var screenX: Nullable[Number] = aliasFor(__js_screenX)
  var screenY: Nullable[Number] = aliasFor(__js_screenY)
}
export interface MultiCacheQueryOptions extends CacheQueryOptions {
  var cacheName: Nullable[String] = aliasFor(__js_cacheName)
}
export interface MutationObserverInit {
  var attributeFilter: Nullable[List[String]] """
  Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted.
  """ = aliasFor(__js_attributeFilter)
  var attributeOldValue: Nullable[Bool] """
  Set to true if attributes is true or omitted and target's attribute value before the mutation needs to be recorded.
  """ = aliasFor(__js_attributeOldValue)
  var attributes: Nullable[Bool] """
  Set to true if mutations to target's attributes are to be observed. Can be omitted if attributeOldValue or attributeFilter is specified.
  """ = aliasFor(__js_attributes)
  var characterData: Nullable[Bool] """
  Set to true if mutations to target's data are to be observed. Can be omitted if characterDataOldValue is specified.
  """ = aliasFor(__js_characterData)
  var characterDataOldValue: Nullable[Bool] """
  Set to true if characterData is set to true or omitted and target's data before the mutation needs to be recorded.
  """ = aliasFor(__js_characterDataOldValue)
  var childList: Nullable[Bool] """
  Set to true if mutations to target's children are to be observed.
  """ = aliasFor(__js_childList)
  var subtree: Nullable[Bool] """
  Set to true if mutations to not just target, but also target's descendants are to be observed.
  """ = aliasFor(__js_subtree)
}
export interface NavigationPreloadState {
  var enabled: Nullable[Bool] = aliasFor(__js_enabled)
  var headerValue: Nullable[String] = aliasFor(__js_headerValue)
}
export interface NotificationOptions {
  var badge: Nullable[String] = aliasFor(__js_badge)
  var body: Nullable[String] = aliasFor(__js_body)
  var data: Nullable[Any] = aliasFor(__js_data)
  var dir: Nullable[NotificationDirection] = aliasFor(__js_dir)
  var icon: Nullable[String] = aliasFor(__js_icon)
  var lang: Nullable[String] = aliasFor(__js_lang)
  var requireInteraction: Nullable[Bool] = aliasFor(__js_requireInteraction)
  var silent: Nullable[Union[Bool, Null]] = aliasFor(__js_silent)
  var tag: Nullable[String] = aliasFor(__js_tag)
}
export interface OfflineAudioCompletionEventInit extends EventInit {
  var renderedBuffer: AudioBuffer = aliasFor(__js_renderedBuffer)
}
export interface OfflineAudioContextOptions {
  var length: Number = aliasFor(__js_length)
  var numberOfChannels: Nullable[Number] = aliasFor(__js_numberOfChannels)
  var sampleRate: Number = aliasFor(__js_sampleRate)
}
export interface OptionalEffectTiming {
  var delay: Nullable[Number] = aliasFor(__js_delay)
  var direction: Nullable[PlaybackDirection] = aliasFor(__js_direction)
  var duration: Nullable[Union[Number, String]] = aliasFor(__js_duration)
  var easing: Nullable[String] = aliasFor(__js_easing)
  var endDelay: Nullable[Number] = aliasFor(__js_endDelay)
  var fill: Nullable[FillMode] = aliasFor(__js_fill)
  var iterationStart: Nullable[Number] = aliasFor(__js_iterationStart)
  var iterations: Nullable[Number] = aliasFor(__js_iterations)
  var playbackRate: Nullable[Number] = aliasFor(__js_playbackRate)
}
export interface OscillatorOptions extends AudioNodeOptions {
  var detune: Nullable[Number] = aliasFor(__js_detune)
  var frequency: Nullable[Number] = aliasFor(__js_frequency)
  var periodicWave: Nullable[PeriodicWave] = aliasFor(__js_periodicWave)
  var type: Nullable[OscillatorType] = aliasFor(__js_type)
}
export interface PageTransitionEventInit extends EventInit {
  var persisted: Nullable[Bool] = aliasFor(__js_persisted)
}
export interface PannerOptions extends AudioNodeOptions {
  var coneInnerAngle: Nullable[Number] = aliasFor(__js_coneInnerAngle)
  var coneOuterAngle: Nullable[Number] = aliasFor(__js_coneOuterAngle)
  var coneOuterGain: Nullable[Number] = aliasFor(__js_coneOuterGain)
  var distanceModel: Nullable[DistanceModelType] = aliasFor(__js_distanceModel)
  var maxDistance: Nullable[Number] = aliasFor(__js_maxDistance)
  var orientationX: Nullable[Number] = aliasFor(__js_orientationX)
  var orientationY: Nullable[Number] = aliasFor(__js_orientationY)
  var orientationZ: Nullable[Number] = aliasFor(__js_orientationZ)
  var panningModel: Nullable[PanningModelType] = aliasFor(__js_panningModel)
  var positionX: Nullable[Number] = aliasFor(__js_positionX)
  var positionY: Nullable[Number] = aliasFor(__js_positionY)
  var positionZ: Nullable[Number] = aliasFor(__js_positionZ)
  var refDistance: Nullable[Number] = aliasFor(__js_refDistance)
  var rolloffFactor: Nullable[Number] = aliasFor(__js_rolloffFactor)
}
export interface PaymentCurrencyAmount {
  var currency: String = aliasFor(__js_currency)
  var value: String = aliasFor(__js_value)
}
export interface PaymentDetailsBase {
  var displayItems: Nullable[List[PaymentItem]] = aliasFor(__js_displayItems)
  var modifiers: Nullable[List[PaymentDetailsModifier]] = aliasFor(__js_modifiers)
}
export interface PaymentDetailsInit extends PaymentDetailsBase {
  var id: Nullable[String] = aliasFor(__js_id)
  var total: PaymentItem = aliasFor(__js_total)
}
export interface PaymentDetailsModifier {
  var additionalDisplayItems: Nullable[List[PaymentItem]] = aliasFor(__js_additionalDisplayItems)
  var data: Nullable[Any] = aliasFor(__js_data)
  var supportedMethods: String = aliasFor(__js_supportedMethods)
  var total: Nullable[PaymentItem] = aliasFor(__js_total)
}
export interface PaymentDetailsUpdate extends PaymentDetailsBase {
  var paymentMethodErrors: Nullable[Any] = aliasFor(__js_paymentMethodErrors)
  var total: Nullable[PaymentItem] = aliasFor(__js_total)
}
export interface PaymentItem {
  var amount: PaymentCurrencyAmount = aliasFor(__js_amount)
  var label: String = aliasFor(__js_label)
  var pending: Nullable[Bool] = aliasFor(__js_pending)
}
export interface PaymentMethodChangeEventInit extends PaymentRequestUpdateEventInit {
  var methodDetails: Nullable[Any] = aliasFor(__js_methodDetails)
  var methodName: Nullable[String] = aliasFor(__js_methodName)
}
export interface PaymentMethodData {
  var data: Nullable[Any] = aliasFor(__js_data)
  var supportedMethods: String = aliasFor(__js_supportedMethods)
}
export interface PaymentRequestUpdateEventInit extends EventInit {
}
export interface PaymentValidationErrors {
  var error: Nullable[String] = aliasFor(__js_error)
  var paymentMethod: Nullable[Any] = aliasFor(__js_paymentMethod)
}
export interface Pbkdf2Params extends Algorithm {
  var hash: HashAlgorithmIdentifier = aliasFor(__js_hash)
  var iterations: Number = aliasFor(__js_iterations)
  var salt: BufferSource = aliasFor(__js_salt)
}
export interface PerformanceMarkOptions {
  var detail: Nullable[Any] = aliasFor(__js_detail)
  var startTime: Nullable[DOMHighResTimeStamp] = aliasFor(__js_startTime)
}
export interface PerformanceMeasureOptions {
  var detail: Nullable[Any] = aliasFor(__js_detail)
  var duration: Nullable[DOMHighResTimeStamp] = aliasFor(__js_duration)
  var end: Nullable[Union[String, DOMHighResTimeStamp]] = aliasFor(__js_end)
  var start: Nullable[Union[String, DOMHighResTimeStamp]] = aliasFor(__js_start)
}
export interface PerformanceObserverInit {
  var buffered: Nullable[Bool] = aliasFor(__js_buffered)
  var entryTypes: Nullable[List[String]] = aliasFor(__js_entryTypes)
  var type: Nullable[String] = aliasFor(__js_type)
}
export interface PeriodicWaveConstraints {
  var disableNormalization: Nullable[Bool] = aliasFor(__js_disableNormalization)
}
export interface PeriodicWaveOptions extends PeriodicWaveConstraints {
  var imag: Nullable[Union[List[Number], Float32Array]] = aliasFor(__js_imag)
  var real: Nullable[Union[List[Number], Float32Array]] = aliasFor(__js_real)
}
export interface PermissionDescriptor {
  var name: PermissionName = aliasFor(__js_name)
}
export interface PictureInPictureEventInit extends EventInit {
  var pictureInPictureWindow: PictureInPictureWindow = aliasFor(__js_pictureInPictureWindow)
}
export interface PlaneLayout {
  var offset: Number = aliasFor(__js_offset)
  var stride: Number = aliasFor(__js_stride)
}
export interface PointerEventInit extends MouseEventInit {
  var coalescedEvents: Nullable[List[PointerEvent]] = aliasFor(__js_coalescedEvents)
  var height: Nullable[Number] = aliasFor(__js_height)
  var isPrimary: Nullable[Bool] = aliasFor(__js_isPrimary)
  var pointerId: Nullable[Number] = aliasFor(__js_pointerId)
  var pointerType: Nullable[String] = aliasFor(__js_pointerType)
  var predictedEvents: Nullable[List[PointerEvent]] = aliasFor(__js_predictedEvents)
  var pressure: Nullable[Number] = aliasFor(__js_pressure)
  var tangentialPressure: Nullable[Number] = aliasFor(__js_tangentialPressure)
  var tiltX: Nullable[Number] = aliasFor(__js_tiltX)
  var tiltY: Nullable[Number] = aliasFor(__js_tiltY)
  var twist: Nullable[Number] = aliasFor(__js_twist)
  var width: Nullable[Number] = aliasFor(__js_width)
}
export interface PopStateEventInit extends EventInit {
  var state: Nullable[Any] = aliasFor(__js_state)
}
export interface PositionOptions {
  var enableHighAccuracy: Nullable[Bool] = aliasFor(__js_enableHighAccuracy)
  var maximumAge: Nullable[Number] = aliasFor(__js_maximumAge)
  var timeout: Nullable[Number] = aliasFor(__js_timeout)
}
export interface ProgressEventInit extends EventInit {
  var lengthComputable: Nullable[Bool] = aliasFor(__js_lengthComputable)
  var loaded: Nullable[Number] = aliasFor(__js_loaded)
  var total: Nullable[Number] = aliasFor(__js_total)
}
export interface PromiseRejectionEventInit extends EventInit {
  var promise: Promise[Any] = aliasFor(__js_promise)
  var reason: Nullable[Any] = aliasFor(__js_reason)
}
export interface PropertyDefinition {
  var inherits: Bool = aliasFor(__js_inherits)
  var initialValue: Nullable[String] = aliasFor(__js_initialValue)
  var name: String = aliasFor(__js_name)
  var syntax: Nullable[String] = aliasFor(__js_syntax)
}
export interface PropertyIndexedKeyframes {
  var composite: Nullable[Union[CompositeOperationOrAuto, List[CompositeOperationOrAuto]]] = aliasFor(__js_composite)
  var easing: Nullable[Union[String, List[String]]] = aliasFor(__js_easing)
  var offset: Nullable[Union[Number, List[Union[Number, Null]]]] = aliasFor(__js_offset)
  function __getitem__(property: String): Union[String, List[String], Number, Null, List[Union[Number, Null]]] { aliasFor(__op_getitem__) }
  function __setitem__(property: String, value: Union[String, List[String], Number, Null, List[Union[Number, Null]]]): Union[String, List[String], Number, Null, List[Union[Number, Null]]] { aliasFor(__op_setitem__) }
}
export interface PublicKeyCredentialCreationOptions {
  var attestation: Nullable[AttestationConveyancePreference] = aliasFor(__js_attestation)
  var authenticatorSelection: Nullable[AuthenticatorSelectionCriteria] = aliasFor(__js_authenticatorSelection)
  var challenge: BufferSource = aliasFor(__js_challenge)
  var excludeCredentials: Nullable[List[PublicKeyCredentialDescriptor]] = aliasFor(__js_excludeCredentials)
  var extensions: Nullable[AuthenticationExtensionsClientInputs] = aliasFor(__js_extensions)
  var pubKeyCredParams: List[PublicKeyCredentialParameters] = aliasFor(__js_pubKeyCredParams)
  var rp: PublicKeyCredentialRpEntity = aliasFor(__js_rp)
  var timeout: Nullable[Number] = aliasFor(__js_timeout)
  var user: PublicKeyCredentialUserEntity = aliasFor(__js_user)
}
export interface PublicKeyCredentialDescriptor {
  var id: BufferSource = aliasFor(__js_id)
  var transports: Nullable[List[AuthenticatorTransport]] = aliasFor(__js_transports)
  var type: PublicKeyCredentialType = aliasFor(__js_type)
}
export interface PublicKeyCredentialEntity {
  var name: String = aliasFor(__js_name)
}
export interface PublicKeyCredentialParameters {
  var alg: COSEAlgorithmIdentifier = aliasFor(__js_alg)
  var type: PublicKeyCredentialType = aliasFor(__js_type)
}
export interface PublicKeyCredentialRequestOptions {
  var allowCredentials: Nullable[List[PublicKeyCredentialDescriptor]] = aliasFor(__js_allowCredentials)
  var challenge: BufferSource = aliasFor(__js_challenge)
  var extensions: Nullable[AuthenticationExtensionsClientInputs] = aliasFor(__js_extensions)
  var rpId: Nullable[String] = aliasFor(__js_rpId)
  var timeout: Nullable[Number] = aliasFor(__js_timeout)
  var userVerification: Nullable[UserVerificationRequirement] = aliasFor(__js_userVerification)
}
export interface PublicKeyCredentialRpEntity extends PublicKeyCredentialEntity {
  var id: Nullable[String] = aliasFor(__js_id)
}
export interface PublicKeyCredentialUserEntity extends PublicKeyCredentialEntity {
  var displayName: String = aliasFor(__js_displayName)
  var id: BufferSource = aliasFor(__js_id)
}
export interface PushSubscriptionJSON {
  var endpoint: Nullable[String] = aliasFor(__js_endpoint)
  var expirationTime: Nullable[Union[EpochTimeStamp, Null]] = aliasFor(__js_expirationTime)
  var keys: Nullable[Any] = aliasFor(__js_keys)
}
export interface PushSubscriptionOptionsInit {
  var applicationServerKey: Nullable[Union[BufferSource, String, Null]] = aliasFor(__js_applicationServerKey)
  var userVisibleOnly: Nullable[Bool] = aliasFor(__js_userVisibleOnly)
}
export interface QueuingStrategyInit {
  var highWaterMark: Number """
  Creates a new ByteLengthQueuingStrategy with the provided high water mark.
     *
  Note that the provided high water mark will not be validated ahead of time. Instead, if it is negative, NaN, or not a number, the resulting ByteLengthQueuingStrategy will cause the corresponding stream constructor to throw.
  """ = aliasFor(__js_highWaterMark)
}
export interface RTCAnswerOptions extends RTCOfferAnswerOptions {
}
export interface RTCCertificateExpiration {
  var expires: Nullable[Number] = aliasFor(__js_expires)
}
export interface RTCConfiguration {
  var bundlePolicy: Nullable[RTCBundlePolicy] = aliasFor(__js_bundlePolicy)
  var certificates: Nullable[List[RTCCertificate]] = aliasFor(__js_certificates)
  var iceCandidatePoolSize: Nullable[Number] = aliasFor(__js_iceCandidatePoolSize)
  var iceServers: Nullable[List[RTCIceServer]] = aliasFor(__js_iceServers)
  var iceTransportPolicy: Nullable[RTCIceTransportPolicy] = aliasFor(__js_iceTransportPolicy)
  var rtcpMuxPolicy: Nullable[RTCRtcpMuxPolicy] = aliasFor(__js_rtcpMuxPolicy)
}
export interface RTCDTMFToneChangeEventInit extends EventInit {
  var tone: Nullable[String] = aliasFor(__js_tone)
}
export interface RTCDataChannelEventInit extends EventInit {
  var channel: RTCDataChannel = aliasFor(__js_channel)
}
export interface RTCDataChannelInit {
  var id: Nullable[Number] = aliasFor(__js_id)
  var maxPacketLifeTime: Nullable[Number] = aliasFor(__js_maxPacketLifeTime)
  var maxRetransmits: Nullable[Number] = aliasFor(__js_maxRetransmits)
  var negotiated: Nullable[Bool] = aliasFor(__js_negotiated)
  var ordered: Nullable[Bool] = aliasFor(__js_ordered)
  var protocol: Nullable[String] = aliasFor(__js_protocol)
}
export interface RTCDtlsFingerprint {
  var algorithm: Nullable[String] = aliasFor(__js_algorithm)
  var value: Nullable[String] = aliasFor(__js_value)
}
export interface RTCEncodedAudioFrameMetadata {
  var contributingSources: Nullable[List[Number]] = aliasFor(__js_contributingSources)
  var payloadType: Nullable[Number] = aliasFor(__js_payloadType)
  var sequenceNumber: Nullable[Number] = aliasFor(__js_sequenceNumber)
  var synchronizationSource: Nullable[Number] = aliasFor(__js_synchronizationSource)
}
export interface RTCEncodedVideoFrameMetadata {
  var contributingSources: Nullable[List[Number]] = aliasFor(__js_contributingSources)
  var dependencies: Nullable[List[Number]] = aliasFor(__js_dependencies)
  var frameId: Nullable[Number] = aliasFor(__js_frameId)
  var height: Nullable[Number] = aliasFor(__js_height)
  var payloadType: Nullable[Number] = aliasFor(__js_payloadType)
  var spatialIndex: Nullable[Number] = aliasFor(__js_spatialIndex)
  var synchronizationSource: Nullable[Number] = aliasFor(__js_synchronizationSource)
  var temporalIndex: Nullable[Number] = aliasFor(__js_temporalIndex)
  var timestamp: Nullable[Number] = aliasFor(__js_timestamp)
  var width: Nullable[Number] = aliasFor(__js_width)
}
export interface RTCErrorEventInit extends EventInit {
  var error: RTCError = aliasFor(__js_error)
}
export interface RTCErrorInit {
  var errorDetail: RTCErrorDetailType = aliasFor(__js_errorDetail)
  var httpRequestStatusCode: Nullable[Number] = aliasFor(__js_httpRequestStatusCode)
  var receivedAlert: Nullable[Number] = aliasFor(__js_receivedAlert)
  var sctpCauseCode: Nullable[Number] = aliasFor(__js_sctpCauseCode)
  var sdpLineNumber: Nullable[Number] = aliasFor(__js_sdpLineNumber)
  var sentAlert: Nullable[Number] = aliasFor(__js_sentAlert)
}
export interface RTCIceCandidateInit {
  var candidate: Nullable[String] = aliasFor(__js_candidate)
  var sdpMLineIndex: Nullable[Union[Number, Null]] = aliasFor(__js_sdpMLineIndex)
  var sdpMid: Nullable[Union[String, Null]] = aliasFor(__js_sdpMid)
  var usernameFragment: Nullable[Union[String, Null]] = aliasFor(__js_usernameFragment)
}
export interface RTCIceCandidatePair {
  var local: Nullable[RTCIceCandidate] = aliasFor(__js_local)
  var remote: Nullable[RTCIceCandidate] = aliasFor(__js_remote)
}
export interface RTCIceCandidatePairStats extends RTCStats {
  var availableIncomingBitrate: Nullable[Number] = aliasFor(__js_availableIncomingBitrate)
  var availableOutgoingBitrate: Nullable[Number] = aliasFor(__js_availableOutgoingBitrate)
  var bytesReceived: Nullable[Number] = aliasFor(__js_bytesReceived)
  var bytesSent: Nullable[Number] = aliasFor(__js_bytesSent)
  var currentRoundTripTime: Nullable[Number] = aliasFor(__js_currentRoundTripTime)
  var lastPacketReceivedTimestamp: Nullable[DOMHighResTimeStamp] = aliasFor(__js_lastPacketReceivedTimestamp)
  var lastPacketSentTimestamp: Nullable[DOMHighResTimeStamp] = aliasFor(__js_lastPacketSentTimestamp)
  var localCandidateId: String = aliasFor(__js_localCandidateId)
  var nominated: Nullable[Bool] = aliasFor(__js_nominated)
  var remoteCandidateId: String = aliasFor(__js_remoteCandidateId)
  var requestsReceived: Nullable[Number] = aliasFor(__js_requestsReceived)
  var requestsSent: Nullable[Number] = aliasFor(__js_requestsSent)
  var responsesReceived: Nullable[Number] = aliasFor(__js_responsesReceived)
  var responsesSent: Nullable[Number] = aliasFor(__js_responsesSent)
  var state: RTCStatsIceCandidatePairState = aliasFor(__js_state)
  var totalRoundTripTime: Nullable[Number] = aliasFor(__js_totalRoundTripTime)
  var transportId: String = aliasFor(__js_transportId)
}
export interface RTCIceServer {
  var credential: Nullable[String] = aliasFor(__js_credential)
  var urls: Union[String, List[String]] = aliasFor(__js_urls)
  var username: Nullable[String] = aliasFor(__js_username)
}
export interface RTCInboundRtpStreamStats extends RTCReceivedRtpStreamStats {
  var audioLevel: Nullable[Number] = aliasFor(__js_audioLevel)
  var bytesReceived: Nullable[Number] = aliasFor(__js_bytesReceived)
  var concealedSamples: Nullable[Number] = aliasFor(__js_concealedSamples)
  var concealmentEvents: Nullable[Number] = aliasFor(__js_concealmentEvents)
  var decoderImplementation: Nullable[String] = aliasFor(__js_decoderImplementation)
  var estimatedPlayoutTimestamp: Nullable[DOMHighResTimeStamp] = aliasFor(__js_estimatedPlayoutTimestamp)
  var fecPacketsDiscarded: Nullable[Number] = aliasFor(__js_fecPacketsDiscarded)
  var fecPacketsReceived: Nullable[Number] = aliasFor(__js_fecPacketsReceived)
  var firCount: Nullable[Number] = aliasFor(__js_firCount)
  var frameHeight: Nullable[Number] = aliasFor(__js_frameHeight)
  var frameWidth: Nullable[Number] = aliasFor(__js_frameWidth)
  var framesDecoded: Nullable[Number] = aliasFor(__js_framesDecoded)
  var framesDropped: Nullable[Number] = aliasFor(__js_framesDropped)
  var framesPerSecond: Nullable[Number] = aliasFor(__js_framesPerSecond)
  var framesReceived: Nullable[Number] = aliasFor(__js_framesReceived)
  var headerBytesReceived: Nullable[Number] = aliasFor(__js_headerBytesReceived)
  var insertedSamplesForDeceleration: Nullable[Number] = aliasFor(__js_insertedSamplesForDeceleration)
  var jitterBufferDelay: Nullable[Number] = aliasFor(__js_jitterBufferDelay)
  var jitterBufferEmittedCount: Nullable[Number] = aliasFor(__js_jitterBufferEmittedCount)
  var keyFramesDecoded: Nullable[Number] = aliasFor(__js_keyFramesDecoded)
  var lastPacketReceivedTimestamp: Nullable[DOMHighResTimeStamp] = aliasFor(__js_lastPacketReceivedTimestamp)
  var mid: Nullable[String] = aliasFor(__js_mid)
  var nackCount: Nullable[Number] = aliasFor(__js_nackCount)
  var packetsDiscarded: Nullable[Number] = aliasFor(__js_packetsDiscarded)
  var pliCount: Nullable[Number] = aliasFor(__js_pliCount)
  var qpSum: Nullable[Number] = aliasFor(__js_qpSum)
  var remoteId: Nullable[String] = aliasFor(__js_remoteId)
  var removedSamplesForAcceleration: Nullable[Number] = aliasFor(__js_removedSamplesForAcceleration)
  var silentConcealedSamples: Nullable[Number] = aliasFor(__js_silentConcealedSamples)
  var totalAudioEnergy: Nullable[Number] = aliasFor(__js_totalAudioEnergy)
  var totalDecodeTime: Nullable[Number] = aliasFor(__js_totalDecodeTime)
  var totalInterFrameDelay: Nullable[Number] = aliasFor(__js_totalInterFrameDelay)
  var totalProcessingDelay: Nullable[Number] = aliasFor(__js_totalProcessingDelay)
  var totalSamplesDuration: Nullable[Number] = aliasFor(__js_totalSamplesDuration)
  var totalSamplesReceived: Nullable[Number] = aliasFor(__js_totalSamplesReceived)
  var totalSquaredInterFrameDelay: Nullable[Number] = aliasFor(__js_totalSquaredInterFrameDelay)
  var trackIdentifier: String = aliasFor(__js_trackIdentifier)
}
export interface RTCLocalSessionDescriptionInit {
  var sdp: Nullable[String] = aliasFor(__js_sdp)
  var type: Nullable[RTCSdpType] = aliasFor(__js_type)
}
export interface RTCOfferAnswerOptions {
}
export interface RTCOfferOptions extends RTCOfferAnswerOptions {
  var iceRestart: Nullable[Bool] = aliasFor(__js_iceRestart)
  var offerToReceiveAudio: Nullable[Bool] = aliasFor(__js_offerToReceiveAudio)
  var offerToReceiveVideo: Nullable[Bool] = aliasFor(__js_offerToReceiveVideo)
}
export interface RTCOutboundRtpStreamStats extends RTCSentRtpStreamStats {
  var firCount: Nullable[Number] = aliasFor(__js_firCount)
  var frameHeight: Nullable[Number] = aliasFor(__js_frameHeight)
  var frameWidth: Nullable[Number] = aliasFor(__js_frameWidth)
  var framesEncoded: Nullable[Number] = aliasFor(__js_framesEncoded)
  var framesPerSecond: Nullable[Number] = aliasFor(__js_framesPerSecond)
  var framesSent: Nullable[Number] = aliasFor(__js_framesSent)
  var headerBytesSent: Nullable[Number] = aliasFor(__js_headerBytesSent)
  var hugeFramesSent: Nullable[Number] = aliasFor(__js_hugeFramesSent)
  var keyFramesEncoded: Nullable[Number] = aliasFor(__js_keyFramesEncoded)
  var mediaSourceId: Nullable[String] = aliasFor(__js_mediaSourceId)
  var nackCount: Nullable[Number] = aliasFor(__js_nackCount)
  var pliCount: Nullable[Number] = aliasFor(__js_pliCount)
  var qpSum: Nullable[Number] = aliasFor(__js_qpSum)
  var qualityLimitationResolutionChanges: Nullable[Number] = aliasFor(__js_qualityLimitationResolutionChanges)
  var remoteId: Nullable[String] = aliasFor(__js_remoteId)
  var retransmittedBytesSent: Nullable[Number] = aliasFor(__js_retransmittedBytesSent)
  var retransmittedPacketsSent: Nullable[Number] = aliasFor(__js_retransmittedPacketsSent)
  var rid: Nullable[String] = aliasFor(__js_rid)
  var rtxSsrc: Nullable[Number] = aliasFor(__js_rtxSsrc)
  var targetBitrate: Nullable[Number] = aliasFor(__js_targetBitrate)
  var totalEncodeTime: Nullable[Number] = aliasFor(__js_totalEncodeTime)
  var totalEncodedBytesTarget: Nullable[Number] = aliasFor(__js_totalEncodedBytesTarget)
  var totalPacketSendDelay: Nullable[Number] = aliasFor(__js_totalPacketSendDelay)
}
export interface RTCPeerConnectionIceErrorEventInit extends EventInit {
  var address: Nullable[Union[String, Null]] = aliasFor(__js_address)
  var errorCode: Number = aliasFor(__js_errorCode)
  var errorText: Nullable[String] = aliasFor(__js_errorText)
  var port: Nullable[Union[Number, Null]] = aliasFor(__js_port)
  var url: Nullable[String] = aliasFor(__js_url)
}
export interface RTCPeerConnectionIceEventInit extends EventInit {
  var candidate: Nullable[Union[RTCIceCandidate, Null]] = aliasFor(__js_candidate)
  var url: Nullable[Union[String, Null]] = aliasFor(__js_url)
}
export interface RTCReceivedRtpStreamStats extends RTCRtpStreamStats {
  var jitter: Nullable[Number] = aliasFor(__js_jitter)
  var packetsLost: Nullable[Number] = aliasFor(__js_packetsLost)
  var packetsReceived: Nullable[Number] = aliasFor(__js_packetsReceived)
}
export interface RTCRtcpParameters {
  var cname: Nullable[String] = aliasFor(__js_cname)
  var reducedSize: Nullable[Bool] = aliasFor(__js_reducedSize)
}
export interface RTCRtpCapabilities {
  var codecs: List[RTCRtpCodecCapability] = aliasFor(__js_codecs)
  var headerExtensions: List[RTCRtpHeaderExtensionCapability] = aliasFor(__js_headerExtensions)
}
export interface RTCRtpCodec {
  var channels: Nullable[Number] = aliasFor(__js_channels)
  var clockRate: Number = aliasFor(__js_clockRate)
  var mimeType: String = aliasFor(__js_mimeType)
  var sdpFmtpLine: Nullable[String] = aliasFor(__js_sdpFmtpLine)
}
export interface RTCRtpCodecCapability extends RTCRtpCodec {
}
export interface RTCRtpCodecParameters extends RTCRtpCodec {
  var payloadType: Number = aliasFor(__js_payloadType)
}
export interface RTCRtpCodingParameters {
  var rid: Nullable[String] = aliasFor(__js_rid)
}
export interface RTCRtpContributingSource {
  var audioLevel: Nullable[Number] = aliasFor(__js_audioLevel)
  var rtpTimestamp: Number = aliasFor(__js_rtpTimestamp)
  var source: Number = aliasFor(__js_source)
  var timestamp: DOMHighResTimeStamp = aliasFor(__js_timestamp)
}
export interface RTCRtpEncodingParameters extends RTCRtpCodingParameters {
  var active: Nullable[Bool] = aliasFor(__js_active)
  var maxBitrate: Nullable[Number] = aliasFor(__js_maxBitrate)
  var maxFramerate: Nullable[Number] = aliasFor(__js_maxFramerate)
  var networkPriority: Nullable[RTCPriorityType] = aliasFor(__js_networkPriority)
  var priority: Nullable[RTCPriorityType] = aliasFor(__js_priority)
  var scaleResolutionDownBy: Nullable[Number] = aliasFor(__js_scaleResolutionDownBy)
}
export interface RTCRtpHeaderExtensionCapability {
  var uri: String = aliasFor(__js_uri)
}
export interface RTCRtpHeaderExtensionParameters {
  var encrypted: Nullable[Bool] = aliasFor(__js_encrypted)
  var id: Number = aliasFor(__js_id)
  var uri: String = aliasFor(__js_uri)
}
export interface RTCRtpParameters {
  var codecs: List[RTCRtpCodecParameters] = aliasFor(__js_codecs)
  var headerExtensions: List[RTCRtpHeaderExtensionParameters] = aliasFor(__js_headerExtensions)
  var rtcp: RTCRtcpParameters = aliasFor(__js_rtcp)
}
export interface RTCRtpReceiveParameters extends RTCRtpParameters {
}
export interface RTCRtpSendParameters extends RTCRtpParameters {
  var degradationPreference: Nullable[RTCDegradationPreference] = aliasFor(__js_degradationPreference)
  var encodings: List[RTCRtpEncodingParameters] = aliasFor(__js_encodings)
  var transactionId: String = aliasFor(__js_transactionId)
}
export interface RTCRtpStreamStats extends RTCStats {
  var codecId: Nullable[String] = aliasFor(__js_codecId)
  var kind: String = aliasFor(__js_kind)
  var ssrc: Number = aliasFor(__js_ssrc)
  var transportId: Nullable[String] = aliasFor(__js_transportId)
}
export interface RTCRtpSynchronizationSource extends RTCRtpContributingSource {
}
export interface RTCRtpTransceiverInit {
  var direction: Nullable[RTCRtpTransceiverDirection] = aliasFor(__js_direction)
  var sendEncodings: Nullable[List[RTCRtpEncodingParameters]] = aliasFor(__js_sendEncodings)
  var streams: Nullable[List[MediaStream]] = aliasFor(__js_streams)
}
export interface RTCSentRtpStreamStats extends RTCRtpStreamStats {
  var bytesSent: Nullable[Number] = aliasFor(__js_bytesSent)
  var packetsSent: Nullable[Number] = aliasFor(__js_packetsSent)
}
export interface RTCSessionDescriptionInit {
  var sdp: Nullable[String] = aliasFor(__js_sdp)
  var type: RTCSdpType = aliasFor(__js_type)
}
export interface RTCSetParameterOptions {
}
export interface RTCStats {
  var id: String = aliasFor(__js_id)
  var timestamp: DOMHighResTimeStamp = aliasFor(__js_timestamp)
  var type: RTCStatsType = aliasFor(__js_type)
}
export interface RTCTrackEventInit extends EventInit {
  var receiver: RTCRtpReceiver = aliasFor(__js_receiver)
  var streams: Nullable[List[MediaStream]] = aliasFor(__js_streams)
  var track: MediaStreamTrack = aliasFor(__js_track)
  var transceiver: RTCRtpTransceiver = aliasFor(__js_transceiver)
}
export interface RTCTransportStats extends RTCStats {
  var bytesReceived: Nullable[Number] = aliasFor(__js_bytesReceived)
  var bytesSent: Nullable[Number] = aliasFor(__js_bytesSent)
  var dtlsCipher: Nullable[String] = aliasFor(__js_dtlsCipher)
  var dtlsState: RTCDtlsTransportState = aliasFor(__js_dtlsState)
  var localCertificateId: Nullable[String] = aliasFor(__js_localCertificateId)
  var remoteCertificateId: Nullable[String] = aliasFor(__js_remoteCertificateId)
  var selectedCandidatePairId: Nullable[String] = aliasFor(__js_selectedCandidatePairId)
  var srtpCipher: Nullable[String] = aliasFor(__js_srtpCipher)
  var tlsVersion: Nullable[String] = aliasFor(__js_tlsVersion)
}
export interface ReadableStreamGetReaderOptions {
  var mode: Nullable[ReadableStreamReaderMode] """
  Creates a ReadableStreamBYOBReader and locks the stream to the new reader.
     *
  This call behaves the same way as the no-argument variant, except that it only works on readable byte streams, i.e. streams which were constructed specifically with the ability to handle "bring your own buffer" reading. The returned BYOB reader provides the ability to directly read individual chunks from the stream via its read() method, into developer-supplied buffers, allowing more precise control over allocation.
  """ = aliasFor(__js_mode)
}
export interface RegistrationOptions {
  var scope: Nullable[String] = aliasFor(__js_scope)
  var type: Nullable[WorkerType] = aliasFor(__js_type)
  var updateViaCache: Nullable[ServiceWorkerUpdateViaCache] = aliasFor(__js_updateViaCache)
}
export interface ReportingObserverOptions {
  var buffered: Nullable[Bool] = aliasFor(__js_buffered)
  var types: Nullable[List[String]] = aliasFor(__js_types)
}
export interface RequestInit {
  var body: Nullable[Union[BodyInit, Null]] """
  A BodyInit object or null to set request's body.
  """ = aliasFor(__js_body)
  var cache: Nullable[RequestCache] """
  A string indicating how the request will interact with the browser's cache to set request's cache.
  """ = aliasFor(__js_cache)
  var credentials: Nullable[RequestCredentials] """
  A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials.
  """ = aliasFor(__js_credentials)
  var headers: Nullable[HeadersInit] """
  A Headers object, an object literal, or an array of two-item arrays to set request's headers.
  """ = aliasFor(__js_headers)
  var integrity: Nullable[String] """
  A cryptographic hash of the resource to be fetched by request. Sets request's integrity.
  """ = aliasFor(__js_integrity)
  var keepalive: Nullable[Bool] """
  A boolean to set request's keepalive.
  """ = aliasFor(__js_keepalive)
  var method: Nullable[String] """
  A string to set request's method.
  """ = aliasFor(__js_method)
  var mode: Nullable[RequestMode] """
  A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.
  """ = aliasFor(__js_mode)
  var priority: Nullable[RequestPriority] = aliasFor(__js_priority)
  var redirect: Nullable[RequestRedirect] """
  A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.
  """ = aliasFor(__js_redirect)
  var referrer: Nullable[String] """
  A string whose value is a same-origin URL, "about:client", or the empty string, to set request's referrer.
  """ = aliasFor(__js_referrer)
  var referrerPolicy: Nullable[ReferrerPolicy] """
  A referrer policy to set request's referrerPolicy.
  """ = aliasFor(__js_referrerPolicy)
  var signal: Nullable[Union[AbortSignal, Null]] """
  An AbortSignal to set request's signal.
  """ = aliasFor(__js_signal)
  var window: Nullable[Null] """
  Can only be null. Used to disassociate request from any Window.
  """ = aliasFor(__js_window)
}
export interface ResizeObserverOptions {
  var box: Nullable[ResizeObserverBoxOptions] = aliasFor(__js_box)
}
export interface ResponseInit {
  var headers: Nullable[HeadersInit] = aliasFor(__js_headers)
  var status: Nullable[Number] = aliasFor(__js_status)
  var statusText: Nullable[String] = aliasFor(__js_statusText)
}
export interface RsaHashedImportParams extends Algorithm {
  var hash: HashAlgorithmIdentifier = aliasFor(__js_hash)
}
export interface RsaHashedKeyAlgorithm extends RsaKeyAlgorithm {
  var hash: KeyAlgorithm = aliasFor(__js_hash)
}
export interface RsaHashedKeyGenParams extends RsaKeyGenParams {
  var hash: HashAlgorithmIdentifier = aliasFor(__js_hash)
}
export interface RsaKeyAlgorithm extends KeyAlgorithm {
  var modulusLength: Number = aliasFor(__js_modulusLength)
  var publicExponent: BigInteger = aliasFor(__js_publicExponent)
}
export interface RsaKeyGenParams extends Algorithm {
  var modulusLength: Number = aliasFor(__js_modulusLength)
  var publicExponent: BigInteger = aliasFor(__js_publicExponent)
}
export interface RsaOaepParams extends Algorithm {
  var label: Nullable[BufferSource] = aliasFor(__js_label)
}
export interface RsaOtherPrimesInfo {
  var d: Nullable[String] = aliasFor(__js_d)
  var r: Nullable[String] = aliasFor(__js_r)
  var t: Nullable[String] = aliasFor(__js_t)
}
export interface RsaPssParams extends Algorithm {
  var saltLength: Number = aliasFor(__js_saltLength)
}
export interface SVGBoundingBoxOptions {
  var clipped: Nullable[Bool] = aliasFor(__js_clipped)
  var fill: Nullable[Bool] = aliasFor(__js_fill)
  var markers: Nullable[Bool] = aliasFor(__js_markers)
  var stroke: Nullable[Bool] = aliasFor(__js_stroke)
}
export interface ScrollIntoViewOptions extends ScrollOptions {
  var block: Nullable[ScrollLogicalPosition] = aliasFor(__js_block)
  var inline: Nullable[ScrollLogicalPosition] = aliasFor(__js_inline)
}
export interface ScrollOptions {
  var behavior: Nullable[ScrollBehavior] = aliasFor(__js_behavior)
}
export interface ScrollToOptions extends ScrollOptions {
  var left: Nullable[Number] = aliasFor(__js_left)
  var top: Nullable[Number] = aliasFor(__js_top)
}
export interface SecurityPolicyViolationEventInit extends EventInit {
  var blockedURI: Nullable[String] = aliasFor(__js_blockedURI)
  var columnNumber: Nullable[Number] = aliasFor(__js_columnNumber)
  var disposition: SecurityPolicyViolationEventDisposition = aliasFor(__js_disposition)
  var documentURI: String = aliasFor(__js_documentURI)
  var effectiveDirective: String = aliasFor(__js_effectiveDirective)
  var lineNumber: Nullable[Number] = aliasFor(__js_lineNumber)
  var originalPolicy: String = aliasFor(__js_originalPolicy)
  var referrer: Nullable[String] = aliasFor(__js_referrer)
  var sample: Nullable[String] = aliasFor(__js_sample)
  var sourceFile: Nullable[String] = aliasFor(__js_sourceFile)
  var statusCode: Number = aliasFor(__js_statusCode)
  var violatedDirective: String = aliasFor(__js_violatedDirective)
}
export interface ShadowRootInit {
  var delegatesFocus: Nullable[Bool] = aliasFor(__js_delegatesFocus)
  var mode: ShadowRootMode = aliasFor(__js_mode)
  var slotAssignment: Nullable[SlotAssignmentMode] = aliasFor(__js_slotAssignment)
}
export interface ShareData {
  var files: Nullable[List[File]] = aliasFor(__js_files)
  var text: Nullable[String] = aliasFor(__js_text)
  var title: Nullable[String] = aliasFor(__js_title)
  var url: Nullable[String] = aliasFor(__js_url)
}
export interface SpeechSynthesisErrorEventInit extends SpeechSynthesisEventInit {
  var error: SpeechSynthesisErrorCode = aliasFor(__js_error)
}
export interface SpeechSynthesisEventInit extends EventInit {
  var charIndex: Nullable[Number] = aliasFor(__js_charIndex)
  var charLength: Nullable[Number] = aliasFor(__js_charLength)
  var elapsedTime: Nullable[Number] = aliasFor(__js_elapsedTime)
  var name: Nullable[String] = aliasFor(__js_name)
  var utterance: SpeechSynthesisUtterance = aliasFor(__js_utterance)
}
export interface StaticRangeInit {
  var endContainer: Node = aliasFor(__js_endContainer)
  var endOffset: Number = aliasFor(__js_endOffset)
  var startContainer: Node = aliasFor(__js_startContainer)
  var startOffset: Number = aliasFor(__js_startOffset)
}
export interface StereoPannerOptions extends AudioNodeOptions {
  var pan: Nullable[Number] = aliasFor(__js_pan)
}
export interface StorageEstimate {
  var quota: Nullable[Number] = aliasFor(__js_quota)
  var usage: Nullable[Number] = aliasFor(__js_usage)
}
export interface StorageEventInit extends EventInit {
  var key: Nullable[Union[String, Null]] = aliasFor(__js_key)
  var newValue: Nullable[Union[String, Null]] = aliasFor(__js_newValue)
  var oldValue: Nullable[Union[String, Null]] = aliasFor(__js_oldValue)
  var storageArea: Nullable[Union[Storage, Null]] = aliasFor(__js_storageArea)
  var url: Nullable[String] = aliasFor(__js_url)
}
export interface StreamPipeOptions {
  var preventAbort: Nullable[Bool] = aliasFor(__js_preventAbort)
  var preventCancel: Nullable[Bool] = aliasFor(__js_preventCancel)
  var preventClose: Nullable[Bool] """
  Pipes this readable stream to a given writable stream destination. The way in which the piping process behaves under various error conditions can be customized with a number of passed options. It returns a promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered.
     *
  Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
     *
  Errors and closures of the source and destination streams propagate as follows:
     *
  An error in this source readable stream will abort destination, unless preventAbort is truthy. The returned promise will be rejected with the source's error, or with any error that occurs during aborting the destination.
     *
  An error in destination will cancel this source readable stream, unless preventCancel is truthy. The returned promise will be rejected with the destination's error, or with any error that occurs during canceling the source.
     *
  When this source readable stream closes, destination will be closed, unless preventClose is truthy. The returned promise will be fulfilled once this process completes, unless an error is encountered while closing the destination, in which case it will be rejected with that error.
     *
  If destination starts out closed or closing, this source readable stream will be canceled, unless preventCancel is true. The returned promise will be rejected with an error indicating piping to a closed stream failed, or with any error that occurs during canceling the source.
     *
  The signal option can be set to an AbortSignal to allow aborting an ongoing pipe operation via the corresponding AbortController. In this case, this source readable stream will be canceled, and destination aborted, unless the respective options preventCancel or preventAbort are set.
  """ = aliasFor(__js_preventClose)
  var signal: Nullable[AbortSignal] = aliasFor(__js_signal)
}
export interface StructuredSerializeOptions {
  var transfer: Nullable[List[Transferable]] = aliasFor(__js_transfer)
}
export interface SubmitEventInit extends EventInit {
  var submitter: Nullable[Union[HTMLElement, Null]] = aliasFor(__js_submitter)
}
export interface TextDecodeOptions {
  var stream: Nullable[Bool] = aliasFor(__js_stream)
}
export interface TextDecoderOptions {
  var fatal: Nullable[Bool] = aliasFor(__js_fatal)
  var ignoreBOM: Nullable[Bool] = aliasFor(__js_ignoreBOM)
}
export interface TextEncoderEncodeIntoResult {
  var read: Number = aliasFor(__js_read)
  var written: Number = aliasFor(__js_written)
}
export interface ToggleEventInit extends EventInit {
  var newState: Nullable[String] = aliasFor(__js_newState)
  var oldState: Nullable[String] = aliasFor(__js_oldState)
}
export interface TouchEventInit extends EventModifierInit {
  var changedTouches: Nullable[List[Touch]] = aliasFor(__js_changedTouches)
  var targetTouches: Nullable[List[Touch]] = aliasFor(__js_targetTouches)
  var touches: Nullable[List[Touch]] = aliasFor(__js_touches)
}
export interface TouchInit {
  var altitudeAngle: Nullable[Number] = aliasFor(__js_altitudeAngle)
  var azimuthAngle: Nullable[Number] = aliasFor(__js_azimuthAngle)
  var clientX: Nullable[Number] = aliasFor(__js_clientX)
  var clientY: Nullable[Number] = aliasFor(__js_clientY)
  var force: Nullable[Number] = aliasFor(__js_force)
  var identifier: Number = aliasFor(__js_identifier)
  var pageX: Nullable[Number] = aliasFor(__js_pageX)
  var pageY: Nullable[Number] = aliasFor(__js_pageY)
  var radiusX: Nullable[Number] = aliasFor(__js_radiusX)
  var radiusY: Nullable[Number] = aliasFor(__js_radiusY)
  var rotationAngle: Nullable[Number] = aliasFor(__js_rotationAngle)
  var screenX: Nullable[Number] = aliasFor(__js_screenX)
  var screenY: Nullable[Number] = aliasFor(__js_screenY)
  var target: EventTarget = aliasFor(__js_target)
  var touchType: Nullable[TouchType] = aliasFor(__js_touchType)
}
export interface TrackEventInit extends EventInit {
  var track: Nullable[Union[TextTrack, Null]] = aliasFor(__js_track)
}
export interface TransitionEventInit extends EventInit {
  var elapsedTime: Nullable[Number] = aliasFor(__js_elapsedTime)
  var propertyName: Nullable[String] = aliasFor(__js_propertyName)
  var pseudoElement: Nullable[String] = aliasFor(__js_pseudoElement)
}
export interface UIEventInit extends EventInit {
  var detail: Nullable[Number] = aliasFor(__js_detail)
  var view: Nullable[Union[Window, Null]] = aliasFor(__js_view)
}
export interface ULongRange {
  var max: Nullable[Number] = aliasFor(__js_max)
  var min: Nullable[Number] = aliasFor(__js_min)
}
export interface UnderlyingByteSource {
  var autoAllocateChunkSize: Nullable[Number] = aliasFor(__js_autoAllocateChunkSize)
  var cancel: Nullable[UnderlyingSourceCancelCallback] = aliasFor(__js_cancel)
  var pull: Nullable[function(controller: ReadableByteStreamController): Any] = aliasFor(__js_pull)
  var start: Nullable[function(controller: ReadableByteStreamController): Any] = aliasFor(__js_start)
  var type: _SStringbytes = aliasFor(__js_type)
}
export interface ValidityStateFlags {
  var badInput: Nullable[Bool] = aliasFor(__js_badInput)
  var customError: Nullable[Bool] = aliasFor(__js_customError)
  var patternMismatch: Nullable[Bool] = aliasFor(__js_patternMismatch)
  var rangeOverflow: Nullable[Bool] = aliasFor(__js_rangeOverflow)
  var rangeUnderflow: Nullable[Bool] = aliasFor(__js_rangeUnderflow)
  var stepMismatch: Nullable[Bool] = aliasFor(__js_stepMismatch)
  var tooLong: Nullable[Bool] = aliasFor(__js_tooLong)
  var tooShort: Nullable[Bool] = aliasFor(__js_tooShort)
  var typeMismatch: Nullable[Bool] = aliasFor(__js_typeMismatch)
  var valueMissing: Nullable[Bool] = aliasFor(__js_valueMissing)
}
export interface VideoColorSpaceInit {
  var fullRange: Nullable[Union[Bool, Null]] = aliasFor(__js_fullRange)
  var matrix: Nullable[Union[VideoMatrixCoefficients, Null]] = aliasFor(__js_matrix)
  var primaries: Nullable[Union[VideoColorPrimaries, Null]] = aliasFor(__js_primaries)
  var transfer: Nullable[Union[VideoTransferCharacteristics, Null]] = aliasFor(__js_transfer)
}
export interface VideoConfiguration {
  var bitrate: Number = aliasFor(__js_bitrate)
  var colorGamut: Nullable[ColorGamut] = aliasFor(__js_colorGamut)
  var contentType: String = aliasFor(__js_contentType)
  var framerate: Number = aliasFor(__js_framerate)
  var hdrMetadataType: Nullable[HdrMetadataType] = aliasFor(__js_hdrMetadataType)
  var height: Number = aliasFor(__js_height)
  var scalabilityMode: Nullable[String] = aliasFor(__js_scalabilityMode)
  var transferFunction: Nullable[TransferFunction] = aliasFor(__js_transferFunction)
  var width: Number = aliasFor(__js_width)
}
export interface VideoDecoderConfig {
  var codec: String = aliasFor(__js_codec)
  var codedHeight: Nullable[Number] = aliasFor(__js_codedHeight)
  var codedWidth: Nullable[Number] = aliasFor(__js_codedWidth)
  var colorSpace: Nullable[VideoColorSpaceInit] = aliasFor(__js_colorSpace)
  var description: Nullable[AllowSharedBufferSource] = aliasFor(__js_description)
  var displayAspectHeight: Nullable[Number] = aliasFor(__js_displayAspectHeight)
  var displayAspectWidth: Nullable[Number] = aliasFor(__js_displayAspectWidth)
  var hardwareAcceleration: Nullable[HardwareAcceleration] = aliasFor(__js_hardwareAcceleration)
  var optimizeForLatency: Nullable[Bool] = aliasFor(__js_optimizeForLatency)
}
export interface VideoDecoderInit {
  var error: WebCodecsErrorCallback = aliasFor(__js_error)
  var output: VideoFrameOutputCallback = aliasFor(__js_output)
}
export interface VideoDecoderSupport {
  var config: Nullable[VideoDecoderConfig] = aliasFor(__js_config)
  var supported: Nullable[Bool] = aliasFor(__js_supported)
}
export interface VideoEncoderConfig {
  var alpha: Nullable[AlphaOption] = aliasFor(__js_alpha)
  var avc: Nullable[AvcEncoderConfig] = aliasFor(__js_avc)
  var bitrate: Nullable[Number] = aliasFor(__js_bitrate)
  var bitrateMode: Nullable[VideoEncoderBitrateMode] = aliasFor(__js_bitrateMode)
  var codec: String = aliasFor(__js_codec)
  var displayHeight: Nullable[Number] = aliasFor(__js_displayHeight)
  var displayWidth: Nullable[Number] = aliasFor(__js_displayWidth)
  var framerate: Nullable[Number] = aliasFor(__js_framerate)
  var hardwareAcceleration: Nullable[HardwareAcceleration] = aliasFor(__js_hardwareAcceleration)
  var height: Number = aliasFor(__js_height)
  var latencyMode: Nullable[LatencyMode] = aliasFor(__js_latencyMode)
  var scalabilityMode: Nullable[String] = aliasFor(__js_scalabilityMode)
  var width: Number = aliasFor(__js_width)
}
export interface VideoEncoderEncodeOptions {
  var keyFrame: Nullable[Bool] = aliasFor(__js_keyFrame)
}
export interface VideoEncoderInit {
  var error: WebCodecsErrorCallback = aliasFor(__js_error)
  var output: EncodedVideoChunkOutputCallback = aliasFor(__js_output)
}
export interface VideoEncoderSupport {
  var config: Nullable[VideoEncoderConfig] = aliasFor(__js_config)
  var supported: Nullable[Bool] = aliasFor(__js_supported)
}
export interface VideoFrameBufferInit {
  var codedHeight: Number = aliasFor(__js_codedHeight)
  var codedWidth: Number = aliasFor(__js_codedWidth)
  var colorSpace: Nullable[VideoColorSpaceInit] = aliasFor(__js_colorSpace)
  var displayHeight: Nullable[Number] = aliasFor(__js_displayHeight)
  var displayWidth: Nullable[Number] = aliasFor(__js_displayWidth)
  var duration: Nullable[Number] = aliasFor(__js_duration)
  var format: VideoPixelFormat = aliasFor(__js_format)
  var layout: Nullable[List[PlaneLayout]] = aliasFor(__js_layout)
  var timestamp: Number = aliasFor(__js_timestamp)
  var visibleRect: Nullable[DOMRectInit] = aliasFor(__js_visibleRect)
}
export interface VideoFrameCallbackMetadata {
  var captureTime: Nullable[DOMHighResTimeStamp] = aliasFor(__js_captureTime)
  var expectedDisplayTime: DOMHighResTimeStamp = aliasFor(__js_expectedDisplayTime)
  var height: Number = aliasFor(__js_height)
  var mediaTime: Number = aliasFor(__js_mediaTime)
  var presentationTime: DOMHighResTimeStamp = aliasFor(__js_presentationTime)
  var presentedFrames: Number = aliasFor(__js_presentedFrames)
  var processingDuration: Nullable[Number] = aliasFor(__js_processingDuration)
  var receiveTime: Nullable[DOMHighResTimeStamp] = aliasFor(__js_receiveTime)
  var rtpTimestamp: Nullable[Number] = aliasFor(__js_rtpTimestamp)
  var width: Number = aliasFor(__js_width)
}
export interface VideoFrameCopyToOptions {
  var layout: Nullable[List[PlaneLayout]] = aliasFor(__js_layout)
  var rect: Nullable[DOMRectInit] = aliasFor(__js_rect)
}
export interface VideoFrameInit {
  var alpha: Nullable[AlphaOption] = aliasFor(__js_alpha)
  var displayHeight: Nullable[Number] = aliasFor(__js_displayHeight)
  var displayWidth: Nullable[Number] = aliasFor(__js_displayWidth)
  var duration: Nullable[Number] = aliasFor(__js_duration)
  var timestamp: Nullable[Number] = aliasFor(__js_timestamp)
  var visibleRect: Nullable[DOMRectInit] = aliasFor(__js_visibleRect)
}
export interface WaveShaperOptions extends AudioNodeOptions {
  var curve: Nullable[Union[List[Number], Float32Array]] = aliasFor(__js_curve)
  var oversample: Nullable[OverSampleType] = aliasFor(__js_oversample)
}
export interface WebGLContextAttributes {
  var alpha: Nullable[Bool] = aliasFor(__js_alpha)
  var antialias: Nullable[Bool] = aliasFor(__js_antialias)
  var depth: Nullable[Bool] = aliasFor(__js_depth)
  var desynchronized: Nullable[Bool] = aliasFor(__js_desynchronized)
  var failIfMajorPerformanceCaveat: Nullable[Bool] = aliasFor(__js_failIfMajorPerformanceCaveat)
  var powerPreference: Nullable[WebGLPowerPreference] = aliasFor(__js_powerPreference)
  var premultipliedAlpha: Nullable[Bool] = aliasFor(__js_premultipliedAlpha)
  var preserveDrawingBuffer: Nullable[Bool] = aliasFor(__js_preserveDrawingBuffer)
  var stencil: Nullable[Bool] = aliasFor(__js_stencil)
}
export interface WebGLContextEventInit extends EventInit {
  var statusMessage: Nullable[String] = aliasFor(__js_statusMessage)
}
export interface WebTransportCloseInfo {
  var closeCode: Nullable[Number] = aliasFor(__js_closeCode)
  var reason: Nullable[String] = aliasFor(__js_reason)
}
export interface WebTransportErrorOptions {
  var source: Nullable[WebTransportErrorSource] = aliasFor(__js_source)
  var streamErrorCode: Nullable[Union[Number, Null]] = aliasFor(__js_streamErrorCode)
}
export interface WebTransportHash {
  var algorithm: Nullable[String] = aliasFor(__js_algorithm)
  var value: Nullable[BufferSource] = aliasFor(__js_value)
}
export interface WebTransportOptions {
  var allowPooling: Nullable[Bool] = aliasFor(__js_allowPooling)
  var congestionControl: Nullable[WebTransportCongestionControl] = aliasFor(__js_congestionControl)
  var requireUnreliable: Nullable[Bool] = aliasFor(__js_requireUnreliable)
  var serverCertificateHashes: Nullable[List[WebTransportHash]] = aliasFor(__js_serverCertificateHashes)
}
export interface WebTransportSendStreamOptions {
  var sendOrder: Nullable[Number] = aliasFor(__js_sendOrder)
}
export interface WheelEventInit extends MouseEventInit {
  var deltaMode: Nullable[Number] = aliasFor(__js_deltaMode)
  var deltaX: Nullable[Number] = aliasFor(__js_deltaX)
  var deltaY: Nullable[Number] = aliasFor(__js_deltaY)
  var deltaZ: Nullable[Number] = aliasFor(__js_deltaZ)
}
export interface WindowPostMessageOptions extends StructuredSerializeOptions {
  var targetOrigin: Nullable[String] = aliasFor(__js_targetOrigin)
}
export interface WorkerOptions {
  var credentials: Nullable[RequestCredentials] = aliasFor(__js_credentials)
  var name: Nullable[String] = aliasFor(__js_name)
  var type: Nullable[WorkerType] = aliasFor(__js_type)
}
export interface WorkletOptions {
  var credentials: Nullable[RequestCredentials] = aliasFor(__js_credentials)
}
export interface WriteParams {
  var data: Nullable[Union[BufferSource, Blob, String, Null]] = aliasFor(__js_data)
  var position: Nullable[Union[Number, Null]] = aliasFor(__js_position)
  var size: Nullable[Union[Number, Null]] = aliasFor(__js_size)
  var type: WriteCommandType = aliasFor(__js_type)
}
export interface NodeFilter {
  static {
    aliasFor(native "NodeFilter")
    const FILTER_ACCEPT: Number = aliasFor(__js_FILTER_ACCEPT)
    const FILTER_REJECT: Number = aliasFor(__js_FILTER_REJECT)
    const FILTER_SKIP: Number = aliasFor(__js_FILTER_SKIP)
    const SHOW_ALL: Number = aliasFor(__js_SHOW_ALL)
    const SHOW_ELEMENT: Number = aliasFor(__js_SHOW_ELEMENT)
    const SHOW_ATTRIBUTE: Number = aliasFor(__js_SHOW_ATTRIBUTE)
    const SHOW_TEXT: Number = aliasFor(__js_SHOW_TEXT)
    const SHOW_CDATA_SECTION: Number = aliasFor(__js_SHOW_CDATA_SECTION)
    const SHOW_ENTITY_REFERENCE: Number = aliasFor(__js_SHOW_ENTITY_REFERENCE)
    const SHOW_ENTITY: Number = aliasFor(__js_SHOW_ENTITY)
    const SHOW_PROCESSING_INSTRUCTION: Number = aliasFor(__js_SHOW_PROCESSING_INSTRUCTION)
    const SHOW_COMMENT: Number = aliasFor(__js_SHOW_COMMENT)
    const SHOW_DOCUMENT: Number = aliasFor(__js_SHOW_DOCUMENT)
    const SHOW_DOCUMENT_TYPE: Number = aliasFor(__js_SHOW_DOCUMENT_TYPE)
    const SHOW_DOCUMENT_FRAGMENT: Number = aliasFor(__js_SHOW_DOCUMENT_FRAGMENT)
    const SHOW_NOTATION: Number = aliasFor(__js_SHOW_NOTATION)
  }
}
export interface ANGLE_instanced_arrays {
  function drawArraysInstancedANGLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/drawArraysInstancedANGLE)
    """
    aliasFor(__js_drawArraysInstancedANGLE)
  }
  function drawElementsInstancedANGLE(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, primcount: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/drawElementsInstancedANGLE)
    """
    aliasFor(__js_drawElementsInstancedANGLE)
  }
  function vertexAttribDivisorANGLE(index: GLuint, divisor: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/vertexAttribDivisorANGLE)
    """
    aliasFor(__js_vertexAttribDivisorANGLE)
  }
  const VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE)
}
export interface ARIAMixin {
  var ariaAtomic: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAtomic)
  """ = aliasFor(__js_ariaAtomic)
  var ariaAutoComplete: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAutoComplete)
  """ = aliasFor(__js_ariaAutoComplete)
  var ariaBusy: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBusy)
  """ = aliasFor(__js_ariaBusy)
  var ariaChecked: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaChecked)
  """ = aliasFor(__js_ariaChecked)
  var ariaColCount: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColCount)
  """ = aliasFor(__js_ariaColCount)
  var ariaColIndex: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndex)
  """ = aliasFor(__js_ariaColIndex)
  var ariaColSpan: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColSpan)
  """ = aliasFor(__js_ariaColSpan)
  var ariaCurrent: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaCurrent)
  """ = aliasFor(__js_ariaCurrent)
  var ariaDescription: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDescription)
  """ = aliasFor(__js_ariaDescription)
  var ariaDisabled: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDisabled)
  """ = aliasFor(__js_ariaDisabled)
  var ariaExpanded: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaExpanded)
  """ = aliasFor(__js_ariaExpanded)
  var ariaHasPopup: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHasPopup)
  """ = aliasFor(__js_ariaHasPopup)
  var ariaHidden: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHidden)
  """ = aliasFor(__js_ariaHidden)
  var ariaInvalid: Union[String, Null] = aliasFor(__js_ariaInvalid)
  var ariaKeyShortcuts: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaKeyShortcuts)
  """ = aliasFor(__js_ariaKeyShortcuts)
  var ariaLabel: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLabel)
  """ = aliasFor(__js_ariaLabel)
  var ariaLevel: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLevel)
  """ = aliasFor(__js_ariaLevel)
  var ariaLive: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLive)
  """ = aliasFor(__js_ariaLive)
  var ariaModal: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaModal)
  """ = aliasFor(__js_ariaModal)
  var ariaMultiLine: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiLine)
  """ = aliasFor(__js_ariaMultiLine)
  var ariaMultiSelectable: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiSelectable)
  """ = aliasFor(__js_ariaMultiSelectable)
  var ariaOrientation: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaOrientation)
  """ = aliasFor(__js_ariaOrientation)
  var ariaPlaceholder: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPlaceholder)
  """ = aliasFor(__js_ariaPlaceholder)
  var ariaPosInSet: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPosInSet)
  """ = aliasFor(__js_ariaPosInSet)
  var ariaPressed: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPressed)
  """ = aliasFor(__js_ariaPressed)
  var ariaReadOnly: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaReadOnly)
  """ = aliasFor(__js_ariaReadOnly)
  var ariaRequired: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRequired)
  """ = aliasFor(__js_ariaRequired)
  var ariaRoleDescription: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRoleDescription)
  """ = aliasFor(__js_ariaRoleDescription)
  var ariaRowCount: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowCount)
  """ = aliasFor(__js_ariaRowCount)
  var ariaRowIndex: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndex)
  """ = aliasFor(__js_ariaRowIndex)
  var ariaRowSpan: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowSpan)
  """ = aliasFor(__js_ariaRowSpan)
  var ariaSelected: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSelected)
  """ = aliasFor(__js_ariaSelected)
  var ariaSetSize: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSetSize)
  """ = aliasFor(__js_ariaSetSize)
  var ariaSort: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSort)
  """ = aliasFor(__js_ariaSort)
  var ariaValueMax: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMax)
  """ = aliasFor(__js_ariaValueMax)
  var ariaValueMin: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMin)
  """ = aliasFor(__js_ariaValueMin)
  var ariaValueNow: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueNow)
  """ = aliasFor(__js_ariaValueNow)
  var ariaValueText: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueText)
  """ = aliasFor(__js_ariaValueText)
  var role: Union[String, Null] = aliasFor(__js_role)
}
export interface AbortController {
  """
  A controller object that allows you to abort one or more DOM requests as and when desired.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController)
  """
  static {
    aliasFor(native "AbortController")
    var prototype: AbortController = aliasFor(__js_prototype)
    function new(): AbortController { aliasFor(__op_new__) }
  }
  const signal: AbortSignal """
  Returns the AbortSignal object associated with this object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController/signal)
  """ = aliasFor(__js_signal)
  function abort(reason: Any): Any {
    """
    Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController/abort)
    """
    aliasFor(__js_abort)
  }
  function abort(): Any { aliasFor(__js_abort) }
}
export interface AbortSignalEventMap {
}
export interface AbortSignal extends EventTarget {
  """
  A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal)
  """
  static {
    aliasFor(native "AbortSignal")
    var prototype: AbortSignal = aliasFor(__js_prototype)
    function new(): AbortSignal { aliasFor(__op_new__) }
    function abort(reason: Any): AbortSignal {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_static)
      """
      aliasFor(__js_abort)
    }
    function abort(): AbortSignal { aliasFor(__js_abort) }
    function timeout(milliseconds: Number): AbortSignal {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/timeout_static)
      """
      aliasFor(__js_timeout)
    }
  }
  const aborted: Bool """
  Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)
  """ = aliasFor(__js_aborted)
  var onabort: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event)
  """ = aliasFor(__js_onabort)
  const reason: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason)
  """ = aliasFor(__js_reason)
  function throwIfAborted(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/throwIfAborted)
    """
    aliasFor(__js_throwIfAborted)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface AbstractRange {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange)
  """
  static {
    aliasFor(native "AbstractRange")
    var prototype: AbstractRange = aliasFor(__js_prototype)
    function new(): AbstractRange { aliasFor(__op_new__) }
  }
  const collapsed: Bool """
  Returns true if range is collapsed, and false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/collapsed)
  """ = aliasFor(__js_collapsed)
  const endContainer: Node """
  Returns range's end node.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/endContainer)
  """ = aliasFor(__js_endContainer)
  const endOffset: Number """
  Returns range's end offset.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/endOffset)
  """ = aliasFor(__js_endOffset)
  const startContainer: Node """
  Returns range's start node.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/startContainer)
  """ = aliasFor(__js_startContainer)
  const startOffset: Number """
  Returns range's start offset.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/startOffset)
  """ = aliasFor(__js_startOffset)
}
export interface AbstractWorkerEventMap {
}
export interface AbstractWorker {
  var onerror: Union[function(ev: ErrorEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/error_event)
  """ = aliasFor(__js_onerror)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface AnalyserNode extends AudioNode {
  """
  A node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode)
  """
  static {
    aliasFor(native "AnalyserNode")
    var prototype: AnalyserNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: AnalyserOptions): AnalyserNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): AnalyserNode { aliasFor(__op_new__) }
  }
  var fftSize: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/fftSize)
  """ = aliasFor(__js_fftSize)
  const frequencyBinCount: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/frequencyBinCount)
  """ = aliasFor(__js_frequencyBinCount)
  var maxDecibels: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/maxDecibels)
  """ = aliasFor(__js_maxDecibels)
  var minDecibels: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/minDecibels)
  """ = aliasFor(__js_minDecibels)
  var smoothingTimeConstant: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/smoothingTimeConstant)
  """ = aliasFor(__js_smoothingTimeConstant)
  function getByteFrequencyData(array: Uint8Array): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getByteFrequencyData)
    """
    aliasFor(__js_getByteFrequencyData)
  }
  function getByteTimeDomainData(array: Uint8Array): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getByteTimeDomainData)
    """
    aliasFor(__js_getByteTimeDomainData)
  }
  function getFloatFrequencyData(array: Float32Array): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getFloatFrequencyData)
    """
    aliasFor(__js_getFloatFrequencyData)
  }
  function getFloatTimeDomainData(array: Float32Array): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getFloatTimeDomainData)
    """
    aliasFor(__js_getFloatTimeDomainData)
  }
}
export interface Animatable {
  function animate(keyframes: Union[List[Keyframe], PropertyIndexedKeyframes, Null], options: Union[Number, KeyframeAnimationOptions]): Animation {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animate)
    """
    aliasFor(__js_animate)
  }
  function animate(keyframes: Union[List[Keyframe], PropertyIndexedKeyframes, Null]): Animation { aliasFor(__js_animate) }
  function getAnimations(options: GetAnimationsOptions): List[Animation] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAnimations)
    """
    aliasFor(__js_getAnimations)
  }
  function getAnimations(): List[Animation] { aliasFor(__js_getAnimations) }
}
export interface AnimationEventMap {
}
export interface Animation extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation)
  """
  static {
    aliasFor(native "Animation")
    var prototype: Animation = aliasFor(__js_prototype)
    function new(effect: Union[AnimationEffect, Null], timeline: Union[AnimationTimeline, Null]): Animation { aliasFor(__op_new__) }
    function new(effect: Union[AnimationEffect, Null]): Animation { aliasFor(__op_new__) }
    function new(): Animation { aliasFor(__op_new__) }
  }
  var currentTime: Union[CSSNumberish, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/currentTime)
  """ = aliasFor(__js_currentTime)
  var effect: Union[AnimationEffect, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/effect)
  """ = aliasFor(__js_effect)
  const finished: Promise[Animation] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/finished)
  """ = aliasFor(__js_finished)
  var id: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/id)
  """ = aliasFor(__js_id)
  var oncancel: Union[function(ev: AnimationPlaybackEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/cancel_event)
  """ = aliasFor(__js_oncancel)
  var onfinish: Union[function(ev: AnimationPlaybackEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/finish_event)
  """ = aliasFor(__js_onfinish)
  var onremove: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/remove_event)
  """ = aliasFor(__js_onremove)
  const pending: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/pending)
  """ = aliasFor(__js_pending)
  const playState: AnimationPlayState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/playState)
  """ = aliasFor(__js_playState)
  var playbackRate: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/playbackRate)
  """ = aliasFor(__js_playbackRate)
  const ready: Promise[Animation] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/ready)
  """ = aliasFor(__js_ready)
  const replaceState: AnimationReplaceState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/replaceState)
  """ = aliasFor(__js_replaceState)
  var startTime: Union[CSSNumberish, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/startTime)
  """ = aliasFor(__js_startTime)
  var timeline: Union[AnimationTimeline, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/timeline)
  """ = aliasFor(__js_timeline)
  function cancel(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/cancel)
    """
    aliasFor(__js_cancel)
  }
  function commitStyles(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/commitStyles)
    """
    aliasFor(__js_commitStyles)
  }
  function finish(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/finish)
    """
    aliasFor(__js_finish)
  }
  function pause(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/pause)
    """
    aliasFor(__js_pause)
  }
  function persist(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/persist)
    """
    aliasFor(__js_persist)
  }
  function play(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/play)
    """
    aliasFor(__js_play)
  }
  function reverse(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/reverse)
    """
    aliasFor(__js_reverse)
  }
  function updatePlaybackRate(playbackRate: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/updatePlaybackRate)
    """
    aliasFor(__js_updatePlaybackRate)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface AnimationEffect {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect)
  """
  static {
    aliasFor(native "AnimationEffect")
    var prototype: AnimationEffect = aliasFor(__js_prototype)
    function new(): AnimationEffect { aliasFor(__op_new__) }
  }
  function getComputedTiming(): ComputedEffectTiming {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect/getComputedTiming)
    """
    aliasFor(__js_getComputedTiming)
  }
  function getTiming(): EffectTiming {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect/getTiming)
    """
    aliasFor(__js_getTiming)
  }
  function updateTiming(timing: OptionalEffectTiming): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect/updateTiming)
    """
    aliasFor(__js_updateTiming)
  }
  function updateTiming(): Any { aliasFor(__js_updateTiming) }
}
export interface AnimationEvent extends Event {
  """
  Events providing information related to animations.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent)
  """
  static {
    aliasFor(native "AnimationEvent")
    var prototype: AnimationEvent = aliasFor(__js_prototype)
    function new(type: String, animationEventInitDict: AnimationEventInit): AnimationEvent { aliasFor(__op_new__) }
    function new(type: String): AnimationEvent { aliasFor(__op_new__) }
  }
  const animationName: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/animationName)
  """ = aliasFor(__js_animationName)
  const elapsedTime: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/elapsedTime)
  """ = aliasFor(__js_elapsedTime)
  const pseudoElement: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/pseudoElement)
  """ = aliasFor(__js_pseudoElement)
}
export interface AnimationFrameProvider {
  function cancelAnimationFrame(handle: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/cancelAnimationFrame)
    """
    aliasFor(__js_cancelAnimationFrame)
  }
  function requestAnimationFrame(callback: FrameRequestCallback): Number {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/requestAnimationFrame)
    """
    aliasFor(__js_requestAnimationFrame)
  }
}
export interface AnimationPlaybackEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent)
  """
  static {
    aliasFor(native "AnimationPlaybackEvent")
    var prototype: AnimationPlaybackEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: AnimationPlaybackEventInit): AnimationPlaybackEvent { aliasFor(__op_new__) }
    function new(type: String): AnimationPlaybackEvent { aliasFor(__op_new__) }
  }
  const currentTime: Union[CSSNumberish, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/currentTime)
  """ = aliasFor(__js_currentTime)
  const timelineTime: Union[CSSNumberish, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/timelineTime)
  """ = aliasFor(__js_timelineTime)
}
export interface AnimationTimeline {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationTimeline)
  """
  static {
    aliasFor(native "AnimationTimeline")
    var prototype: AnimationTimeline = aliasFor(__js_prototype)
    function new(): AnimationTimeline { aliasFor(__op_new__) }
  }
  const currentTime: Union[CSSNumberish, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationTimeline/currentTime)
  """ = aliasFor(__js_currentTime)
}
export interface Attr extends Node {
  """
  A DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr)
  """
  static {
    aliasFor(native "Attr")
    var prototype: Attr = aliasFor(__js_prototype)
    function new(): Attr { aliasFor(__op_new__) }
  }
  const localName: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/localName)
  """ = aliasFor(__js_localName)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/name)
  """ = aliasFor(__js_name)
  const namespaceURI: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/namespaceURI)
  """ = aliasFor(__js_namespaceURI)
  const ownerDocument: Document = aliasFor(__js_ownerDocument)
  const ownerElement: Union[Element, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/ownerElement)
  """ = aliasFor(__js_ownerElement)
  const prefix: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/prefix)
  """ = aliasFor(__js_prefix)
  var value: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/value)
  """ = aliasFor(__js_value)
}
export interface AudioBuffer {
  """
  A short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer)
  """
  static {
    aliasFor(native "AudioBuffer")
    var prototype: AudioBuffer = aliasFor(__js_prototype)
    function new(options: AudioBufferOptions): AudioBuffer { aliasFor(__op_new__) }
  }
  const duration: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/duration)
  """ = aliasFor(__js_duration)
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/length)
  """ = aliasFor(__js_length)
  const numberOfChannels: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/numberOfChannels)
  """ = aliasFor(__js_numberOfChannels)
  const sampleRate: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/sampleRate)
  """ = aliasFor(__js_sampleRate)
  function copyFromChannel(destination: Float32Array, channelNumber: Number, bufferOffset: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/copyFromChannel)
    """
    aliasFor(__js_copyFromChannel)
  }
  function copyFromChannel(destination: Float32Array, channelNumber: Number): Any { aliasFor(__js_copyFromChannel) }
  function copyToChannel(source: Float32Array, channelNumber: Number, bufferOffset: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/copyToChannel)
    """
    aliasFor(__js_copyToChannel)
  }
  function copyToChannel(source: Float32Array, channelNumber: Number): Any { aliasFor(__js_copyToChannel) }
  function getChannelData(channel: Number): Float32Array {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/getChannelData)
    """
    aliasFor(__js_getChannelData)
  }
}
export interface AudioBufferSourceNode extends AudioScheduledSourceNode {
  """
  An AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It's especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode)
  """
  static {
    aliasFor(native "AudioBufferSourceNode")
    var prototype: AudioBufferSourceNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: AudioBufferSourceOptions): AudioBufferSourceNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): AudioBufferSourceNode { aliasFor(__op_new__) }
  }
  var buffer: Union[AudioBuffer, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/buffer)
  """ = aliasFor(__js_buffer)
  const detune: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/detune)
  """ = aliasFor(__js_detune)
  var loop: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loop)
  """ = aliasFor(__js_loop)
  var loopEnd: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopEnd)
  """ = aliasFor(__js_loopEnd)
  var loopStart: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopStart)
  """ = aliasFor(__js_loopStart)
  const playbackRate: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/playbackRate)
  """ = aliasFor(__js_playbackRate)
  function start(when: Number, offset: Number, duration: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/start)
    """
    aliasFor(__js_start)
  }
  function start(when: Number, offset: Number): Any { aliasFor(__js_start) }
  function start(when: Number): Any { aliasFor(__js_start) }
  function start(): Any { aliasFor(__js_start) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface AudioContext extends BaseAudioContext {
  """
  An audio-processing graph built from audio modules linked together, each represented by an AudioNode.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext)
  """
  static {
    aliasFor(native "AudioContext")
    var prototype: AudioContext = aliasFor(__js_prototype)
    function new(contextOptions: AudioContextOptions): AudioContext { aliasFor(__op_new__) }
    function new(): AudioContext { aliasFor(__op_new__) }
  }
  const baseLatency: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/baseLatency)
  """ = aliasFor(__js_baseLatency)
  const outputLatency: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/outputLatency)
  """ = aliasFor(__js_outputLatency)
  function close(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/close)
    """
    aliasFor(__js_close)
  }
  function createMediaElementSource(mediaElement: HTMLMediaElement): MediaElementAudioSourceNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaElementSource)
    """
    aliasFor(__js_createMediaElementSource)
  }
  function createMediaStreamDestination(): MediaStreamAudioDestinationNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaStreamDestination)
    """
    aliasFor(__js_createMediaStreamDestination)
  }
  function createMediaStreamSource(mediaStream: MediaStream): MediaStreamAudioSourceNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaStreamSource)
    """
    aliasFor(__js_createMediaStreamSource)
  }
  function getOutputTimestamp(): AudioTimestamp {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/getOutputTimestamp)
    """
    aliasFor(__js_getOutputTimestamp)
  }
  function resume(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/resume)
    """
    aliasFor(__js_resume)
  }
  function suspend(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/suspend)
    """
    aliasFor(__js_suspend)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface AudioDestinationNode extends AudioNode {
  """
  AudioDestinationNode has no output (as it is the output, no more AudioNode can be linked after it in the audio graph) and one input. The number of channels in the input must be between 0 and the maxChannelCount value or an exception is raised.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode)
  """
  static {
    aliasFor(native "AudioDestinationNode")
    var prototype: AudioDestinationNode = aliasFor(__js_prototype)
    function new(): AudioDestinationNode { aliasFor(__op_new__) }
  }
  const maxChannelCount: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode/maxChannelCount)
  """ = aliasFor(__js_maxChannelCount)
}
export interface AudioListener {
  """
  The position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener)
  """
  static {
    aliasFor(native "AudioListener")
    var prototype: AudioListener = aliasFor(__js_prototype)
    function new(): AudioListener { aliasFor(__op_new__) }
  }
  const forwardX: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardX)
  """ = aliasFor(__js_forwardX)
  const forwardY: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardY)
  """ = aliasFor(__js_forwardY)
  const forwardZ: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardZ)
  """ = aliasFor(__js_forwardZ)
  const positionX: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionX)
  """ = aliasFor(__js_positionX)
  const positionY: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionY)
  """ = aliasFor(__js_positionY)
  const positionZ: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionZ)
  """ = aliasFor(__js_positionZ)
  const upX: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upX)
  """ = aliasFor(__js_upX)
  const upY: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upY)
  """ = aliasFor(__js_upY)
  const upZ: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upZ)
  """ = aliasFor(__js_upZ)
}
export interface AudioNode extends EventTarget {
  """
  A generic interface for representing an audio processing module. Examples include:
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode)
  """
  static {
    aliasFor(native "AudioNode")
    var prototype: AudioNode = aliasFor(__js_prototype)
    function new(): AudioNode { aliasFor(__op_new__) }
  }
  var channelCount: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCount)
  """ = aliasFor(__js_channelCount)
  var channelCountMode: ChannelCountMode """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCountMode)
  """ = aliasFor(__js_channelCountMode)
  var channelInterpretation: ChannelInterpretation """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelInterpretation)
  """ = aliasFor(__js_channelInterpretation)
  const context: BaseAudioContext """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/context)
  """ = aliasFor(__js_context)
  const numberOfInputs: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfInputs)
  """ = aliasFor(__js_numberOfInputs)
  const numberOfOutputs: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfOutputs)
  """ = aliasFor(__js_numberOfOutputs)
  function connect(destinationNode: AudioNode, output: Number, input: Number): AudioNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/connect)
    """
    aliasFor(__js_connect)
  }
  function connect(destinationNode: AudioNode, output: Number): AudioNode { aliasFor(__js_connect) }
  function connect(destinationNode: AudioNode): AudioNode { aliasFor(__js_connect) }
  function connect(destinationParam: AudioParam, output: Number): Any { aliasFor(__js_connect) }
  function connect(destinationParam: AudioParam): Any { aliasFor(__js_connect) }
  function disconnect(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)
    """
    aliasFor(__js_disconnect)
  }
  function disconnect(output: Number): Any { aliasFor(__js_disconnect) }
  function disconnect(destinationNode: AudioNode): Any { aliasFor(__js_disconnect) }
  function disconnect(destinationNode: AudioNode, output: Number): Any { aliasFor(__js_disconnect) }
  function disconnect(destinationNode: AudioNode, output: Number, input: Number): Any { aliasFor(__js_disconnect) }
  function disconnect(destinationParam: AudioParam): Any { aliasFor(__js_disconnect) }
  function disconnect(destinationParam: AudioParam, output: Number): Any { aliasFor(__js_disconnect) }
}
export interface AudioParam {
  """
  The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam)
  """
  static {
    aliasFor(native "AudioParam")
    var prototype: AudioParam = aliasFor(__js_prototype)
    function new(): AudioParam { aliasFor(__op_new__) }
  }
  var automationRate: AutomationRate """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/automationRate)
  """ = aliasFor(__js_automationRate)
  const defaultValue: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/defaultValue)
  """ = aliasFor(__js_defaultValue)
  const maxValue: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/maxValue)
  """ = aliasFor(__js_maxValue)
  const minValue: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/minValue)
  """ = aliasFor(__js_minValue)
  var value: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/value)
  """ = aliasFor(__js_value)
  function cancelAndHoldAtTime(cancelTime: Number): AudioParam {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/cancelAndHoldAtTime)
    """
    aliasFor(__js_cancelAndHoldAtTime)
  }
  function cancelScheduledValues(cancelTime: Number): AudioParam {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/cancelScheduledValues)
    """
    aliasFor(__js_cancelScheduledValues)
  }
  function exponentialRampToValueAtTime(value: Number, endTime: Number): AudioParam {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/exponentialRampToValueAtTime)
    """
    aliasFor(__js_exponentialRampToValueAtTime)
  }
  function linearRampToValueAtTime(value: Number, endTime: Number): AudioParam {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/linearRampToValueAtTime)
    """
    aliasFor(__js_linearRampToValueAtTime)
  }
  function setTargetAtTime(target: Number, startTime: Number, timeConstant: Number): AudioParam {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/setTargetAtTime)
    """
    aliasFor(__js_setTargetAtTime)
  }
  function setValueAtTime(value: Number, startTime: Number): AudioParam {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/setValueAtTime)
    """
    aliasFor(__js_setValueAtTime)
  }
  function setValueCurveAtTime(values: Union[List[Number], Float32Array], startTime: Number, duration: Number): AudioParam {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/setValueCurveAtTime)
    """
    aliasFor(__js_setValueCurveAtTime)
  }
}
export interface AudioParamMap {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParamMap)
  """
  static {
    aliasFor(native "AudioParamMap")
    var prototype: AudioParamMap = aliasFor(__js_prototype)
    function new(): AudioParamMap { aliasFor(__op_new__) }
  }
  function forEach(callbackfn: function(value: AudioParam, key: String, parent: AudioParamMap): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: AudioParam, key: String, parent: AudioParamMap): Any): Any { aliasFor(__js_forEach) }
}
export interface AudioProcessingEvent extends Event {
  """
  @deprecated
  """
  static {
    aliasFor(native "AudioProcessingEvent")
    var prototype: AudioProcessingEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent { aliasFor(__op_new__) }
  }
}
export interface AudioScheduledSourceNodeEventMap {
}
export interface AudioScheduledSourceNode extends AudioNode {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode)
  """
  static {
    aliasFor(native "AudioScheduledSourceNode")
    var prototype: AudioScheduledSourceNode = aliasFor(__js_prototype)
    function new(): AudioScheduledSourceNode { aliasFor(__op_new__) }
  }
  var onended: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/ended_event)
  """ = aliasFor(__js_onended)
  function start(when: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/start)
    """
    aliasFor(__js_start)
  }
  function start(): Any { aliasFor(__js_start) }
  function stop(when: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/stop)
    """
    aliasFor(__js_stop)
  }
  function stop(): Any { aliasFor(__js_stop) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface AudioWorklet extends Worklet {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorklet)
  """
  static {
    aliasFor(native "AudioWorklet")
    var prototype: AudioWorklet = aliasFor(__js_prototype)
    function new(): AudioWorklet { aliasFor(__op_new__) }
  }
}
export interface AudioWorkletNodeEventMap {
}
export interface AudioWorkletNode extends AudioNode {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode)
  """
  static {
    aliasFor(native "AudioWorkletNode")
    var prototype: AudioWorkletNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, name: String, options: AudioWorkletNodeOptions): AudioWorkletNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext, name: String): AudioWorkletNode { aliasFor(__op_new__) }
  }
  var onprocessorerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/processorerror_event)
  """ = aliasFor(__js_onprocessorerror)
  const parameters: AudioParamMap """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/parameters)
  """ = aliasFor(__js_parameters)
  const port: MessagePort """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/port)
  """ = aliasFor(__js_port)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface AuthenticatorAssertionResponse extends AuthenticatorResponse {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse)
  """
  static {
    aliasFor(native "AuthenticatorAssertionResponse")
    var prototype: AuthenticatorAssertionResponse = aliasFor(__js_prototype)
    function new(): AuthenticatorAssertionResponse { aliasFor(__op_new__) }
  }
  const authenticatorData: ArrayBuffer """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/authenticatorData)
  """ = aliasFor(__js_authenticatorData)
  const signature: ArrayBuffer """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/signature)
  """ = aliasFor(__js_signature)
  const userHandle: Union[ArrayBuffer, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/userHandle)
  """ = aliasFor(__js_userHandle)
}
export interface AuthenticatorAttestationResponse extends AuthenticatorResponse {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse)
  """
  static {
    aliasFor(native "AuthenticatorAttestationResponse")
    var prototype: AuthenticatorAttestationResponse = aliasFor(__js_prototype)
    function new(): AuthenticatorAttestationResponse { aliasFor(__op_new__) }
  }
  const attestationObject: ArrayBuffer """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/attestationObject)
  """ = aliasFor(__js_attestationObject)
  function getAuthenticatorData(): ArrayBuffer {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getAuthenticatorData)
    """
    aliasFor(__js_getAuthenticatorData)
  }
  function getPublicKey(): Union[ArrayBuffer, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getPublicKey)
    """
    aliasFor(__js_getPublicKey)
  }
  function getPublicKeyAlgorithm(): COSEAlgorithmIdentifier {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getPublicKeyAlgorithm)
    """
    aliasFor(__js_getPublicKeyAlgorithm)
  }
  function getTransports(): List[String] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getTransports)
    """
    aliasFor(__js_getTransports)
  }
}
export interface AuthenticatorResponse {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse)
  """
  static {
    aliasFor(native "AuthenticatorResponse")
    var prototype: AuthenticatorResponse = aliasFor(__js_prototype)
    function new(): AuthenticatorResponse { aliasFor(__op_new__) }
  }
  const clientDataJSON: ArrayBuffer """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse/clientDataJSON)
  """ = aliasFor(__js_clientDataJSON)
}
export interface BarProp {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BarProp)
  """
  static {
    aliasFor(native "BarProp")
    var prototype: BarProp = aliasFor(__js_prototype)
    function new(): BarProp { aliasFor(__op_new__) }
  }
  const visible: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BarProp/visible)
  """ = aliasFor(__js_visible)
}
export interface BaseAudioContextEventMap {
}
export interface BaseAudioContext extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext)
  """
  static {
    aliasFor(native "BaseAudioContext")
    var prototype: BaseAudioContext = aliasFor(__js_prototype)
    function new(): BaseAudioContext { aliasFor(__op_new__) }
  }
  const audioWorklet: AudioWorklet """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/audioWorklet)
  """ = aliasFor(__js_audioWorklet)
  const currentTime: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/currentTime)
  """ = aliasFor(__js_currentTime)
  const destination: AudioDestinationNode """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/destination)
  """ = aliasFor(__js_destination)
  const listener: AudioListener """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/listener)
  """ = aliasFor(__js_listener)
  var onstatechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/statechange_event)
  """ = aliasFor(__js_onstatechange)
  const sampleRate: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/sampleRate)
  """ = aliasFor(__js_sampleRate)
  const state: AudioContextState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/state)
  """ = aliasFor(__js_state)
  function createAnalyser(): AnalyserNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createAnalyser)
    """
    aliasFor(__js_createAnalyser)
  }
  function createBiquadFilter(): BiquadFilterNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBiquadFilter)
    """
    aliasFor(__js_createBiquadFilter)
  }
  function createBuffer(numberOfChannels: Number, length: Number, sampleRate: Number): AudioBuffer {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBuffer)
    """
    aliasFor(__js_createBuffer)
  }
  function createBufferSource(): AudioBufferSourceNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBufferSource)
    """
    aliasFor(__js_createBufferSource)
  }
  function createChannelMerger(numberOfInputs: Number): ChannelMergerNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createChannelMerger)
    """
    aliasFor(__js_createChannelMerger)
  }
  function createChannelMerger(): ChannelMergerNode { aliasFor(__js_createChannelMerger) }
  function createChannelSplitter(numberOfOutputs: Number): ChannelSplitterNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createChannelSplitter)
    """
    aliasFor(__js_createChannelSplitter)
  }
  function createChannelSplitter(): ChannelSplitterNode { aliasFor(__js_createChannelSplitter) }
  function createConstantSource(): ConstantSourceNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createConstantSource)
    """
    aliasFor(__js_createConstantSource)
  }
  function createConvolver(): ConvolverNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createConvolver)
    """
    aliasFor(__js_createConvolver)
  }
  function createDelay(maxDelayTime: Number): DelayNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createDelay)
    """
    aliasFor(__js_createDelay)
  }
  function createDelay(): DelayNode { aliasFor(__js_createDelay) }
  function createDynamicsCompressor(): DynamicsCompressorNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createDynamicsCompressor)
    """
    aliasFor(__js_createDynamicsCompressor)
  }
  function createGain(): GainNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createGain)
    """
    aliasFor(__js_createGain)
  }
  function createIIRFilter(feedforward: List[Number], feedback: List[Number]): IIRFilterNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createIIRFilter)
    """
    aliasFor(__js_createIIRFilter)
  }
  function createOscillator(): OscillatorNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createOscillator)
    """
    aliasFor(__js_createOscillator)
  }
  function createPanner(): PannerNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createPanner)
    """
    aliasFor(__js_createPanner)
  }
  function createPeriodicWave(real: Union[List[Number], Float32Array], imag: Union[List[Number], Float32Array], constraints: PeriodicWaveConstraints): PeriodicWave {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createPeriodicWave)
    """
    aliasFor(__js_createPeriodicWave)
  }
  function createPeriodicWave(real: Union[List[Number], Float32Array], imag: Union[List[Number], Float32Array]): PeriodicWave { aliasFor(__js_createPeriodicWave) }
  function createStereoPanner(): StereoPannerNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createStereoPanner)
    """
    aliasFor(__js_createStereoPanner)
  }
  function createWaveShaper(): WaveShaperNode {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createWaveShaper)
    """
    aliasFor(__js_createWaveShaper)
  }
  function decodeAudioData(audioData: ArrayBuffer, successCallback: Union[DecodeSuccessCallback, Null], errorCallback: Union[DecodeErrorCallback, Null]): Promise[AudioBuffer] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/decodeAudioData)
    """
    aliasFor(__js_decodeAudioData)
  }
  function decodeAudioData(audioData: ArrayBuffer, successCallback: Union[DecodeSuccessCallback, Null]): Promise[AudioBuffer] { aliasFor(__js_decodeAudioData) }
  function decodeAudioData(audioData: ArrayBuffer): Promise[AudioBuffer] { aliasFor(__js_decodeAudioData) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface BeforeUnloadEvent extends Event {
  """
  The beforeunload event is fired when the window, the document and its resources are about to be unloaded.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BeforeUnloadEvent)
  """
  static {
    aliasFor(native "BeforeUnloadEvent")
    var prototype: BeforeUnloadEvent = aliasFor(__js_prototype)
    function new(): BeforeUnloadEvent { aliasFor(__op_new__) }
  }
}
export interface BiquadFilterNode extends AudioNode {
  """
  A simple low-order filter, and is created using the AudioContext.createBiquadFilter() method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode)
  """
  static {
    aliasFor(native "BiquadFilterNode")
    var prototype: BiquadFilterNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: BiquadFilterOptions): BiquadFilterNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): BiquadFilterNode { aliasFor(__op_new__) }
  }
  const Q: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/Q)
  """ = aliasFor(__js_Q)
  const detune: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/detune)
  """ = aliasFor(__js_detune)
  const frequency: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/frequency)
  """ = aliasFor(__js_frequency)
  const gain: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/gain)
  """ = aliasFor(__js_gain)
  var type: BiquadFilterType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/type)
  """ = aliasFor(__js_type)
  function getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/getFrequencyResponse)
    """
    aliasFor(__js_getFrequencyResponse)
  }
}
export interface Blob {
  """
  A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob)
  """
  static {
    aliasFor(native "Blob")
    var prototype: Blob = aliasFor(__js_prototype)
    function new(blobParts: List[BlobPart], options: BlobPropertyBag): Blob { aliasFor(__op_new__) }
    function new(blobParts: List[BlobPart]): Blob { aliasFor(__op_new__) }
    function new(): Blob { aliasFor(__op_new__) }
  }
  const size: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size)
  """ = aliasFor(__js_size)
  const type: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type)
  """ = aliasFor(__js_type)
  function arrayBuffer(): Promise[ArrayBuffer] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/arrayBuffer)
    """
    aliasFor(__js_arrayBuffer)
  }
  function slice(start: Number, end: Number, contentType: String): Blob {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice)
    """
    aliasFor(__js_slice)
  }
  function slice(start: Number, end: Number): Blob { aliasFor(__js_slice) }
  function slice(start: Number): Blob { aliasFor(__js_slice) }
  function slice(): Blob { aliasFor(__js_slice) }
  function stream(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/stream)
    """
    aliasFor(__js_stream)
  }
  function text(): Promise[String] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text)
    """
    aliasFor(__js_text)
  }
}
export interface BlobEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent)
  """
  static {
    aliasFor(native "BlobEvent")
    var prototype: BlobEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: BlobEventInit): BlobEvent { aliasFor(__op_new__) }
  }
  const data: Blob """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent/data)
  """ = aliasFor(__js_data)
  const timecode: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent/timecode)
  """ = aliasFor(__js_timecode)
}
export interface Body {
  const body: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)
  """ = aliasFor(__js_body)
  const bodyUsed: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)
  """ = aliasFor(__js_bodyUsed)
  function arrayBuffer(): Promise[ArrayBuffer] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/arrayBuffer)
    """
    aliasFor(__js_arrayBuffer)
  }
  function blob(): Promise[Blob] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/blob)
    """
    aliasFor(__js_blob)
  }
  function formData(): Promise[FormData] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/formData)
    """
    aliasFor(__js_formData)
  }
  function json(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/json)
    """
    aliasFor(__js_json)
  }
  function text(): Promise[String] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/text)
    """
    aliasFor(__js_text)
  }
}
export interface BroadcastChannelEventMap {
}
export interface BroadcastChannel extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel)
  """
  static {
    aliasFor(native "BroadcastChannel")
    var prototype: BroadcastChannel = aliasFor(__js_prototype)
    function new(name: String): BroadcastChannel { aliasFor(__op_new__) }
  }
  const name: String """
  Returns the channel name (as passed to the constructor).
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/name)
  """ = aliasFor(__js_name)
  var onmessage: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/message_event)
  """ = aliasFor(__js_onmessage)
  var onmessageerror: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/messageerror_event)
  """ = aliasFor(__js_onmessageerror)
  function close(): Any {
    """
    Closes the BroadcastChannel object, opening it up to garbage collection.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/close)
    """
    aliasFor(__js_close)
  }
  function postMessage(message: Any): Any {
    """
    Sends the given message to other BroadcastChannel objects set up for this channel. Messages can be structured objects, e.g. nested objects and arrays.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/postMessage)
    """
    aliasFor(__js_postMessage)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface ByteLengthQueuingStrategy {
  """
  This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy)
  """
  static {
    aliasFor(native "ByteLengthQueuingStrategy")
    var prototype: ByteLengthQueuingStrategy = aliasFor(__js_prototype)
    function new(init: QueuingStrategyInit): ByteLengthQueuingStrategy { aliasFor(__op_new__) }
  }
  const highWaterMark: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/highWaterMark)
  """ = aliasFor(__js_highWaterMark)
  const size: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/size)
  """ = aliasFor(__js_size)
}
export interface CDATASection extends Text {
  """
  A CDATA section that can be used within XML to include extended portions of unescaped text. The symbols < and & don’t need escaping as they normally do when inside a CDATA section.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CDATASection)
  """
  static {
    aliasFor(native "CDATASection")
    var prototype: CDATASection = aliasFor(__js_prototype)
    function new(): CDATASection { aliasFor(__op_new__) }
  }
}
export interface CSSAnimation extends Animation {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSAnimation)
  """
  static {
    aliasFor(native "CSSAnimation")
    var prototype: CSSAnimation = aliasFor(__js_prototype)
    function new(): CSSAnimation { aliasFor(__op_new__) }
  }
  const animationName: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSAnimation/animationName)
  """ = aliasFor(__js_animationName)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface CSSConditionRule extends CSSGroupingRule {
  """
  A single condition CSS at-rule, which consists of a condition and a statement block. It is a child of CSSGroupingRule.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSConditionRule)
  """
  static {
    aliasFor(native "CSSConditionRule")
    var prototype: CSSConditionRule = aliasFor(__js_prototype)
    function new(): CSSConditionRule { aliasFor(__op_new__) }
  }
  const conditionText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSConditionRule/conditionText)
  """ = aliasFor(__js_conditionText)
}
export interface CSSContainerRule extends CSSConditionRule {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule)
  """
  static {
    aliasFor(native "CSSContainerRule")
    var prototype: CSSContainerRule = aliasFor(__js_prototype)
    function new(): CSSContainerRule { aliasFor(__op_new__) }
  }
  const containerName: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerName)
  """ = aliasFor(__js_containerName)
  const containerQuery: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerQuery)
  """ = aliasFor(__js_containerQuery)
}
export interface CSSCounterStyleRule extends CSSRule {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule)
  """
  static {
    aliasFor(native "CSSCounterStyleRule")
    var prototype: CSSCounterStyleRule = aliasFor(__js_prototype)
    function new(): CSSCounterStyleRule { aliasFor(__op_new__) }
  }
  var additiveSymbols: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/additiveSymbols)
  """ = aliasFor(__js_additiveSymbols)
  var fallback: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/fallback)
  """ = aliasFor(__js_fallback)
  var name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/name)
  """ = aliasFor(__js_name)
  var negative: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/negative)
  """ = aliasFor(__js_negative)
  var pad: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/pad)
  """ = aliasFor(__js_pad)
  var prefix: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/prefix)
  """ = aliasFor(__js_prefix)
  var range: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/range)
  """ = aliasFor(__js_range)
  var speakAs: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/speakAs)
  """ = aliasFor(__js_speakAs)
  var suffix: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/suffix)
  """ = aliasFor(__js_suffix)
  var symbols: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/symbols)
  """ = aliasFor(__js_symbols)
  var system: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/system)
  """ = aliasFor(__js_system)
}
export interface CSSFontFaceRule extends CSSRule {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFaceRule)
  """
  static {
    aliasFor(native "CSSFontFaceRule")
    var prototype: CSSFontFaceRule = aliasFor(__js_prototype)
    function new(): CSSFontFaceRule { aliasFor(__op_new__) }
  }
  const style: CSSStyleDeclaration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFaceRule/style)
  """ = aliasFor(__js_style)
}
export interface CSSFontFeatureValuesRule extends CSSRule {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule)
  """
  static {
    aliasFor(native "CSSFontFeatureValuesRule")
    var prototype: CSSFontFeatureValuesRule = aliasFor(__js_prototype)
    function new(): CSSFontFeatureValuesRule { aliasFor(__op_new__) }
  }
  var fontFamily: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule/fontFamily)
  """ = aliasFor(__js_fontFamily)
}
export interface CSSFontPaletteValuesRule extends CSSRule {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule)
  """
  static {
    aliasFor(native "CSSFontPaletteValuesRule")
    var prototype: CSSFontPaletteValuesRule = aliasFor(__js_prototype)
    function new(): CSSFontPaletteValuesRule { aliasFor(__op_new__) }
  }
  const basePalette: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/basePalette)
  """ = aliasFor(__js_basePalette)
  const fontFamily: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/fontFamily)
  """ = aliasFor(__js_fontFamily)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/name)
  """ = aliasFor(__js_name)
  const overrideColors: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/overrideColors)
  """ = aliasFor(__js_overrideColors)
}
export interface CSSGroupingRule extends CSSRule {
  """
  Any CSS at-rule that contains other rules nested within it.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule)
  """
  static {
    aliasFor(native "CSSGroupingRule")
    var prototype: CSSGroupingRule = aliasFor(__js_prototype)
    function new(): CSSGroupingRule { aliasFor(__op_new__) }
  }
  const cssRules: CSSRuleList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/cssRules)
  """ = aliasFor(__js_cssRules)
  function deleteRule(index: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/deleteRule)
    """
    aliasFor(__js_deleteRule)
  }
  function insertRule(rule: String, index: Number): Number {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/insertRule)
    """
    aliasFor(__js_insertRule)
  }
  function insertRule(rule: String): Number { aliasFor(__js_insertRule) }
}
export interface CSSImageValue extends CSSStyleValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImageValue)
  """
  static {
    aliasFor(native "CSSImageValue")
    var prototype: CSSImageValue = aliasFor(__js_prototype)
    function new(): CSSImageValue { aliasFor(__op_new__) }
  }
}
export interface CSSImportRule extends CSSRule {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule)
  """
  static {
    aliasFor(native "CSSImportRule")
    var prototype: CSSImportRule = aliasFor(__js_prototype)
    function new(): CSSImportRule { aliasFor(__op_new__) }
  }
  const href: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/href)
  """ = aliasFor(__js_href)
  const layerName: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/layerName)
  """ = aliasFor(__js_layerName)
  const media: MediaList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/media)
  """ = aliasFor(__js_media)
  const styleSheet: Union[CSSStyleSheet, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/styleSheet)
  """ = aliasFor(__js_styleSheet)
  const supportsText: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/supportsText)
  """ = aliasFor(__js_supportsText)
}
export interface CSSKeyframeRule extends CSSRule {
  """
  An object representing a set of style for a given keyframe. It corresponds to the contains of a single keyframe of a @keyframes at-rule. It implements the CSSRule interface with a type value of 8 (CSSRule.KEYFRAME_RULE).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule)
  """
  static {
    aliasFor(native "CSSKeyframeRule")
    var prototype: CSSKeyframeRule = aliasFor(__js_prototype)
    function new(): CSSKeyframeRule { aliasFor(__op_new__) }
  }
  var keyText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule/keyText)
  """ = aliasFor(__js_keyText)
  const style: CSSStyleDeclaration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule/style)
  """ = aliasFor(__js_style)
}
export interface CSSKeyframesRule extends CSSRule {
  """
  An object representing a complete set of keyframes for a CSS animation. It corresponds to the contains of a whole @keyframes at-rule. It implements the CSSRule interface with a type value of 7 (CSSRule.KEYFRAMES_RULE).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule)
  """
  static {
    aliasFor(native "CSSKeyframesRule")
    var prototype: CSSKeyframesRule = aliasFor(__js_prototype)
    function new(): CSSKeyframesRule { aliasFor(__op_new__) }
  }
  const cssRules: CSSRuleList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/cssRules)
  """ = aliasFor(__js_cssRules)
  const length: Number = aliasFor(__js_length)
  var name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/name)
  """ = aliasFor(__js_name)
  function appendRule(rule: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/appendRule)
    """
    aliasFor(__js_appendRule)
  }
  function deleteRule(select: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/deleteRule)
    """
    aliasFor(__js_deleteRule)
  }
  function findRule(select: String): Union[CSSKeyframeRule, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/findRule)
    """
    aliasFor(__js_findRule)
  }
  function __getitem__(index: Number): CSSKeyframeRule { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: CSSKeyframeRule): CSSKeyframeRule { aliasFor(__op_setitem__) }
}
export interface CSSKeywordValue extends CSSStyleValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue)
  """
  static {
    aliasFor(native "CSSKeywordValue")
    var prototype: CSSKeywordValue = aliasFor(__js_prototype)
    function new(value: String): CSSKeywordValue { aliasFor(__op_new__) }
  }
  var value: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue/value)
  """ = aliasFor(__js_value)
}
export interface CSSLayerBlockRule extends CSSGroupingRule {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule)
  """
  static {
    aliasFor(native "CSSLayerBlockRule")
    var prototype: CSSLayerBlockRule = aliasFor(__js_prototype)
    function new(): CSSLayerBlockRule { aliasFor(__op_new__) }
  }
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule/name)
  """ = aliasFor(__js_name)
}
export interface CSSLayerStatementRule extends CSSRule {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule)
  """
  static {
    aliasFor(native "CSSLayerStatementRule")
    var prototype: CSSLayerStatementRule = aliasFor(__js_prototype)
    function new(): CSSLayerStatementRule { aliasFor(__op_new__) }
  }
  const nameList: List[String] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule/nameList)
  """ = aliasFor(__js_nameList)
}
export interface CSSMathClamp extends CSSMathValue {
  static {
    aliasFor(native "CSSMathClamp")
    var prototype: CSSMathClamp = aliasFor(__js_prototype)
    function new(lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp { aliasFor(__op_new__) }
  }
  const lower: CSSNumericValue = aliasFor(__js_lower)
  const upper: CSSNumericValue = aliasFor(__js_upper)
  const value: CSSNumericValue = aliasFor(__js_value)
}
export interface CSSMathInvert extends CSSMathValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert)
  """
  static {
    aliasFor(native "CSSMathInvert")
    var prototype: CSSMathInvert = aliasFor(__js_prototype)
    function new(arg: CSSNumberish): CSSMathInvert { aliasFor(__op_new__) }
  }
  const value: CSSNumericValue """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert/value)
  """ = aliasFor(__js_value)
}
export interface CSSMathMax extends CSSMathValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax)
  """
  static {
    aliasFor(native "CSSMathMax")
    var prototype: CSSMathMax = aliasFor(__js_prototype)
    function new(args: CSSNumberish, args: CSSNumberish, args: CSSNumberish): CSSMathMax { aliasFor(__op_new__) }
    function new(args: CSSNumberish, args: CSSNumberish): CSSMathMax { aliasFor(__op_new__) }
    function new(args: CSSNumberish): CSSMathMax { aliasFor(__op_new__) }
    function new(): CSSMathMax { aliasFor(__op_new__) }
  }
  const values: CSSNumericArray """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax/values)
  """ = aliasFor(__js_values)
}
export interface CSSMathMin extends CSSMathValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin)
  """
  static {
    aliasFor(native "CSSMathMin")
    var prototype: CSSMathMin = aliasFor(__js_prototype)
    function new(args: CSSNumberish, args: CSSNumberish, args: CSSNumberish): CSSMathMin { aliasFor(__op_new__) }
    function new(args: CSSNumberish, args: CSSNumberish): CSSMathMin { aliasFor(__op_new__) }
    function new(args: CSSNumberish): CSSMathMin { aliasFor(__op_new__) }
    function new(): CSSMathMin { aliasFor(__op_new__) }
  }
  const values: CSSNumericArray """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin/values)
  """ = aliasFor(__js_values)
}
export interface CSSMathNegate extends CSSMathValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate)
  """
  static {
    aliasFor(native "CSSMathNegate")
    var prototype: CSSMathNegate = aliasFor(__js_prototype)
    function new(arg: CSSNumberish): CSSMathNegate { aliasFor(__op_new__) }
  }
  const value: CSSNumericValue """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate/value)
  """ = aliasFor(__js_value)
}
export interface CSSMathProduct extends CSSMathValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct)
  """
  static {
    aliasFor(native "CSSMathProduct")
    var prototype: CSSMathProduct = aliasFor(__js_prototype)
    function new(args: CSSNumberish, args: CSSNumberish, args: CSSNumberish): CSSMathProduct { aliasFor(__op_new__) }
    function new(args: CSSNumberish, args: CSSNumberish): CSSMathProduct { aliasFor(__op_new__) }
    function new(args: CSSNumberish): CSSMathProduct { aliasFor(__op_new__) }
    function new(): CSSMathProduct { aliasFor(__op_new__) }
  }
  const values: CSSNumericArray """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct/values)
  """ = aliasFor(__js_values)
}
export interface CSSMathSum extends CSSMathValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum)
  """
  static {
    aliasFor(native "CSSMathSum")
    var prototype: CSSMathSum = aliasFor(__js_prototype)
    function new(args: CSSNumberish, args: CSSNumberish, args: CSSNumberish): CSSMathSum { aliasFor(__op_new__) }
    function new(args: CSSNumberish, args: CSSNumberish): CSSMathSum { aliasFor(__op_new__) }
    function new(args: CSSNumberish): CSSMathSum { aliasFor(__op_new__) }
    function new(): CSSMathSum { aliasFor(__op_new__) }
  }
  const values: CSSNumericArray """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum/values)
  """ = aliasFor(__js_values)
}
export interface CSSMathValue extends CSSNumericValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue)
  """
  static {
    aliasFor(native "CSSMathValue")
    var prototype: CSSMathValue = aliasFor(__js_prototype)
    function new(): CSSMathValue { aliasFor(__op_new__) }
  }
  const operator: CSSMathOperator """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue/operator)
  """ = aliasFor(__js_operator)
}
export interface CSSMatrixComponent extends CSSTransformComponent {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent)
  """
  static {
    aliasFor(native "CSSMatrixComponent")
    var prototype: CSSMatrixComponent = aliasFor(__js_prototype)
    function new(matrix: DOMMatrixReadOnly, options: CSSMatrixComponentOptions): CSSMatrixComponent { aliasFor(__op_new__) }
    function new(matrix: DOMMatrixReadOnly): CSSMatrixComponent { aliasFor(__op_new__) }
  }
  var matrix: DOMMatrix """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent/matrix)
  """ = aliasFor(__js_matrix)
}
export interface CSSMediaRule extends CSSConditionRule {
  """
  A single CSS @media rule. It implements the CSSConditionRule interface, and therefore the CSSGroupingRule and the CSSRule interface with a type value of 4 (CSSRule.MEDIA_RULE).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMediaRule)
  """
  static {
    aliasFor(native "CSSMediaRule")
    var prototype: CSSMediaRule = aliasFor(__js_prototype)
    function new(): CSSMediaRule { aliasFor(__op_new__) }
  }
  const media: MediaList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMediaRule/media)
  """ = aliasFor(__js_media)
}
export interface CSSNamespaceRule extends CSSRule {
  """
  An object representing a single CSS @namespace at-rule. It implements the CSSRule interface, with a type value of 10 (CSSRule.NAMESPACE_RULE).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule)
  """
  static {
    aliasFor(native "CSSNamespaceRule")
    var prototype: CSSNamespaceRule = aliasFor(__js_prototype)
    function new(): CSSNamespaceRule { aliasFor(__op_new__) }
  }
  const namespaceURI: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/namespaceURI)
  """ = aliasFor(__js_namespaceURI)
  const prefix: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/prefix)
  """ = aliasFor(__js_prefix)
}
export interface CSSNumericArray {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray)
  """
  static {
    aliasFor(native "CSSNumericArray")
    var prototype: CSSNumericArray = aliasFor(__js_prototype)
    function new(): CSSNumericArray { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray/length)
  """ = aliasFor(__js_length)
  function forEach(callbackfn: function(value: CSSNumericValue, key: Number, parent: CSSNumericArray): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: CSSNumericValue, key: Number, parent: CSSNumericArray): Any): Any { aliasFor(__js_forEach) }
  function __getitem__(index: Number): CSSNumericValue { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: CSSNumericValue): CSSNumericValue { aliasFor(__op_setitem__) }
}
export interface CSSNumericValue extends CSSStyleValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue)
  """
  static {
    aliasFor(native "CSSNumericValue")
    var prototype: CSSNumericValue = aliasFor(__js_prototype)
    function new(): CSSNumericValue { aliasFor(__op_new__) }
    function parse(cssText: String): CSSNumericValue {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/parse_static)
      """
      aliasFor(__js_parse)
    }
  }
  function add(values: CSSNumberish, values: CSSNumberish, values: CSSNumberish): CSSNumericValue {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/add)
    """
    aliasFor(__js_add)
  }
  function add(values: CSSNumberish, values: CSSNumberish): CSSNumericValue { aliasFor(__js_add) }
  function add(values: CSSNumberish): CSSNumericValue { aliasFor(__js_add) }
  function add(): CSSNumericValue { aliasFor(__js_add) }
  function div(values: CSSNumberish, values: CSSNumberish, values: CSSNumberish): CSSNumericValue {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/div)
    """
    aliasFor(__js_div)
  }
  function div(values: CSSNumberish, values: CSSNumberish): CSSNumericValue { aliasFor(__js_div) }
  function div(values: CSSNumberish): CSSNumericValue { aliasFor(__js_div) }
  function div(): CSSNumericValue { aliasFor(__js_div) }
  function equals(value: CSSNumberish, value: CSSNumberish, value: CSSNumberish): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/equals)
    """
    aliasFor(__js_equals)
  }
  function equals(value: CSSNumberish, value: CSSNumberish): Bool { aliasFor(__js_equals) }
  function equals(value: CSSNumberish): Bool { aliasFor(__js_equals) }
  function equals(): Bool { aliasFor(__js_equals) }
  function max(values: CSSNumberish, values: CSSNumberish, values: CSSNumberish): CSSNumericValue {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/max)
    """
    aliasFor(__js_max)
  }
  function max(values: CSSNumberish, values: CSSNumberish): CSSNumericValue { aliasFor(__js_max) }
  function max(values: CSSNumberish): CSSNumericValue { aliasFor(__js_max) }
  function max(): CSSNumericValue { aliasFor(__js_max) }
  function min(values: CSSNumberish, values: CSSNumberish, values: CSSNumberish): CSSNumericValue {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/min)
    """
    aliasFor(__js_min)
  }
  function min(values: CSSNumberish, values: CSSNumberish): CSSNumericValue { aliasFor(__js_min) }
  function min(values: CSSNumberish): CSSNumericValue { aliasFor(__js_min) }
  function min(): CSSNumericValue { aliasFor(__js_min) }
  function mul(values: CSSNumberish, values: CSSNumberish, values: CSSNumberish): CSSNumericValue {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/mul)
    """
    aliasFor(__js_mul)
  }
  function mul(values: CSSNumberish, values: CSSNumberish): CSSNumericValue { aliasFor(__js_mul) }
  function mul(values: CSSNumberish): CSSNumericValue { aliasFor(__js_mul) }
  function mul(): CSSNumericValue { aliasFor(__js_mul) }
  function sub(values: CSSNumberish, values: CSSNumberish, values: CSSNumberish): CSSNumericValue {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/sub)
    """
    aliasFor(__js_sub)
  }
  function sub(values: CSSNumberish, values: CSSNumberish): CSSNumericValue { aliasFor(__js_sub) }
  function sub(values: CSSNumberish): CSSNumericValue { aliasFor(__js_sub) }
  function sub(): CSSNumericValue { aliasFor(__js_sub) }
  function to(unit: String): CSSUnitValue {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/to)
    """
    aliasFor(__js_to)
  }
  function toSum(units: String, units: String, units: String): CSSMathSum {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/toSum)
    """
    aliasFor(__js_toSum)
  }
  function toSum(units: String, units: String): CSSMathSum { aliasFor(__js_toSum) }
  function toSum(units: String): CSSMathSum { aliasFor(__js_toSum) }
  function toSum(): CSSMathSum { aliasFor(__js_toSum) }
  function type(): CSSNumericType {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/type)
    """
    aliasFor(__js_type)
  }
}
export interface CSSPageRule extends CSSGroupingRule {
  """
  CSSPageRule is an interface representing a single CSS @page rule. It implements the CSSRule interface with a type value of 6 (CSSRule.PAGE_RULE).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule)
  """
  static {
    aliasFor(native "CSSPageRule")
    var prototype: CSSPageRule = aliasFor(__js_prototype)
    function new(): CSSPageRule { aliasFor(__op_new__) }
  }
  var selectorText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule/selectorText)
  """ = aliasFor(__js_selectorText)
  const style: CSSStyleDeclaration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule/style)
  """ = aliasFor(__js_style)
}
export interface CSSPerspective extends CSSTransformComponent {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective)
  """
  static {
    aliasFor(native "CSSPerspective")
    var prototype: CSSPerspective = aliasFor(__js_prototype)
    function new(length: CSSPerspectiveValue): CSSPerspective { aliasFor(__op_new__) }
  }
  var length: CSSPerspectiveValue """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective/length)
  """ = aliasFor(__js_length)
}
export interface CSSPropertyRule extends CSSRule {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule)
  """
  static {
    aliasFor(native "CSSPropertyRule")
    var prototype: CSSPropertyRule = aliasFor(__js_prototype)
    function new(): CSSPropertyRule { aliasFor(__op_new__) }
  }
  const inherits: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/inherits)
  """ = aliasFor(__js_inherits)
  const initialValue: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/initialValue)
  """ = aliasFor(__js_initialValue)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/name)
  """ = aliasFor(__js_name)
  const syntax: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/syntax)
  """ = aliasFor(__js_syntax)
}
export interface CSSRotate extends CSSTransformComponent {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate)
  """
  static {
    aliasFor(native "CSSRotate")
    var prototype: CSSRotate = aliasFor(__js_prototype)
    function new(angle: CSSNumericValue): CSSRotate { aliasFor(__op_new__) }
    function new(x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate { aliasFor(__op_new__) }
  }
  var angle: CSSNumericValue """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/angle)
  """ = aliasFor(__js_angle)
  var x: CSSNumberish """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/x)
  """ = aliasFor(__js_x)
  var y: CSSNumberish """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/y)
  """ = aliasFor(__js_y)
  var z: CSSNumberish """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/z)
  """ = aliasFor(__js_z)
}
export interface CSSRule {
  """
  A single CSS rule. There are several types of rules, listed in the Type constants section below.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule)
  """
  static {
    aliasFor(native "CSSRule")
    var prototype: CSSRule = aliasFor(__js_prototype)
    function new(): CSSRule { aliasFor(__op_new__) }
    const STYLE_RULE: Number = aliasFor(__js_STYLE_RULE)
    const CHARSET_RULE: Number = aliasFor(__js_CHARSET_RULE)
    const IMPORT_RULE: Number = aliasFor(__js_IMPORT_RULE)
    const MEDIA_RULE: Number = aliasFor(__js_MEDIA_RULE)
    const FONT_FACE_RULE: Number = aliasFor(__js_FONT_FACE_RULE)
    const PAGE_RULE: Number = aliasFor(__js_PAGE_RULE)
    const NAMESPACE_RULE: Number = aliasFor(__js_NAMESPACE_RULE)
    const KEYFRAMES_RULE: Number = aliasFor(__js_KEYFRAMES_RULE)
    const KEYFRAME_RULE: Number = aliasFor(__js_KEYFRAME_RULE)
    const SUPPORTS_RULE: Number = aliasFor(__js_SUPPORTS_RULE)
    const COUNTER_STYLE_RULE: Number = aliasFor(__js_COUNTER_STYLE_RULE)
    const FONT_FEATURE_VALUES_RULE: Number = aliasFor(__js_FONT_FEATURE_VALUES_RULE)
  }
  var cssText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/cssText)
  """ = aliasFor(__js_cssText)
  const parentRule: Union[CSSRule, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/parentRule)
  """ = aliasFor(__js_parentRule)
  const parentStyleSheet: Union[CSSStyleSheet, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/parentStyleSheet)
  """ = aliasFor(__js_parentStyleSheet)
  const STYLE_RULE: Number = aliasFor(__js_STYLE_RULE)
  const CHARSET_RULE: Number = aliasFor(__js_CHARSET_RULE)
  const IMPORT_RULE: Number = aliasFor(__js_IMPORT_RULE)
  const MEDIA_RULE: Number = aliasFor(__js_MEDIA_RULE)
  const FONT_FACE_RULE: Number = aliasFor(__js_FONT_FACE_RULE)
  const PAGE_RULE: Number = aliasFor(__js_PAGE_RULE)
  const NAMESPACE_RULE: Number = aliasFor(__js_NAMESPACE_RULE)
  const KEYFRAMES_RULE: Number = aliasFor(__js_KEYFRAMES_RULE)
  const KEYFRAME_RULE: Number = aliasFor(__js_KEYFRAME_RULE)
  const SUPPORTS_RULE: Number = aliasFor(__js_SUPPORTS_RULE)
  const COUNTER_STYLE_RULE: Number = aliasFor(__js_COUNTER_STYLE_RULE)
  const FONT_FEATURE_VALUES_RULE: Number = aliasFor(__js_FONT_FEATURE_VALUES_RULE)
}
export interface CSSRuleList {
  """
  A CSSRuleList is an (indirect-modify only) array-like object containing an ordered collection of CSSRule objects.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList)
  """
  static {
    aliasFor(native "CSSRuleList")
    var prototype: CSSRuleList = aliasFor(__js_prototype)
    function new(): CSSRuleList { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList/length)
  """ = aliasFor(__js_length)
  function item(index: Number): Union[CSSRule, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList/item)
    """
    aliasFor(__js_item)
  }
  function __getitem__(index: Number): CSSRule { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: CSSRule): CSSRule { aliasFor(__op_setitem__) }
}
export interface CSSScale extends CSSTransformComponent {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale)
  """
  static {
    aliasFor(native "CSSScale")
    var prototype: CSSScale = aliasFor(__js_prototype)
    function new(x: CSSNumberish, y: CSSNumberish, z: CSSNumberish): CSSScale { aliasFor(__op_new__) }
    function new(x: CSSNumberish, y: CSSNumberish): CSSScale { aliasFor(__op_new__) }
  }
  var x: CSSNumberish """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/x)
  """ = aliasFor(__js_x)
  var y: CSSNumberish """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/y)
  """ = aliasFor(__js_y)
  var z: CSSNumberish """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/z)
  """ = aliasFor(__js_z)
}
export interface CSSSkew extends CSSTransformComponent {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew)
  """
  static {
    aliasFor(native "CSSSkew")
    var prototype: CSSSkew = aliasFor(__js_prototype)
    function new(ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew { aliasFor(__op_new__) }
  }
  var ax: CSSNumericValue """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ax)
  """ = aliasFor(__js_ax)
  var ay: CSSNumericValue """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ay)
  """ = aliasFor(__js_ay)
}
export interface CSSSkewX extends CSSTransformComponent {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX)
  """
  static {
    aliasFor(native "CSSSkewX")
    var prototype: CSSSkewX = aliasFor(__js_prototype)
    function new(ax: CSSNumericValue): CSSSkewX { aliasFor(__op_new__) }
  }
  var ax: CSSNumericValue """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX/ax)
  """ = aliasFor(__js_ax)
}
export interface CSSSkewY extends CSSTransformComponent {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY)
  """
  static {
    aliasFor(native "CSSSkewY")
    var prototype: CSSSkewY = aliasFor(__js_prototype)
    function new(ay: CSSNumericValue): CSSSkewY { aliasFor(__op_new__) }
  }
  var ay: CSSNumericValue """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY/ay)
  """ = aliasFor(__js_ay)
}
export interface CSSStyleDeclaration {
  """
  An object that is a CSS declaration block, and exposes style information and various style-related methods and properties.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration)
  """
  static {
    aliasFor(native "CSSStyleDeclaration")
    var prototype: CSSStyleDeclaration = aliasFor(__js_prototype)
    function new(): CSSStyleDeclaration { aliasFor(__op_new__) }
  }
  var accentColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/accent-color)
  """ = aliasFor(__js_accentColor)
  var alignContent: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-content)
  """ = aliasFor(__js_alignContent)
  var alignItems: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-items)
  """ = aliasFor(__js_alignItems)
  var alignSelf: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-self)
  """ = aliasFor(__js_alignSelf)
  var alignmentBaseline: String = aliasFor(__js_alignmentBaseline)
  var all: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/all)
  """ = aliasFor(__js_all)
  var animation: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation)
  """ = aliasFor(__js_animation)
  var animationComposition: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-composition)
  """ = aliasFor(__js_animationComposition)
  var animationDelay: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-delay)
  """ = aliasFor(__js_animationDelay)
  var animationDirection: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-direction)
  """ = aliasFor(__js_animationDirection)
  var animationDuration: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-duration)
  """ = aliasFor(__js_animationDuration)
  var animationFillMode: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode)
  """ = aliasFor(__js_animationFillMode)
  var animationIterationCount: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count)
  """ = aliasFor(__js_animationIterationCount)
  var animationName: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-name)
  """ = aliasFor(__js_animationName)
  var animationPlayState: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-play-state)
  """ = aliasFor(__js_animationPlayState)
  var animationTimingFunction: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function)
  """ = aliasFor(__js_animationTimingFunction)
  var appearance: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/appearance)
  """ = aliasFor(__js_appearance)
  var aspectRatio: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/aspect-ratio)
  """ = aliasFor(__js_aspectRatio)
  var backdropFilter: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/backdrop-filter)
  """ = aliasFor(__js_backdropFilter)
  var backfaceVisibility: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/backface-visibility)
  """ = aliasFor(__js_backfaceVisibility)
  var background: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background)
  """ = aliasFor(__js_background)
  var backgroundAttachment: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-attachment)
  """ = aliasFor(__js_backgroundAttachment)
  var backgroundBlendMode: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-blend-mode)
  """ = aliasFor(__js_backgroundBlendMode)
  var backgroundClip: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-clip)
  """ = aliasFor(__js_backgroundClip)
  var backgroundColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-color)
  """ = aliasFor(__js_backgroundColor)
  var backgroundImage: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-image)
  """ = aliasFor(__js_backgroundImage)
  var backgroundOrigin: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-origin)
  """ = aliasFor(__js_backgroundOrigin)
  var backgroundPosition: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position)
  """ = aliasFor(__js_backgroundPosition)
  var backgroundPositionX: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position-x)
  """ = aliasFor(__js_backgroundPositionX)
  var backgroundPositionY: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position-y)
  """ = aliasFor(__js_backgroundPositionY)
  var backgroundRepeat: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-repeat)
  """ = aliasFor(__js_backgroundRepeat)
  var backgroundSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-size)
  """ = aliasFor(__js_backgroundSize)
  var baselineShift: String = aliasFor(__js_baselineShift)
  var baselineSource: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/baseline-source)
  """ = aliasFor(__js_baselineSource)
  var blockSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/block-size)
  """ = aliasFor(__js_blockSize)
  var border: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border)
  """ = aliasFor(__js_border)
  var borderBlock: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block)
  """ = aliasFor(__js_borderBlock)
  var borderBlockColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-color)
  """ = aliasFor(__js_borderBlockColor)
  var borderBlockEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end)
  """ = aliasFor(__js_borderBlockEnd)
  var borderBlockEndColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-color)
  """ = aliasFor(__js_borderBlockEndColor)
  var borderBlockEndStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-style)
  """ = aliasFor(__js_borderBlockEndStyle)
  var borderBlockEndWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-width)
  """ = aliasFor(__js_borderBlockEndWidth)
  var borderBlockStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start)
  """ = aliasFor(__js_borderBlockStart)
  var borderBlockStartColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-color)
  """ = aliasFor(__js_borderBlockStartColor)
  var borderBlockStartStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-style)
  """ = aliasFor(__js_borderBlockStartStyle)
  var borderBlockStartWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-width)
  """ = aliasFor(__js_borderBlockStartWidth)
  var borderBlockStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-style)
  """ = aliasFor(__js_borderBlockStyle)
  var borderBlockWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-width)
  """ = aliasFor(__js_borderBlockWidth)
  var borderBottom: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom)
  """ = aliasFor(__js_borderBottom)
  var borderBottomColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-color)
  """ = aliasFor(__js_borderBottomColor)
  var borderBottomLeftRadius: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)
  """ = aliasFor(__js_borderBottomLeftRadius)
  var borderBottomRightRadius: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)
  """ = aliasFor(__js_borderBottomRightRadius)
  var borderBottomStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-style)
  """ = aliasFor(__js_borderBottomStyle)
  var borderBottomWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-width)
  """ = aliasFor(__js_borderBottomWidth)
  var borderCollapse: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-collapse)
  """ = aliasFor(__js_borderCollapse)
  var borderColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-color)
  """ = aliasFor(__js_borderColor)
  var borderEndEndRadius: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius)
  """ = aliasFor(__js_borderEndEndRadius)
  var borderEndStartRadius: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius)
  """ = aliasFor(__js_borderEndStartRadius)
  var borderImage: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image)
  """ = aliasFor(__js_borderImage)
  var borderImageOutset: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-outset)
  """ = aliasFor(__js_borderImageOutset)
  var borderImageRepeat: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-repeat)
  """ = aliasFor(__js_borderImageRepeat)
  var borderImageSlice: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-slice)
  """ = aliasFor(__js_borderImageSlice)
  var borderImageSource: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-source)
  """ = aliasFor(__js_borderImageSource)
  var borderImageWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-width)
  """ = aliasFor(__js_borderImageWidth)
  var borderInline: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline)
  """ = aliasFor(__js_borderInline)
  var borderInlineColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-color)
  """ = aliasFor(__js_borderInlineColor)
  var borderInlineEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end)
  """ = aliasFor(__js_borderInlineEnd)
  var borderInlineEndColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color)
  """ = aliasFor(__js_borderInlineEndColor)
  var borderInlineEndStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style)
  """ = aliasFor(__js_borderInlineEndStyle)
  var borderInlineEndWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width)
  """ = aliasFor(__js_borderInlineEndWidth)
  var borderInlineStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start)
  """ = aliasFor(__js_borderInlineStart)
  var borderInlineStartColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color)
  """ = aliasFor(__js_borderInlineStartColor)
  var borderInlineStartStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style)
  """ = aliasFor(__js_borderInlineStartStyle)
  var borderInlineStartWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width)
  """ = aliasFor(__js_borderInlineStartWidth)
  var borderInlineStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-style)
  """ = aliasFor(__js_borderInlineStyle)
  var borderInlineWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-width)
  """ = aliasFor(__js_borderInlineWidth)
  var borderLeft: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left)
  """ = aliasFor(__js_borderLeft)
  var borderLeftColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-color)
  """ = aliasFor(__js_borderLeftColor)
  var borderLeftStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-style)
  """ = aliasFor(__js_borderLeftStyle)
  var borderLeftWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-width)
  """ = aliasFor(__js_borderLeftWidth)
  var borderRadius: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-radius)
  """ = aliasFor(__js_borderRadius)
  var borderRight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right)
  """ = aliasFor(__js_borderRight)
  var borderRightColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-color)
  """ = aliasFor(__js_borderRightColor)
  var borderRightStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-style)
  """ = aliasFor(__js_borderRightStyle)
  var borderRightWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-width)
  """ = aliasFor(__js_borderRightWidth)
  var borderSpacing: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-spacing)
  """ = aliasFor(__js_borderSpacing)
  var borderStartEndRadius: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius)
  """ = aliasFor(__js_borderStartEndRadius)
  var borderStartStartRadius: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius)
  """ = aliasFor(__js_borderStartStartRadius)
  var borderStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-style)
  """ = aliasFor(__js_borderStyle)
  var borderTop: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top)
  """ = aliasFor(__js_borderTop)
  var borderTopColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-color)
  """ = aliasFor(__js_borderTopColor)
  var borderTopLeftRadius: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)
  """ = aliasFor(__js_borderTopLeftRadius)
  var borderTopRightRadius: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)
  """ = aliasFor(__js_borderTopRightRadius)
  var borderTopStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-style)
  """ = aliasFor(__js_borderTopStyle)
  var borderTopWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-width)
  """ = aliasFor(__js_borderTopWidth)
  var borderWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-width)
  """ = aliasFor(__js_borderWidth)
  var bottom: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/bottom)
  """ = aliasFor(__js_bottom)
  var boxShadow: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-shadow)
  """ = aliasFor(__js_boxShadow)
  var boxSizing: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-sizing)
  """ = aliasFor(__js_boxSizing)
  var breakAfter: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-after)
  """ = aliasFor(__js_breakAfter)
  var breakBefore: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-before)
  """ = aliasFor(__js_breakBefore)
  var breakInside: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-inside)
  """ = aliasFor(__js_breakInside)
  var captionSide: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/caption-side)
  """ = aliasFor(__js_captionSide)
  var caretColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/caret-color)
  """ = aliasFor(__js_caretColor)
  var clear: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clear)
  """ = aliasFor(__js_clear)
  var clipPath: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip-path)
  """ = aliasFor(__js_clipPath)
  var clipRule: String = aliasFor(__js_clipRule)
  var color: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color)
  """ = aliasFor(__js_color)
  var colorInterpolation: String = aliasFor(__js_colorInterpolation)
  var colorInterpolationFilters: String = aliasFor(__js_colorInterpolationFilters)
  var colorScheme: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color-scheme)
  """ = aliasFor(__js_colorScheme)
  var columnCount: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-count)
  """ = aliasFor(__js_columnCount)
  var columnFill: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-fill)
  """ = aliasFor(__js_columnFill)
  var columnGap: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-gap)
  """ = aliasFor(__js_columnGap)
  var columnRule: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule)
  """ = aliasFor(__js_columnRule)
  var columnRuleColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-color)
  """ = aliasFor(__js_columnRuleColor)
  var columnRuleStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-style)
  """ = aliasFor(__js_columnRuleStyle)
  var columnRuleWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-width)
  """ = aliasFor(__js_columnRuleWidth)
  var columnSpan: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-span)
  """ = aliasFor(__js_columnSpan)
  var columnWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-width)
  """ = aliasFor(__js_columnWidth)
  var columns: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/columns)
  """ = aliasFor(__js_columns)
  var contain: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain)
  """ = aliasFor(__js_contain)
  var containIntrinsicBlockSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size)
  """ = aliasFor(__js_containIntrinsicBlockSize)
  var containIntrinsicHeight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height)
  """ = aliasFor(__js_containIntrinsicHeight)
  var containIntrinsicInlineSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size)
  """ = aliasFor(__js_containIntrinsicInlineSize)
  var containIntrinsicSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size)
  """ = aliasFor(__js_containIntrinsicSize)
  var containIntrinsicWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width)
  """ = aliasFor(__js_containIntrinsicWidth)
  var container: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container)
  """ = aliasFor(__js_container)
  var containerName: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container-name)
  """ = aliasFor(__js_containerName)
  var containerType: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container-type)
  """ = aliasFor(__js_containerType)
  var content: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/content)
  """ = aliasFor(__js_content)
  var counterIncrement: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-increment)
  """ = aliasFor(__js_counterIncrement)
  var counterReset: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-reset)
  """ = aliasFor(__js_counterReset)
  var counterSet: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-set)
  """ = aliasFor(__js_counterSet)
  var cssFloat: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssFloat)
  """ = aliasFor(__js_cssFloat)
  var cssText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssText)
  """ = aliasFor(__js_cssText)
  var cursor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/cursor)
  """ = aliasFor(__js_cursor)
  var cx: String = aliasFor(__js_cx)
  var cy: String = aliasFor(__js_cy)
  var d: String = aliasFor(__js_d)
  var direction: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/direction)
  """ = aliasFor(__js_direction)
  var display: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/display)
  """ = aliasFor(__js_display)
  var dominantBaseline: String = aliasFor(__js_dominantBaseline)
  var emptyCells: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/empty-cells)
  """ = aliasFor(__js_emptyCells)
  var fill: String = aliasFor(__js_fill)
  var fillOpacity: String = aliasFor(__js_fillOpacity)
  var fillRule: String = aliasFor(__js_fillRule)
  var filter: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/filter)
  """ = aliasFor(__js_filter)
  var flex: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex)
  """ = aliasFor(__js_flex)
  var flexBasis: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-basis)
  """ = aliasFor(__js_flexBasis)
  var flexDirection: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-direction)
  """ = aliasFor(__js_flexDirection)
  var flexFlow: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-flow)
  """ = aliasFor(__js_flexFlow)
  var flexGrow: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-grow)
  """ = aliasFor(__js_flexGrow)
  var flexShrink: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)
  """ = aliasFor(__js_flexShrink)
  var flexWrap: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)
  """ = aliasFor(__js_flexWrap)
  var float: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/float)
  """ = aliasFor(__js_float)
  var floodColor: String = aliasFor(__js_floodColor)
  var floodOpacity: String = aliasFor(__js_floodOpacity)
  var font: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font)
  """ = aliasFor(__js_font)
  var fontFamily: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-family)
  """ = aliasFor(__js_fontFamily)
  var fontFeatureSettings: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-feature-settings)
  """ = aliasFor(__js_fontFeatureSettings)
  var fontKerning: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-kerning)
  """ = aliasFor(__js_fontKerning)
  var fontOpticalSizing: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing)
  """ = aliasFor(__js_fontOpticalSizing)
  var fontPalette: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-palette)
  """ = aliasFor(__js_fontPalette)
  var fontSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-size)
  """ = aliasFor(__js_fontSize)
  var fontSizeAdjust: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-size-adjust)
  """ = aliasFor(__js_fontSizeAdjust)
  var fontStretch: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-stretch)
  """ = aliasFor(__js_fontStretch)
  var fontStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-style)
  """ = aliasFor(__js_fontStyle)
  var fontSynthesis: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis)
  """ = aliasFor(__js_fontSynthesis)
  var fontSynthesisSmallCaps: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps)
  """ = aliasFor(__js_fontSynthesisSmallCaps)
  var fontSynthesisStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style)
  """ = aliasFor(__js_fontSynthesisStyle)
  var fontSynthesisWeight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight)
  """ = aliasFor(__js_fontSynthesisWeight)
  var fontVariant: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant)
  """ = aliasFor(__js_fontVariant)
  var fontVariantAlternates: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates)
  """ = aliasFor(__js_fontVariantAlternates)
  var fontVariantCaps: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-caps)
  """ = aliasFor(__js_fontVariantCaps)
  var fontVariantEastAsian: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian)
  """ = aliasFor(__js_fontVariantEastAsian)
  var fontVariantLigatures: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures)
  """ = aliasFor(__js_fontVariantLigatures)
  var fontVariantNumeric: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric)
  """ = aliasFor(__js_fontVariantNumeric)
  var fontVariantPosition: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-position)
  """ = aliasFor(__js_fontVariantPosition)
  var fontVariationSettings: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variation-settings)
  """ = aliasFor(__js_fontVariationSettings)
  var fontWeight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-weight)
  """ = aliasFor(__js_fontWeight)
  var forcedColorAdjust: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust)
  """ = aliasFor(__js_forcedColorAdjust)
  var gap: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/gap)
  """ = aliasFor(__js_gap)
  var grid: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid)
  """ = aliasFor(__js_grid)
  var gridArea: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-area)
  """ = aliasFor(__js_gridArea)
  var gridAutoColumns: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns)
  """ = aliasFor(__js_gridAutoColumns)
  var gridAutoFlow: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow)
  """ = aliasFor(__js_gridAutoFlow)
  var gridAutoRows: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows)
  """ = aliasFor(__js_gridAutoRows)
  var gridColumn: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column)
  """ = aliasFor(__js_gridColumn)
  var gridColumnEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column-end)
  """ = aliasFor(__js_gridColumnEnd)
  var gridColumnStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column-start)
  """ = aliasFor(__js_gridColumnStart)
  var gridRow: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row)
  """ = aliasFor(__js_gridRow)
  var gridRowEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row-end)
  """ = aliasFor(__js_gridRowEnd)
  var gridRowStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row-start)
  """ = aliasFor(__js_gridRowStart)
  var gridTemplate: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template)
  """ = aliasFor(__js_gridTemplate)
  var gridTemplateAreas: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-areas)
  """ = aliasFor(__js_gridTemplateAreas)
  var gridTemplateColumns: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-columns)
  """ = aliasFor(__js_gridTemplateColumns)
  var gridTemplateRows: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-rows)
  """ = aliasFor(__js_gridTemplateRows)
  var height: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/height)
  """ = aliasFor(__js_height)
  var hyphenateCharacter: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphenate-character)
  """ = aliasFor(__js_hyphenateCharacter)
  var hyphens: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphens)
  """ = aliasFor(__js_hyphens)
  var imageRendering: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/image-rendering)
  """ = aliasFor(__js_imageRendering)
  var inlineSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inline-size)
  """ = aliasFor(__js_inlineSize)
  var inset: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset)
  """ = aliasFor(__js_inset)
  var insetBlock: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block)
  """ = aliasFor(__js_insetBlock)
  var insetBlockEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block-end)
  """ = aliasFor(__js_insetBlockEnd)
  var insetBlockStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block-start)
  """ = aliasFor(__js_insetBlockStart)
  var insetInline: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline)
  """ = aliasFor(__js_insetInline)
  var insetInlineEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline-end)
  """ = aliasFor(__js_insetInlineEnd)
  var insetInlineStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline-start)
  """ = aliasFor(__js_insetInlineStart)
  var isolation: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/isolation)
  """ = aliasFor(__js_isolation)
  var justifyContent: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-content)
  """ = aliasFor(__js_justifyContent)
  var justifyItems: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-items)
  """ = aliasFor(__js_justifyItems)
  var justifySelf: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-self)
  """ = aliasFor(__js_justifySelf)
  var left: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/left)
  """ = aliasFor(__js_left)
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/length)
  """ = aliasFor(__js_length)
  var letterSpacing: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/letter-spacing)
  """ = aliasFor(__js_letterSpacing)
  var lightingColor: String = aliasFor(__js_lightingColor)
  var lineBreak: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-break)
  """ = aliasFor(__js_lineBreak)
  var lineHeight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-height)
  """ = aliasFor(__js_lineHeight)
  var listStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style)
  """ = aliasFor(__js_listStyle)
  var listStyleImage: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-image)
  """ = aliasFor(__js_listStyleImage)
  var listStylePosition: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-position)
  """ = aliasFor(__js_listStylePosition)
  var listStyleType: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-type)
  """ = aliasFor(__js_listStyleType)
  var margin: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin)
  """ = aliasFor(__js_margin)
  var marginBlock: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block)
  """ = aliasFor(__js_marginBlock)
  var marginBlockEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block-end)
  """ = aliasFor(__js_marginBlockEnd)
  var marginBlockStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block-start)
  """ = aliasFor(__js_marginBlockStart)
  var marginBottom: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-bottom)
  """ = aliasFor(__js_marginBottom)
  var marginInline: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline)
  """ = aliasFor(__js_marginInline)
  var marginInlineEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline-end)
  """ = aliasFor(__js_marginInlineEnd)
  var marginInlineStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline-start)
  """ = aliasFor(__js_marginInlineStart)
  var marginLeft: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-left)
  """ = aliasFor(__js_marginLeft)
  var marginRight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-right)
  """ = aliasFor(__js_marginRight)
  var marginTop: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-top)
  """ = aliasFor(__js_marginTop)
  var marker: String = aliasFor(__js_marker)
  var markerEnd: String = aliasFor(__js_markerEnd)
  var markerMid: String = aliasFor(__js_markerMid)
  var markerStart: String = aliasFor(__js_markerStart)
  var mask: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask)
  """ = aliasFor(__js_mask)
  var maskClip: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-clip)
  """ = aliasFor(__js_maskClip)
  var maskComposite: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-composite)
  """ = aliasFor(__js_maskComposite)
  var maskImage: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-image)
  """ = aliasFor(__js_maskImage)
  var maskMode: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-mode)
  """ = aliasFor(__js_maskMode)
  var maskOrigin: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-origin)
  """ = aliasFor(__js_maskOrigin)
  var maskPosition: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-position)
  """ = aliasFor(__js_maskPosition)
  var maskRepeat: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-repeat)
  """ = aliasFor(__js_maskRepeat)
  var maskSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-size)
  """ = aliasFor(__js_maskSize)
  var maskType: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-type)
  """ = aliasFor(__js_maskType)
  var mathDepth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/math-depth)
  """ = aliasFor(__js_mathDepth)
  var mathStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/math-style)
  """ = aliasFor(__js_mathStyle)
  var maxBlockSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-block-size)
  """ = aliasFor(__js_maxBlockSize)
  var maxHeight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-height)
  """ = aliasFor(__js_maxHeight)
  var maxInlineSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-inline-size)
  """ = aliasFor(__js_maxInlineSize)
  var maxWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-width)
  """ = aliasFor(__js_maxWidth)
  var minBlockSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-block-size)
  """ = aliasFor(__js_minBlockSize)
  var minHeight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-height)
  """ = aliasFor(__js_minHeight)
  var minInlineSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-inline-size)
  """ = aliasFor(__js_minInlineSize)
  var minWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-width)
  """ = aliasFor(__js_minWidth)
  var mixBlendMode: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode)
  """ = aliasFor(__js_mixBlendMode)
  var objectFit: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/object-fit)
  """ = aliasFor(__js_objectFit)
  var objectPosition: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/object-position)
  """ = aliasFor(__js_objectPosition)
  var offset: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset)
  """ = aliasFor(__js_offset)
  var offsetAnchor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-anchor)
  """ = aliasFor(__js_offsetAnchor)
  var offsetDistance: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-distance)
  """ = aliasFor(__js_offsetDistance)
  var offsetPath: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-path)
  """ = aliasFor(__js_offsetPath)
  var offsetPosition: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-position)
  """ = aliasFor(__js_offsetPosition)
  var offsetRotate: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-rotate)
  """ = aliasFor(__js_offsetRotate)
  var opacity: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/opacity)
  """ = aliasFor(__js_opacity)
  var order: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/order)
  """ = aliasFor(__js_order)
  var orphans: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/orphans)
  """ = aliasFor(__js_orphans)
  var outline: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline)
  """ = aliasFor(__js_outline)
  var outlineColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-color)
  """ = aliasFor(__js_outlineColor)
  var outlineOffset: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-offset)
  """ = aliasFor(__js_outlineOffset)
  var outlineStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-style)
  """ = aliasFor(__js_outlineStyle)
  var outlineWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-width)
  """ = aliasFor(__js_outlineWidth)
  var overflow: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow)
  """ = aliasFor(__js_overflow)
  var overflowAnchor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-anchor)
  """ = aliasFor(__js_overflowAnchor)
  var overflowClipMargin: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin)
  """ = aliasFor(__js_overflowClipMargin)
  var overflowWrap: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-wrap)
  """ = aliasFor(__js_overflowWrap)
  var overflowX: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-x)
  """ = aliasFor(__js_overflowX)
  var overflowY: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-y)
  """ = aliasFor(__js_overflowY)
  var overscrollBehavior: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior)
  """ = aliasFor(__js_overscrollBehavior)
  var overscrollBehaviorBlock: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block)
  """ = aliasFor(__js_overscrollBehaviorBlock)
  var overscrollBehaviorInline: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline)
  """ = aliasFor(__js_overscrollBehaviorInline)
  var overscrollBehaviorX: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x)
  """ = aliasFor(__js_overscrollBehaviorX)
  var overscrollBehaviorY: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y)
  """ = aliasFor(__js_overscrollBehaviorY)
  var padding: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding)
  """ = aliasFor(__js_padding)
  var paddingBlock: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block)
  """ = aliasFor(__js_paddingBlock)
  var paddingBlockEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block-end)
  """ = aliasFor(__js_paddingBlockEnd)
  var paddingBlockStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block-start)
  """ = aliasFor(__js_paddingBlockStart)
  var paddingBottom: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-bottom)
  """ = aliasFor(__js_paddingBottom)
  var paddingInline: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline)
  """ = aliasFor(__js_paddingInline)
  var paddingInlineEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline-end)
  """ = aliasFor(__js_paddingInlineEnd)
  var paddingInlineStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline-start)
  """ = aliasFor(__js_paddingInlineStart)
  var paddingLeft: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-left)
  """ = aliasFor(__js_paddingLeft)
  var paddingRight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-right)
  """ = aliasFor(__js_paddingRight)
  var paddingTop: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-top)
  """ = aliasFor(__js_paddingTop)
  var page: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page)
  """ = aliasFor(__js_page)
  var pageBreakAfter: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-after)
  """ = aliasFor(__js_pageBreakAfter)
  var pageBreakBefore: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-before)
  """ = aliasFor(__js_pageBreakBefore)
  var pageBreakInside: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-inside)
  """ = aliasFor(__js_pageBreakInside)
  var paintOrder: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/paint-order)
  """ = aliasFor(__js_paintOrder)
  const parentRule: Union[CSSRule, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/parentRule)
  """ = aliasFor(__js_parentRule)
  var perspective: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective)
  """ = aliasFor(__js_perspective)
  var perspectiveOrigin: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective-origin)
  """ = aliasFor(__js_perspectiveOrigin)
  var placeContent: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-content)
  """ = aliasFor(__js_placeContent)
  var placeItems: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-items)
  """ = aliasFor(__js_placeItems)
  var placeSelf: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-self)
  """ = aliasFor(__js_placeSelf)
  var pointerEvents: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/pointer-events)
  """ = aliasFor(__js_pointerEvents)
  var position: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/position)
  """ = aliasFor(__js_position)
  var printColorAdjust: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/print-color-adjust)
  """ = aliasFor(__js_printColorAdjust)
  var quotes: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/quotes)
  """ = aliasFor(__js_quotes)
  var r: String = aliasFor(__js_r)
  var resize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/resize)
  """ = aliasFor(__js_resize)
  var right: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/right)
  """ = aliasFor(__js_right)
  var rotate: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/rotate)
  """ = aliasFor(__js_rotate)
  var rowGap: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/row-gap)
  """ = aliasFor(__js_rowGap)
  var rubyPosition: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/ruby-position)
  """ = aliasFor(__js_rubyPosition)
  var rx: String = aliasFor(__js_rx)
  var ry: String = aliasFor(__js_ry)
  var scale: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scale)
  """ = aliasFor(__js_scale)
  var scrollBehavior: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-behavior)
  """ = aliasFor(__js_scrollBehavior)
  var scrollMargin: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin)
  """ = aliasFor(__js_scrollMargin)
  var scrollMarginBlock: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block)
  """ = aliasFor(__js_scrollMarginBlock)
  var scrollMarginBlockEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end)
  """ = aliasFor(__js_scrollMarginBlockEnd)
  var scrollMarginBlockStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start)
  """ = aliasFor(__js_scrollMarginBlockStart)
  var scrollMarginBottom: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom)
  """ = aliasFor(__js_scrollMarginBottom)
  var scrollMarginInline: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline)
  """ = aliasFor(__js_scrollMarginInline)
  var scrollMarginInlineEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end)
  """ = aliasFor(__js_scrollMarginInlineEnd)
  var scrollMarginInlineStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start)
  """ = aliasFor(__js_scrollMarginInlineStart)
  var scrollMarginLeft: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left)
  """ = aliasFor(__js_scrollMarginLeft)
  var scrollMarginRight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right)
  """ = aliasFor(__js_scrollMarginRight)
  var scrollMarginTop: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top)
  """ = aliasFor(__js_scrollMarginTop)
  var scrollPadding: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding)
  """ = aliasFor(__js_scrollPadding)
  var scrollPaddingBlock: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block)
  """ = aliasFor(__js_scrollPaddingBlock)
  var scrollPaddingBlockEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end)
  """ = aliasFor(__js_scrollPaddingBlockEnd)
  var scrollPaddingBlockStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start)
  """ = aliasFor(__js_scrollPaddingBlockStart)
  var scrollPaddingBottom: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom)
  """ = aliasFor(__js_scrollPaddingBottom)
  var scrollPaddingInline: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline)
  """ = aliasFor(__js_scrollPaddingInline)
  var scrollPaddingInlineEnd: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end)
  """ = aliasFor(__js_scrollPaddingInlineEnd)
  var scrollPaddingInlineStart: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start)
  """ = aliasFor(__js_scrollPaddingInlineStart)
  var scrollPaddingLeft: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left)
  """ = aliasFor(__js_scrollPaddingLeft)
  var scrollPaddingRight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right)
  """ = aliasFor(__js_scrollPaddingRight)
  var scrollPaddingTop: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top)
  """ = aliasFor(__js_scrollPaddingTop)
  var scrollSnapAlign: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align)
  """ = aliasFor(__js_scrollSnapAlign)
  var scrollSnapStop: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop)
  """ = aliasFor(__js_scrollSnapStop)
  var scrollSnapType: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type)
  """ = aliasFor(__js_scrollSnapType)
  var scrollbarColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-color)
  """ = aliasFor(__js_scrollbarColor)
  var scrollbarGutter: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter)
  """ = aliasFor(__js_scrollbarGutter)
  var scrollbarWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-width)
  """ = aliasFor(__js_scrollbarWidth)
  var shapeImageThreshold: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold)
  """ = aliasFor(__js_shapeImageThreshold)
  var shapeMargin: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-margin)
  """ = aliasFor(__js_shapeMargin)
  var shapeOutside: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-outside)
  """ = aliasFor(__js_shapeOutside)
  var shapeRendering: String = aliasFor(__js_shapeRendering)
  var stopColor: String = aliasFor(__js_stopColor)
  var stopOpacity: String = aliasFor(__js_stopOpacity)
  var stroke: String = aliasFor(__js_stroke)
  var strokeDasharray: String = aliasFor(__js_strokeDasharray)
  var strokeDashoffset: String = aliasFor(__js_strokeDashoffset)
  var strokeLinecap: String = aliasFor(__js_strokeLinecap)
  var strokeLinejoin: String = aliasFor(__js_strokeLinejoin)
  var strokeMiterlimit: String = aliasFor(__js_strokeMiterlimit)
  var strokeOpacity: String = aliasFor(__js_strokeOpacity)
  var strokeWidth: String = aliasFor(__js_strokeWidth)
  var tabSize: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/tab-size)
  """ = aliasFor(__js_tabSize)
  var tableLayout: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/table-layout)
  """ = aliasFor(__js_tableLayout)
  var textAlign: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-align)
  """ = aliasFor(__js_textAlign)
  var textAlignLast: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-align-last)
  """ = aliasFor(__js_textAlignLast)
  var textAnchor: String = aliasFor(__js_textAnchor)
  var textCombineUpright: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-combine-upright)
  """ = aliasFor(__js_textCombineUpright)
  var textDecoration: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration)
  """ = aliasFor(__js_textDecoration)
  var textDecorationColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-color)
  """ = aliasFor(__js_textDecorationColor)
  var textDecorationLine: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-line)
  """ = aliasFor(__js_textDecorationLine)
  var textDecorationSkipInk: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink)
  """ = aliasFor(__js_textDecorationSkipInk)
  var textDecorationStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-style)
  """ = aliasFor(__js_textDecorationStyle)
  var textDecorationThickness: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness)
  """ = aliasFor(__js_textDecorationThickness)
  var textEmphasis: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis)
  """ = aliasFor(__js_textEmphasis)
  var textEmphasisColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color)
  """ = aliasFor(__js_textEmphasisColor)
  var textEmphasisPosition: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position)
  """ = aliasFor(__js_textEmphasisPosition)
  var textEmphasisStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style)
  """ = aliasFor(__js_textEmphasisStyle)
  var textIndent: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-indent)
  """ = aliasFor(__js_textIndent)
  var textOrientation: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-orientation)
  """ = aliasFor(__js_textOrientation)
  var textOverflow: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-overflow)
  """ = aliasFor(__js_textOverflow)
  var textRendering: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-rendering)
  """ = aliasFor(__js_textRendering)
  var textShadow: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-shadow)
  """ = aliasFor(__js_textShadow)
  var textTransform: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-transform)
  """ = aliasFor(__js_textTransform)
  var textUnderlineOffset: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-underline-offset)
  """ = aliasFor(__js_textUnderlineOffset)
  var textUnderlinePosition: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-underline-position)
  """ = aliasFor(__js_textUnderlinePosition)
  var textWrap: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-wrap)
  """ = aliasFor(__js_textWrap)
  var top: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/top)
  """ = aliasFor(__js_top)
  var touchAction: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/touch-action)
  """ = aliasFor(__js_touchAction)
  var transform: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform)
  """ = aliasFor(__js_transform)
  var transformBox: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-box)
  """ = aliasFor(__js_transformBox)
  var transformOrigin: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-origin)
  """ = aliasFor(__js_transformOrigin)
  var transformStyle: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-style)
  """ = aliasFor(__js_transformStyle)
  var transition: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition)
  """ = aliasFor(__js_transition)
  var transitionDelay: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-delay)
  """ = aliasFor(__js_transitionDelay)
  var transitionDuration: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-duration)
  """ = aliasFor(__js_transitionDuration)
  var transitionProperty: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-property)
  """ = aliasFor(__js_transitionProperty)
  var transitionTimingFunction: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function)
  """ = aliasFor(__js_transitionTimingFunction)
  var translate: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/translate)
  """ = aliasFor(__js_translate)
  var unicodeBidi: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/unicode-bidi)
  """ = aliasFor(__js_unicodeBidi)
  var userSelect: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/user-select)
  """ = aliasFor(__js_userSelect)
  var vectorEffect: String = aliasFor(__js_vectorEffect)
  var verticalAlign: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/vertical-align)
  """ = aliasFor(__js_verticalAlign)
  var visibility: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/visibility)
  """ = aliasFor(__js_visibility)
  var webkitLineClamp: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-line-clamp)
  """ = aliasFor(__js_webkitLineClamp)
  var webkitTextFillColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color)
  """ = aliasFor(__js_webkitTextFillColor)
  var webkitTextStroke: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke)
  """ = aliasFor(__js_webkitTextStroke)
  var webkitTextStrokeColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color)
  """ = aliasFor(__js_webkitTextStrokeColor)
  var webkitTextStrokeWidth: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width)
  """ = aliasFor(__js_webkitTextStrokeWidth)
  var whiteSpace: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/white-space)
  """ = aliasFor(__js_whiteSpace)
  var widows: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/widows)
  """ = aliasFor(__js_widows)
  var width: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/width)
  """ = aliasFor(__js_width)
  var willChange: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/will-change)
  """ = aliasFor(__js_willChange)
  var wordBreak: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/word-break)
  """ = aliasFor(__js_wordBreak)
  var wordSpacing: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/word-spacing)
  """ = aliasFor(__js_wordSpacing)
  var writingMode: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/writing-mode)
  """ = aliasFor(__js_writingMode)
  var x: String = aliasFor(__js_x)
  var y: String = aliasFor(__js_y)
  var zIndex: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/z-index)
  """ = aliasFor(__js_zIndex)
  function getPropertyPriority(property: String): String {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/getPropertyPriority)
    """
    aliasFor(__js_getPropertyPriority)
  }
  function getPropertyValue(property: String): String {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/getPropertyValue)
    """
    aliasFor(__js_getPropertyValue)
  }
  function item(index: Number): String {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/item)
    """
    aliasFor(__js_item)
  }
  function removeProperty(property: String): String {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/removeProperty)
    """
    aliasFor(__js_removeProperty)
  }
  function setProperty(property: String, value: Union[String, Null], priority: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/setProperty)
    """
    aliasFor(__js_setProperty)
  }
  function setProperty(property: String, value: Union[String, Null]): Any { aliasFor(__js_setProperty) }
  function __getitem__(index: Number): String { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: String): String { aliasFor(__op_setitem__) }
}
export interface CSSStyleRule extends CSSGroupingRule {
  """
  CSSStyleRule represents a single CSS style rule. It implements the CSSRule interface with a type value of 1 (CSSRule.STYLE_RULE).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule)
  """
  static {
    aliasFor(native "CSSStyleRule")
    var prototype: CSSStyleRule = aliasFor(__js_prototype)
    function new(): CSSStyleRule { aliasFor(__op_new__) }
  }
  var selectorText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/selectorText)
  """ = aliasFor(__js_selectorText)
  const style: CSSStyleDeclaration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/style)
  """ = aliasFor(__js_style)
  const styleMap: StylePropertyMap """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/styleMap)
  """ = aliasFor(__js_styleMap)
}
export interface CSSStyleSheet extends StyleSheet {
  """
  A single CSS style sheet. It inherits properties and methods from its parent, StyleSheet.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet)
  """
  static {
    aliasFor(native "CSSStyleSheet")
    var prototype: CSSStyleSheet = aliasFor(__js_prototype)
    function new(options: CSSStyleSheetInit): CSSStyleSheet { aliasFor(__op_new__) }
    function new(): CSSStyleSheet { aliasFor(__op_new__) }
  }
  const cssRules: CSSRuleList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/cssRules)
  """ = aliasFor(__js_cssRules)
  const ownerRule: Union[CSSRule, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/ownerRule)
  """ = aliasFor(__js_ownerRule)
  function deleteRule(index: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/deleteRule)
    """
    aliasFor(__js_deleteRule)
  }
  function insertRule(rule: String, index: Number): Number {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/insertRule)
    """
    aliasFor(__js_insertRule)
  }
  function insertRule(rule: String): Number { aliasFor(__js_insertRule) }
  function replace(text: String): Promise[CSSStyleSheet] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/replace)
    """
    aliasFor(__js_replace)
  }
  function replaceSync(text: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/replaceSync)
    """
    aliasFor(__js_replaceSync)
  }
}
export interface CSSStyleValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue)
  """
  static {
    aliasFor(native "CSSStyleValue")
    var prototype: CSSStyleValue = aliasFor(__js_prototype)
    function new(): CSSStyleValue { aliasFor(__op_new__) }
    function parse(property: String, cssText: String): CSSStyleValue {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue/parse_static)
      """
      aliasFor(__js_parse)
    }
    function parseAll(property: String, cssText: String): List[CSSStyleValue] {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue/parseAll_static)
      """
      aliasFor(__js_parseAll)
    }
  }
  function toString(): String { aliasFor(__js_toString) }
}
export interface CSSSupportsRule extends CSSConditionRule {
  """
  An object representing a single CSS @supports at-rule. It implements the CSSConditionRule interface, and therefore the CSSRule and CSSGroupingRule interfaces with a type value of 12 (CSSRule.SUPPORTS_RULE).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSupportsRule)
  """
  static {
    aliasFor(native "CSSSupportsRule")
    var prototype: CSSSupportsRule = aliasFor(__js_prototype)
    function new(): CSSSupportsRule { aliasFor(__op_new__) }
  }
}
export interface CSSTransformComponent {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent)
  """
  static {
    aliasFor(native "CSSTransformComponent")
    var prototype: CSSTransformComponent = aliasFor(__js_prototype)
    function new(): CSSTransformComponent { aliasFor(__op_new__) }
  }
  var is2D: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/is2D)
  """ = aliasFor(__js_is2D)
  function toMatrix(): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/toMatrix)
    """
    aliasFor(__js_toMatrix)
  }
  function toString(): String { aliasFor(__js_toString) }
}
export interface CSSTransformValue extends CSSStyleValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue)
  """
  static {
    aliasFor(native "CSSTransformValue")
    var prototype: CSSTransformValue = aliasFor(__js_prototype)
    function new(transforms: List[CSSTransformComponent]): CSSTransformValue { aliasFor(__op_new__) }
  }
  const is2D: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/is2D)
  """ = aliasFor(__js_is2D)
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/length)
  """ = aliasFor(__js_length)
  function toMatrix(): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/toMatrix)
    """
    aliasFor(__js_toMatrix)
  }
  function forEach(callbackfn: function(value: CSSTransformComponent, key: Number, parent: CSSTransformValue): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: CSSTransformComponent, key: Number, parent: CSSTransformValue): Any): Any { aliasFor(__js_forEach) }
  function __getitem__(index: Number): CSSTransformComponent { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: CSSTransformComponent): CSSTransformComponent { aliasFor(__op_setitem__) }
}
export interface CSSTransition extends Animation {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransition)
  """
  static {
    aliasFor(native "CSSTransition")
    var prototype: CSSTransition = aliasFor(__js_prototype)
    function new(): CSSTransition { aliasFor(__op_new__) }
  }
  const transitionProperty: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransition/transitionProperty)
  """ = aliasFor(__js_transitionProperty)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface CSSTranslate extends CSSTransformComponent {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate)
  """
  static {
    aliasFor(native "CSSTranslate")
    var prototype: CSSTranslate = aliasFor(__js_prototype)
    function new(x: CSSNumericValue, y: CSSNumericValue, z: CSSNumericValue): CSSTranslate { aliasFor(__op_new__) }
    function new(x: CSSNumericValue, y: CSSNumericValue): CSSTranslate { aliasFor(__op_new__) }
  }
  var x: CSSNumericValue """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/x)
  """ = aliasFor(__js_x)
  var y: CSSNumericValue """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/y)
  """ = aliasFor(__js_y)
  var z: CSSNumericValue """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/z)
  """ = aliasFor(__js_z)
}
export interface CSSUnitValue extends CSSNumericValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue)
  """
  static {
    aliasFor(native "CSSUnitValue")
    var prototype: CSSUnitValue = aliasFor(__js_prototype)
    function new(value: Number, unit: String): CSSUnitValue { aliasFor(__op_new__) }
  }
  const unit: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/unit)
  """ = aliasFor(__js_unit)
  var value: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/value)
  """ = aliasFor(__js_value)
}
export interface CSSUnparsedValue extends CSSStyleValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue)
  """
  static {
    aliasFor(native "CSSUnparsedValue")
    var prototype: CSSUnparsedValue = aliasFor(__js_prototype)
    function new(members: List[CSSUnparsedSegment]): CSSUnparsedValue { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue/length)
  """ = aliasFor(__js_length)
  function forEach(callbackfn: function(value: CSSUnparsedSegment, key: Number, parent: CSSUnparsedValue): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: CSSUnparsedSegment, key: Number, parent: CSSUnparsedValue): Any): Any { aliasFor(__js_forEach) }
  function __getitem__(index: Number): CSSUnparsedSegment { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: CSSUnparsedSegment): CSSUnparsedSegment { aliasFor(__op_setitem__) }
}
export interface CSSVariableReferenceValue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue)
  """
  static {
    aliasFor(native "CSSVariableReferenceValue")
    var prototype: CSSVariableReferenceValue = aliasFor(__js_prototype)
    function new(variable: String, fallback: Union[CSSUnparsedValue, Null]): CSSVariableReferenceValue { aliasFor(__op_new__) }
    function new(variable: String): CSSVariableReferenceValue { aliasFor(__op_new__) }
  }
  const fallback: Union[CSSUnparsedValue, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/fallback)
  """ = aliasFor(__js_fallback)
  var variable: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/variable)
  """ = aliasFor(__js_variable)
}
export interface Cache {
  """
  Provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache)
  """
  static {
    aliasFor(native "Cache")
    var prototype: Cache = aliasFor(__js_prototype)
    function new(): Cache { aliasFor(__op_new__) }
  }
  function add(request: Union[RequestInfo, URL]): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/add)
    """
    aliasFor(__js_add)
  }
  function addAll(requests: List[RequestInfo]): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/addAll)
    """
    aliasFor(__js_addAll)
  }
  function delete(request: Union[RequestInfo, URL], options: CacheQueryOptions): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/delete)
    """
    aliasFor(__js_delete)
  }
  function delete(request: Union[RequestInfo, URL]): Promise[Bool] { aliasFor(__js_delete) }
  function keys(request: Union[RequestInfo, URL], options: CacheQueryOptions): Promise[List[Request]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/keys)
    """
    aliasFor(__js_keys)
  }
  function keys(request: Union[RequestInfo, URL]): Promise[List[Request]] { aliasFor(__js_keys) }
  function keys(): Promise[List[Request]] { aliasFor(__js_keys) }
  function match(request: Union[RequestInfo, URL], options: CacheQueryOptions): Promise[Union[Response, Null]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/match)
    """
    aliasFor(__js_match)
  }
  function match(request: Union[RequestInfo, URL]): Promise[Union[Response, Null]] { aliasFor(__js_match) }
  function matchAll(request: Union[RequestInfo, URL], options: CacheQueryOptions): Promise[List[Response]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/matchAll)
    """
    aliasFor(__js_matchAll)
  }
  function matchAll(request: Union[RequestInfo, URL]): Promise[List[Response]] { aliasFor(__js_matchAll) }
  function matchAll(): Promise[List[Response]] { aliasFor(__js_matchAll) }
  function put(request: Union[RequestInfo, URL], response: Response): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/put)
    """
    aliasFor(__js_put)
  }
}
export interface CacheStorage {
  """
  The storage for Cache objects.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage)
  """
  static {
    aliasFor(native "CacheStorage")
    var prototype: CacheStorage = aliasFor(__js_prototype)
    function new(): CacheStorage { aliasFor(__op_new__) }
  }
  function delete(cacheName: String): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/delete)
    """
    aliasFor(__js_delete)
  }
  function has(cacheName: String): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/has)
    """
    aliasFor(__js_has)
  }
  function keys(): Promise[List[String]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/keys)
    """
    aliasFor(__js_keys)
  }
  function match(request: Union[RequestInfo, URL], options: MultiCacheQueryOptions): Promise[Union[Response, Null]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/match)
    """
    aliasFor(__js_match)
  }
  function match(request: Union[RequestInfo, URL]): Promise[Union[Response, Null]] { aliasFor(__js_match) }
  function open(cacheName: String): Promise[Cache] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/open)
    """
    aliasFor(__js_open)
  }
}
export interface CanvasCaptureMediaStreamTrack extends MediaStreamTrack {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack)
  """
  static {
    aliasFor(native "CanvasCaptureMediaStreamTrack")
    var prototype: CanvasCaptureMediaStreamTrack = aliasFor(__js_prototype)
    function new(): CanvasCaptureMediaStreamTrack { aliasFor(__op_new__) }
  }
  const canvas: HTMLCanvasElement """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack/canvas)
  """ = aliasFor(__js_canvas)
  function requestFrame(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack/requestFrame)
    """
    aliasFor(__js_requestFrame)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface CanvasCompositing {
  var globalAlpha: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha)
  """ = aliasFor(__js_globalAlpha)
  var globalCompositeOperation: GlobalCompositeOperation """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)
  """ = aliasFor(__js_globalCompositeOperation)
}
export interface CanvasDrawImage {
  function drawImage(image: CanvasImageSource, dx: Number, dy: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage)
    """
    aliasFor(__js_drawImage)
  }
  function drawImage(image: CanvasImageSource, dx: Number, dy: Number, dw: Number, dh: Number): Any { aliasFor(__js_drawImage) }
  function drawImage(image: CanvasImageSource, sx: Number, sy: Number, sw: Number, sh: Number, dx: Number, dy: Number, dw: Number, dh: Number): Any { aliasFor(__js_drawImage) }
}
export interface CanvasDrawPath {
  function beginPath(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/beginPath)
    """
    aliasFor(__js_beginPath)
  }
  function clip(fillRule: CanvasFillRule): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip)
    """
    aliasFor(__js_clip)
  }
  function clip(): Any { aliasFor(__js_clip) }
  function clip(path: Path2D, fillRule: CanvasFillRule): Any { aliasFor(__js_clip) }
  function clip(path: Path2D): Any { aliasFor(__js_clip) }
  function fill(fillRule: CanvasFillRule): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill)
    """
    aliasFor(__js_fill)
  }
  function fill(): Any { aliasFor(__js_fill) }
  function fill(path: Path2D, fillRule: CanvasFillRule): Any { aliasFor(__js_fill) }
  function fill(path: Path2D): Any { aliasFor(__js_fill) }
  function isPointInPath(x: Number, y: Number, fillRule: CanvasFillRule): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath)
    """
    aliasFor(__js_isPointInPath)
  }
  function isPointInPath(x: Number, y: Number): Bool { aliasFor(__js_isPointInPath) }
  function isPointInPath(path: Path2D, x: Number, y: Number, fillRule: CanvasFillRule): Bool { aliasFor(__js_isPointInPath) }
  function isPointInPath(path: Path2D, x: Number, y: Number): Bool { aliasFor(__js_isPointInPath) }
  function isPointInStroke(x: Number, y: Number): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)
    """
    aliasFor(__js_isPointInStroke)
  }
  function isPointInStroke(path: Path2D, x: Number, y: Number): Bool { aliasFor(__js_isPointInStroke) }
  function stroke(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke)
    """
    aliasFor(__js_stroke)
  }
  function stroke(path: Path2D): Any { aliasFor(__js_stroke) }
}
export interface CanvasFillStrokeStyles {
  var fillStyle: Union[String, CanvasGradient, CanvasPattern] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle)
  """ = aliasFor(__js_fillStyle)
  var strokeStyle: Union[String, CanvasGradient, CanvasPattern] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle)
  """ = aliasFor(__js_strokeStyle)
  function createConicGradient(startAngle: Number, x: Number, y: Number): CanvasGradient {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createConicGradient)
    """
    aliasFor(__js_createConicGradient)
  }
  function createLinearGradient(x0: Number, y0: Number, x1: Number, y1: Number): CanvasGradient {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createLinearGradient)
    """
    aliasFor(__js_createLinearGradient)
  }
  function createPattern(image: CanvasImageSource, repetition: Union[String, Null]): Union[CanvasPattern, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createPattern)
    """
    aliasFor(__js_createPattern)
  }
  function createRadialGradient(x0: Number, y0: Number, r0: Number, x1: Number, y1: Number, r1: Number): CanvasGradient {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createRadialGradient)
    """
    aliasFor(__js_createRadialGradient)
  }
}
export interface CanvasFilters {
  var filter: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/filter)
  """ = aliasFor(__js_filter)
}
export interface CanvasGradient {
  """
  An opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasGradient)
  """
  static {
    aliasFor(native "CanvasGradient")
    var prototype: CanvasGradient = aliasFor(__js_prototype)
    function new(): CanvasGradient { aliasFor(__op_new__) }
  }
  function addColorStop(offset: Number, color: String): Any {
    """
    Adds a color stop with the given color to the gradient at the given offset. 0.0 is the offset at one end of the gradient, 1.0 is the offset at the other end.
       *
    Throws an "IndexSizeError" DOMException if the offset is out of range. Throws a "SyntaxError" DOMException if the color cannot be parsed.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasGradient/addColorStop)
    """
    aliasFor(__js_addColorStop)
  }
}
export interface CanvasImageData {
  function createImageData(sw: Number, sh: Number, settings: ImageDataSettings): ImageData {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData)
    """
    aliasFor(__js_createImageData)
  }
  function createImageData(sw: Number, sh: Number): ImageData { aliasFor(__js_createImageData) }
  function createImageData(imagedata: ImageData): ImageData { aliasFor(__js_createImageData) }
  function getImageData(sx: Number, sy: Number, sw: Number, sh: Number, settings: ImageDataSettings): ImageData {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getImageData)
    """
    aliasFor(__js_getImageData)
  }
  function getImageData(sx: Number, sy: Number, sw: Number, sh: Number): ImageData { aliasFor(__js_getImageData) }
  function putImageData(imagedata: ImageData, dx: Number, dy: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/putImageData)
    """
    aliasFor(__js_putImageData)
  }
  function putImageData(imagedata: ImageData, dx: Number, dy: Number, dirtyX: Number, dirtyY: Number, dirtyWidth: Number, dirtyHeight: Number): Any { aliasFor(__js_putImageData) }
}
export interface CanvasImageSmoothing {
  var imageSmoothingEnabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)
  """ = aliasFor(__js_imageSmoothingEnabled)
  var imageSmoothingQuality: ImageSmoothingQuality """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality)
  """ = aliasFor(__js_imageSmoothingQuality)
}
export interface CanvasPath {
  function arc(x: Number, y: Number, radius: Number, startAngle: Number, endAngle: Number, counterclockwise: Bool): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/arc)
    """
    aliasFor(__js_arc)
  }
  function arc(x: Number, y: Number, radius: Number, startAngle: Number, endAngle: Number): Any { aliasFor(__js_arc) }
  function arcTo(x1: Number, y1: Number, x2: Number, y2: Number, radius: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/arcTo)
    """
    aliasFor(__js_arcTo)
  }
  function bezierCurveTo(cp1x: Number, cp1y: Number, cp2x: Number, cp2y: Number, x: Number, y: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo)
    """
    aliasFor(__js_bezierCurveTo)
  }
  function closePath(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/closePath)
    """
    aliasFor(__js_closePath)
  }
  function ellipse(x: Number, y: Number, radiusX: Number, radiusY: Number, rotation: Number, startAngle: Number, endAngle: Number, counterclockwise: Bool): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/ellipse)
    """
    aliasFor(__js_ellipse)
  }
  function ellipse(x: Number, y: Number, radiusX: Number, radiusY: Number, rotation: Number, startAngle: Number, endAngle: Number): Any { aliasFor(__js_ellipse) }
  function lineTo(x: Number, y: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineTo)
    """
    aliasFor(__js_lineTo)
  }
  function moveTo(x: Number, y: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/moveTo)
    """
    aliasFor(__js_moveTo)
  }
  function quadraticCurveTo(cpx: Number, cpy: Number, x: Number, y: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo)
    """
    aliasFor(__js_quadraticCurveTo)
  }
  function rect(x: Number, y: Number, w: Number, h: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rect)
    """
    aliasFor(__js_rect)
  }
  function roundRect(x: Number, y: Number, w: Number, h: Number, radii: Union[Number, DOMPointInit, List[Union[Number, DOMPointInit]]]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect)
    """
    aliasFor(__js_roundRect)
  }
  function roundRect(x: Number, y: Number, w: Number, h: Number): Any { aliasFor(__js_roundRect) }
}
export interface CanvasPathDrawingStyles {
  var lineCap: CanvasLineCap """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap)
  """ = aliasFor(__js_lineCap)
  var lineDashOffset: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)
  """ = aliasFor(__js_lineDashOffset)
  var lineJoin: CanvasLineJoin """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin)
  """ = aliasFor(__js_lineJoin)
  var lineWidth: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth)
  """ = aliasFor(__js_lineWidth)
  var miterLimit: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit)
  """ = aliasFor(__js_miterLimit)
  function getLineDash(): List[Number] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getLineDash)
    """
    aliasFor(__js_getLineDash)
  }
  function setLineDash(segments: List[Number]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash)
    """
    aliasFor(__js_setLineDash)
  }
}
export interface CanvasPattern {
  """
  An opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasPattern)
  """
  static {
    aliasFor(native "CanvasPattern")
    var prototype: CanvasPattern = aliasFor(__js_prototype)
    function new(): CanvasPattern { aliasFor(__op_new__) }
  }
  function setTransform(transform: DOMMatrix2DInit): Any {
    """
    Sets the transformation matrix that will be used when rendering the pattern during a fill or stroke painting operation.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasPattern/setTransform)
    """
    aliasFor(__js_setTransform)
  }
  function setTransform(): Any { aliasFor(__js_setTransform) }
}
export interface CanvasRect {
  function clearRect(x: Number, y: Number, w: Number, h: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clearRect)
    """
    aliasFor(__js_clearRect)
  }
  function fillRect(x: Number, y: Number, w: Number, h: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillRect)
    """
    aliasFor(__js_fillRect)
  }
  function strokeRect(x: Number, y: Number, w: Number, h: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeRect)
    """
    aliasFor(__js_strokeRect)
  }
}
export interface CanvasRenderingContext2D extends CanvasCompositing, CanvasDrawImage, CanvasDrawPath, CanvasFillStrokeStyles, CanvasFilters, CanvasImageData, CanvasImageSmoothing, CanvasPath, CanvasPathDrawingStyles, CanvasRect, CanvasShadowStyles, CanvasState, CanvasText, CanvasTextDrawingStyles, CanvasTransform, CanvasUserInterface {
  """
  The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D)
  """
  static {
    aliasFor(native "CanvasRenderingContext2D")
    var prototype: CanvasRenderingContext2D = aliasFor(__js_prototype)
    function new(): CanvasRenderingContext2D { aliasFor(__op_new__) }
  }
  const canvas: HTMLCanvasElement """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/canvas)
  """ = aliasFor(__js_canvas)
  function getContextAttributes(): CanvasRenderingContext2DSettings {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getContextAttributes)
    """
    aliasFor(__js_getContextAttributes)
  }
}
export interface CanvasShadowStyles {
  var shadowBlur: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowBlur)
  """ = aliasFor(__js_shadowBlur)
  var shadowColor: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowColor)
  """ = aliasFor(__js_shadowColor)
  var shadowOffsetX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)
  """ = aliasFor(__js_shadowOffsetX)
  var shadowOffsetY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)
  """ = aliasFor(__js_shadowOffsetY)
}
export interface CanvasState {
  function reset(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/reset)
    """
    aliasFor(__js_reset)
  }
  function restore(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/restore)
    """
    aliasFor(__js_restore)
  }
  function save(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/save)
    """
    aliasFor(__js_save)
  }
}
export interface CanvasText {
  function fillText(text: String, x: Number, y: Number, maxWidth: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillText)
    """
    aliasFor(__js_fillText)
  }
  function fillText(text: String, x: Number, y: Number): Any { aliasFor(__js_fillText) }
  function measureText(text: String): TextMetrics {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/measureText)
    """
    aliasFor(__js_measureText)
  }
  function strokeText(text: String, x: Number, y: Number, maxWidth: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeText)
    """
    aliasFor(__js_strokeText)
  }
  function strokeText(text: String, x: Number, y: Number): Any { aliasFor(__js_strokeText) }
}
export interface CanvasTextDrawingStyles {
  var direction: CanvasDirection """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/direction)
  """ = aliasFor(__js_direction)
  var font: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font)
  """ = aliasFor(__js_font)
  var fontKerning: CanvasFontKerning """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontKerning)
  """ = aliasFor(__js_fontKerning)
  var fontStretch: CanvasFontStretch """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontStretch)
  """ = aliasFor(__js_fontStretch)
  var fontVariantCaps: CanvasFontVariantCaps """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps)
  """ = aliasFor(__js_fontVariantCaps)
  var letterSpacing: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/letterSpacing)
  """ = aliasFor(__js_letterSpacing)
  var textAlign: CanvasTextAlign """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign)
  """ = aliasFor(__js_textAlign)
  var textBaseline: CanvasTextBaseline """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline)
  """ = aliasFor(__js_textBaseline)
  var textRendering: CanvasTextRendering """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textRendering)
  """ = aliasFor(__js_textRendering)
  var wordSpacing: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/wordSpacing)
  """ = aliasFor(__js_wordSpacing)
}
export interface CanvasTransform {
  function getTransform(): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getTransform)
    """
    aliasFor(__js_getTransform)
  }
  function resetTransform(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/resetTransform)
    """
    aliasFor(__js_resetTransform)
  }
  function rotate(angle: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rotate)
    """
    aliasFor(__js_rotate)
  }
  function scale(x: Number, y: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/scale)
    """
    aliasFor(__js_scale)
  }
  function setTransform(a: Number, b: Number, c: Number, d: Number, e: Number, f: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform)
    """
    aliasFor(__js_setTransform)
  }
  function setTransform(transform: DOMMatrix2DInit): Any { aliasFor(__js_setTransform) }
  function setTransform(): Any { aliasFor(__js_setTransform) }
  function transform(a: Number, b: Number, c: Number, d: Number, e: Number, f: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/transform)
    """
    aliasFor(__js_transform)
  }
  function translate(x: Number, y: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/translate)
    """
    aliasFor(__js_translate)
  }
}
export interface CanvasUserInterface {
  function drawFocusIfNeeded(element: Element): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded)
    """
    aliasFor(__js_drawFocusIfNeeded)
  }
  function drawFocusIfNeeded(path: Path2D, element: Element): Any { aliasFor(__js_drawFocusIfNeeded) }
}
export interface ChannelMergerNode extends AudioNode {
  """
  The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ChannelMergerNode)
  """
  static {
    aliasFor(native "ChannelMergerNode")
    var prototype: ChannelMergerNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: ChannelMergerOptions): ChannelMergerNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): ChannelMergerNode { aliasFor(__op_new__) }
  }
}
export interface ChannelSplitterNode extends AudioNode {
  """
  The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ChannelSplitterNode)
  """
  static {
    aliasFor(native "ChannelSplitterNode")
    var prototype: ChannelSplitterNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: ChannelSplitterOptions): ChannelSplitterNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): ChannelSplitterNode { aliasFor(__op_new__) }
  }
}
export interface CharacterData extends Node, ChildNode, NonDocumentTypeChildNode {
  """
  The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData)
  """
  static {
    aliasFor(native "CharacterData")
    var prototype: CharacterData = aliasFor(__js_prototype)
    function new(): CharacterData { aliasFor(__op_new__) }
  }
  var data: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/data)
  """ = aliasFor(__js_data)
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/length)
  """ = aliasFor(__js_length)
  const ownerDocument: Document = aliasFor(__js_ownerDocument)
  function appendData(data: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/appendData)
    """
    aliasFor(__js_appendData)
  }
  function deleteData(offset: Number, count: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/deleteData)
    """
    aliasFor(__js_deleteData)
  }
  function insertData(offset: Number, data: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/insertData)
    """
    aliasFor(__js_insertData)
  }
  function replaceData(offset: Number, count: Number, data: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/replaceData)
    """
    aliasFor(__js_replaceData)
  }
  function substringData(offset: Number, count: Number): String {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/substringData)
    """
    aliasFor(__js_substringData)
  }
}
export interface ChildNode extends Node {
  function after(nodes: Union[Node, String], nodes: Union[Node, String], nodes: Union[Node, String]): Any {
    """
    Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.
       *
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/after)
    """
    aliasFor(__js_after)
  }
  function after(nodes: Union[Node, String], nodes: Union[Node, String]): Any { aliasFor(__js_after) }
  function after(nodes: Union[Node, String]): Any { aliasFor(__js_after) }
  function after(): Any { aliasFor(__js_after) }
  function before(nodes: Union[Node, String], nodes: Union[Node, String], nodes: Union[Node, String]): Any {
    """
    Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.
       *
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/before)
    """
    aliasFor(__js_before)
  }
  function before(nodes: Union[Node, String], nodes: Union[Node, String]): Any { aliasFor(__js_before) }
  function before(nodes: Union[Node, String]): Any { aliasFor(__js_before) }
  function before(): Any { aliasFor(__js_before) }
  function remove(): Any {
    """
    Removes node.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/remove)
    """
    aliasFor(__js_remove)
  }
  function replaceWith(nodes: Union[Node, String], nodes: Union[Node, String], nodes: Union[Node, String]): Any {
    """
    Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.
       *
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/replaceWith)
    """
    aliasFor(__js_replaceWith)
  }
  function replaceWith(nodes: Union[Node, String], nodes: Union[Node, String]): Any { aliasFor(__js_replaceWith) }
  function replaceWith(nodes: Union[Node, String]): Any { aliasFor(__js_replaceWith) }
  function replaceWith(): Any { aliasFor(__js_replaceWith) }
}
export interface ClientRect extends DOMRect {
}
export interface Clipboard extends EventTarget {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard)
  """
  static {
    aliasFor(native "Clipboard")
    var prototype: Clipboard = aliasFor(__js_prototype)
    function new(): Clipboard { aliasFor(__op_new__) }
  }
  function read(): Promise[ClipboardItems] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/read)
    """
    aliasFor(__js_read)
  }
  function readText(): Promise[String] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/readText)
    """
    aliasFor(__js_readText)
  }
  function write(data: ClipboardItems): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/write)
    """
    aliasFor(__js_write)
  }
  function writeText(data: String): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/writeText)
    """
    aliasFor(__js_writeText)
  }
}
export interface ClipboardEvent extends Event {
  """
  Events providing information related to modification of the clipboard, that is cut, copy, and paste events.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardEvent)
  """
  static {
    aliasFor(native "ClipboardEvent")
    var prototype: ClipboardEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: ClipboardEventInit): ClipboardEvent { aliasFor(__op_new__) }
    function new(type: String): ClipboardEvent { aliasFor(__op_new__) }
  }
  const clipboardData: Union[DataTransfer, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardEvent/clipboardData)
  """ = aliasFor(__js_clipboardData)
}
export interface ClipboardItem {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem)
  """
  static {
    aliasFor(native "ClipboardItem")
    var prototype: ClipboardItem = aliasFor(__js_prototype)
    function new(items: Any, options: ClipboardItemOptions): ClipboardItem { aliasFor(__op_new__) }
    function new(items: Any): ClipboardItem { aliasFor(__op_new__) }
  }
  const types: List[String] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/types)
  """ = aliasFor(__js_types)
  function getType(type: String): Promise[Blob] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/getType)
    """
    aliasFor(__js_getType)
  }
}
export interface CloseEvent extends Event {
  """
  A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent)
  """
  static {
    aliasFor(native "CloseEvent")
    var prototype: CloseEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: CloseEventInit): CloseEvent { aliasFor(__op_new__) }
    function new(type: String): CloseEvent { aliasFor(__op_new__) }
  }
  const code: Number """
  Returns the WebSocket connection close code provided by the server.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/code)
  """ = aliasFor(__js_code)
  const reason: String """
  Returns the WebSocket connection close reason provided by the server.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/reason)
  """ = aliasFor(__js_reason)
  const wasClean: Bool """
  Returns true if the connection closed cleanly; false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/wasClean)
  """ = aliasFor(__js_wasClean)
}
export interface Comment extends CharacterData {
  """
  Textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Comment)
  """
  static {
    aliasFor(native "Comment")
    var prototype: Comment = aliasFor(__js_prototype)
    function new(data: String): Comment { aliasFor(__op_new__) }
    function new(): Comment { aliasFor(__op_new__) }
  }
}
export interface CompositionEvent extends UIEvent {
  """
  The DOM CompositionEvent represents events that occur due to the user indirectly entering text.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent)
  """
  static {
    aliasFor(native "CompositionEvent")
    var prototype: CompositionEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: CompositionEventInit): CompositionEvent { aliasFor(__op_new__) }
    function new(type: String): CompositionEvent { aliasFor(__op_new__) }
  }
  const data: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent/data)
  """ = aliasFor(__js_data)
}
export interface CompressionStream extends GenericTransformStream {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream)
  """
  static {
    aliasFor(native "CompressionStream")
    var prototype: CompressionStream = aliasFor(__js_prototype)
    function new(format: CompressionFormat): CompressionStream { aliasFor(__op_new__) }
  }
}
export interface ConstantSourceNode extends AudioScheduledSourceNode {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode)
  """
  static {
    aliasFor(native "ConstantSourceNode")
    var prototype: ConstantSourceNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: ConstantSourceOptions): ConstantSourceNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): ConstantSourceNode { aliasFor(__op_new__) }
  }
  const offset: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode/offset)
  """ = aliasFor(__js_offset)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface ConvolverNode extends AudioNode {
  """
  An AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode)
  """
  static {
    aliasFor(native "ConvolverNode")
    var prototype: ConvolverNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: ConvolverOptions): ConvolverNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): ConvolverNode { aliasFor(__op_new__) }
  }
  var buffer: Union[AudioBuffer, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode/buffer)
  """ = aliasFor(__js_buffer)
  var normalize: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode/normalize)
  """ = aliasFor(__js_normalize)
}
export interface CountQueuingStrategy extends QueuingStrategy {
  """
  This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy)
  """
  static {
    aliasFor(native "CountQueuingStrategy")
    var prototype: CountQueuingStrategy = aliasFor(__js_prototype)
    function new(init: QueuingStrategyInit): CountQueuingStrategy { aliasFor(__op_new__) }
  }
  const highWaterMark: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/highWaterMark)
  """ = aliasFor(__js_highWaterMark)
  const size: QueuingStrategySize """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/size)
  """ = aliasFor(__js_size)
}
export interface Credential {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential)
  """
  static {
    aliasFor(native "Credential")
    var prototype: Credential = aliasFor(__js_prototype)
    function new(): Credential { aliasFor(__op_new__) }
  }
  const id: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential/id)
  """ = aliasFor(__js_id)
  const type: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential/type)
  """ = aliasFor(__js_type)
}
export interface CredentialsContainer {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer)
  """
  static {
    aliasFor(native "CredentialsContainer")
    var prototype: CredentialsContainer = aliasFor(__js_prototype)
    function new(): CredentialsContainer { aliasFor(__op_new__) }
  }
  function create(options: CredentialCreationOptions): Promise[Union[Credential, Null]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/create)
    """
    aliasFor(__js_create)
  }
  function create(): Promise[Union[Credential, Null]] { aliasFor(__js_create) }
  function get(options: CredentialRequestOptions): Promise[Union[Credential, Null]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/get)
    """
    aliasFor(__js_get)
  }
  function get(): Promise[Union[Credential, Null]] { aliasFor(__js_get) }
  function preventSilentAccess(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/preventSilentAccess)
    """
    aliasFor(__js_preventSilentAccess)
  }
  function store(credential: Credential): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/store)
    """
    aliasFor(__js_store)
  }
}
export interface Crypto {
  """
  Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto)
  """
  static {
    aliasFor(native "Crypto")
    var prototype: Crypto = aliasFor(__js_prototype)
    function new(): Crypto { aliasFor(__op_new__) }
  }
  const subtle: SubtleCrypto """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/subtle)
  """ = aliasFor(__js_subtle)
  function randomUUID(): String {
    """
    Available only in secure contexts.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/randomUUID)
    """
    aliasFor(__js_randomUUID)
  }
}
export interface CryptoKey {
  """
  The CryptoKey dictionary of the Web Crypto API represents a cryptographic key.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey)
  """
  static {
    aliasFor(native "CryptoKey")
    var prototype: CryptoKey = aliasFor(__js_prototype)
    function new(): CryptoKey { aliasFor(__op_new__) }
  }
  const algorithm: KeyAlgorithm """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/algorithm)
  """ = aliasFor(__js_algorithm)
  const extractable: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/extractable)
  """ = aliasFor(__js_extractable)
  const type: KeyType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/type)
  """ = aliasFor(__js_type)
  const usages: List[KeyUsage] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/usages)
  """ = aliasFor(__js_usages)
}
export interface CustomElementRegistry {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry)
  """
  static {
    aliasFor(native "CustomElementRegistry")
    var prototype: CustomElementRegistry = aliasFor(__js_prototype)
    function new(): CustomElementRegistry { aliasFor(__op_new__) }
  }
  function define(name: String, constructor: CustomElementConstructor, options: ElementDefinitionOptions): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/define)
    """
    aliasFor(__js_define)
  }
  function define(name: String, constructor: CustomElementConstructor): Any { aliasFor(__js_define) }
  function get(name: String): Union[CustomElementConstructor, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/get)
    """
    aliasFor(__js_get)
  }
  function getName(constructor: CustomElementConstructor): Union[String, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/getName)
    """
    aliasFor(__js_getName)
  }
  function upgrade(root: Node): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/upgrade)
    """
    aliasFor(__js_upgrade)
  }
  function whenDefined(name: String): Promise[CustomElementConstructor] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/whenDefined)
    """
    aliasFor(__js_whenDefined)
  }
}
export interface CustomEvent {
  static {
    aliasFor(native "CustomEvent")
    var prototype: CustomEvent = aliasFor(__js_prototype)
  }
}
export interface DOMException extends Error {
  """
  An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException)
  """
  static {
    aliasFor(native "DOMException")
    var prototype: DOMException = aliasFor(__js_prototype)
    function new(message: String, name: String): DOMException { aliasFor(__op_new__) }
    function new(message: String): DOMException { aliasFor(__op_new__) }
    function new(): DOMException { aliasFor(__op_new__) }
    const INDEX_SIZE_ERR: Number = aliasFor(__js_INDEX_SIZE_ERR)
    const DOMSTRING_SIZE_ERR: Number = aliasFor(__js_DOMSTRING_SIZE_ERR)
    const HIERARCHY_REQUEST_ERR: Number = aliasFor(__js_HIERARCHY_REQUEST_ERR)
    const WRONG_DOCUMENT_ERR: Number = aliasFor(__js_WRONG_DOCUMENT_ERR)
    const INVALID_CHARACTER_ERR: Number = aliasFor(__js_INVALID_CHARACTER_ERR)
    const NO_DATA_ALLOWED_ERR: Number = aliasFor(__js_NO_DATA_ALLOWED_ERR)
    const NO_MODIFICATION_ALLOWED_ERR: Number = aliasFor(__js_NO_MODIFICATION_ALLOWED_ERR)
    const NOT_FOUND_ERR: Number = aliasFor(__js_NOT_FOUND_ERR)
    const NOT_SUPPORTED_ERR: Number = aliasFor(__js_NOT_SUPPORTED_ERR)
    const INUSE_ATTRIBUTE_ERR: Number = aliasFor(__js_INUSE_ATTRIBUTE_ERR)
    const INVALID_STATE_ERR: Number = aliasFor(__js_INVALID_STATE_ERR)
    const SYNTAX_ERR: Number = aliasFor(__js_SYNTAX_ERR)
    const INVALID_MODIFICATION_ERR: Number = aliasFor(__js_INVALID_MODIFICATION_ERR)
    const NAMESPACE_ERR: Number = aliasFor(__js_NAMESPACE_ERR)
    const INVALID_ACCESS_ERR: Number = aliasFor(__js_INVALID_ACCESS_ERR)
    const VALIDATION_ERR: Number = aliasFor(__js_VALIDATION_ERR)
    const TYPE_MISMATCH_ERR: Number = aliasFor(__js_TYPE_MISMATCH_ERR)
    const SECURITY_ERR: Number = aliasFor(__js_SECURITY_ERR)
    const NETWORK_ERR: Number = aliasFor(__js_NETWORK_ERR)
    const ABORT_ERR: Number = aliasFor(__js_ABORT_ERR)
    const URL_MISMATCH_ERR: Number = aliasFor(__js_URL_MISMATCH_ERR)
    const QUOTA_EXCEEDED_ERR: Number = aliasFor(__js_QUOTA_EXCEEDED_ERR)
    const TIMEOUT_ERR: Number = aliasFor(__js_TIMEOUT_ERR)
    const INVALID_NODE_TYPE_ERR: Number = aliasFor(__js_INVALID_NODE_TYPE_ERR)
    const DATA_CLONE_ERR: Number = aliasFor(__js_DATA_CLONE_ERR)
  }
  const message: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/message)
  """ = aliasFor(__js_message)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/name)
  """ = aliasFor(__js_name)
  const INDEX_SIZE_ERR: Number = aliasFor(__js_INDEX_SIZE_ERR)
  const DOMSTRING_SIZE_ERR: Number = aliasFor(__js_DOMSTRING_SIZE_ERR)
  const HIERARCHY_REQUEST_ERR: Number = aliasFor(__js_HIERARCHY_REQUEST_ERR)
  const WRONG_DOCUMENT_ERR: Number = aliasFor(__js_WRONG_DOCUMENT_ERR)
  const INVALID_CHARACTER_ERR: Number = aliasFor(__js_INVALID_CHARACTER_ERR)
  const NO_DATA_ALLOWED_ERR: Number = aliasFor(__js_NO_DATA_ALLOWED_ERR)
  const NO_MODIFICATION_ALLOWED_ERR: Number = aliasFor(__js_NO_MODIFICATION_ALLOWED_ERR)
  const NOT_FOUND_ERR: Number = aliasFor(__js_NOT_FOUND_ERR)
  const NOT_SUPPORTED_ERR: Number = aliasFor(__js_NOT_SUPPORTED_ERR)
  const INUSE_ATTRIBUTE_ERR: Number = aliasFor(__js_INUSE_ATTRIBUTE_ERR)
  const INVALID_STATE_ERR: Number = aliasFor(__js_INVALID_STATE_ERR)
  const SYNTAX_ERR: Number = aliasFor(__js_SYNTAX_ERR)
  const INVALID_MODIFICATION_ERR: Number = aliasFor(__js_INVALID_MODIFICATION_ERR)
  const NAMESPACE_ERR: Number = aliasFor(__js_NAMESPACE_ERR)
  const INVALID_ACCESS_ERR: Number = aliasFor(__js_INVALID_ACCESS_ERR)
  const VALIDATION_ERR: Number = aliasFor(__js_VALIDATION_ERR)
  const TYPE_MISMATCH_ERR: Number = aliasFor(__js_TYPE_MISMATCH_ERR)
  const SECURITY_ERR: Number = aliasFor(__js_SECURITY_ERR)
  const NETWORK_ERR: Number = aliasFor(__js_NETWORK_ERR)
  const ABORT_ERR: Number = aliasFor(__js_ABORT_ERR)
  const URL_MISMATCH_ERR: Number = aliasFor(__js_URL_MISMATCH_ERR)
  const QUOTA_EXCEEDED_ERR: Number = aliasFor(__js_QUOTA_EXCEEDED_ERR)
  const TIMEOUT_ERR: Number = aliasFor(__js_TIMEOUT_ERR)
  const INVALID_NODE_TYPE_ERR: Number = aliasFor(__js_INVALID_NODE_TYPE_ERR)
  const DATA_CLONE_ERR: Number = aliasFor(__js_DATA_CLONE_ERR)
}
export interface DOMImplementation {
  """
  An object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation)
  """
  static {
    aliasFor(native "DOMImplementation")
    var prototype: DOMImplementation = aliasFor(__js_prototype)
    function new(): DOMImplementation { aliasFor(__op_new__) }
  }
  function createDocument(namespace: Union[String, Null], qualifiedName: Union[String, Null], doctype: Union[DocumentType, Null]): XMLDocument {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createDocument)
    """
    aliasFor(__js_createDocument)
  }
  function createDocument(namespace: Union[String, Null], qualifiedName: Union[String, Null]): XMLDocument { aliasFor(__js_createDocument) }
  function createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createDocumentType)
    """
    aliasFor(__js_createDocumentType)
  }
  function createHTMLDocument(title: String): Document {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument)
    """
    aliasFor(__js_createHTMLDocument)
  }
  function createHTMLDocument(): Document { aliasFor(__js_createHTMLDocument) }
}
export interface DOMMatrix extends DOMMatrixReadOnly {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix)
  """
  static {
    aliasFor(native "DOMMatrix")
    var prototype: DOMMatrix = aliasFor(__js_prototype)
    function new(init: Union[String, List[Number]]): DOMMatrix { aliasFor(__op_new__) }
    function new(): DOMMatrix { aliasFor(__op_new__) }
    function fromFloat32Array(array32: Float32Array): DOMMatrix { aliasFor(__js_fromFloat32Array) }
    function fromFloat64Array(array64: Float64Array): DOMMatrix { aliasFor(__js_fromFloat64Array) }
    function fromMatrix(other: DOMMatrixInit): DOMMatrix { aliasFor(__js_fromMatrix) }
    function fromMatrix(): DOMMatrix { aliasFor(__js_fromMatrix) }
  }
  var a: Number = aliasFor(__js_a)
  var b: Number = aliasFor(__js_b)
  var c: Number = aliasFor(__js_c)
  var d: Number = aliasFor(__js_d)
  var e: Number = aliasFor(__js_e)
  var f: Number = aliasFor(__js_f)
  var m11: Number = aliasFor(__js_m11)
  var m12: Number = aliasFor(__js_m12)
  var m13: Number = aliasFor(__js_m13)
  var m14: Number = aliasFor(__js_m14)
  var m21: Number = aliasFor(__js_m21)
  var m22: Number = aliasFor(__js_m22)
  var m23: Number = aliasFor(__js_m23)
  var m24: Number = aliasFor(__js_m24)
  var m31: Number = aliasFor(__js_m31)
  var m32: Number = aliasFor(__js_m32)
  var m33: Number = aliasFor(__js_m33)
  var m34: Number = aliasFor(__js_m34)
  var m41: Number = aliasFor(__js_m41)
  var m42: Number = aliasFor(__js_m42)
  var m43: Number = aliasFor(__js_m43)
  var m44: Number = aliasFor(__js_m44)
  function invertSelf(): DOMMatrix { aliasFor(__js_invertSelf) }
  function multiplySelf(other: DOMMatrixInit): DOMMatrix { aliasFor(__js_multiplySelf) }
  function multiplySelf(): DOMMatrix { aliasFor(__js_multiplySelf) }
  function preMultiplySelf(other: DOMMatrixInit): DOMMatrix { aliasFor(__js_preMultiplySelf) }
  function preMultiplySelf(): DOMMatrix { aliasFor(__js_preMultiplySelf) }
  function rotateAxisAngleSelf(x: Number, y: Number, z: Number, angle: Number): DOMMatrix { aliasFor(__js_rotateAxisAngleSelf) }
  function rotateAxisAngleSelf(x: Number, y: Number, z: Number): DOMMatrix { aliasFor(__js_rotateAxisAngleSelf) }
  function rotateAxisAngleSelf(x: Number, y: Number): DOMMatrix { aliasFor(__js_rotateAxisAngleSelf) }
  function rotateAxisAngleSelf(x: Number): DOMMatrix { aliasFor(__js_rotateAxisAngleSelf) }
  function rotateAxisAngleSelf(): DOMMatrix { aliasFor(__js_rotateAxisAngleSelf) }
  function rotateFromVectorSelf(x: Number, y: Number): DOMMatrix { aliasFor(__js_rotateFromVectorSelf) }
  function rotateFromVectorSelf(x: Number): DOMMatrix { aliasFor(__js_rotateFromVectorSelf) }
  function rotateFromVectorSelf(): DOMMatrix { aliasFor(__js_rotateFromVectorSelf) }
  function rotateSelf(rotX: Number, rotY: Number, rotZ: Number): DOMMatrix { aliasFor(__js_rotateSelf) }
  function rotateSelf(rotX: Number, rotY: Number): DOMMatrix { aliasFor(__js_rotateSelf) }
  function rotateSelf(rotX: Number): DOMMatrix { aliasFor(__js_rotateSelf) }
  function rotateSelf(): DOMMatrix { aliasFor(__js_rotateSelf) }
  function scale3dSelf(scale: Number, originX: Number, originY: Number, originZ: Number): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/scale3dSelf)
    """
    aliasFor(__js_scale3dSelf)
  }
  function scale3dSelf(scale: Number, originX: Number, originY: Number): DOMMatrix { aliasFor(__js_scale3dSelf) }
  function scale3dSelf(scale: Number, originX: Number): DOMMatrix { aliasFor(__js_scale3dSelf) }
  function scale3dSelf(scale: Number): DOMMatrix { aliasFor(__js_scale3dSelf) }
  function scale3dSelf(): DOMMatrix { aliasFor(__js_scale3dSelf) }
  function scaleSelf(scaleX: Number, scaleY: Number, scaleZ: Number, originX: Number, originY: Number, originZ: Number): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/scaleSelf)
    """
    aliasFor(__js_scaleSelf)
  }
  function scaleSelf(scaleX: Number, scaleY: Number, scaleZ: Number, originX: Number, originY: Number): DOMMatrix { aliasFor(__js_scaleSelf) }
  function scaleSelf(scaleX: Number, scaleY: Number, scaleZ: Number, originX: Number): DOMMatrix { aliasFor(__js_scaleSelf) }
  function scaleSelf(scaleX: Number, scaleY: Number, scaleZ: Number): DOMMatrix { aliasFor(__js_scaleSelf) }
  function scaleSelf(scaleX: Number, scaleY: Number): DOMMatrix { aliasFor(__js_scaleSelf) }
  function scaleSelf(scaleX: Number): DOMMatrix { aliasFor(__js_scaleSelf) }
  function scaleSelf(): DOMMatrix { aliasFor(__js_scaleSelf) }
  function setMatrixValue(transformList: String): DOMMatrix { aliasFor(__js_setMatrixValue) }
  function skewXSelf(sx: Number): DOMMatrix { aliasFor(__js_skewXSelf) }
  function skewXSelf(): DOMMatrix { aliasFor(__js_skewXSelf) }
  function skewYSelf(sy: Number): DOMMatrix { aliasFor(__js_skewYSelf) }
  function skewYSelf(): DOMMatrix { aliasFor(__js_skewYSelf) }
  function translateSelf(tx: Number, ty: Number, tz: Number): DOMMatrix { aliasFor(__js_translateSelf) }
  function translateSelf(tx: Number, ty: Number): DOMMatrix { aliasFor(__js_translateSelf) }
  function translateSelf(tx: Number): DOMMatrix { aliasFor(__js_translateSelf) }
  function translateSelf(): DOMMatrix { aliasFor(__js_translateSelf) }
}
export interface SVGMatrix {
  static {
    aliasFor(native "SVGMatrix")
  }
}
export interface WebKitCSSMatrix {
  static {
    aliasFor(native "WebKitCSSMatrix")
  }
}
export interface DOMMatrixReadOnly {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly)
  """
  static {
    aliasFor(native "DOMMatrixReadOnly")
    var prototype: DOMMatrixReadOnly = aliasFor(__js_prototype)
    function new(init: Union[String, List[Number]]): DOMMatrixReadOnly { aliasFor(__op_new__) }
    function new(): DOMMatrixReadOnly { aliasFor(__op_new__) }
    function fromFloat32Array(array32: Float32Array): DOMMatrixReadOnly { aliasFor(__js_fromFloat32Array) }
    function fromFloat64Array(array64: Float64Array): DOMMatrixReadOnly { aliasFor(__js_fromFloat64Array) }
    function fromMatrix(other: DOMMatrixInit): DOMMatrixReadOnly { aliasFor(__js_fromMatrix) }
    function fromMatrix(): DOMMatrixReadOnly { aliasFor(__js_fromMatrix) }
  }
  const a: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/a)
  """ = aliasFor(__js_a)
  const b: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/b)
  """ = aliasFor(__js_b)
  const c: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/c)
  """ = aliasFor(__js_c)
  const d: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/d)
  """ = aliasFor(__js_d)
  const e: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/e)
  """ = aliasFor(__js_e)
  const f: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/f)
  """ = aliasFor(__js_f)
  const is2D: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/is2D)
  """ = aliasFor(__js_is2D)
  const isIdentity: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/isIdentity)
  """ = aliasFor(__js_isIdentity)
  const m11: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m11)
  """ = aliasFor(__js_m11)
  const m12: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m12)
  """ = aliasFor(__js_m12)
  const m13: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m13)
  """ = aliasFor(__js_m13)
  const m14: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m14)
  """ = aliasFor(__js_m14)
  const m21: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m21)
  """ = aliasFor(__js_m21)
  const m22: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m22)
  """ = aliasFor(__js_m22)
  const m23: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m23)
  """ = aliasFor(__js_m23)
  const m24: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m24)
  """ = aliasFor(__js_m24)
  const m31: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m31)
  """ = aliasFor(__js_m31)
  const m32: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m32)
  """ = aliasFor(__js_m32)
  const m33: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m33)
  """ = aliasFor(__js_m33)
  const m34: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m34)
  """ = aliasFor(__js_m34)
  const m41: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m41)
  """ = aliasFor(__js_m41)
  const m42: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m42)
  """ = aliasFor(__js_m42)
  const m43: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m43)
  """ = aliasFor(__js_m43)
  const m44: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m44)
  """ = aliasFor(__js_m44)
  function flipX(): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/flipX)
    """
    aliasFor(__js_flipX)
  }
  function flipY(): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/flipY)
    """
    aliasFor(__js_flipY)
  }
  function inverse(): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/inverse)
    """
    aliasFor(__js_inverse)
  }
  function multiply(other: DOMMatrixInit): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/multiply)
    """
    aliasFor(__js_multiply)
  }
  function multiply(): DOMMatrix { aliasFor(__js_multiply) }
  function rotate(rotX: Number, rotY: Number, rotZ: Number): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotate)
    """
    aliasFor(__js_rotate)
  }
  function rotate(rotX: Number, rotY: Number): DOMMatrix { aliasFor(__js_rotate) }
  function rotate(rotX: Number): DOMMatrix { aliasFor(__js_rotate) }
  function rotate(): DOMMatrix { aliasFor(__js_rotate) }
  function rotateAxisAngle(x: Number, y: Number, z: Number, angle: Number): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotateAxisAngle)
    """
    aliasFor(__js_rotateAxisAngle)
  }
  function rotateAxisAngle(x: Number, y: Number, z: Number): DOMMatrix { aliasFor(__js_rotateAxisAngle) }
  function rotateAxisAngle(x: Number, y: Number): DOMMatrix { aliasFor(__js_rotateAxisAngle) }
  function rotateAxisAngle(x: Number): DOMMatrix { aliasFor(__js_rotateAxisAngle) }
  function rotateAxisAngle(): DOMMatrix { aliasFor(__js_rotateAxisAngle) }
  function rotateFromVector(x: Number, y: Number): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotateFromVector)
    """
    aliasFor(__js_rotateFromVector)
  }
  function rotateFromVector(x: Number): DOMMatrix { aliasFor(__js_rotateFromVector) }
  function rotateFromVector(): DOMMatrix { aliasFor(__js_rotateFromVector) }
  function scale(scaleX: Number, scaleY: Number, scaleZ: Number, originX: Number, originY: Number, originZ: Number): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scale)
    """
    aliasFor(__js_scale)
  }
  function scale(scaleX: Number, scaleY: Number, scaleZ: Number, originX: Number, originY: Number): DOMMatrix { aliasFor(__js_scale) }
  function scale(scaleX: Number, scaleY: Number, scaleZ: Number, originX: Number): DOMMatrix { aliasFor(__js_scale) }
  function scale(scaleX: Number, scaleY: Number, scaleZ: Number): DOMMatrix { aliasFor(__js_scale) }
  function scale(scaleX: Number, scaleY: Number): DOMMatrix { aliasFor(__js_scale) }
  function scale(scaleX: Number): DOMMatrix { aliasFor(__js_scale) }
  function scale(): DOMMatrix { aliasFor(__js_scale) }
  function scale3d(scale: Number, originX: Number, originY: Number, originZ: Number): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scale3d)
    """
    aliasFor(__js_scale3d)
  }
  function scale3d(scale: Number, originX: Number, originY: Number): DOMMatrix { aliasFor(__js_scale3d) }
  function scale3d(scale: Number, originX: Number): DOMMatrix { aliasFor(__js_scale3d) }
  function scale3d(scale: Number): DOMMatrix { aliasFor(__js_scale3d) }
  function scale3d(): DOMMatrix { aliasFor(__js_scale3d) }
  function skewX(sx: Number): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/skewX)
    """
    aliasFor(__js_skewX)
  }
  function skewX(): DOMMatrix { aliasFor(__js_skewX) }
  function skewY(sy: Number): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/skewY)
    """
    aliasFor(__js_skewY)
  }
  function skewY(): DOMMatrix { aliasFor(__js_skewY) }
  function toFloat32Array(): Float32Array {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/toFloat32Array)
    """
    aliasFor(__js_toFloat32Array)
  }
  function toFloat64Array(): Float64Array {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/toFloat64Array)
    """
    aliasFor(__js_toFloat64Array)
  }
  function toJSON(): Any { aliasFor(__js_toJSON) }
  function transformPoint(point: DOMPointInit): DOMPoint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/transformPoint)
    """
    aliasFor(__js_transformPoint)
  }
  function transformPoint(): DOMPoint { aliasFor(__js_transformPoint) }
  function translate(tx: Number, ty: Number, tz: Number): DOMMatrix {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/translate)
    """
    aliasFor(__js_translate)
  }
  function translate(tx: Number, ty: Number): DOMMatrix { aliasFor(__js_translate) }
  function translate(tx: Number): DOMMatrix { aliasFor(__js_translate) }
  function translate(): DOMMatrix { aliasFor(__js_translate) }
  function toString(): String { aliasFor(__js_toString) }
}
export interface DOMParser {
  """
  Provides the ability to parse XML or HTML source code from a string into a DOM Document.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMParser)
  """
  static {
    aliasFor(native "DOMParser")
    var prototype: DOMParser = aliasFor(__js_prototype)
    function new(): DOMParser { aliasFor(__op_new__) }
  }
  function parseFromString(string: String, type: DOMParserSupportedType): Document {
    """
    Parses string using either the HTML or XML parser, according to type, and returns the resulting Document. type can be "text/html" (which will invoke the HTML parser), or any of "text/xml", "application/xml", "application/xhtml+xml", or "image/svg+xml" (which will invoke the XML parser).
       *
    For the XML parser, if string cannot be parsed, then the returned Document will contain elements describing the resulting error.
       *
    Note that script elements are not evaluated during parsing, and the resulting document's encoding will always be UTF-8.
       *
    Values other than the above for type will cause a TypeError exception to be thrown.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMParser/parseFromString)
    """
    aliasFor(__js_parseFromString)
  }
}
export interface DOMPoint extends DOMPointReadOnly {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint)
  """
  static {
    aliasFor(native "DOMPoint")
    var prototype: DOMPoint = aliasFor(__js_prototype)
    function new(x: Number, y: Number, z: Number, w: Number): DOMPoint { aliasFor(__op_new__) }
    function new(x: Number, y: Number, z: Number): DOMPoint { aliasFor(__op_new__) }
    function new(x: Number, y: Number): DOMPoint { aliasFor(__op_new__) }
    function new(x: Number): DOMPoint { aliasFor(__op_new__) }
    function new(): DOMPoint { aliasFor(__op_new__) }
    function fromPoint(other: DOMPointInit): DOMPoint {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/fromPoint_static)
      """
      aliasFor(__js_fromPoint)
    }
    function fromPoint(): DOMPoint { aliasFor(__js_fromPoint) }
  }
  var w: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/w)
  """ = aliasFor(__js_w)
  var x: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/x)
  """ = aliasFor(__js_x)
  var y: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/y)
  """ = aliasFor(__js_y)
  var z: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/z)
  """ = aliasFor(__js_z)
}
export interface SVGPoint {
  static {
    aliasFor(native "SVGPoint")
  }
}
export interface DOMPointReadOnly {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly)
  """
  static {
    aliasFor(native "DOMPointReadOnly")
    var prototype: DOMPointReadOnly = aliasFor(__js_prototype)
    function new(x: Number, y: Number, z: Number, w: Number): DOMPointReadOnly { aliasFor(__op_new__) }
    function new(x: Number, y: Number, z: Number): DOMPointReadOnly { aliasFor(__op_new__) }
    function new(x: Number, y: Number): DOMPointReadOnly { aliasFor(__op_new__) }
    function new(x: Number): DOMPointReadOnly { aliasFor(__op_new__) }
    function new(): DOMPointReadOnly { aliasFor(__op_new__) }
    function fromPoint(other: DOMPointInit): DOMPointReadOnly {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/fromPoint_static)
      """
      aliasFor(__js_fromPoint)
    }
    function fromPoint(): DOMPointReadOnly { aliasFor(__js_fromPoint) }
  }
  const w: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/w)
  """ = aliasFor(__js_w)
  const x: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/x)
  """ = aliasFor(__js_x)
  const y: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/y)
  """ = aliasFor(__js_y)
  const z: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/z)
  """ = aliasFor(__js_z)
  function matrixTransform(matrix: DOMMatrixInit): DOMPoint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/matrixTransform)
    """
    aliasFor(__js_matrixTransform)
  }
  function matrixTransform(): DOMPoint { aliasFor(__js_matrixTransform) }
  function toJSON(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface DOMQuad {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad)
  """
  static {
    aliasFor(native "DOMQuad")
    var prototype: DOMQuad = aliasFor(__js_prototype)
    function new(p1: DOMPointInit, p2: DOMPointInit, p3: DOMPointInit, p4: DOMPointInit): DOMQuad { aliasFor(__op_new__) }
    function new(p1: DOMPointInit, p2: DOMPointInit, p3: DOMPointInit): DOMQuad { aliasFor(__op_new__) }
    function new(p1: DOMPointInit, p2: DOMPointInit): DOMQuad { aliasFor(__op_new__) }
    function new(p1: DOMPointInit): DOMQuad { aliasFor(__op_new__) }
    function new(): DOMQuad { aliasFor(__op_new__) }
    function fromQuad(other: DOMQuadInit): DOMQuad { aliasFor(__js_fromQuad) }
    function fromQuad(): DOMQuad { aliasFor(__js_fromQuad) }
    function fromRect(other: DOMRectInit): DOMQuad { aliasFor(__js_fromRect) }
    function fromRect(): DOMQuad { aliasFor(__js_fromRect) }
  }
  const p1: DOMPoint """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p1)
  """ = aliasFor(__js_p1)
  const p2: DOMPoint """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p2)
  """ = aliasFor(__js_p2)
  const p3: DOMPoint """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p3)
  """ = aliasFor(__js_p3)
  const p4: DOMPoint """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p4)
  """ = aliasFor(__js_p4)
  function getBounds(): DOMRect {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/getBounds)
    """
    aliasFor(__js_getBounds)
  }
  function toJSON(): Any { aliasFor(__js_toJSON) }
}
export interface DOMRect extends DOMRectReadOnly {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect)
  """
  static {
    aliasFor(native "DOMRect")
    var prototype: DOMRect = aliasFor(__js_prototype)
    function new(x: Number, y: Number, width: Number, height: Number): DOMRect { aliasFor(__op_new__) }
    function new(x: Number, y: Number, width: Number): DOMRect { aliasFor(__op_new__) }
    function new(x: Number, y: Number): DOMRect { aliasFor(__op_new__) }
    function new(x: Number): DOMRect { aliasFor(__op_new__) }
    function new(): DOMRect { aliasFor(__op_new__) }
    function fromRect(other: DOMRectInit): DOMRect { aliasFor(__js_fromRect) }
    function fromRect(): DOMRect { aliasFor(__js_fromRect) }
  }
  var height: Number = aliasFor(__js_height)
  var width: Number = aliasFor(__js_width)
  var x: Number = aliasFor(__js_x)
  var y: Number = aliasFor(__js_y)
}
export interface SVGRect {
  static {
    aliasFor(native "SVGRect")
  }
}
export interface DOMRectList {
  static {
    aliasFor(native "DOMRectList")
    var prototype: DOMRectList = aliasFor(__js_prototype)
    function new(): DOMRectList { aliasFor(__op_new__) }
  }
  const length: Number = aliasFor(__js_length)
  function item(index: Number): Union[DOMRect, Null] { aliasFor(__js_item) }
  function __getitem__(index: Number): DOMRect { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: DOMRect): DOMRect { aliasFor(__op_setitem__) }
}
export interface DOMRectReadOnly {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly)
  """
  static {
    aliasFor(native "DOMRectReadOnly")
    var prototype: DOMRectReadOnly = aliasFor(__js_prototype)
    function new(x: Number, y: Number, width: Number, height: Number): DOMRectReadOnly { aliasFor(__op_new__) }
    function new(x: Number, y: Number, width: Number): DOMRectReadOnly { aliasFor(__op_new__) }
    function new(x: Number, y: Number): DOMRectReadOnly { aliasFor(__op_new__) }
    function new(x: Number): DOMRectReadOnly { aliasFor(__op_new__) }
    function new(): DOMRectReadOnly { aliasFor(__op_new__) }
    function fromRect(other: DOMRectInit): DOMRectReadOnly {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/fromRect_static)
      """
      aliasFor(__js_fromRect)
    }
    function fromRect(): DOMRectReadOnly { aliasFor(__js_fromRect) }
  }
  const bottom: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/bottom)
  """ = aliasFor(__js_bottom)
  const height: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height)
  """ = aliasFor(__js_height)
  const left: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/left)
  """ = aliasFor(__js_left)
  const right: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/right)
  """ = aliasFor(__js_right)
  const top: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/top)
  """ = aliasFor(__js_top)
  const width: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width)
  """ = aliasFor(__js_width)
  const x: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x)
  """ = aliasFor(__js_x)
  const y: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y)
  """ = aliasFor(__js_y)
  function toJSON(): Any { aliasFor(__js_toJSON) }
}
export interface DOMStringList {
  """
  A type returned by some APIs which contains a list of DOMString (strings).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList)
  """
  static {
    aliasFor(native "DOMStringList")
    var prototype: DOMStringList = aliasFor(__js_prototype)
    function new(): DOMStringList { aliasFor(__op_new__) }
  }
  const length: Number """
  Returns the number of strings in strings.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/length)
  """ = aliasFor(__js_length)
  function contains(string: String): Bool {
    """
    Returns true if strings contains string, and false otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/contains)
    """
    aliasFor(__js_contains)
  }
  function item(index: Number): Union[String, Null] {
    """
    Returns the string with index index from strings.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/item)
    """
    aliasFor(__js_item)
  }
  function __getitem__(index: Number): String { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: String): String { aliasFor(__op_setitem__) }
}
export interface DOMStringMap {
  """
  Used by the dataset HTML attribute to represent data for custom attributes added to elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringMap)
  """
  static {
    aliasFor(native "DOMStringMap")
    var prototype: DOMStringMap = aliasFor(__js_prototype)
    function new(): DOMStringMap { aliasFor(__op_new__) }
  }
  function __getitem__(name: String): Union[String, Null] { aliasFor(__op_getitem__) }
  function __setitem__(name: String, value: Union[String, Null]): Union[String, Null] { aliasFor(__op_setitem__) }
}
export interface DOMTokenList {
  """
  A set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList, HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList)
  """
  static {
    aliasFor(native "DOMTokenList")
    var prototype: DOMTokenList = aliasFor(__js_prototype)
    function new(): DOMTokenList { aliasFor(__op_new__) }
  }
  const length: Number """
  Returns the number of tokens.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/length)
  """ = aliasFor(__js_length)
  var value: String """
  Returns the associated set as string.
     *
  Can be set, to change the associated attribute.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/value)
  """ = aliasFor(__js_value)
  function toString(): String { aliasFor(__js_toString) }
  function add(tokens: String, tokens: String, tokens: String): Any {
    """
    Adds all arguments passed, except those already present.
       *
    Throws a "SyntaxError" DOMException if one of the arguments is the empty string.
       *
    Throws an "InvalidCharacterError" DOMException if one of the arguments contains any ASCII whitespace.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/add)
    """
    aliasFor(__js_add)
  }
  function add(tokens: String, tokens: String): Any { aliasFor(__js_add) }
  function add(tokens: String): Any { aliasFor(__js_add) }
  function add(): Any { aliasFor(__js_add) }
  function contains(token: String): Bool {
    """
    Returns true if token is present, and false otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/contains)
    """
    aliasFor(__js_contains)
  }
  function item(index: Number): Union[String, Null] {
    """
    Returns the token with index index.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/item)
    """
    aliasFor(__js_item)
  }
  function remove(tokens: String, tokens: String, tokens: String): Any {
    """
    Removes arguments passed, if they are present.
       *
    Throws a "SyntaxError" DOMException if one of the arguments is the empty string.
       *
    Throws an "InvalidCharacterError" DOMException if one of the arguments contains any ASCII whitespace.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/remove)
    """
    aliasFor(__js_remove)
  }
  function remove(tokens: String, tokens: String): Any { aliasFor(__js_remove) }
  function remove(tokens: String): Any { aliasFor(__js_remove) }
  function remove(): Any { aliasFor(__js_remove) }
  function replace(token: String, newToken: String): Bool {
    """
    Replaces token with newToken.
       *
    Returns true if token was replaced with newToken, and false otherwise.
       *
    Throws a "SyntaxError" DOMException if one of the arguments is the empty string.
       *
    Throws an "InvalidCharacterError" DOMException if one of the arguments contains any ASCII whitespace.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/replace)
    """
    aliasFor(__js_replace)
  }
  function supports(token: String): Bool {
    """
    Returns true if token is in the associated attribute's supported tokens. Returns false otherwise.
       *
    Throws a TypeError if the associated attribute has no supported tokens defined.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/supports)
    """
    aliasFor(__js_supports)
  }
  function toggle(token: String, force: Bool): Bool {
    """
    If force is not given, "toggles" token, removing it if it's present and adding it if it's not present. If force is true, adds token (same as add()). If force is false, removes token (same as remove()).
       *
    Returns true if token is now present, and false otherwise.
       *
    Throws a "SyntaxError" DOMException if token is empty.
       *
    Throws an "InvalidCharacterError" DOMException if token contains any spaces.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/toggle)
    """
    aliasFor(__js_toggle)
  }
  function toggle(token: String): Bool { aliasFor(__js_toggle) }
  function forEach(callbackfn: function(value: String, key: Number, parent: DOMTokenList): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: String, key: Number, parent: DOMTokenList): Any): Any { aliasFor(__js_forEach) }
  function __getitem__(index: Number): String { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: String): String { aliasFor(__op_setitem__) }
}
export interface DataTransfer {
  """
  Used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer)
  """
  static {
    aliasFor(native "DataTransfer")
    var prototype: DataTransfer = aliasFor(__js_prototype)
    function new(): DataTransfer { aliasFor(__op_new__) }
  }
  var dropEffect: Union[_SStringnone, _SStringcopy, _SStringlink, _SStringmove] """
  Returns the kind of operation that is currently selected. If the kind of operation isn't one of those that is allowed by the effectAllowed attribute, then the operation will fail.
     *
  Can be set, to change the selected operation.
     *
  The possible values are "none", "copy", "link", and "move".
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/dropEffect)
  """ = aliasFor(__js_dropEffect)
  var effectAllowed: Union[_SStringnone, _SStringcopy, _SStringcopyLink, _SStringcopyMove, _SStringlink, _SStringlinkMove, _SStringmove, _SStringall, _SStringuninitialized] """
  Returns the kinds of operations that are to be allowed.
     *
  Can be set (during the dragstart event), to change the allowed operations.
     *
  The possible values are "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all", and "uninitialized",
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/effectAllowed)
  """ = aliasFor(__js_effectAllowed)
  const files: FileList """
  Returns a FileList of the files being dragged, if any.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/files)
  """ = aliasFor(__js_files)
  const items: DataTransferItemList """
  Returns a DataTransferItemList object, with the drag data.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/items)
  """ = aliasFor(__js_items)
  const types: List[String] """
  Returns a frozen array listing the formats that were set in the dragstart event. In addition, if any files are being dragged, then one of the types will be the string "Files".
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/types)
  """ = aliasFor(__js_types)
  function clearData(format: String): Any {
    """
    Removes the data of the specified formats. Removes all data if the argument is omitted.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/clearData)
    """
    aliasFor(__js_clearData)
  }
  function clearData(): Any { aliasFor(__js_clearData) }
  function getData(format: String): String {
    """
    Returns the specified data. If there is no such data, returns the empty string.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/getData)
    """
    aliasFor(__js_getData)
  }
  function setData(format: String, data: String): Any {
    """
    Adds the specified data.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/setData)
    """
    aliasFor(__js_setData)
  }
  function setDragImage(image: Element, x: Number, y: Number): Any {
    """
    Uses the given element to update the drag feedback, replacing any previously specified feedback.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/setDragImage)
    """
    aliasFor(__js_setDragImage)
  }
}
export interface DataTransferItem {
  """
  One drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem)
  """
  static {
    aliasFor(native "DataTransferItem")
    var prototype: DataTransferItem = aliasFor(__js_prototype)
    function new(): DataTransferItem { aliasFor(__op_new__) }
  }
  const kind: String """
  Returns the drag data item kind, one of: "string", "file".
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/kind)
  """ = aliasFor(__js_kind)
  const type: String """
  Returns the drag data item type string.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/type)
  """ = aliasFor(__js_type)
  function getAsFile(): Union[File, Null] {
    """
    Returns a File object, if the drag data item kind is File.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsFile)
    """
    aliasFor(__js_getAsFile)
  }
  function getAsString(callback: Union[FunctionStringCallback, Null]): Any {
    """
    Invokes the callback with the string data as the argument, if the drag data item kind is text.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsString)
    """
    aliasFor(__js_getAsString)
  }
  function webkitGetAsEntry(): Union[FileSystemEntry, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/webkitGetAsEntry)
    """
    aliasFor(__js_webkitGetAsEntry)
  }
}
export interface DataTransferItemList {
  """
  A list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList)
  """
  static {
    aliasFor(native "DataTransferItemList")
    var prototype: DataTransferItemList = aliasFor(__js_prototype)
    function new(): DataTransferItemList { aliasFor(__op_new__) }
  }
  const length: Number """
  Returns the number of items in the drag data store.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/length)
  """ = aliasFor(__js_length)
  function add(data: String, type: String): Union[DataTransferItem, Null] {
    """
    Adds a new entry for the given data to the drag data store. If the data is plain text then a type string has to be provided also.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/add)
    """
    aliasFor(__js_add)
  }
  function add(data: File): Union[DataTransferItem, Null] { aliasFor(__js_add) }
  function clear(): Any {
    """
    Removes all the entries in the drag data store.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/clear)
    """
    aliasFor(__js_clear)
  }
  function remove(index: Number): Any {
    """
    Removes the indexth entry in the drag data store.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/remove)
    """
    aliasFor(__js_remove)
  }
  function __getitem__(index: Number): DataTransferItem { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: DataTransferItem): DataTransferItem { aliasFor(__op_setitem__) }
}
export interface DecompressionStream extends GenericTransformStream {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DecompressionStream)
  """
  static {
    aliasFor(native "DecompressionStream")
    var prototype: DecompressionStream = aliasFor(__js_prototype)
    function new(format: CompressionFormat): DecompressionStream { aliasFor(__op_new__) }
  }
}
export interface DelayNode extends AudioNode {
  """
  A delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DelayNode)
  """
  static {
    aliasFor(native "DelayNode")
    var prototype: DelayNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: DelayOptions): DelayNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): DelayNode { aliasFor(__op_new__) }
  }
  const delayTime: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DelayNode/delayTime)
  """ = aliasFor(__js_delayTime)
}
export interface DeviceMotionEvent extends Event {
  """
  The DeviceMotionEvent provides web developers with information about the speed of changes for the device's position and orientation.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent)
  """
  static {
    aliasFor(native "DeviceMotionEvent")
    var prototype: DeviceMotionEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: DeviceMotionEventInit): DeviceMotionEvent { aliasFor(__op_new__) }
    function new(type: String): DeviceMotionEvent { aliasFor(__op_new__) }
  }
  const acceleration: Union[DeviceMotionEventAcceleration, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/acceleration)
  """ = aliasFor(__js_acceleration)
  const accelerationIncludingGravity: Union[DeviceMotionEventAcceleration, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/accelerationIncludingGravity)
  """ = aliasFor(__js_accelerationIncludingGravity)
  const interval: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/interval)
  """ = aliasFor(__js_interval)
  const rotationRate: Union[DeviceMotionEventRotationRate, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/rotationRate)
  """ = aliasFor(__js_rotationRate)
}
export interface DeviceMotionEventAcceleration {
  const x: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/x)
  """ = aliasFor(__js_x)
  const y: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/y)
  """ = aliasFor(__js_y)
  const z: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/z)
  """ = aliasFor(__js_z)
}
export interface DeviceMotionEventRotationRate {
  const alpha: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/alpha)
  """ = aliasFor(__js_alpha)
  const beta: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/beta)
  """ = aliasFor(__js_beta)
  const gamma: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/gamma)
  """ = aliasFor(__js_gamma)
}
export interface DeviceOrientationEvent extends Event {
  """
  The DeviceOrientationEvent provides web developers with information from the physical orientation of the device running the web page.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent)
  """
  static {
    aliasFor(native "DeviceOrientationEvent")
    var prototype: DeviceOrientationEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: DeviceOrientationEventInit): DeviceOrientationEvent { aliasFor(__op_new__) }
    function new(type: String): DeviceOrientationEvent { aliasFor(__op_new__) }
  }
  const absolute: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/absolute)
  """ = aliasFor(__js_absolute)
  const alpha: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/alpha)
  """ = aliasFor(__js_alpha)
  const beta: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/beta)
  """ = aliasFor(__js_beta)
  const gamma: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/gamma)
  """ = aliasFor(__js_gamma)
}
export interface DocumentEventMap extends GlobalEventHandlersEventMap {
}
export interface Document extends Node, DocumentOrShadowRoot, FontFaceSource, GlobalEventHandlers, NonElementParentNode, ParentNode, XPathEvaluatorBase {
  """
  Any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document)
  """
  static {
    aliasFor(native "Document")
    var prototype: Document = aliasFor(__js_prototype)
    function new(): Document { aliasFor(__op_new__) }
  }
  const URL: String """
  Sets or gets the URL for the current document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/URL)
  """ = aliasFor(__js_URL)
  var body: HTMLElement """
  Specifies the beginning and end of the document body.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/body)
  """ = aliasFor(__js_body)
  const characterSet: String """
  Returns document's encoding.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
  """ = aliasFor(__js_characterSet)
  const compatMode: String """
  Gets a value that indicates whether standards-compliant mode is switched on for the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/compatMode)
  """ = aliasFor(__js_compatMode)
  const contentType: String """
  Returns document's content type.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/contentType)
  """ = aliasFor(__js_contentType)
  var cookie: String """
  Returns the HTTP cookies that apply to the Document. If there are no cookies or cookies can't be applied to this resource, the empty string will be returned.
     *
  Can be set, to add a new cookie to the element's set of HTTP cookies.
     *
  If the contents are sandboxed into a unique origin (e.g. in an iframe with the sandbox attribute), a "SecurityError" DOMException will be thrown on getting and setting.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/cookie)
  """ = aliasFor(__js_cookie)
  const currentScript: Union[HTMLOrSVGScriptElement, Null] """
  Returns the script element, or the SVG script element, that is currently executing, as long as the element represents a classic script. In the case of reentrant script execution, returns the one that most recently started executing amongst those that have not yet finished executing.
     *
  Returns null if the Document is not currently executing a script or SVG script element (e.g., because the running script is an event handler, or a timeout), or if the currently executing script or SVG script element represents a module script.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/currentScript)
  """ = aliasFor(__js_currentScript)
  const defaultView: Union[WindowProxy, Null] """
  Returns the Window object of the active document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/defaultView)
  """ = aliasFor(__js_defaultView)
  var designMode: String """
  Sets or gets a value that indicates whether the document can be edited.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/designMode)
  """ = aliasFor(__js_designMode)
  var dir: String """
  Sets or retrieves a value that indicates the reading order of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/dir)
  """ = aliasFor(__js_dir)
  const doctype: Union[DocumentType, Null] """
  Gets an object representing the document type declaration associated with the current document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/doctype)
  """ = aliasFor(__js_doctype)
  const documentElement: HTMLElement """
  Gets a reference to the root node of the document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/documentElement)
  """ = aliasFor(__js_documentElement)
  const documentURI: String """
  Returns document's URL.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/documentURI)
  """ = aliasFor(__js_documentURI)
  const embeds: HTMLCollection """
  Retrieves a collection of all embed objects in the document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/embeds)
  """ = aliasFor(__js_embeds)
  const forms: HTMLCollection """
  Retrieves a collection, in source order, of all form objects in the document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/forms)
  """ = aliasFor(__js_forms)
  const fullscreenEnabled: Bool """
  Returns true if document has the ability to display elements fullscreen and fullscreen is supported, or false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenEnabled)
  """ = aliasFor(__js_fullscreenEnabled)
  const head: HTMLHeadElement """
  Returns the head element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/head)
  """ = aliasFor(__js_head)
  const hidden: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/hidden)
  """ = aliasFor(__js_hidden)
  const images: HTMLCollection """
  Retrieves a collection, in source order, of img objects in the document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/images)
  """ = aliasFor(__js_images)
  const implementation: DOMImplementation """
  Gets the implementation object of the current document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/implementation)
  """ = aliasFor(__js_implementation)
  const lastModified: String """
  Gets the date that the page was last modified, if the page supplies one.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lastModified)
  """ = aliasFor(__js_lastModified)
  const links: HTMLCollection """
  Retrieves a collection of all a objects that specify the href property and all area objects in the document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/links)
  """ = aliasFor(__js_links)
  var onfullscreenchange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenchange_event)
  """ = aliasFor(__js_onfullscreenchange)
  var onfullscreenerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenerror_event)
  """ = aliasFor(__js_onfullscreenerror)
  var onpointerlockchange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerlockchange_event)
  """ = aliasFor(__js_onpointerlockchange)
  var onpointerlockerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerlockerror_event)
  """ = aliasFor(__js_onpointerlockerror)
  var onreadystatechange: Union[function(ev: Event): Any, Null] """
  Fires when the state of the object has changed.
  @param ev The event
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/readystatechange_event)
  """ = aliasFor(__js_onreadystatechange)
  var onvisibilitychange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/visibilitychange_event)
  """ = aliasFor(__js_onvisibilitychange)
  const ownerDocument: Null = aliasFor(__js_ownerDocument)
  const pictureInPictureEnabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureEnabled)
  """ = aliasFor(__js_pictureInPictureEnabled)
  const plugins: HTMLCollection """
  Return an HTMLCollection of the embed elements in the Document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/plugins)
  """ = aliasFor(__js_plugins)
  const readyState: DocumentReadyState """
  Retrieves a value that indicates the current state of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/readyState)
  """ = aliasFor(__js_readyState)
  const referrer: String """
  Gets the URL of the location that referred the user to the current page.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/referrer)
  """ = aliasFor(__js_referrer)
  const scripts: HTMLCollection """
  Retrieves a collection of all script objects in the document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scripts)
  """ = aliasFor(__js_scripts)
  const scrollingElement: Union[Element, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollingElement)
  """ = aliasFor(__js_scrollingElement)
  const timeline: DocumentTimeline """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/timeline)
  """ = aliasFor(__js_timeline)
  var title: String """
  Contains the title of the document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/title)
  """ = aliasFor(__js_title)
  const visibilityState: DocumentVisibilityState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/visibilityState)
  """ = aliasFor(__js_visibilityState)
  function close(): Any {
    """
    Closes an output stream and forces the sent data to display.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/close)
    """
    aliasFor(__js_close)
  }
  function createAttribute(localName: String): Attr {
    """
    Creates an attribute object with a specified name.
    @param name String that sets the attribute object's name.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createAttribute)
    """
    aliasFor(__js_createAttribute)
  }
  function createAttributeNS(namespace: Union[String, Null], qualifiedName: String): Attr {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createAttributeNS)
    """
    aliasFor(__js_createAttributeNS)
  }
  function createCDATASection(data: String): CDATASection {
    """
    Returns a CDATASection node whose data is data.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createCDATASection)
    """
    aliasFor(__js_createCDATASection)
  }
  function createComment(data: String): Comment {
    """
    Creates a comment object with the specified data.
    @param data Sets the comment object's data.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createComment)
    """
    aliasFor(__js_createComment)
  }
  function createDocumentFragment(): DocumentFragment {
    """
    Creates a new document.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createDocumentFragment)
    """
    aliasFor(__js_createDocumentFragment)
  }
  function createElement(tagName: String, options: ElementCreationOptions): HTMLElement { aliasFor(__js_createElement) }
  function createElement(tagName: String): HTMLElement { aliasFor(__js_createElement) }
  function createElementNS(namespaceURI: _XString10, qualifiedName: String): HTMLElement {
    """
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
       *
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
       *
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
       *
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
       *
    When supplied, options's is can be used to create a customized built-in element.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
    """
    aliasFor(__js_createElementNS)
  }
  function createElementNS(namespaceURI: _XString11, qualifiedName: String): SVGElement { aliasFor(__js_createElementNS) }
  function createElementNS(namespaceURI: _XString12, qualifiedName: String): MathMLElement { aliasFor(__js_createElementNS) }
  function createElementNS(namespaceURI: Union[String, Null], qualifiedName: String, options: ElementCreationOptions): Element { aliasFor(__js_createElementNS) }
  function createElementNS(namespaceURI: Union[String, Null], qualifiedName: String): Element { aliasFor(__js_createElementNS) }
  function createElementNS(namespace: Union[String, Null], qualifiedName: String, options: Union[String, ElementCreationOptions]): Element { aliasFor(__js_createElementNS) }
  function createElementNS(namespace: Union[String, Null], qualifiedName: String): Element { aliasFor(__js_createElementNS) }
  function createEvent(eventInterface: _SStringAnimationEvent): AnimationEvent {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createEvent)
    """
    aliasFor(__js_createEvent)
  }
  function createEvent(eventInterface: _SStringAnimationPlaybackEvent): AnimationPlaybackEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringAudioProcessingEvent): AudioProcessingEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringBeforeUnloadEvent): BeforeUnloadEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringBlobEvent): BlobEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringClipboardEvent): ClipboardEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringCloseEvent): CloseEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringCompositionEvent): CompositionEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringCustomEvent): CustomEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringDeviceMotionEvent): DeviceMotionEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringDeviceOrientationEvent): DeviceOrientationEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringDragEvent): DragEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringErrorEvent): ErrorEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringEvent): Event { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringEvents): Event { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringFocusEvent): FocusEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringFontFaceSetLoadEvent): FontFaceSetLoadEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringFormDataEvent): FormDataEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringGamepadEvent): GamepadEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringHashChangeEvent): HashChangeEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringIDBVersionChangeEvent): IDBVersionChangeEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringInputEvent): InputEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringKeyboardEvent): KeyboardEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringMIDIConnectionEvent): MIDIConnectionEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringMIDIMessageEvent): MIDIMessageEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringMediaEncryptedEvent): MediaEncryptedEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringMediaKeyMessageEvent): MediaKeyMessageEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringMediaQueryListEvent): MediaQueryListEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringMediaStreamTrackEvent): MediaStreamTrackEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringMessageEvent): MessageEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringMouseEvent): MouseEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringMouseEvents): MouseEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringMutationEvent): MutationEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringMutationEvents): MutationEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringOfflineAudioCompletionEvent): OfflineAudioCompletionEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringPageTransitionEvent): PageTransitionEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringPaymentMethodChangeEvent): PaymentMethodChangeEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringPaymentRequestUpdateEvent): PaymentRequestUpdateEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringPictureInPictureEvent): PictureInPictureEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringPointerEvent): PointerEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringPopStateEvent): PopStateEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringProgressEvent): ProgressEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringPromiseRejectionEvent): PromiseRejectionEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringRTCDTMFToneChangeEvent): RTCDTMFToneChangeEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringRTCDataChannelEvent): RTCDataChannelEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringRTCErrorEvent): RTCErrorEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringRTCPeerConnectionIceErrorEvent): RTCPeerConnectionIceErrorEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringRTCPeerConnectionIceEvent): RTCPeerConnectionIceEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringRTCTrackEvent): RTCTrackEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringSecurityPolicyViolationEvent): SecurityPolicyViolationEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringSpeechSynthesisErrorEvent): SpeechSynthesisErrorEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringSpeechSynthesisEvent): SpeechSynthesisEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringStorageEvent): StorageEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringSubmitEvent): SubmitEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringToggleEvent): ToggleEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringTouchEvent): TouchEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringTrackEvent): TrackEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringTransitionEvent): TransitionEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringUIEvent): UIEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringUIEvents): UIEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringWebGLContextEvent): WebGLContextEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: _SStringWheelEvent): WheelEvent { aliasFor(__js_createEvent) }
  function createEvent(eventInterface: String): Event { aliasFor(__js_createEvent) }
  function createNodeIterator(root: Node, whatToShow: Number, filter: Union[NodeFilter, Null]): NodeIterator {
    """
    Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
    @param root The root element or node to start traversing on.
    @param whatToShow The type of nodes or elements to appear in the node list
    @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createNodeIterator)
    """
    aliasFor(__js_createNodeIterator)
  }
  function createNodeIterator(root: Node, whatToShow: Number): NodeIterator { aliasFor(__js_createNodeIterator) }
  function createNodeIterator(root: Node): NodeIterator { aliasFor(__js_createNodeIterator) }
  function createProcessingInstruction(target: String, data: String): ProcessingInstruction {
    """
    Returns a ProcessingInstruction node whose target is target and data is data. If target does not match the Name production an "InvalidCharacterError" DOMException will be thrown. If data contains "?>" an "InvalidCharacterError" DOMException will be thrown.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createProcessingInstruction)
    """
    aliasFor(__js_createProcessingInstruction)
  }
  function createRange(): Range {
    """
    Returns an empty range object that has both of its boundary points positioned at the beginning of the document.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createRange)
    """
    aliasFor(__js_createRange)
  }
  function createTextNode(data: String): Text {
    """
    Creates a text string from the specified value.
    @param data String that specifies the nodeValue property of the text node.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createTextNode)
    """
    aliasFor(__js_createTextNode)
  }
  function createTreeWalker(root: Node, whatToShow: Number, filter: Union[NodeFilter, Null]): TreeWalker {
    """
    Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.
    @param root The root element or node to start traversing on.
    @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.
    @param filter A custom NodeFilter function to use.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createTreeWalker)
    """
    aliasFor(__js_createTreeWalker)
  }
  function createTreeWalker(root: Node, whatToShow: Number): TreeWalker { aliasFor(__js_createTreeWalker) }
  function createTreeWalker(root: Node): TreeWalker { aliasFor(__js_createTreeWalker) }
  function exitFullscreen(): Promise[Any] {
    """
    Stops document's fullscreen element from being displayed fullscreen and resolves promise when done.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/exitFullscreen)
    """
    aliasFor(__js_exitFullscreen)
  }
  function exitPictureInPicture(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/exitPictureInPicture)
    """
    aliasFor(__js_exitPictureInPicture)
  }
  function exitPointerLock(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/exitPointerLock)
    """
    aliasFor(__js_exitPointerLock)
  }
  function getElementById(elementId: String): Union[HTMLElement, Null] {
    """
    Returns a reference to the first object with the specified value of the ID attribute.
    @param elementId String that specifies the ID value.
    """
    aliasFor(__js_getElementById)
  }
  function getElementsByClassName(classNames: String): HTMLCollection {
    """
    Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementsByClassName)
    """
    aliasFor(__js_getElementsByClassName)
  }
  function getElementsByName(elementName: String): NodeList {
    """
    Gets a collection of objects based on the value of the NAME or ID attribute.
    @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementsByName)
    """
    aliasFor(__js_getElementsByName)
  }
  function getElementsByTagName(qualifiedName: String): HTMLCollection { aliasFor(__js_getElementsByTagName) }
  function getElementsByTagNameNS(namespaceURI: _XString10, localName: String): HTMLCollection {
    """
    If namespace and localName are "*" returns a HTMLCollection of all descendant elements.
       *
    If only namespace is "*" returns a HTMLCollection of all descendant elements whose local name is localName.
       *
    If only localName is "*" returns a HTMLCollection of all descendant elements whose namespace is namespace.
       *
    Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagNameNS)
    """
    aliasFor(__js_getElementsByTagNameNS)
  }
  function getElementsByTagNameNS(namespaceURI: _XString11, localName: String): HTMLCollection { aliasFor(__js_getElementsByTagNameNS) }
  function getElementsByTagNameNS(namespaceURI: _XString12, localName: String): HTMLCollection { aliasFor(__js_getElementsByTagNameNS) }
  function getElementsByTagNameNS(namespace: Union[String, Null], localName: String): HTMLCollection { aliasFor(__js_getElementsByTagNameNS) }
  function getSelection(): Union[Selection, Null] {
    """
    Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getSelection)
    """
    aliasFor(__js_getSelection)
  }
  function hasFocus(): Bool {
    """
    Gets a value indicating whether the object currently has focus.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/hasFocus)
    """
    aliasFor(__js_hasFocus)
  }
  function hasStorageAccess(): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/hasStorageAccess)
    """
    aliasFor(__js_hasStorageAccess)
  }
  function open(unused1: String, unused2: String): Document {
    """
    Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.
    @param url Specifies a MIME type for the document.
    @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.
    @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following values are supported.
    @param replace Specifies whether the existing entry for the document is replaced in the history list.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/open)
    """
    aliasFor(__js_open)
  }
  function open(unused1: String): Document { aliasFor(__js_open) }
  function open(): Document { aliasFor(__js_open) }
  function open(url: Union[String, URL], name: String, features: String): Union[WindowProxy, Null] { aliasFor(__js_open) }
  function requestStorageAccess(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/requestStorageAccess)
    """
    aliasFor(__js_requestStorageAccess)
  }
  function write(text: String, text: String, text: String): Any {
    """
    Writes one or more HTML expressions to a document in the specified window.
    @param content Specifies the text and HTML tags to write.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/write)
    """
    aliasFor(__js_write)
  }
  function write(text: String, text: String): Any { aliasFor(__js_write) }
  function write(text: String): Any { aliasFor(__js_write) }
  function write(): Any { aliasFor(__js_write) }
  function writeln(text: String, text: String, text: String): Any {
    """
    Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.
    @param content The text and HTML tags to write.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/writeln)
    """
    aliasFor(__js_writeln)
  }
  function writeln(text: String, text: String): Any { aliasFor(__js_writeln) }
  function writeln(text: String): Any { aliasFor(__js_writeln) }
  function writeln(): Any { aliasFor(__js_writeln) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface DocumentFragment extends Node, NonElementParentNode, ParentNode {
  """
  A minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentFragment)
  """
  static {
    aliasFor(native "DocumentFragment")
    var prototype: DocumentFragment = aliasFor(__js_prototype)
    function new(): DocumentFragment { aliasFor(__op_new__) }
  }
  const ownerDocument: Document = aliasFor(__js_ownerDocument)
  function getElementById(elementId: String): Union[HTMLElement, Null] { aliasFor(__js_getElementById) }
}
export interface DocumentOrShadowRoot {
  const activeElement: Union[Element, Null] """
  Returns the deepest element in the document through which or to which key events are being routed. This is, roughly speaking, the focused element in the document.
     *
  For the purposes of this API, when a child browsing context is focused, its container is focused in the parent browsing context. For example, if the user moves the focus to a text control in an iframe, the iframe is the element returned by the activeElement API in the iframe's node document.
     *
  Similarly, when the focused element is in a different node tree than documentOrShadowRoot, the element returned will be the host that's located in the same node tree as documentOrShadowRoot if documentOrShadowRoot is a shadow-including inclusive ancestor of the focused element, and null if not.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/activeElement)
  """ = aliasFor(__js_activeElement)
  var adoptedStyleSheets: List[CSSStyleSheet] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/adoptedStyleSheets)
  """ = aliasFor(__js_adoptedStyleSheets)
  const fullscreenElement: Union[Element, Null] """
  Returns document's fullscreen element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenElement)
  """ = aliasFor(__js_fullscreenElement)
  const pictureInPictureElement: Union[Element, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureElement)
  """ = aliasFor(__js_pictureInPictureElement)
  const pointerLockElement: Union[Element, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerLockElement)
  """ = aliasFor(__js_pointerLockElement)
  const styleSheets: StyleSheetList """
  Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/styleSheets)
  """ = aliasFor(__js_styleSheets)
  function elementFromPoint(x: Number, y: Number): Union[Element, Null] {
    """
    Returns the element for the specified x coordinate and the specified y coordinate.
    @param x The x-offset
    @param y The y-offset
    """
    aliasFor(__js_elementFromPoint)
  }
  function elementsFromPoint(x: Number, y: Number): List[Element] { aliasFor(__js_elementsFromPoint) }
  function getAnimations(): List[Animation] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getAnimations)
    """
    aliasFor(__js_getAnimations)
  }
}
export interface DocumentTimeline extends AnimationTimeline {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentTimeline)
  """
  static {
    aliasFor(native "DocumentTimeline")
    var prototype: DocumentTimeline = aliasFor(__js_prototype)
    function new(options: DocumentTimelineOptions): DocumentTimeline { aliasFor(__op_new__) }
    function new(): DocumentTimeline { aliasFor(__op_new__) }
  }
}
export interface DocumentType extends Node, ChildNode {
  """
  A Node containing a doctype.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType)
  """
  static {
    aliasFor(native "DocumentType")
    var prototype: DocumentType = aliasFor(__js_prototype)
    function new(): DocumentType { aliasFor(__op_new__) }
  }
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/name)
  """ = aliasFor(__js_name)
  const ownerDocument: Document = aliasFor(__js_ownerDocument)
  const publicId: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/publicId)
  """ = aliasFor(__js_publicId)
  const systemId: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/systemId)
  """ = aliasFor(__js_systemId)
}
export interface DragEvent extends MouseEvent {
  """
  A DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DragEvent)
  """
  static {
    aliasFor(native "DragEvent")
    var prototype: DragEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: DragEventInit): DragEvent { aliasFor(__op_new__) }
    function new(type: String): DragEvent { aliasFor(__op_new__) }
  }
  const dataTransfer: Union[DataTransfer, Null] """
  Returns the DataTransfer object for the event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DragEvent/dataTransfer)
  """ = aliasFor(__js_dataTransfer)
}
export interface DynamicsCompressorNode extends AudioNode {
  """
  Inherits properties from its parent, AudioNode.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode)
  """
  static {
    aliasFor(native "DynamicsCompressorNode")
    var prototype: DynamicsCompressorNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: DynamicsCompressorOptions): DynamicsCompressorNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): DynamicsCompressorNode { aliasFor(__op_new__) }
  }
  const attack: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/attack)
  """ = aliasFor(__js_attack)
  const knee: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/knee)
  """ = aliasFor(__js_knee)
  const ratio: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/ratio)
  """ = aliasFor(__js_ratio)
  const reduction: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/reduction)
  """ = aliasFor(__js_reduction)
  const release: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/release)
  """ = aliasFor(__js_release)
  const threshold: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/threshold)
  """ = aliasFor(__js_threshold)
}
export interface EXT_blend_minmax {
  const MIN_EXT: Number = aliasFor(__js_MIN_EXT)
  const MAX_EXT: Number = aliasFor(__js_MAX_EXT)
}
export interface EXT_color_buffer_float {
}
export interface EXT_color_buffer_half_float {
  const RGBA16F_EXT: Number = aliasFor(__js_RGBA16F_EXT)
  const RGB16F_EXT: Number = aliasFor(__js_RGB16F_EXT)
  const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT)
  const UNSIGNED_NORMALIZED_EXT: Number = aliasFor(__js_UNSIGNED_NORMALIZED_EXT)
}
export interface EXT_float_blend {
}
export interface EXT_frag_depth {
}
export interface EXT_sRGB {
  const SRGB_EXT: Number = aliasFor(__js_SRGB_EXT)
  const SRGB_ALPHA_EXT: Number = aliasFor(__js_SRGB_ALPHA_EXT)
  const SRGB8_ALPHA8_EXT: Number = aliasFor(__js_SRGB8_ALPHA8_EXT)
  const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT)
}
export interface EXT_shader_texture_lod {
}
export interface EXT_texture_compression_bptc {
  const COMPRESSED_RGBA_BPTC_UNORM_EXT: Number = aliasFor(__js_COMPRESSED_RGBA_BPTC_UNORM_EXT)
  const COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT: Number = aliasFor(__js_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT)
  const COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT: Number = aliasFor(__js_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT)
  const COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT: Number = aliasFor(__js_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT)
}
export interface EXT_texture_compression_rgtc {
  const COMPRESSED_RED_RGTC1_EXT: Number = aliasFor(__js_COMPRESSED_RED_RGTC1_EXT)
  const COMPRESSED_SIGNED_RED_RGTC1_EXT: Number = aliasFor(__js_COMPRESSED_SIGNED_RED_RGTC1_EXT)
  const COMPRESSED_RED_GREEN_RGTC2_EXT: Number = aliasFor(__js_COMPRESSED_RED_GREEN_RGTC2_EXT)
  const COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: Number = aliasFor(__js_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT)
}
export interface EXT_texture_filter_anisotropic {
  const TEXTURE_MAX_ANISOTROPY_EXT: Number = aliasFor(__js_TEXTURE_MAX_ANISOTROPY_EXT)
  const MAX_TEXTURE_MAX_ANISOTROPY_EXT: Number = aliasFor(__js_MAX_TEXTURE_MAX_ANISOTROPY_EXT)
}
export interface EXT_texture_norm16 {
  const R16_EXT: Number = aliasFor(__js_R16_EXT)
  const RG16_EXT: Number = aliasFor(__js_RG16_EXT)
  const RGB16_EXT: Number = aliasFor(__js_RGB16_EXT)
  const RGBA16_EXT: Number = aliasFor(__js_RGBA16_EXT)
  const R16_SNORM_EXT: Number = aliasFor(__js_R16_SNORM_EXT)
  const RG16_SNORM_EXT: Number = aliasFor(__js_RG16_SNORM_EXT)
  const RGB16_SNORM_EXT: Number = aliasFor(__js_RGB16_SNORM_EXT)
  const RGBA16_SNORM_EXT: Number = aliasFor(__js_RGBA16_SNORM_EXT)
}
export interface ElementEventMap {
}
export interface Element extends Node, ARIAMixin, Animatable, ChildNode, InnerHTML, NonDocumentTypeChildNode, ParentNode, Slottable {
  """
  Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element)
  """
  static {
    aliasFor(native "Element")
    var prototype: Element = aliasFor(__js_prototype)
    function new(): Element { aliasFor(__op_new__) }
  }
  const attributes: NamedNodeMap """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/attributes)
  """ = aliasFor(__js_attributes)
  const classList: DOMTokenList """
  Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)
  """ = aliasFor(__js_classList)
  var className: String """
  Returns the value of element's class content attribute. Can be set to change it.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/className)
  """ = aliasFor(__js_className)
  const clientHeight: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientHeight)
  """ = aliasFor(__js_clientHeight)
  const clientLeft: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientLeft)
  """ = aliasFor(__js_clientLeft)
  const clientTop: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientTop)
  """ = aliasFor(__js_clientTop)
  const clientWidth: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientWidth)
  """ = aliasFor(__js_clientWidth)
  var id: String """
  Returns the value of element's id content attribute. Can be set to change it.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/id)
  """ = aliasFor(__js_id)
  const localName: String """
  Returns the local name.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/localName)
  """ = aliasFor(__js_localName)
  const namespaceURI: Union[String, Null] """
  Returns the namespace.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/namespaceURI)
  """ = aliasFor(__js_namespaceURI)
  var onfullscreenchange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenchange_event)
  """ = aliasFor(__js_onfullscreenchange)
  var onfullscreenerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenerror_event)
  """ = aliasFor(__js_onfullscreenerror)
  var outerHTML: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/outerHTML)
  """ = aliasFor(__js_outerHTML)
  const ownerDocument: Document = aliasFor(__js_ownerDocument)
  const part: DOMTokenList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/part)
  """ = aliasFor(__js_part)
  const prefix: Union[String, Null] """
  Returns the namespace prefix.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/prefix)
  """ = aliasFor(__js_prefix)
  const scrollHeight: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollHeight)
  """ = aliasFor(__js_scrollHeight)
  var scrollLeft: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollLeft)
  """ = aliasFor(__js_scrollLeft)
  var scrollTop: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollTop)
  """ = aliasFor(__js_scrollTop)
  const scrollWidth: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollWidth)
  """ = aliasFor(__js_scrollWidth)
  const shadowRoot: Union[ShadowRoot, Null] """
  Returns element's shadow root, if any, and if shadow root's mode is "open", and null otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/shadowRoot)
  """ = aliasFor(__js_shadowRoot)
  var slot: String """
  Returns the value of element's slot content attribute. Can be set to change it.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/slot)
  """ = aliasFor(__js_slot)
  const tagName: String """
  Returns the HTML-uppercased qualified name.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/tagName)
  """ = aliasFor(__js_tagName)
  function attachShadow(init: ShadowRootInit): ShadowRoot {
    """
    Creates a shadow root for element and returns it.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/attachShadow)
    """
    aliasFor(__js_attachShadow)
  }
  function checkVisibility(options: CheckVisibilityOptions): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/checkVisibility)
    """
    aliasFor(__js_checkVisibility)
  }
  function checkVisibility(): Bool { aliasFor(__js_checkVisibility) }
  function computedStyleMap(): StylePropertyMapReadOnly {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/computedStyleMap)
    """
    aliasFor(__js_computedStyleMap)
  }
  function getAttribute(qualifiedName: String): Union[String, Null] {
    """
    Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttribute)
    """
    aliasFor(__js_getAttribute)
  }
  function getAttributeNS(namespace: Union[String, Null], localName: String): Union[String, Null] {
    """
    Returns element's attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNS)
    """
    aliasFor(__js_getAttributeNS)
  }
  function getAttributeNames(): List[String] {
    """
    Returns the qualified names of all element's attributes. Can contain duplicates.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNames)
    """
    aliasFor(__js_getAttributeNames)
  }
  function getAttributeNode(qualifiedName: String): Union[Attr, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNode)
    """
    aliasFor(__js_getAttributeNode)
  }
  function getAttributeNodeNS(namespace: Union[String, Null], localName: String): Union[Attr, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNodeNS)
    """
    aliasFor(__js_getAttributeNodeNS)
  }
  function getBoundingClientRect(): DOMRect {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getBoundingClientRect)
    """
    aliasFor(__js_getBoundingClientRect)
  }
  function getClientRects(): DOMRectList {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getClientRects)
    """
    aliasFor(__js_getClientRects)
  }
  function getElementsByClassName(classNames: String): HTMLCollection {
    """
    Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getElementsByClassName)
    """
    aliasFor(__js_getElementsByClassName)
  }
  function getElementsByTagName(qualifiedName: String): HTMLCollection { aliasFor(__js_getElementsByTagName) }
  function getElementsByTagNameNS(namespaceURI: _XString10, localName: String): HTMLCollection {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagNameNS)
    """
    aliasFor(__js_getElementsByTagNameNS)
  }
  function getElementsByTagNameNS(namespaceURI: _XString11, localName: String): HTMLCollection { aliasFor(__js_getElementsByTagNameNS) }
  function getElementsByTagNameNS(namespaceURI: _XString12, localName: String): HTMLCollection { aliasFor(__js_getElementsByTagNameNS) }
  function getElementsByTagNameNS(namespace: Union[String, Null], localName: String): HTMLCollection { aliasFor(__js_getElementsByTagNameNS) }
  function hasAttribute(qualifiedName: String): Bool {
    """
    Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttribute)
    """
    aliasFor(__js_hasAttribute)
  }
  function hasAttributeNS(namespace: Union[String, Null], localName: String): Bool {
    """
    Returns true if element has an attribute whose namespace is namespace and local name is localName.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttributeNS)
    """
    aliasFor(__js_hasAttributeNS)
  }
  function hasAttributes(): Bool {
    """
    Returns true if element has attributes, and false otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttributes)
    """
    aliasFor(__js_hasAttributes)
  }
  function hasPointerCapture(pointerId: Number): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasPointerCapture)
    """
    aliasFor(__js_hasPointerCapture)
  }
  function insertAdjacentElement(where: InsertPosition, element: Element): Union[Element, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentElement)
    """
    aliasFor(__js_insertAdjacentElement)
  }
  function insertAdjacentHTML(position: InsertPosition, text: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentHTML)
    """
    aliasFor(__js_insertAdjacentHTML)
  }
  function insertAdjacentText(where: InsertPosition, data: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentText)
    """
    aliasFor(__js_insertAdjacentText)
  }
  function matches(selectors: String): Bool {
    """
    Returns true if matching selectors against element's root yields element, and false otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/matches)
    """
    aliasFor(__js_matches)
  }
  function releasePointerCapture(pointerId: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/releasePointerCapture)
    """
    aliasFor(__js_releasePointerCapture)
  }
  function removeAttribute(qualifiedName: String): Any {
    """
    Removes element's first attribute whose qualified name is qualifiedName.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttribute)
    """
    aliasFor(__js_removeAttribute)
  }
  function removeAttributeNS(namespace: Union[String, Null], localName: String): Any {
    """
    Removes element's attribute whose namespace is namespace and local name is localName.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttributeNS)
    """
    aliasFor(__js_removeAttributeNS)
  }
  function removeAttributeNode(attr: Attr): Attr {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttributeNode)
    """
    aliasFor(__js_removeAttributeNode)
  }
  function requestFullscreen(options: FullscreenOptions): Promise[Any] {
    """
    Displays element fullscreen and resolves promise when done.
       *
    When supplied, options's navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to "show", navigation simplicity is preferred over screen space, and if set to "hide", more screen space is preferred. User agents are always free to honor user preference over the application's. The default value "auto" indicates no application preference.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/requestFullscreen)
    """
    aliasFor(__js_requestFullscreen)
  }
  function requestFullscreen(): Promise[Any] { aliasFor(__js_requestFullscreen) }
  function requestPointerLock(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/requestPointerLock)
    """
    aliasFor(__js_requestPointerLock)
  }
  function scroll(options: ScrollToOptions): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scroll)
    """
    aliasFor(__js_scroll)
  }
  function scroll(): Any { aliasFor(__js_scroll) }
  function scroll(x: Number, y: Number): Any { aliasFor(__js_scroll) }
  function scrollBy(options: ScrollToOptions): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollBy)
    """
    aliasFor(__js_scrollBy)
  }
  function scrollBy(): Any { aliasFor(__js_scrollBy) }
  function scrollBy(x: Number, y: Number): Any { aliasFor(__js_scrollBy) }
  function scrollIntoView(arg: Union[Bool, ScrollIntoViewOptions]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollIntoView)
    """
    aliasFor(__js_scrollIntoView)
  }
  function scrollIntoView(): Any { aliasFor(__js_scrollIntoView) }
  function scrollTo(options: ScrollToOptions): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollTo)
    """
    aliasFor(__js_scrollTo)
  }
  function scrollTo(): Any { aliasFor(__js_scrollTo) }
  function scrollTo(x: Number, y: Number): Any { aliasFor(__js_scrollTo) }
  function setAttribute(qualifiedName: String, value: String): Any {
    """
    Sets the value of element's first attribute whose qualified name is qualifiedName to value.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttribute)
    """
    aliasFor(__js_setAttribute)
  }
  function setAttributeNS(namespace: Union[String, Null], qualifiedName: String, value: String): Any {
    """
    Sets the value of element's attribute whose namespace is namespace and local name is localName to value.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNS)
    """
    aliasFor(__js_setAttributeNS)
  }
  function setAttributeNode(attr: Attr): Union[Attr, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNode)
    """
    aliasFor(__js_setAttributeNode)
  }
  function setAttributeNodeNS(attr: Attr): Union[Attr, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNodeNS)
    """
    aliasFor(__js_setAttributeNodeNS)
  }
  function setPointerCapture(pointerId: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setPointerCapture)
    """
    aliasFor(__js_setPointerCapture)
  }
  function toggleAttribute(qualifiedName: String, force: Bool): Bool {
    """
    If force is not given, "toggles" qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.
       *
    Returns true if qualifiedName is now present, and false otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/toggleAttribute)
    """
    aliasFor(__js_toggleAttribute)
  }
  function toggleAttribute(qualifiedName: String): Bool { aliasFor(__js_toggleAttribute) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface ElementCSSInlineStyle {
  const attributeStyleMap: StylePropertyMap = aliasFor(__js_attributeStyleMap)
  const style: CSSStyleDeclaration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/style)
  """ = aliasFor(__js_style)
}
export interface ElementContentEditable {
  var contentEditable: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/contentEditable)
  """ = aliasFor(__js_contentEditable)
  var enterKeyHint: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/enterKeyHint)
  """ = aliasFor(__js_enterKeyHint)
  var inputMode: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inputMode)
  """ = aliasFor(__js_inputMode)
  const isContentEditable: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/isContentEditable)
  """ = aliasFor(__js_isContentEditable)
}
export interface ElementInternals extends ARIAMixin {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals)
  """
  static {
    aliasFor(native "ElementInternals")
    var prototype: ElementInternals = aliasFor(__js_prototype)
    function new(): ElementInternals { aliasFor(__op_new__) }
  }
  const form: Union[HTMLFormElement, Null] """
  Returns the form owner of internals's target element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/form)
  """ = aliasFor(__js_form)
  const labels: NodeList """
  Returns a NodeList of all the label elements that internals's target element is associated with.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/labels)
  """ = aliasFor(__js_labels)
  const shadowRoot: Union[ShadowRoot, Null] """
  Returns the ShadowRoot for internals's target element, if the target element is a shadow host, or null otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/shadowRoot)
  """ = aliasFor(__js_shadowRoot)
  const validationMessage: String """
  Returns the error message that would be shown to the user if internals's target element was to be checked for validity.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/validationMessage)
  """ = aliasFor(__js_validationMessage)
  const validity: ValidityState """
  Returns the ValidityState object for internals's target element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/validity)
  """ = aliasFor(__js_validity)
  const willValidate: Bool """
  Returns true if internals's target element will be validated when the form is submitted; false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/willValidate)
  """ = aliasFor(__js_willValidate)
  function checkValidity(): Bool {
    """
    Returns true if internals's target element has no validity problems; false otherwise. Fires an invalid event at the element in the latter case.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/checkValidity)
    """
    aliasFor(__js_checkValidity)
  }
  function reportValidity(): Bool {
    """
    Returns true if internals's target element has no validity problems; otherwise, returns false, fires an invalid event at the element, and (if the event isn't canceled) reports the problem to the user.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/reportValidity)
    """
    aliasFor(__js_reportValidity)
  }
  function setFormValue(value: Union[File, String, FormData, Null], state: Union[File, String, FormData, Null]): Any {
    """
    Sets both the state and submission value of internals's target element to value.
       *
    If value is null, the element won't participate in form submission.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/setFormValue)
    """
    aliasFor(__js_setFormValue)
  }
  function setFormValue(value: Union[File, String, FormData, Null]): Any { aliasFor(__js_setFormValue) }
  function setValidity(flags: ValidityStateFlags, message: String, anchor: HTMLElement): Any {
    """
    Marks internals's target element as suffering from the constraints indicated by the flags argument, and sets the element's validation message to message. If anchor is specified, the user agent might use it to indicate problems with the constraints of internals's target element when the form owner is validated interactively or reportValidity() is called.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/setValidity)
    """
    aliasFor(__js_setValidity)
  }
  function setValidity(flags: ValidityStateFlags, message: String): Any { aliasFor(__js_setValidity) }
  function setValidity(flags: ValidityStateFlags): Any { aliasFor(__js_setValidity) }
  function setValidity(): Any { aliasFor(__js_setValidity) }
}
export interface EncodedVideoChunk {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk)
  """
  static {
    aliasFor(native "EncodedVideoChunk")
    var prototype: EncodedVideoChunk = aliasFor(__js_prototype)
    function new(init: EncodedVideoChunkInit): EncodedVideoChunk { aliasFor(__op_new__) }
  }
  const byteLength: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/byteLength)
  """ = aliasFor(__js_byteLength)
  const duration: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/duration)
  """ = aliasFor(__js_duration)
  const timestamp: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/timestamp)
  """ = aliasFor(__js_timestamp)
  const type: EncodedVideoChunkType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/type)
  """ = aliasFor(__js_type)
  function copyTo(destination: AllowSharedBufferSource): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/copyTo)
    """
    aliasFor(__js_copyTo)
  }
}
export interface ErrorEvent extends Event {
  """
  Events providing information related to errors in scripts or in files.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent)
  """
  static {
    aliasFor(native "ErrorEvent")
    var prototype: ErrorEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: ErrorEventInit): ErrorEvent { aliasFor(__op_new__) }
    function new(type: String): ErrorEvent { aliasFor(__op_new__) }
  }
  const colno: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/colno)
  """ = aliasFor(__js_colno)
  const error: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/error)
  """ = aliasFor(__js_error)
  const filename: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/filename)
  """ = aliasFor(__js_filename)
  const lineno: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/lineno)
  """ = aliasFor(__js_lineno)
  const message: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/message)
  """ = aliasFor(__js_message)
}
export interface Event {
  """
  An event which takes place in the DOM.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event)
  """
  static {
    aliasFor(native "Event")
    var prototype: Event = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: EventInit): Event { aliasFor(__op_new__) }
    function new(type: String): Event { aliasFor(__op_new__) }
    const NONE: Number = aliasFor(__js_NONE)
    const CAPTURING_PHASE: Number = aliasFor(__js_CAPTURING_PHASE)
    const AT_TARGET: Number = aliasFor(__js_AT_TARGET)
    const BUBBLING_PHASE: Number = aliasFor(__js_BUBBLING_PHASE)
  }
  const bubbles: Bool """
  Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/bubbles)
  """ = aliasFor(__js_bubbles)
  const cancelable: Bool """
  Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelable)
  """ = aliasFor(__js_cancelable)
  const composed: Bool """
  Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/composed)
  """ = aliasFor(__js_composed)
  const currentTarget: Union[EventTarget, Null] """
  Returns the object whose event listener's callback is currently being invoked.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/currentTarget)
  """ = aliasFor(__js_currentTarget)
  const defaultPrevented: Bool """
  Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/defaultPrevented)
  """ = aliasFor(__js_defaultPrevented)
  const eventPhase: Number """
  Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/eventPhase)
  """ = aliasFor(__js_eventPhase)
  const isTrusted: Bool """
  Returns true if event was dispatched by the user agent, and false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/isTrusted)
  """ = aliasFor(__js_isTrusted)
  const target: Union[EventTarget, Null] """
  Returns the object to which event is dispatched (its target).
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/target)
  """ = aliasFor(__js_target)
  const timeStamp: DOMHighResTimeStamp """
  Returns the event's timestamp as the number of milliseconds measured relative to the time origin.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/timeStamp)
  """ = aliasFor(__js_timeStamp)
  const type: String """
  Returns the type of event, e.g. "click", "hashchange", or "submit".
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/type)
  """ = aliasFor(__js_type)
  function composedPath(): List[EventTarget] {
    """
    Returns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is "closed" that are not reachable from event's currentTarget.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/composedPath)
    """
    aliasFor(__js_composedPath)
  }
  function preventDefault(): Any {
    """
    If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/preventDefault)
    """
    aliasFor(__js_preventDefault)
  }
  function stopImmediatePropagation(): Any {
    """
    Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/stopImmediatePropagation)
    """
    aliasFor(__js_stopImmediatePropagation)
  }
  function stopPropagation(): Any {
    """
    When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/stopPropagation)
    """
    aliasFor(__js_stopPropagation)
  }
  const NONE: Number = aliasFor(__js_NONE)
  const CAPTURING_PHASE: Number = aliasFor(__js_CAPTURING_PHASE)
  const AT_TARGET: Number = aliasFor(__js_AT_TARGET)
  const BUBBLING_PHASE: Number = aliasFor(__js_BUBBLING_PHASE)
}
export interface EventCounts {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventCounts)
  """
  static {
    aliasFor(native "EventCounts")
    var prototype: EventCounts = aliasFor(__js_prototype)
    function new(): EventCounts { aliasFor(__op_new__) }
  }
  function forEach(callbackfn: function(value: Number, key: String, parent: EventCounts): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: Number, key: String, parent: EventCounts): Any): Any { aliasFor(__js_forEach) }
}
export interface EventListener {
  function __call__(evt: Event): Any { aliasFor(__call__) }
}
export interface EventListenerObject {
  function handleEvent(object: Event): Any { aliasFor(__js_handleEvent) }
}
export interface EventSourceEventMap {
}
export interface EventSource extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource)
  """
  static {
    aliasFor(native "EventSource")
    var prototype: EventSource = aliasFor(__js_prototype)
    function new(url: Union[String, URL], eventSourceInitDict: EventSourceInit): EventSource { aliasFor(__op_new__) }
    function new(url: Union[String, URL]): EventSource { aliasFor(__op_new__) }
    const CONNECTING: Number = aliasFor(__js_CONNECTING)
    const OPEN: Number = aliasFor(__js_OPEN)
    const CLOSED: Number = aliasFor(__js_CLOSED)
  }
  var onerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/error_event)
  """ = aliasFor(__js_onerror)
  var onmessage: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/message_event)
  """ = aliasFor(__js_onmessage)
  var onopen: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/open_event)
  """ = aliasFor(__js_onopen)
  const readyState: Number """
  Returns the state of this EventSource object's connection. It can have the values described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/readyState)
  """ = aliasFor(__js_readyState)
  const url: String """
  Returns the URL providing the event stream.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/url)
  """ = aliasFor(__js_url)
  const withCredentials: Bool """
  Returns true if the credentials mode for connection requests to the URL providing the event stream is set to "include", and false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/withCredentials)
  """ = aliasFor(__js_withCredentials)
  function close(): Any {
    """
    Aborts any instances of the fetch algorithm started for this EventSource object, and sets the readyState attribute to CLOSED.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/close)
    """
    aliasFor(__js_close)
  }
  const CONNECTING: Number = aliasFor(__js_CONNECTING)
  const OPEN: Number = aliasFor(__js_OPEN)
  const CLOSED: Number = aliasFor(__js_CLOSED)
  function addEventListener(type: String, listener: function(event: MessageEvent): Any, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: function(event: MessageEvent): Any): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: function(event: MessageEvent): Any, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: function(event: MessageEvent): Any): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface EventTarget {
  """
  EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget)
  """
  static {
    aliasFor(native "EventTarget")
    var prototype: EventTarget = aliasFor(__js_prototype)
    function new(): EventTarget { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, callback: Union[EventListenerOrEventListenerObject, Null], options: Union[AddEventListenerOptions, Bool]): Any {
    """
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
       *
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
       *
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
       *
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
       *
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
       *
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
       *
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    """
    aliasFor(__js_addEventListener)
  }
  function addEventListener(type: String, callback: Union[EventListenerOrEventListenerObject, Null]): Any { aliasFor(__js_addEventListener) }
  function dispatchEvent(event: Event): Bool {
    """
    Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
    """
    aliasFor(__js_dispatchEvent)
  }
  function removeEventListener(type: String, callback: Union[EventListenerOrEventListenerObject, Null], options: Union[EventListenerOptions, Bool]): Any {
    """
    Removes the event listener in target's event listener list with the same type, callback, and options.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    """
    aliasFor(__js_removeEventListener)
  }
  function removeEventListener(type: String, callback: Union[EventListenerOrEventListenerObject, Null]): Any { aliasFor(__js_removeEventListener) }
}
export interface External {
  """
  @deprecated
  """
  static {
    aliasFor(native "External")
    var prototype: External = aliasFor(__js_prototype)
    function new(): External { aliasFor(__op_new__) }
  }
}
export interface File extends Blob {
  """
  Provides information about files and allows JavaScript in a web page to access their content.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/File)
  """
  static {
    aliasFor(native "File")
    var prototype: File = aliasFor(__js_prototype)
    function new(fileBits: List[BlobPart], fileName: String, options: FilePropertyBag): File { aliasFor(__op_new__) }
    function new(fileBits: List[BlobPart], fileName: String): File { aliasFor(__op_new__) }
  }
  const lastModified: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified)
  """ = aliasFor(__js_lastModified)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name)
  """ = aliasFor(__js_name)
  const webkitRelativePath: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath)
  """ = aliasFor(__js_webkitRelativePath)
}
export interface FileList {
  """
  An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type="file"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList)
  """
  static {
    aliasFor(native "FileList")
    var prototype: FileList = aliasFor(__js_prototype)
    function new(): FileList { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList/length)
  """ = aliasFor(__js_length)
  function item(index: Number): Union[File, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList/item)
    """
    aliasFor(__js_item)
  }
  function __getitem__(index: Number): File { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: File): File { aliasFor(__op_setitem__) }
}
export interface FileReaderEventMap {
}
export interface FileReader extends EventTarget {
  """
  Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader)
  """
  static {
    aliasFor(native "FileReader")
    var prototype: FileReader = aliasFor(__js_prototype)
    function new(): FileReader { aliasFor(__op_new__) }
    const EMPTY: Number = aliasFor(__js_EMPTY)
    const LOADING: Number = aliasFor(__js_LOADING)
    const DONE: Number = aliasFor(__js_DONE)
  }
  const error: Union[DOMException, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error)
  """ = aliasFor(__js_error)
  var onabort: Union[function(ev: ProgressEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/abort_event)
  """ = aliasFor(__js_onabort)
  var onerror: Union[function(ev: ProgressEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error_event)
  """ = aliasFor(__js_onerror)
  var onload: Union[function(ev: ProgressEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/load_event)
  """ = aliasFor(__js_onload)
  var onloadend: Union[function(ev: ProgressEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadend_event)
  """ = aliasFor(__js_onloadend)
  var onloadstart: Union[function(ev: ProgressEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadstart_event)
  """ = aliasFor(__js_onloadstart)
  var onprogress: Union[function(ev: ProgressEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/progress_event)
  """ = aliasFor(__js_onprogress)
  const readyState: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readyState)
  """ = aliasFor(__js_readyState)
  const result: Union[String, ArrayBuffer, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/result)
  """ = aliasFor(__js_result)
  function abort(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/abort)
    """
    aliasFor(__js_abort)
  }
  function readAsArrayBuffer(blob: Blob): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readAsArrayBuffer)
    """
    aliasFor(__js_readAsArrayBuffer)
  }
  function readAsDataURL(blob: Blob): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readAsDataURL)
    """
    aliasFor(__js_readAsDataURL)
  }
  function readAsText(blob: Blob, encoding: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readAsText)
    """
    aliasFor(__js_readAsText)
  }
  function readAsText(blob: Blob): Any { aliasFor(__js_readAsText) }
  const EMPTY: Number = aliasFor(__js_EMPTY)
  const LOADING: Number = aliasFor(__js_LOADING)
  const DONE: Number = aliasFor(__js_DONE)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface FileSystem {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem)
  """
  static {
    aliasFor(native "FileSystem")
    var prototype: FileSystem = aliasFor(__js_prototype)
    function new(): FileSystem { aliasFor(__op_new__) }
  }
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem/name)
  """ = aliasFor(__js_name)
  const root: FileSystemDirectoryEntry """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem/root)
  """ = aliasFor(__js_root)
}
export interface FileSystemDirectoryEntry extends FileSystemEntry {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry)
  """
  static {
    aliasFor(native "FileSystemDirectoryEntry")
    var prototype: FileSystemDirectoryEntry = aliasFor(__js_prototype)
    function new(): FileSystemDirectoryEntry { aliasFor(__op_new__) }
  }
  function createReader(): FileSystemDirectoryReader {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/createReader)
    """
    aliasFor(__js_createReader)
  }
  function getDirectory(path: Union[String, Null], options: FileSystemFlags, successCallback: FileSystemEntryCallback, errorCallback: ErrorCallback): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/getDirectory)
    """
    aliasFor(__js_getDirectory)
  }
  function getDirectory(path: Union[String, Null], options: FileSystemFlags, successCallback: FileSystemEntryCallback): Any { aliasFor(__js_getDirectory) }
  function getDirectory(path: Union[String, Null], options: FileSystemFlags): Any { aliasFor(__js_getDirectory) }
  function getDirectory(path: Union[String, Null]): Any { aliasFor(__js_getDirectory) }
  function getDirectory(): Any { aliasFor(__js_getDirectory) }
  function getFile(path: Union[String, Null], options: FileSystemFlags, successCallback: FileSystemEntryCallback, errorCallback: ErrorCallback): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/getFile)
    """
    aliasFor(__js_getFile)
  }
  function getFile(path: Union[String, Null], options: FileSystemFlags, successCallback: FileSystemEntryCallback): Any { aliasFor(__js_getFile) }
  function getFile(path: Union[String, Null], options: FileSystemFlags): Any { aliasFor(__js_getFile) }
  function getFile(path: Union[String, Null]): Any { aliasFor(__js_getFile) }
  function getFile(): Any { aliasFor(__js_getFile) }
}
export interface FileSystemDirectoryHandle extends FileSystemHandle {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle)
  """
  static {
    aliasFor(native "FileSystemDirectoryHandle")
    var prototype: FileSystemDirectoryHandle = aliasFor(__js_prototype)
    function new(): FileSystemDirectoryHandle { aliasFor(__op_new__) }
  }
  const kind: _SStringdirectory = aliasFor(__js_kind)
  function getDirectoryHandle(name: String, options: FileSystemGetDirectoryOptions): Promise[FileSystemDirectoryHandle] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle)
    """
    aliasFor(__js_getDirectoryHandle)
  }
  function getDirectoryHandle(name: String): Promise[FileSystemDirectoryHandle] { aliasFor(__js_getDirectoryHandle) }
  function getFileHandle(name: String, options: FileSystemGetFileOptions): Promise[FileSystemFileHandle] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/getFileHandle)
    """
    aliasFor(__js_getFileHandle)
  }
  function getFileHandle(name: String): Promise[FileSystemFileHandle] { aliasFor(__js_getFileHandle) }
  function removeEntry(name: String, options: FileSystemRemoveOptions): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/removeEntry)
    """
    aliasFor(__js_removeEntry)
  }
  function removeEntry(name: String): Promise[Any] { aliasFor(__js_removeEntry) }
  function resolve(possibleDescendant: FileSystemHandle): Promise[Union[List[String], Null]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/resolve)
    """
    aliasFor(__js_resolve)
  }
}
export interface FileSystemDirectoryReader {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryReader)
  """
  static {
    aliasFor(native "FileSystemDirectoryReader")
    var prototype: FileSystemDirectoryReader = aliasFor(__js_prototype)
    function new(): FileSystemDirectoryReader { aliasFor(__op_new__) }
  }
  function readEntries(successCallback: FileSystemEntriesCallback, errorCallback: ErrorCallback): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryReader/readEntries)
    """
    aliasFor(__js_readEntries)
  }
  function readEntries(successCallback: FileSystemEntriesCallback): Any { aliasFor(__js_readEntries) }
}
export interface FileSystemEntry {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry)
  """
  static {
    aliasFor(native "FileSystemEntry")
    var prototype: FileSystemEntry = aliasFor(__js_prototype)
    function new(): FileSystemEntry { aliasFor(__op_new__) }
  }
  const filesystem: FileSystem """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/filesystem)
  """ = aliasFor(__js_filesystem)
  const fullPath: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/fullPath)
  """ = aliasFor(__js_fullPath)
  const isDirectory: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isDirectory)
  """ = aliasFor(__js_isDirectory)
  const isFile: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isFile)
  """ = aliasFor(__js_isFile)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/name)
  """ = aliasFor(__js_name)
  function getParent(successCallback: FileSystemEntryCallback, errorCallback: ErrorCallback): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/getParent)
    """
    aliasFor(__js_getParent)
  }
  function getParent(successCallback: FileSystemEntryCallback): Any { aliasFor(__js_getParent) }
  function getParent(): Any { aliasFor(__js_getParent) }
}
export interface FileSystemFileEntry extends FileSystemEntry {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileEntry)
  """
  static {
    aliasFor(native "FileSystemFileEntry")
    var prototype: FileSystemFileEntry = aliasFor(__js_prototype)
    function new(): FileSystemFileEntry { aliasFor(__op_new__) }
  }
  function file(successCallback: FileCallback, errorCallback: ErrorCallback): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileEntry/file)
    """
    aliasFor(__js_file)
  }
  function file(successCallback: FileCallback): Any { aliasFor(__js_file) }
}
export interface FileSystemFileHandle extends FileSystemHandle {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle)
  """
  static {
    aliasFor(native "FileSystemFileHandle")
    var prototype: FileSystemFileHandle = aliasFor(__js_prototype)
    function new(): FileSystemFileHandle { aliasFor(__op_new__) }
  }
  const kind: _SStringfile = aliasFor(__js_kind)
  function createWritable(options: FileSystemCreateWritableOptions): Promise[FileSystemWritableFileStream] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle/createWritable)
    """
    aliasFor(__js_createWritable)
  }
  function createWritable(): Promise[FileSystemWritableFileStream] { aliasFor(__js_createWritable) }
  function getFile(): Promise[File] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle/getFile)
    """
    aliasFor(__js_getFile)
  }
}
export interface FileSystemHandle {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle)
  """
  static {
    aliasFor(native "FileSystemHandle")
    var prototype: FileSystemHandle = aliasFor(__js_prototype)
    function new(): FileSystemHandle { aliasFor(__op_new__) }
  }
  const kind: FileSystemHandleKind """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind)
  """ = aliasFor(__js_kind)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/name)
  """ = aliasFor(__js_name)
  function isSameEntry(other: FileSystemHandle): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/isSameEntry)
    """
    aliasFor(__js_isSameEntry)
  }
}
export interface FileSystemWritableFileStream extends WritableStream {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream)
  """
  static {
    aliasFor(native "FileSystemWritableFileStream")
    var prototype: FileSystemWritableFileStream = aliasFor(__js_prototype)
    function new(): FileSystemWritableFileStream { aliasFor(__op_new__) }
  }
  function seek(position: Number): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/seek)
    """
    aliasFor(__js_seek)
  }
  function truncate(size: Number): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/truncate)
    """
    aliasFor(__js_truncate)
  }
  function write(data: FileSystemWriteChunkType): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/write)
    """
    aliasFor(__js_write)
  }
}
export interface FocusEvent extends UIEvent {
  """
  Focus-related events like focus, blur, focusin, or focusout.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FocusEvent)
  """
  static {
    aliasFor(native "FocusEvent")
    var prototype: FocusEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: FocusEventInit): FocusEvent { aliasFor(__op_new__) }
    function new(type: String): FocusEvent { aliasFor(__op_new__) }
  }
  const relatedTarget: Union[EventTarget, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FocusEvent/relatedTarget)
  """ = aliasFor(__js_relatedTarget)
}
export interface FontFace {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace)
  """
  static {
    aliasFor(native "FontFace")
    var prototype: FontFace = aliasFor(__js_prototype)
    function new(family: String, source: Union[String, BinaryData], descriptors: FontFaceDescriptors): FontFace { aliasFor(__op_new__) }
    function new(family: String, source: Union[String, BinaryData]): FontFace { aliasFor(__op_new__) }
  }
  var ascentOverride: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/ascentOverride)
  """ = aliasFor(__js_ascentOverride)
  var descentOverride: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/descentOverride)
  """ = aliasFor(__js_descentOverride)
  var display: FontDisplay """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/display)
  """ = aliasFor(__js_display)
  var family: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/family)
  """ = aliasFor(__js_family)
  var featureSettings: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/featureSettings)
  """ = aliasFor(__js_featureSettings)
  var lineGapOverride: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/lineGapOverride)
  """ = aliasFor(__js_lineGapOverride)
  const loaded: Promise[FontFace] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/loaded)
  """ = aliasFor(__js_loaded)
  const status: FontFaceLoadStatus """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/status)
  """ = aliasFor(__js_status)
  var stretch: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/stretch)
  """ = aliasFor(__js_stretch)
  var style: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/style)
  """ = aliasFor(__js_style)
  var unicodeRange: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/unicodeRange)
  """ = aliasFor(__js_unicodeRange)
  var weight: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/weight)
  """ = aliasFor(__js_weight)
  function load(): Promise[FontFace] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/load)
    """
    aliasFor(__js_load)
  }
}
export interface FontFaceSetEventMap {
}
export interface FontFaceSet extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet)
  """
  static {
    aliasFor(native "FontFaceSet")
    var prototype: FontFaceSet = aliasFor(__js_prototype)
    function new(initialFaces: List[FontFace]): FontFaceSet { aliasFor(__op_new__) }
  }
  var onloading: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loading_event)
  """ = aliasFor(__js_onloading)
  var onloadingdone: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingdone_event)
  """ = aliasFor(__js_onloadingdone)
  var onloadingerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingerror_event)
  """ = aliasFor(__js_onloadingerror)
  const ready: Promise[FontFaceSet] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/ready)
  """ = aliasFor(__js_ready)
  const status: FontFaceSetLoadStatus """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/status)
  """ = aliasFor(__js_status)
  function check(font: String, text: String): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/check)
    """
    aliasFor(__js_check)
  }
  function check(font: String): Bool { aliasFor(__js_check) }
  function load(font: String, text: String): Promise[List[FontFace]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/load)
    """
    aliasFor(__js_load)
  }
  function load(font: String): Promise[List[FontFace]] { aliasFor(__js_load) }
  function forEach(callbackfn: function(value: FontFace, key: FontFace, parent: FontFaceSet): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: FontFace, key: FontFace, parent: FontFaceSet): Any): Any { aliasFor(__js_forEach) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface FontFaceSetLoadEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent)
  """
  static {
    aliasFor(native "FontFaceSetLoadEvent")
    var prototype: FontFaceSetLoadEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: FontFaceSetLoadEventInit): FontFaceSetLoadEvent { aliasFor(__op_new__) }
    function new(type: String): FontFaceSetLoadEvent { aliasFor(__op_new__) }
  }
  const fontfaces: List[FontFace] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent/fontfaces)
  """ = aliasFor(__js_fontfaces)
}
export interface FontFaceSource {
  const fonts: FontFaceSet """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fonts)
  """ = aliasFor(__js_fonts)
}
export interface FormData {
  """
  Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to "multipart/form-data".
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData)
  """
  static {
    aliasFor(native "FormData")
    var prototype: FormData = aliasFor(__js_prototype)
    function new(form: HTMLFormElement, submitter: Union[HTMLElement, Null]): FormData { aliasFor(__op_new__) }
    function new(form: HTMLFormElement): FormData { aliasFor(__op_new__) }
    function new(): FormData { aliasFor(__op_new__) }
  }
  function append(name: String, value: Union[String, Blob]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/append)
    """
    aliasFor(__js_append)
  }
  function append(name: String, value: String): Any { aliasFor(__js_append) }
  function append(name: String, blobValue: Blob, filename: String): Any { aliasFor(__js_append) }
  function append(name: String, blobValue: Blob): Any { aliasFor(__js_append) }
  function delete(name: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/delete)
    """
    aliasFor(__js_delete)
  }
  function get(name: String): Union[FormDataEntryValue, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/get)
    """
    aliasFor(__js_get)
  }
  function getAll(name: String): List[FormDataEntryValue] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/getAll)
    """
    aliasFor(__js_getAll)
  }
  function has(name: String): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/has)
    """
    aliasFor(__js_has)
  }
  function set(name: String, value: Union[String, Blob]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/set)
    """
    aliasFor(__js_set)
  }
  function set(name: String, value: String): Any { aliasFor(__js_set) }
  function set(name: String, blobValue: Blob, filename: String): Any { aliasFor(__js_set) }
  function set(name: String, blobValue: Blob): Any { aliasFor(__js_set) }
  function forEach(callbackfn: function(value: FormDataEntryValue, key: String, parent: FormData): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: FormDataEntryValue, key: String, parent: FormData): Any): Any { aliasFor(__js_forEach) }
}
export interface FormDataEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormDataEvent)
  """
  static {
    aliasFor(native "FormDataEvent")
    var prototype: FormDataEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: FormDataEventInit): FormDataEvent { aliasFor(__op_new__) }
  }
  const formData: FormData """
  Returns a FormData object representing names and values of elements associated to the target form. Operations on the FormData object will affect form data to be submitted.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormDataEvent/formData)
  """ = aliasFor(__js_formData)
}
export interface GainNode extends AudioNode {
  """
  A change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GainNode)
  """
  static {
    aliasFor(native "GainNode")
    var prototype: GainNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: GainOptions): GainNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): GainNode { aliasFor(__op_new__) }
  }
  const gain: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GainNode/gain)
  """ = aliasFor(__js_gain)
}
export interface Gamepad {
  """
  This Gamepad API interface defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad)
  """
  static {
    aliasFor(native "Gamepad")
    var prototype: Gamepad = aliasFor(__js_prototype)
    function new(): Gamepad { aliasFor(__op_new__) }
  }
  const axes: List[Number] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/axes)
  """ = aliasFor(__js_axes)
  const buttons: List[GamepadButton] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/buttons)
  """ = aliasFor(__js_buttons)
  const connected: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/connected)
  """ = aliasFor(__js_connected)
  const id: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/id)
  """ = aliasFor(__js_id)
  const index: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/index)
  """ = aliasFor(__js_index)
  const mapping: GamepadMappingType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/mapping)
  """ = aliasFor(__js_mapping)
  const timestamp: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/timestamp)
  """ = aliasFor(__js_timestamp)
  const vibrationActuator: Union[GamepadHapticActuator, Null] = aliasFor(__js_vibrationActuator)
}
export interface GamepadButton {
  """
  An individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton)
  """
  static {
    aliasFor(native "GamepadButton")
    var prototype: GamepadButton = aliasFor(__js_prototype)
    function new(): GamepadButton { aliasFor(__op_new__) }
  }
  const pressed: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/pressed)
  """ = aliasFor(__js_pressed)
  const touched: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/touched)
  """ = aliasFor(__js_touched)
  const value: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/value)
  """ = aliasFor(__js_value)
}
export interface GamepadEvent extends Event {
  """
  This Gamepad API interface contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected and Window.gamepaddisconnected are fired in response to.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadEvent)
  """
  static {
    aliasFor(native "GamepadEvent")
    var prototype: GamepadEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: GamepadEventInit): GamepadEvent { aliasFor(__op_new__) }
  }
  const gamepad: Gamepad """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadEvent/gamepad)
  """ = aliasFor(__js_gamepad)
}
export interface GamepadHapticActuator {
  """
  This Gamepad API interface represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator)
  """
  static {
    aliasFor(native "GamepadHapticActuator")
    var prototype: GamepadHapticActuator = aliasFor(__js_prototype)
    function new(): GamepadHapticActuator { aliasFor(__op_new__) }
  }
  const type: GamepadHapticActuatorType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator/type)
  """ = aliasFor(__js_type)
  function playEffect(type: GamepadHapticEffectType, params: GamepadEffectParameters): Promise[GamepadHapticsResult] { aliasFor(__js_playEffect) }
  function playEffect(type: GamepadHapticEffectType): Promise[GamepadHapticsResult] { aliasFor(__js_playEffect) }
  function reset(): Promise[GamepadHapticsResult] { aliasFor(__js_reset) }
}
export interface GenericTransformStream {
  const readable: ReadableStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable)
  """ = aliasFor(__js_readable)
  const writable: WritableStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable)
  """ = aliasFor(__js_writable)
}
export interface Geolocation {
  """
  An object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Geolocation)
  """
  static {
    aliasFor(native "Geolocation")
    var prototype: Geolocation = aliasFor(__js_prototype)
    function new(): Geolocation { aliasFor(__op_new__) }
  }
  function clearWatch(watchId: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Geolocation/clearWatch)
    """
    aliasFor(__js_clearWatch)
  }
  function getCurrentPosition(successCallback: PositionCallback, errorCallback: Union[PositionErrorCallback, Null], options: PositionOptions): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Geolocation/getCurrentPosition)
    """
    aliasFor(__js_getCurrentPosition)
  }
  function getCurrentPosition(successCallback: PositionCallback, errorCallback: Union[PositionErrorCallback, Null]): Any { aliasFor(__js_getCurrentPosition) }
  function getCurrentPosition(successCallback: PositionCallback): Any { aliasFor(__js_getCurrentPosition) }
  function watchPosition(successCallback: PositionCallback, errorCallback: Union[PositionErrorCallback, Null], options: PositionOptions): Number {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Geolocation/watchPosition)
    """
    aliasFor(__js_watchPosition)
  }
  function watchPosition(successCallback: PositionCallback, errorCallback: Union[PositionErrorCallback, Null]): Number { aliasFor(__js_watchPosition) }
  function watchPosition(successCallback: PositionCallback): Number { aliasFor(__js_watchPosition) }
}
export interface GeolocationCoordinates {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates)
  """
  static {
    aliasFor(native "GeolocationCoordinates")
    var prototype: GeolocationCoordinates = aliasFor(__js_prototype)
    function new(): GeolocationCoordinates { aliasFor(__op_new__) }
  }
  const accuracy: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/accuracy)
  """ = aliasFor(__js_accuracy)
  const altitude: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitude)
  """ = aliasFor(__js_altitude)
  const altitudeAccuracy: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitudeAccuracy)
  """ = aliasFor(__js_altitudeAccuracy)
  const heading: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/heading)
  """ = aliasFor(__js_heading)
  const latitude: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/latitude)
  """ = aliasFor(__js_latitude)
  const longitude: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/longitude)
  """ = aliasFor(__js_longitude)
  const speed: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/speed)
  """ = aliasFor(__js_speed)
}
export interface GeolocationPosition {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition)
  """
  static {
    aliasFor(native "GeolocationPosition")
    var prototype: GeolocationPosition = aliasFor(__js_prototype)
    function new(): GeolocationPosition { aliasFor(__op_new__) }
  }
  const coords: GeolocationCoordinates """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/coords)
  """ = aliasFor(__js_coords)
  const timestamp: EpochTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/timestamp)
  """ = aliasFor(__js_timestamp)
}
export interface GeolocationPositionError {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError)
  """
  static {
    aliasFor(native "GeolocationPositionError")
    var prototype: GeolocationPositionError = aliasFor(__js_prototype)
    function new(): GeolocationPositionError { aliasFor(__op_new__) }
    const PERMISSION_DENIED: Number = aliasFor(__js_PERMISSION_DENIED)
    const POSITION_UNAVAILABLE: Number = aliasFor(__js_POSITION_UNAVAILABLE)
    const TIMEOUT: Number = aliasFor(__js_TIMEOUT)
  }
  const code: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/code)
  """ = aliasFor(__js_code)
  const message: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/message)
  """ = aliasFor(__js_message)
  const PERMISSION_DENIED: Number = aliasFor(__js_PERMISSION_DENIED)
  const POSITION_UNAVAILABLE: Number = aliasFor(__js_POSITION_UNAVAILABLE)
  const TIMEOUT: Number = aliasFor(__js_TIMEOUT)
}
export interface GlobalEventHandlersEventMap {
}
export interface GlobalEventHandlers {
  var onabort: Union[function(ev: UIEvent): Any, Null] """
  Fires when the user aborts the download.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
  """ = aliasFor(__js_onabort)
  var onanimationcancel: Union[function(ev: AnimationEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event)
  """ = aliasFor(__js_onanimationcancel)
  var onanimationend: Union[function(ev: AnimationEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
  """ = aliasFor(__js_onanimationend)
  var onanimationiteration: Union[function(ev: AnimationEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
  """ = aliasFor(__js_onanimationiteration)
  var onanimationstart: Union[function(ev: AnimationEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
  """ = aliasFor(__js_onanimationstart)
  var onauxclick: Union[function(ev: MouseEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event)
  """ = aliasFor(__js_onauxclick)
  var onbeforeinput: Union[function(ev: InputEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event)
  """ = aliasFor(__js_onbeforeinput)
  var onbeforetoggle: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event)
  """ = aliasFor(__js_onbeforetoggle)
  var onblur: Union[function(ev: FocusEvent): Any, Null] """
  Fires when the object loses the input focus.
  @param ev The focus event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
  """ = aliasFor(__js_onblur)
  var oncancel: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event)
  """ = aliasFor(__js_oncancel)
  var oncanplay: Union[function(ev: Event): Any, Null] """
  Occurs when playback is possible, but would require further buffering.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
  """ = aliasFor(__js_oncanplay)
  var oncanplaythrough: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event)
  """ = aliasFor(__js_oncanplaythrough)
  var onchange: Union[function(ev: Event): Any, Null] """
  Fires when the contents of the object or selection have changed.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
  """ = aliasFor(__js_onchange)
  var onclick: Union[function(ev: MouseEvent): Any, Null] """
  Fires when the user clicks the left mouse button on the object
  @param ev The mouse event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)
  """ = aliasFor(__js_onclick)
  var onclose: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event)
  """ = aliasFor(__js_onclose)
  var oncontextmenu: Union[function(ev: MouseEvent): Any, Null] """
  Fires when the user clicks the right mouse button in the client area, opening the context menu.
  @param ev The mouse event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
  """ = aliasFor(__js_oncontextmenu)
  var oncopy: Union[function(ev: ClipboardEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event)
  """ = aliasFor(__js_oncopy)
  var oncuechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event)
  """ = aliasFor(__js_oncuechange)
  var oncut: Union[function(ev: ClipboardEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event)
  """ = aliasFor(__js_oncut)
  var ondblclick: Union[function(ev: MouseEvent): Any, Null] """
  Fires when the user double-clicks the object.
  @param ev The mouse event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
  """ = aliasFor(__js_ondblclick)
  var ondrag: Union[function(ev: DragEvent): Any, Null] """
  Fires on the source object continuously during a drag operation.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
  """ = aliasFor(__js_ondrag)
  var ondragend: Union[function(ev: DragEvent): Any, Null] """
  Fires on the source object when the user releases the mouse at the close of a drag operation.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
  """ = aliasFor(__js_ondragend)
  var ondragenter: Union[function(ev: DragEvent): Any, Null] """
  Fires on the target element when the user drags the object to a valid drop target.
  @param ev The drag event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
  """ = aliasFor(__js_ondragenter)
  var ondragleave: Union[function(ev: DragEvent): Any, Null] """
  Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
  @param ev The drag event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
  """ = aliasFor(__js_ondragleave)
  var ondragover: Union[function(ev: DragEvent): Any, Null] """
  Fires on the target element continuously while the user drags the object over a valid drop target.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
  """ = aliasFor(__js_ondragover)
  var ondragstart: Union[function(ev: DragEvent): Any, Null] """
  Fires on the source object when the user starts to drag a text selection or selected object.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
  """ = aliasFor(__js_ondragstart)
  var ondrop: Union[function(ev: DragEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event)
  """ = aliasFor(__js_ondrop)
  var ondurationchange: Union[function(ev: Event): Any, Null] """
  Occurs when the duration attribute is updated.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
  """ = aliasFor(__js_ondurationchange)
  var onemptied: Union[function(ev: Event): Any, Null] """
  Occurs when the media element is reset to its initial state.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
  """ = aliasFor(__js_onemptied)
  var onended: Union[function(ev: Event): Any, Null] """
  Occurs when the end of playback is reached.
  @param ev The event
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
  """ = aliasFor(__js_onended)
  var onerror: OnErrorEventHandler """
  Fires when an error occurs during object loading.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)
  """ = aliasFor(__js_onerror)
  var onfocus: Union[function(ev: FocusEvent): Any, Null] """
  Fires when the object receives focus.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
  """ = aliasFor(__js_onfocus)
  var onformdata: Union[function(ev: FormDataEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event)
  """ = aliasFor(__js_onformdata)
  var ongotpointercapture: Union[function(ev: PointerEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event)
  """ = aliasFor(__js_ongotpointercapture)
  var oninput: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/input_event)
  """ = aliasFor(__js_oninput)
  var oninvalid: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event)
  """ = aliasFor(__js_oninvalid)
  var onkeydown: Union[function(ev: KeyboardEvent): Any, Null] """
  Fires when the user presses a key.
  @param ev The keyboard event
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
  """ = aliasFor(__js_onkeydown)
  var onkeyup: Union[function(ev: KeyboardEvent): Any, Null] """
  Fires when the user releases a key.
  @param ev The keyboard event
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
  """ = aliasFor(__js_onkeyup)
  var onload: Union[function(ev: Event): Any, Null] """
  Fires immediately after the browser loads the object.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/load_event)
  """ = aliasFor(__js_onload)
  var onloadeddata: Union[function(ev: Event): Any, Null] """
  Occurs when media data is loaded at the current playback position.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
  """ = aliasFor(__js_onloadeddata)
  var onloadedmetadata: Union[function(ev: Event): Any, Null] """
  Occurs when the duration and dimensions of the media have been determined.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
  """ = aliasFor(__js_onloadedmetadata)
  var onloadstart: Union[function(ev: Event): Any, Null] """
  Occurs when Internet Explorer begins looking for media data.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
  """ = aliasFor(__js_onloadstart)
  var onlostpointercapture: Union[function(ev: PointerEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/lostpointercapture_event)
  """ = aliasFor(__js_onlostpointercapture)
  var onmousedown: Union[function(ev: MouseEvent): Any, Null] """
  Fires when the user clicks the object with either mouse button.
  @param ev The mouse event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
  """ = aliasFor(__js_onmousedown)
  var onmouseenter: Union[function(ev: MouseEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event)
  """ = aliasFor(__js_onmouseenter)
  var onmouseleave: Union[function(ev: MouseEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event)
  """ = aliasFor(__js_onmouseleave)
  var onmousemove: Union[function(ev: MouseEvent): Any, Null] """
  Fires when the user moves the mouse over the object.
  @param ev The mouse event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
  """ = aliasFor(__js_onmousemove)
  var onmouseout: Union[function(ev: MouseEvent): Any, Null] """
  Fires when the user moves the mouse pointer outside the boundaries of the object.
  @param ev The mouse event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
  """ = aliasFor(__js_onmouseout)
  var onmouseover: Union[function(ev: MouseEvent): Any, Null] """
  Fires when the user moves the mouse pointer into the object.
  @param ev The mouse event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
  """ = aliasFor(__js_onmouseover)
  var onmouseup: Union[function(ev: MouseEvent): Any, Null] """
  Fires when the user releases a mouse button while the mouse is over the object.
  @param ev The mouse event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
  """ = aliasFor(__js_onmouseup)
  var onpaste: Union[function(ev: ClipboardEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event)
  """ = aliasFor(__js_onpaste)
  var onpause: Union[function(ev: Event): Any, Null] """
  Occurs when playback is paused.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
  """ = aliasFor(__js_onpause)
  var onplay: Union[function(ev: Event): Any, Null] """
  Occurs when the play method is requested.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
  """ = aliasFor(__js_onplay)
  var onplaying: Union[function(ev: Event): Any, Null] """
  Occurs when the audio or video has started playing.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
  """ = aliasFor(__js_onplaying)
  var onpointercancel: Union[function(ev: PointerEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event)
  """ = aliasFor(__js_onpointercancel)
  var onpointerdown: Union[function(ev: PointerEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event)
  """ = aliasFor(__js_onpointerdown)
  var onpointerenter: Union[function(ev: PointerEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event)
  """ = aliasFor(__js_onpointerenter)
  var onpointerleave: Union[function(ev: PointerEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event)
  """ = aliasFor(__js_onpointerleave)
  var onpointermove: Union[function(ev: PointerEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event)
  """ = aliasFor(__js_onpointermove)
  var onpointerout: Union[function(ev: PointerEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event)
  """ = aliasFor(__js_onpointerout)
  var onpointerover: Union[function(ev: PointerEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event)
  """ = aliasFor(__js_onpointerover)
  var onpointerup: Union[function(ev: PointerEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event)
  """ = aliasFor(__js_onpointerup)
  var onprogress: Union[function(ev: ProgressEvent): Any, Null] """
  Occurs to indicate progress while downloading media data.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
  """ = aliasFor(__js_onprogress)
  var onratechange: Union[function(ev: Event): Any, Null] """
  Occurs when the playback rate is increased or decreased.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
  """ = aliasFor(__js_onratechange)
  var onreset: Union[function(ev: Event): Any, Null] """
  Fires when the user resets a form.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
  """ = aliasFor(__js_onreset)
  var onresize: Union[function(ev: UIEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event)
  """ = aliasFor(__js_onresize)
  var onscroll: Union[function(ev: Event): Any, Null] """
  Fires when the user repositions the scroll box in the scroll bar on the object.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
  """ = aliasFor(__js_onscroll)
  var onscrollend: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event)
  """ = aliasFor(__js_onscrollend)
  var onsecuritypolicyviolation: Union[function(ev: SecurityPolicyViolationEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event)
  """ = aliasFor(__js_onsecuritypolicyviolation)
  var onseeked: Union[function(ev: Event): Any, Null] """
  Occurs when the seek operation ends.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
  """ = aliasFor(__js_onseeked)
  var onseeking: Union[function(ev: Event): Any, Null] """
  Occurs when the current playback position is moved.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
  """ = aliasFor(__js_onseeking)
  var onselect: Union[function(ev: Event): Any, Null] """
  Fires when the current selection changes.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
  """ = aliasFor(__js_onselect)
  var onselectionchange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event)
  """ = aliasFor(__js_onselectionchange)
  var onselectstart: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event)
  """ = aliasFor(__js_onselectstart)
  var onslotchange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event)
  """ = aliasFor(__js_onslotchange)
  var onstalled: Union[function(ev: Event): Any, Null] """
  Occurs when the download has stopped.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
  """ = aliasFor(__js_onstalled)
  var onsubmit: Union[function(ev: SubmitEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event)
  """ = aliasFor(__js_onsubmit)
  var onsuspend: Union[function(ev: Event): Any, Null] """
  Occurs if the load operation has been intentionally halted.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
  """ = aliasFor(__js_onsuspend)
  var ontimeupdate: Union[function(ev: Event): Any, Null] """
  Occurs to indicate the current playback position.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
  """ = aliasFor(__js_ontimeupdate)
  var ontoggle: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/toggle_event)
  """ = aliasFor(__js_ontoggle)
  var ontouchcancel: Nullable[Union[function(ev: TouchEvent): Any, Null]] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event)
  """ = aliasFor(__js_ontouchcancel)
  var ontouchend: Nullable[Union[function(ev: TouchEvent): Any, Null]] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchend_event)
  """ = aliasFor(__js_ontouchend)
  var ontouchmove: Nullable[Union[function(ev: TouchEvent): Any, Null]] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event)
  """ = aliasFor(__js_ontouchmove)
  var ontouchstart: Nullable[Union[function(ev: TouchEvent): Any, Null]] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event)
  """ = aliasFor(__js_ontouchstart)
  var ontransitioncancel: Union[function(ev: TransitionEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event)
  """ = aliasFor(__js_ontransitioncancel)
  var ontransitionend: Union[function(ev: TransitionEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
  """ = aliasFor(__js_ontransitionend)
  var ontransitionrun: Union[function(ev: TransitionEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event)
  """ = aliasFor(__js_ontransitionrun)
  var ontransitionstart: Union[function(ev: TransitionEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event)
  """ = aliasFor(__js_ontransitionstart)
  var onvolumechange: Union[function(ev: Event): Any, Null] """
  Occurs when the volume is changed, or playback is muted or unmuted.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
  """ = aliasFor(__js_onvolumechange)
  var onwaiting: Union[function(ev: Event): Any, Null] """
  Occurs when playback stops because the next frame of a video resource is not available.
  @param ev The event.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
  """ = aliasFor(__js_onwaiting)
  var onwheel: Union[function(ev: WheelEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event)
  """ = aliasFor(__js_onwheel)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLAllCollection {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection)
  """
  static {
    aliasFor(native "HTMLAllCollection")
    var prototype: HTMLAllCollection = aliasFor(__js_prototype)
    function new(): HTMLAllCollection { aliasFor(__op_new__) }
  }
  const length: Number """
  Returns the number of elements in the collection.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/length)
  """ = aliasFor(__js_length)
  function item(nameOrIndex: String): Union[HTMLCollection, Element, Null] {
    """
    Returns the item with index index from the collection (determined by tree order).
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/item)
    """
    aliasFor(__js_item)
  }
  function item(): Union[HTMLCollection, Element, Null] { aliasFor(__js_item) }
  function namedItem(name: String): Union[HTMLCollection, Element, Null] {
    """
    Returns the item with ID or name name from the collection.
       *
    If there are multiple matching items, then an HTMLCollection object containing all those elements is returned.
       *
    Only button, form, iframe, input, map, meta, object, select, and textarea elements can have a name for the purpose of this method; their name is given by the value of their name attribute.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/namedItem)
    """
    aliasFor(__js_namedItem)
  }
  function __getitem__(index: Number): Element { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: Element): Element { aliasFor(__op_setitem__) }
}
export interface HTMLAnchorElement extends HTMLElement, HTMLHyperlinkElementUtils {
  """
  Hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement)
  """
  static {
    aliasFor(native "HTMLAnchorElement")
    var prototype: HTMLAnchorElement = aliasFor(__js_prototype)
    function new(): HTMLAnchorElement { aliasFor(__op_new__) }
  }
  var download: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/download)
  """ = aliasFor(__js_download)
  var hreflang: String """
  Sets or retrieves the language code of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hreflang)
  """ = aliasFor(__js_hreflang)
  var ping: String = aliasFor(__js_ping)
  var referrerPolicy: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/referrerPolicy)
  """ = aliasFor(__js_referrerPolicy)
  var rel: String """
  Sets or retrieves the relationship between the object and the destination of the link.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/rel)
  """ = aliasFor(__js_rel)
  const relList: DOMTokenList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/relList)
  """ = aliasFor(__js_relList)
  var target: String """
  Sets or retrieves the window or frame at which to target content.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/target)
  """ = aliasFor(__js_target)
  var text: String """
  Retrieves or sets the text of the object as a string.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/text)
  """ = aliasFor(__js_text)
  var type: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/type)
  """ = aliasFor(__js_type)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLAreaElement extends HTMLElement, HTMLHyperlinkElementUtils {
  """
  Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <area> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement)
  """
  static {
    aliasFor(native "HTMLAreaElement")
    var prototype: HTMLAreaElement = aliasFor(__js_prototype)
    function new(): HTMLAreaElement { aliasFor(__op_new__) }
  }
  var alt: String """
  Sets or retrieves a text alternative to the graphic.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/alt)
  """ = aliasFor(__js_alt)
  var coords: String """
  Sets or retrieves the coordinates of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/coords)
  """ = aliasFor(__js_coords)
  var download: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/download)
  """ = aliasFor(__js_download)
  var ping: String = aliasFor(__js_ping)
  var referrerPolicy: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/referrerPolicy)
  """ = aliasFor(__js_referrerPolicy)
  var rel: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/rel)
  """ = aliasFor(__js_rel)
  const relList: DOMTokenList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/relList)
  """ = aliasFor(__js_relList)
  var shape: String """
  Sets or retrieves the shape of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/shape)
  """ = aliasFor(__js_shape)
  var target: String """
  Sets or retrieves the window or frame at which to target content.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/target)
  """ = aliasFor(__js_target)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLAudioElement extends HTMLMediaElement {
  """
  Provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAudioElement)
  """
  static {
    aliasFor(native "HTMLAudioElement")
    var prototype: HTMLAudioElement = aliasFor(__js_prototype)
    function new(): HTMLAudioElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLBRElement extends HTMLElement {
  """
  A HTML line break element (<br>). It inherits from HTMLElement.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBRElement)
  """
  static {
    aliasFor(native "HTMLBRElement")
    var prototype: HTMLBRElement = aliasFor(__js_prototype)
    function new(): HTMLBRElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLBaseElement extends HTMLElement {
  """
  Contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement)
  """
  static {
    aliasFor(native "HTMLBaseElement")
    var prototype: HTMLBaseElement = aliasFor(__js_prototype)
    function new(): HTMLBaseElement { aliasFor(__op_new__) }
  }
  var href: String """
  Gets or sets the baseline URL on which relative links are based.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/href)
  """ = aliasFor(__js_href)
  var target: String """
  Sets or retrieves the window or frame at which to target content.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/target)
  """ = aliasFor(__js_target)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLBodyElementEventMap extends HTMLElementEventMap, WindowEventHandlersEventMap {
}
export interface HTMLBodyElement extends HTMLElement, WindowEventHandlers {
  """
  Provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating <body> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement)
  """
  static {
    aliasFor(native "HTMLBodyElement")
    var prototype: HTMLBodyElement = aliasFor(__js_prototype)
    function new(): HTMLBodyElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLButtonElement extends HTMLElement, PopoverInvokerElement {
  """
  Provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <button> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement)
  """
  static {
    aliasFor(native "HTMLButtonElement")
    var prototype: HTMLButtonElement = aliasFor(__js_prototype)
    function new(): HTMLButtonElement { aliasFor(__op_new__) }
  }
  var disabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/disabled)
  """ = aliasFor(__js_disabled)
  const form: Union[HTMLFormElement, Null] """
  Retrieves a reference to the form that the object is embedded in.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/form)
  """ = aliasFor(__js_form)
  var formAction: String """
  Overrides the action attribute (where the data on a form is sent) on the parent form element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formAction)
  """ = aliasFor(__js_formAction)
  var formEnctype: String """
  Used to override the encoding (formEnctype attribute) specified on the form element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formEnctype)
  """ = aliasFor(__js_formEnctype)
  var formMethod: String """
  Overrides the submit method attribute previously specified on a form element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formMethod)
  """ = aliasFor(__js_formMethod)
  var formNoValidate: Bool """
  Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formNoValidate)
  """ = aliasFor(__js_formNoValidate)
  var formTarget: String """
  Overrides the target attribute on a form element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formTarget)
  """ = aliasFor(__js_formTarget)
  const labels: NodeList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/labels)
  """ = aliasFor(__js_labels)
  var name: String """
  Sets or retrieves the name of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/name)
  """ = aliasFor(__js_name)
  var type: Union[_SStringsubmit, _SStringreset, _SStringbutton] """
  Gets the classification and default behavior of the button.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/type)
  """ = aliasFor(__js_type)
  const validationMessage: String """
  Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validationMessage)
  """ = aliasFor(__js_validationMessage)
  const validity: ValidityState """
  Returns a  ValidityState object that represents the validity states of an element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validity)
  """ = aliasFor(__js_validity)
  var value: String """
  Sets or retrieves the default or selected value of the control.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/value)
  """ = aliasFor(__js_value)
  const willValidate: Bool """
  Returns whether an element will successfully validate based on forms validation rules and constraints.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/willValidate)
  """ = aliasFor(__js_willValidate)
  function checkValidity(): Bool {
    """
    Returns whether a form will validate when it is submitted, without having to submit it.
    """
    aliasFor(__js_checkValidity)
  }
  function reportValidity(): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/reportValidity)
    """
    aliasFor(__js_reportValidity)
  }
  function setCustomValidity(error: String): Any {
    """
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
    """
    aliasFor(__js_setCustomValidity)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLCanvasElement extends HTMLElement {
  """
  Provides properties and methods for manipulating the layout and presentation of <canvas> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement)
  """
  static {
    aliasFor(native "HTMLCanvasElement")
    var prototype: HTMLCanvasElement = aliasFor(__js_prototype)
    function new(): HTMLCanvasElement { aliasFor(__op_new__) }
  }
  var height: Number """
  Gets or sets the height of a canvas element on a document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/height)
  """ = aliasFor(__js_height)
  var width: Number """
  Gets or sets the width of a canvas element on a document.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/width)
  """ = aliasFor(__js_width)
  function captureStream(frameRequestRate: Number): MediaStream {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/captureStream)
    """
    aliasFor(__js_captureStream)
  }
  function captureStream(): MediaStream { aliasFor(__js_captureStream) }
  function getContext(contextId: _SString2d, options: CanvasRenderingContext2DSettings): Union[CanvasRenderingContext2D, Null] {
    """
    Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.
    @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext("2d"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext("experimental-webgl");
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/getContext)
    """
    aliasFor(__js_getContext)
  }
  function getContext(contextId: _SString2d): Union[CanvasRenderingContext2D, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringbitmaprenderer, options: ImageBitmapRenderingContextSettings): Union[ImageBitmapRenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringbitmaprenderer): Union[ImageBitmapRenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringwebgl, options: WebGLContextAttributes): Union[WebGLRenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringwebgl): Union[WebGLRenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringwebgl2, options: WebGLContextAttributes): Union[WebGL2RenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringwebgl2): Union[WebGL2RenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: String, options: Any): Union[RenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: String): Union[RenderingContext, Null] { aliasFor(__js_getContext) }
  function toBlob(callback: BlobCallback, type: String, quality: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/toBlob)
    """
    aliasFor(__js_toBlob)
  }
  function toBlob(callback: BlobCallback, type: String): Any { aliasFor(__js_toBlob) }
  function toBlob(callback: BlobCallback): Any { aliasFor(__js_toBlob) }
  function toDataURL(type: String, quality: Any): String {
    """
    Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.
    @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/toDataURL)
    """
    aliasFor(__js_toDataURL)
  }
  function toDataURL(type: String): String { aliasFor(__js_toDataURL) }
  function toDataURL(): String { aliasFor(__js_toDataURL) }
  function transferControlToOffscreen(): OffscreenCanvas {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen)
    """
    aliasFor(__js_transferControlToOffscreen)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
  function get2DContext(contextType: _SString2d = "2d"): CanvasRenderingContext2D? {
    """
    https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
  
    Calls canvas.getContext() to get the 2D rendering context.
    The default parameter automatically passes "2d" to the method to get the correct
    context type.
    """
    aliasFor(__js_getContext)
  }
  function getWebGLContext(contextType: _SStringwebgl = "webgl"): WebGLRenderingContext? {
    """
    https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
  
    Calls canvas.getContext() to get a WebGL rendering context.
    The default parameter automatically passes "webgl" to the method to get the correct
    context type.
    """
    aliasFor(__js_getContext)
  }  
  function getWebGL2Context(contextType: _SStringwebgl2 = "webgl2"): WebGL2RenderingContext? {
    """
    https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
  
    Calls canvas.getContext() to get a WebGL rendering context.
    The default parameter automatically passes "webgl" to the method to get the correct
    context type.
    """
    aliasFor(__js_getContext)
  }
}
export interface HTMLCollectionBase {
  const length: Number """
  Sets or retrieves the number of objects in a collection.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection/length)
  """ = aliasFor(__js_length)
  function item(index: Number): Union[Element, Null] {
    """
    Retrieves an object from various collections.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection/item)
    """
    aliasFor(__js_item)
  }
  function __getitem__(index: Number): Element { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: Element): Element { aliasFor(__op_setitem__) }
}
export interface HTMLCollection extends HTMLCollectionBase {
  static {
    aliasFor(native "HTMLCollection")
    var prototype: HTMLCollection = aliasFor(__js_prototype)
    function new(): HTMLCollection { aliasFor(__op_new__) }
  }
  function namedItem(name: String): Union[Element, Null] {
    """
    Retrieves a select object or an object from an options collection.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection/namedItem)
    """
    aliasFor(__js_namedItem)
  }
}
export interface HTMLDListElement extends HTMLElement {
  """
  Provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (<dl>) elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDListElement)
  """
  static {
    aliasFor(native "HTMLDListElement")
    var prototype: HTMLDListElement = aliasFor(__js_prototype)
    function new(): HTMLDListElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLDataElement extends HTMLElement {
  """
  Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataElement)
  """
  static {
    aliasFor(native "HTMLDataElement")
    var prototype: HTMLDataElement = aliasFor(__js_prototype)
    function new(): HTMLDataElement { aliasFor(__op_new__) }
  }
  var value: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataElement/value)
  """ = aliasFor(__js_value)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLDataListElement extends HTMLElement {
  """
  Provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement)
  """
  static {
    aliasFor(native "HTMLDataListElement")
    var prototype: HTMLDataListElement = aliasFor(__js_prototype)
    function new(): HTMLDataListElement { aliasFor(__op_new__) }
  }
  const options: HTMLCollection """
  Returns an HTMLCollection of the option elements of the datalist element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement/options)
  """ = aliasFor(__js_options)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLDetailsElement extends HTMLElement {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement)
  """
  static {
    aliasFor(native "HTMLDetailsElement")
    var prototype: HTMLDetailsElement = aliasFor(__js_prototype)
    function new(): HTMLDetailsElement { aliasFor(__op_new__) }
  }
  var name: String = aliasFor(__js_name)
  var open: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/open)
  """ = aliasFor(__js_open)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLDialogElement extends HTMLElement {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement)
  """
  static {
    aliasFor(native "HTMLDialogElement")
    var prototype: HTMLDialogElement = aliasFor(__js_prototype)
    function new(): HTMLDialogElement { aliasFor(__op_new__) }
  }
  var open: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/open)
  """ = aliasFor(__js_open)
  var returnValue: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/returnValue)
  """ = aliasFor(__js_returnValue)
  function close(returnValue: String): Any {
    """
    Closes the dialog element.
       *
    The argument, if provided, provides a return value.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close)
    """
    aliasFor(__js_close)
  }
  function close(): Any { aliasFor(__js_close) }
  function show(): Any {
    """
    Displays the dialog element.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/show)
    """
    aliasFor(__js_show)
  }
  function showModal(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/showModal)
    """
    aliasFor(__js_showModal)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLDirectoryElement extends HTMLElement {
  """
  @deprecated
  """
  static {
    aliasFor(native "HTMLDirectoryElement")
    var prototype: HTMLDirectoryElement = aliasFor(__js_prototype)
    function new(): HTMLDirectoryElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLDivElement extends HTMLElement {
  """
  Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <div> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDivElement)
  """
  static {
    aliasFor(native "HTMLDivElement")
    var prototype: HTMLDivElement = aliasFor(__js_prototype)
    function new(): HTMLDivElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLDocument extends Document {
  """
  @deprecated
  """
  static {
    aliasFor(native "HTMLDocument")
    var prototype: HTMLDocument = aliasFor(__js_prototype)
    function new(): HTMLDocument { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLElementEventMap extends ElementEventMap, GlobalEventHandlersEventMap {
}
export interface HTMLElement extends Element, ElementCSSInlineStyle, ElementContentEditable, GlobalEventHandlers, HTMLOrSVGElement {
  """
  Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement)
  """
  static {
    aliasFor(native "HTMLElement")
    var prototype: HTMLElement = aliasFor(__js_prototype)
    function new(): HTMLElement { aliasFor(__op_new__) }
  }
  var accessKey: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKey)
  """ = aliasFor(__js_accessKey)
  const accessKeyLabel: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKeyLabel)
  """ = aliasFor(__js_accessKeyLabel)
  var autocapitalize: String = aliasFor(__js_autocapitalize)
  var dir: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dir)
  """ = aliasFor(__js_dir)
  var draggable: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/draggable)
  """ = aliasFor(__js_draggable)
  var hidden: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidden)
  """ = aliasFor(__js_hidden)
  var inert: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inert)
  """ = aliasFor(__js_inert)
  var innerText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/innerText)
  """ = aliasFor(__js_innerText)
  var lang: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/lang)
  """ = aliasFor(__js_lang)
  const offsetHeight: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetHeight)
  """ = aliasFor(__js_offsetHeight)
  const offsetLeft: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetLeft)
  """ = aliasFor(__js_offsetLeft)
  const offsetParent: Union[Element, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetParent)
  """ = aliasFor(__js_offsetParent)
  const offsetTop: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetTop)
  """ = aliasFor(__js_offsetTop)
  const offsetWidth: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetWidth)
  """ = aliasFor(__js_offsetWidth)
  var outerText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/outerText)
  """ = aliasFor(__js_outerText)
  var popover: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/popover)
  """ = aliasFor(__js_popover)
  var spellcheck: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/spellcheck)
  """ = aliasFor(__js_spellcheck)
  var title: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/title)
  """ = aliasFor(__js_title)
  var translate: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/translate)
  """ = aliasFor(__js_translate)
  function attachInternals(): ElementInternals {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/attachInternals)
    """
    aliasFor(__js_attachInternals)
  }
  function click(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/click)
    """
    aliasFor(__js_click)
  }
  function hidePopover(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidePopover)
    """
    aliasFor(__js_hidePopover)
  }
  function showPopover(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/showPopover)
    """
    aliasFor(__js_showPopover)
  }
  function togglePopover(force: Bool): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/togglePopover)
    """
    aliasFor(__js_togglePopover)
  }
  function togglePopover(): Bool { aliasFor(__js_togglePopover) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLEmbedElement extends HTMLElement {
  """
  Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement)
  """
  static {
    aliasFor(native "HTMLEmbedElement")
    var prototype: HTMLEmbedElement = aliasFor(__js_prototype)
    function new(): HTMLEmbedElement { aliasFor(__op_new__) }
  }
  var height: String """
  Sets or retrieves the height of the object.
  """ = aliasFor(__js_height)
  var src: String """
  Sets or retrieves a URL to be loaded by the object.
  """ = aliasFor(__js_src)
  var type: String = aliasFor(__js_type)
  var width: String """
  Sets or retrieves the width of the object.
  """ = aliasFor(__js_width)
  function getSVGDocument(): Union[Document, Null] { aliasFor(__js_getSVGDocument) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLFieldSetElement extends HTMLElement {
  """
  Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <fieldset> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement)
  """
  static {
    aliasFor(native "HTMLFieldSetElement")
    var prototype: HTMLFieldSetElement = aliasFor(__js_prototype)
    function new(): HTMLFieldSetElement { aliasFor(__op_new__) }
  }
  var disabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/disabled)
  """ = aliasFor(__js_disabled)
  const elements: HTMLCollection """
  Returns an HTMLCollection of the form controls in the element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/elements)
  """ = aliasFor(__js_elements)
  const form: Union[HTMLFormElement, Null] """
  Retrieves a reference to the form that the object is embedded in.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/form)
  """ = aliasFor(__js_form)
  var name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/name)
  """ = aliasFor(__js_name)
  const type: String """
  Returns the string "fieldset".
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/type)
  """ = aliasFor(__js_type)
  const validationMessage: String """
  Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validationMessage)
  """ = aliasFor(__js_validationMessage)
  const validity: ValidityState """
  Returns a  ValidityState object that represents the validity states of an element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validity)
  """ = aliasFor(__js_validity)
  const willValidate: Bool """
  Returns whether an element will successfully validate based on forms validation rules and constraints.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/willValidate)
  """ = aliasFor(__js_willValidate)
  function checkValidity(): Bool {
    """
    Returns whether a form will validate when it is submitted, without having to submit it.
    """
    aliasFor(__js_checkValidity)
  }
  function reportValidity(): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/reportValidity)
    """
    aliasFor(__js_reportValidity)
  }
  function setCustomValidity(error: String): Any {
    """
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
    """
    aliasFor(__js_setCustomValidity)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLFontElement extends HTMLElement {
  """
  @deprecated
  """
  static {
    aliasFor(native "HTMLFontElement")
    var prototype: HTMLFontElement = aliasFor(__js_prototype)
    function new(): HTMLFontElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLFormControlsCollection extends HTMLCollectionBase {
  """
  A collection of HTML form control elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormControlsCollection)
  """
  static {
    aliasFor(native "HTMLFormControlsCollection")
    var prototype: HTMLFormControlsCollection = aliasFor(__js_prototype)
    function new(): HTMLFormControlsCollection { aliasFor(__op_new__) }
  }
  function namedItem(name: String): Union[RadioNodeList, Element, Null] {
    """
    Returns the item with ID or name name from the collection.
       *
    If there are multiple matching items, then a RadioNodeList object containing all those elements is returned.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormControlsCollection/namedItem)
    """
    aliasFor(__js_namedItem)
  }
}
export interface HTMLFormElement extends HTMLElement {
  """
  A <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement)
  """
  static {
    aliasFor(native "HTMLFormElement")
    var prototype: HTMLFormElement = aliasFor(__js_prototype)
    function new(): HTMLFormElement { aliasFor(__op_new__) }
  }
  var acceptCharset: String """
  Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/acceptCharset)
  """ = aliasFor(__js_acceptCharset)
  var action: String """
  Sets or retrieves the URL to which the form content is sent for processing.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/action)
  """ = aliasFor(__js_action)
  var autocomplete: AutoFillBase """
  Specifies whether autocomplete is applied to an editable text field.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/autocomplete)
  """ = aliasFor(__js_autocomplete)
  const elements: HTMLFormControlsCollection """
  Retrieves a collection, in source order, of all controls in a given form.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/elements)
  """ = aliasFor(__js_elements)
  var encoding: String """
  Sets or retrieves the MIME encoding for the form.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/encoding)
  """ = aliasFor(__js_encoding)
  var enctype: String """
  Sets or retrieves the encoding type for the form.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/enctype)
  """ = aliasFor(__js_enctype)
  const length: Number """
  Sets or retrieves the number of objects in a collection.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/length)
  """ = aliasFor(__js_length)
  var method: String """
  Sets or retrieves how to send the form data to the server.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/method)
  """ = aliasFor(__js_method)
  var name: String """
  Sets or retrieves the name of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/name)
  """ = aliasFor(__js_name)
  var noValidate: Bool """
  Designates a form that is not validated when submitted.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/noValidate)
  """ = aliasFor(__js_noValidate)
  var rel: String = aliasFor(__js_rel)
  const relList: DOMTokenList = aliasFor(__js_relList)
  var target: String """
  Sets or retrieves the window or frame at which to target content.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/target)
  """ = aliasFor(__js_target)
  function checkValidity(): Bool {
    """
    Returns whether a form will validate when it is submitted, without having to submit it.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/checkValidity)
    """
    aliasFor(__js_checkValidity)
  }
  function reportValidity(): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reportValidity)
    """
    aliasFor(__js_reportValidity)
  }
  function requestSubmit(submitter: Union[HTMLElement, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/requestSubmit)
    """
    aliasFor(__js_requestSubmit)
  }
  function requestSubmit(): Any { aliasFor(__js_requestSubmit) }
  function reset(): Any {
    """
    Fires when the user resets a form.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset)
    """
    aliasFor(__js_reset)
  }
  function submit(): Any {
    """
    Fires when a FORM is about to be submitted.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit)
    """
    aliasFor(__js_submit)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
  function __getitem__(index: Number): Element { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: Element): Element { aliasFor(__op_setitem__) }
  function __getitem__(name: String): Any { aliasFor(__op_getitem__) }
  function __setitem__(name: String, value: Any): Any { aliasFor(__op_setitem__) }
}
export interface HTMLFrameElement extends HTMLElement {
  """
  @deprecated
  """
  static {
    aliasFor(native "HTMLFrameElement")
    var prototype: HTMLFrameElement = aliasFor(__js_prototype)
    function new(): HTMLFrameElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLFrameSetElementEventMap extends HTMLElementEventMap, WindowEventHandlersEventMap {
}
export interface HTMLFrameSetElement extends HTMLElement, WindowEventHandlers {
  """
  @deprecated
  """
  static {
    aliasFor(native "HTMLFrameSetElement")
    var prototype: HTMLFrameSetElement = aliasFor(__js_prototype)
    function new(): HTMLFrameSetElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLHRElement extends HTMLElement {
  """
  Provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHRElement)
  """
  static {
    aliasFor(native "HTMLHRElement")
    var prototype: HTMLHRElement = aliasFor(__js_prototype)
    function new(): HTMLHRElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLHeadElement extends HTMLElement {
  """
  Contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHeadElement)
  """
  static {
    aliasFor(native "HTMLHeadElement")
    var prototype: HTMLHeadElement = aliasFor(__js_prototype)
    function new(): HTMLHeadElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLHeadingElement extends HTMLElement {
  """
  The different heading elements. It inherits methods and properties from the HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHeadingElement)
  """
  static {
    aliasFor(native "HTMLHeadingElement")
    var prototype: HTMLHeadingElement = aliasFor(__js_prototype)
    function new(): HTMLHeadingElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLHtmlElement extends HTMLElement {
  """
  Serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement)
  """
  static {
    aliasFor(native "HTMLHtmlElement")
    var prototype: HTMLHtmlElement = aliasFor(__js_prototype)
    function new(): HTMLHtmlElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLHyperlinkElementUtils {
  var hash: String """
  Returns the hyperlink's URL's fragment (includes leading "#" if non-empty).
     *
  Can be set, to change the URL's fragment (ignores leading "#").
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hash)
  """ = aliasFor(__js_hash)
  var host: String """
  Returns the hyperlink's URL's host and port (if different from the default port for the scheme).
     *
  Can be set, to change the URL's host and port.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/host)
  """ = aliasFor(__js_host)
  var hostname: String """
  Returns the hyperlink's URL's host.
     *
  Can be set, to change the URL's host.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hostname)
  """ = aliasFor(__js_hostname)
  var href: String """
  Returns the hyperlink's URL.
     *
  Can be set, to change the URL.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)
  """ = aliasFor(__js_href)
  function toString(): String { aliasFor(__js_toString) }
  const origin: String """
  Returns the hyperlink's URL's origin.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/origin)
  """ = aliasFor(__js_origin)
  var password: String """
  Returns the hyperlink's URL's password.
     *
  Can be set, to change the URL's password.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/password)
  """ = aliasFor(__js_password)
  var pathname: String """
  Returns the hyperlink's URL's path.
     *
  Can be set, to change the URL's path.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/pathname)
  """ = aliasFor(__js_pathname)
  var port: String """
  Returns the hyperlink's URL's port.
     *
  Can be set, to change the URL's port.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/port)
  """ = aliasFor(__js_port)
  var protocol: String """
  Returns the hyperlink's URL's scheme.
     *
  Can be set, to change the URL's scheme.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/protocol)
  """ = aliasFor(__js_protocol)
  var search: String """
  Returns the hyperlink's URL's query (includes leading "?" if non-empty).
     *
  Can be set, to change the URL's query (ignores leading "?").
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/search)
  """ = aliasFor(__js_search)
  var username: String """
  Returns the hyperlink's URL's username.
     *
  Can be set, to change the URL's username.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/username)
  """ = aliasFor(__js_username)
}
export interface HTMLIFrameElement extends HTMLElement {
  """
  Provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement)
  """
  static {
    aliasFor(native "HTMLIFrameElement")
    var prototype: HTMLIFrameElement = aliasFor(__js_prototype)
    function new(): HTMLIFrameElement { aliasFor(__op_new__) }
  }
  var allow: String = aliasFor(__js_allow)
  var allowFullscreen: Bool = aliasFor(__js_allowFullscreen)
  const contentDocument: Union[Document, Null] """
  Retrieves the document object of the page or frame.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentDocument)
  """ = aliasFor(__js_contentDocument)
  const contentWindow: Union[WindowProxy, Null] """
  Retrieves the object of the specified.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentWindow)
  """ = aliasFor(__js_contentWindow)
  var height: String """
  Sets or retrieves the height of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/height)
  """ = aliasFor(__js_height)
  var loading: String = aliasFor(__js_loading)
  var name: String """
  Sets or retrieves the frame name.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/name)
  """ = aliasFor(__js_name)
  var referrerPolicy: ReferrerPolicy """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/referrerPolicy)
  """ = aliasFor(__js_referrerPolicy)
  const sandbox: DOMTokenList = aliasFor(__js_sandbox)
  var src: String """
  Sets or retrieves a URL to be loaded by the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/src)
  """ = aliasFor(__js_src)
  var srcdoc: String """
  Sets or retrives the content of the page that is to contain.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/srcdoc)
  """ = aliasFor(__js_srcdoc)
  var width: String """
  Sets or retrieves the width of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/width)
  """ = aliasFor(__js_width)
  function getSVGDocument(): Union[Document, Null] { aliasFor(__js_getSVGDocument) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLImageElement extends HTMLElement {
  """
  Provides special properties and methods for manipulating <img> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement)
  """
  static {
    aliasFor(native "HTMLImageElement")
    var prototype: HTMLImageElement = aliasFor(__js_prototype)
    function new(): HTMLImageElement { aliasFor(__op_new__) }
  }
  var alt: String """
  Sets or retrieves a text alternative to the graphic.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/alt)
  """ = aliasFor(__js_alt)
  const complete: Bool """
  Retrieves whether the object is fully loaded.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/complete)
  """ = aliasFor(__js_complete)
  var crossOrigin: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/crossOrigin)
  """ = aliasFor(__js_crossOrigin)
  const currentSrc: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/currentSrc)
  """ = aliasFor(__js_currentSrc)
  var decoding: Union[_SStringasync, _SStringsync, _SStringauto] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decoding)
  """ = aliasFor(__js_decoding)
  var fetchPriority: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/fetchPriority)
  """ = aliasFor(__js_fetchPriority)
  var height: Number """
  Sets or retrieves the height of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/height)
  """ = aliasFor(__js_height)
  var isMap: Bool """
  Sets or retrieves whether the image is a server-side image map.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/isMap)
  """ = aliasFor(__js_isMap)
  var loading: Union[_SStringeager, _SStringlazy] """
  Sets or retrieves the policy for loading image elements that are outside the viewport.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/loading)
  """ = aliasFor(__js_loading)
  const naturalHeight: Number """
  The original height of the image resource before sizing.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalHeight)
  """ = aliasFor(__js_naturalHeight)
  const naturalWidth: Number """
  The original width of the image resource before sizing.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalWidth)
  """ = aliasFor(__js_naturalWidth)
  var referrerPolicy: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/referrerPolicy)
  """ = aliasFor(__js_referrerPolicy)
  var sizes: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/sizes)
  """ = aliasFor(__js_sizes)
  var src: String """
  The address or URL of the a media resource that is to be considered.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/src)
  """ = aliasFor(__js_src)
  var srcset: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/srcset)
  """ = aliasFor(__js_srcset)
  var useMap: String """
  Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/useMap)
  """ = aliasFor(__js_useMap)
  var width: Number """
  Sets or retrieves the width of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/width)
  """ = aliasFor(__js_width)
  const x: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/x)
  """ = aliasFor(__js_x)
  const y: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/y)
  """ = aliasFor(__js_y)
  function decode(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decode)
    """
    aliasFor(__js_decode)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLInputElement extends HTMLElement, PopoverInvokerElement {
  """
  Provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement)
  """
  static {
    aliasFor(native "HTMLInputElement")
    var prototype: HTMLInputElement = aliasFor(__js_prototype)
    function new(): HTMLInputElement { aliasFor(__op_new__) }
  }
  var accept: String """
  Sets or retrieves a comma-separated list of content types.
  """ = aliasFor(__js_accept)
  var alt: String """
  Sets or retrieves a text alternative to the graphic.
  """ = aliasFor(__js_alt)
  var autocomplete: AutoFill """
  Specifies whether autocomplete is applied to an editable text field.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/autocomplete)
  """ = aliasFor(__js_autocomplete)
  var capture: String = aliasFor(__js_capture)
  var checked: Bool """
  Sets or retrieves the state of the check box or radio button.
  """ = aliasFor(__js_checked)
  var defaultChecked: Bool """
  Sets or retrieves the state of the check box or radio button.
  """ = aliasFor(__js_defaultChecked)
  var defaultValue: String """
  Sets or retrieves the initial contents of the object.
  """ = aliasFor(__js_defaultValue)
  var dirName: String = aliasFor(__js_dirName)
  var disabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/disabled)
  """ = aliasFor(__js_disabled)
  var files: Union[FileList, Null] """
  Returns a FileList object on a file type input object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/files)
  """ = aliasFor(__js_files)
  const form: Union[HTMLFormElement, Null] """
  Retrieves a reference to the form that the object is embedded in.
  """ = aliasFor(__js_form)
  var formAction: String """
  Overrides the action attribute (where the data on a form is sent) on the parent form element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formAction)
  """ = aliasFor(__js_formAction)
  var formEnctype: String """
  Used to override the encoding (formEnctype attribute) specified on the form element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formEnctype)
  """ = aliasFor(__js_formEnctype)
  var formMethod: String """
  Overrides the submit method attribute previously specified on a form element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formMethod)
  """ = aliasFor(__js_formMethod)
  var formNoValidate: Bool """
  Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formNoValidate)
  """ = aliasFor(__js_formNoValidate)
  var formTarget: String """
  Overrides the target attribute on a form element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formTarget)
  """ = aliasFor(__js_formTarget)
  var height: Number """
  Sets or retrieves the height of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/height)
  """ = aliasFor(__js_height)
  var indeterminate: Bool """
  When set, overrides the rendering of checkbox controls so that the current value is not visible.
  """ = aliasFor(__js_indeterminate)
  const labels: Union[NodeList, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/labels)
  """ = aliasFor(__js_labels)
  const list: Union[HTMLDataListElement, Null] """
  Specifies the ID of a pre-defined datalist of options for an input element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/list)
  """ = aliasFor(__js_list)
  var max: String """
  Defines the maximum acceptable value for an input element with type="number".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.
  """ = aliasFor(__js_max)
  var maxLength: Number """
  Sets or retrieves the maximum number of characters that the user can enter in a text control.
  """ = aliasFor(__js_maxLength)
  var min: String """
  Defines the minimum acceptable value for an input element with type="number". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.
  """ = aliasFor(__js_min)
  var minLength: Number = aliasFor(__js_minLength)
  var multiple: Bool """
  Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/multiple)
  """ = aliasFor(__js_multiple)
  var name: String """
  Sets or retrieves the name of the object.
  """ = aliasFor(__js_name)
  var pattern: String """
  Gets or sets a string containing a regular expression that the user's input must match.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/pattern)
  """ = aliasFor(__js_pattern)
  var placeholder: String """
  Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/placeholder)
  """ = aliasFor(__js_placeholder)
  var readOnly: Bool = aliasFor(__js_readOnly)
  var required: Bool """
  When present, marks an element that can't be submitted without a value.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/required)
  """ = aliasFor(__js_required)
  var selectionDirection: Union[_SStringforward, _SStringbackward, _SStringnone, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionDirection)
  """ = aliasFor(__js_selectionDirection)
  var selectionEnd: Union[Number, Null] """
  Gets or sets the end position or offset of a text selection.
  """ = aliasFor(__js_selectionEnd)
  var selectionStart: Union[Number, Null] """
  Gets or sets the starting position or offset of a text selection.
  """ = aliasFor(__js_selectionStart)
  var size: Number = aliasFor(__js_size)
  var src: String """
  The address or URL of the a media resource that is to be considered.
  """ = aliasFor(__js_src)
  var step: String """
  Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.
  """ = aliasFor(__js_step)
  var type: String """
  Returns the content type of the object.
  """ = aliasFor(__js_type)
  const validationMessage: String """
  Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validationMessage)
  """ = aliasFor(__js_validationMessage)
  const validity: ValidityState """
  Returns a  ValidityState object that represents the validity states of an element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validity)
  """ = aliasFor(__js_validity)
  var value: String """
  Returns the value of the data at the cursor's current position.
  """ = aliasFor(__js_value)
  var valueAsDate: Union[Date, Null] """
  Returns a Date object representing the form control's value, if applicable; otherwise, returns null. Can be set, to change the value. Throws an "InvalidStateError" DOMException if the control isn't date- or time-based.
  """ = aliasFor(__js_valueAsDate)
  var valueAsNumber: Number """
  Returns the input field value as a number.
  """ = aliasFor(__js_valueAsNumber)
  const webkitEntries: List[FileSystemEntry] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitEntries)
  """ = aliasFor(__js_webkitEntries)
  var webkitdirectory: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitdirectory)
  """ = aliasFor(__js_webkitdirectory)
  var width: Number """
  Sets or retrieves the width of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/width)
  """ = aliasFor(__js_width)
  const willValidate: Bool """
  Returns whether an element will successfully validate based on forms validation rules and constraints.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/willValidate)
  """ = aliasFor(__js_willValidate)
  function checkValidity(): Bool {
    """
    Returns whether a form will validate when it is submitted, without having to submit it.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/checkValidity)
    """
    aliasFor(__js_checkValidity)
  }
  function reportValidity(): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/reportValidity)
    """
    aliasFor(__js_reportValidity)
  }
  function select(): Any {
    """
    Makes the selection equal to the current object.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select)
    """
    aliasFor(__js_select)
  }
  function setCustomValidity(error: String): Any {
    """
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setCustomValidity)
    """
    aliasFor(__js_setCustomValidity)
  }
  function setRangeText(replacement: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setRangeText)
    """
    aliasFor(__js_setRangeText)
  }
  function setRangeText(replacement: String, start: Number, end: Number, selectionMode: SelectionMode): Any { aliasFor(__js_setRangeText) }
  function setRangeText(replacement: String, start: Number, end: Number): Any { aliasFor(__js_setRangeText) }
  function setSelectionRange(start: Union[Number, Null], end: Union[Number, Null], direction: Union[_SStringforward, _SStringbackward, _SStringnone]): Any {
    """
    Sets the start and end positions of a selection in a text field.
    @param start The offset into the text field for the start of the selection.
    @param end The offset into the text field for the end of the selection.
    @param direction The direction in which the selection is performed.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setSelectionRange)
    """
    aliasFor(__js_setSelectionRange)
  }
  function setSelectionRange(start: Union[Number, Null], end: Union[Number, Null]): Any { aliasFor(__js_setSelectionRange) }
  function showPicker(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/showPicker)
    """
    aliasFor(__js_showPicker)
  }
  function stepDown(n: Number): Any {
    """
    Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.
    @param n Value to decrement the value by.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/stepDown)
    """
    aliasFor(__js_stepDown)
  }
  function stepDown(): Any { aliasFor(__js_stepDown) }
  function stepUp(n: Number): Any {
    """
    Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.
    @param n Value to increment the value by.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/stepUp)
    """
    aliasFor(__js_stepUp)
  }
  function stepUp(): Any { aliasFor(__js_stepUp) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLLIElement extends HTMLElement {
  """
  Exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLIElement)
  """
  static {
    aliasFor(native "HTMLLIElement")
    var prototype: HTMLLIElement = aliasFor(__js_prototype)
    function new(): HTMLLIElement { aliasFor(__op_new__) }
  }
  var value: Number """
  Sets or retrieves the value of a list item.
  """ = aliasFor(__js_value)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLLabelElement extends HTMLElement {
  """
  Gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement)
  """
  static {
    aliasFor(native "HTMLLabelElement")
    var prototype: HTMLLabelElement = aliasFor(__js_prototype)
    function new(): HTMLLabelElement { aliasFor(__op_new__) }
  }
  const control: Union[HTMLElement, Null] """
  Returns the form control that is associated with this element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/control)
  """ = aliasFor(__js_control)
  const form: Union[HTMLFormElement, Null] """
  Retrieves a reference to the form that the object is embedded in.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/form)
  """ = aliasFor(__js_form)
  var htmlFor: String """
  Sets or retrieves the object to which the given label object is assigned.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/htmlFor)
  """ = aliasFor(__js_htmlFor)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLLegendElement extends HTMLElement {
  """
  The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLegendElement)
  """
  static {
    aliasFor(native "HTMLLegendElement")
    var prototype: HTMLLegendElement = aliasFor(__js_prototype)
    function new(): HTMLLegendElement { aliasFor(__op_new__) }
  }
  const form: Union[HTMLFormElement, Null] """
  Retrieves a reference to the form that the object is embedded in.
  """ = aliasFor(__js_form)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLLinkElement extends HTMLElement, LinkStyle {
  """
  Reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement)
  """
  static {
    aliasFor(native "HTMLLinkElement")
    var prototype: HTMLLinkElement = aliasFor(__js_prototype)
    function new(): HTMLLinkElement { aliasFor(__op_new__) }
  }
  var as: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/as)
  """ = aliasFor(__js_as)
  var crossOrigin: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/crossOrigin)
  """ = aliasFor(__js_crossOrigin)
  var disabled: Bool = aliasFor(__js_disabled)
  var fetchPriority: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/fetchPriority)
  """ = aliasFor(__js_fetchPriority)
  var href: String """
  Sets or retrieves a destination URL or an anchor point.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/href)
  """ = aliasFor(__js_href)
  var hreflang: String """
  Sets or retrieves the language code of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/hreflang)
  """ = aliasFor(__js_hreflang)
  var imageSizes: String = aliasFor(__js_imageSizes)
  var imageSrcset: String = aliasFor(__js_imageSrcset)
  var integrity: String = aliasFor(__js_integrity)
  var media: String """
  Sets or retrieves the media type.
  """ = aliasFor(__js_media)
  var referrerPolicy: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/referrerPolicy)
  """ = aliasFor(__js_referrerPolicy)
  var rel: String """
  Sets or retrieves the relationship between the object and the destination of the link.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/rel)
  """ = aliasFor(__js_rel)
  const relList: DOMTokenList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/relList)
  """ = aliasFor(__js_relList)
  const sizes: DOMTokenList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/sizes)
  """ = aliasFor(__js_sizes)
  var type: String """
  Sets or retrieves the MIME type of the object.
  """ = aliasFor(__js_type)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLMapElement extends HTMLElement {
  """
  Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement)
  """
  static {
    aliasFor(native "HTMLMapElement")
    var prototype: HTMLMapElement = aliasFor(__js_prototype)
    function new(): HTMLMapElement { aliasFor(__op_new__) }
  }
  const areas: HTMLCollection """
  Retrieves a collection of the area objects defined for the given map object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/areas)
  """ = aliasFor(__js_areas)
  var name: String """
  Sets or retrieves the name of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/name)
  """ = aliasFor(__js_name)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLMarqueeElement extends HTMLElement {
  """
  @deprecated
  """
  static {
    aliasFor(native "HTMLMarqueeElement")
    var prototype: HTMLMarqueeElement = aliasFor(__js_prototype)
    function new(): HTMLMarqueeElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLMediaElementEventMap extends HTMLElementEventMap {
}
export interface HTMLMediaElement extends HTMLElement {
  """
  Adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement)
  """
  static {
    aliasFor(native "HTMLMediaElement")
    var prototype: HTMLMediaElement = aliasFor(__js_prototype)
    function new(): HTMLMediaElement { aliasFor(__op_new__) }
    const NETWORK_EMPTY: Number = aliasFor(__js_NETWORK_EMPTY)
    const NETWORK_IDLE: Number = aliasFor(__js_NETWORK_IDLE)
    const NETWORK_LOADING: Number = aliasFor(__js_NETWORK_LOADING)
    const NETWORK_NO_SOURCE: Number = aliasFor(__js_NETWORK_NO_SOURCE)
    const HAVE_NOTHING: Number = aliasFor(__js_HAVE_NOTHING)
    const HAVE_METADATA: Number = aliasFor(__js_HAVE_METADATA)
    const HAVE_CURRENT_DATA: Number = aliasFor(__js_HAVE_CURRENT_DATA)
    const HAVE_FUTURE_DATA: Number = aliasFor(__js_HAVE_FUTURE_DATA)
    const HAVE_ENOUGH_DATA: Number = aliasFor(__js_HAVE_ENOUGH_DATA)
  }
  var autoplay: Bool """
  Gets or sets a value that indicates whether to start playing the media automatically.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/autoplay)
  """ = aliasFor(__js_autoplay)
  const buffered: TimeRanges """
  Gets a collection of buffered time ranges.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/buffered)
  """ = aliasFor(__js_buffered)
  var controls: Bool """
  Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/controls)
  """ = aliasFor(__js_controls)
  var crossOrigin: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/crossOrigin)
  """ = aliasFor(__js_crossOrigin)
  const currentSrc: String """
  Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentSrc)
  """ = aliasFor(__js_currentSrc)
  var currentTime: Number """
  Gets or sets the current playback position, in seconds.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentTime)
  """ = aliasFor(__js_currentTime)
  var defaultMuted: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultMuted)
  """ = aliasFor(__js_defaultMuted)
  var defaultPlaybackRate: Number """
  Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)
  """ = aliasFor(__js_defaultPlaybackRate)
  var disableRemotePlayback: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/disableRemotePlayback)
  """ = aliasFor(__js_disableRemotePlayback)
  const duration: Number """
  Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/duration)
  """ = aliasFor(__js_duration)
  const ended: Bool """
  Gets information about whether the playback has ended or not.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended)
  """ = aliasFor(__js_ended)
  const error: Union[MediaError, Null] """
  Returns an object representing the current error state of the audio or video element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/error)
  """ = aliasFor(__js_error)
  var loop: Bool """
  Gets or sets a flag to specify whether playback should restart after it completes.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loop)
  """ = aliasFor(__js_loop)
  const mediaKeys: Union[MediaKeys, Null] """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/mediaKeys)
  """ = aliasFor(__js_mediaKeys)
  var muted: Bool """
  Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/muted)
  """ = aliasFor(__js_muted)
  const networkState: Number """
  Gets the current network activity for the element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/networkState)
  """ = aliasFor(__js_networkState)
  var onencrypted: Union[function(ev: MediaEncryptedEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/encrypted_event)
  """ = aliasFor(__js_onencrypted)
  var onwaitingforkey: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waitingforkey_event)
  """ = aliasFor(__js_onwaitingforkey)
  const paused: Bool """
  Gets a flag that specifies whether playback is paused.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/paused)
  """ = aliasFor(__js_paused)
  var playbackRate: Number """
  Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playbackRate)
  """ = aliasFor(__js_playbackRate)
  const played: TimeRanges """
  Gets TimeRanges for the current media resource that has been played.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/played)
  """ = aliasFor(__js_played)
  var preload: Union[_SStringnone, _SStringmetadata, _SStringauto, _XString92] """
  Gets or sets a value indicating what data should be preloaded, if any.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preload)
  """ = aliasFor(__js_preload)
  var preservesPitch: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preservesPitch)
  """ = aliasFor(__js_preservesPitch)
  const readyState: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/readyState)
  """ = aliasFor(__js_readyState)
  const remote: RemotePlayback """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/remote)
  """ = aliasFor(__js_remote)
  const seekable: TimeRanges """
  Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seekable)
  """ = aliasFor(__js_seekable)
  const seeking: Bool """
  Gets a flag that indicates whether the client is currently moving to a new playback position in the media resource.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking)
  """ = aliasFor(__js_seeking)
  const sinkId: String """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/sinkId)
  """ = aliasFor(__js_sinkId)
  var src: String """
  The address or URL of the a media resource that is to be considered.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/src)
  """ = aliasFor(__js_src)
  var srcObject: Union[MediaProvider, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/srcObject)
  """ = aliasFor(__js_srcObject)
  const textTracks: TextTrackList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/textTracks)
  """ = aliasFor(__js_textTracks)
  var volume: Number """
  Gets or sets the volume level for audio portions of the media element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volume)
  """ = aliasFor(__js_volume)
  function addTextTrack(kind: TextTrackKind, label: String, language: String): TextTrack {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/addTextTrack)
    """
    aliasFor(__js_addTextTrack)
  }
  function addTextTrack(kind: TextTrackKind, label: String): TextTrack { aliasFor(__js_addTextTrack) }
  function addTextTrack(kind: TextTrackKind): TextTrack { aliasFor(__js_addTextTrack) }
  function canPlayType(type: String): CanPlayTypeResult {
    """
    Returns a string that specifies whether the client can play a given media resource type.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canPlayType)
    """
    aliasFor(__js_canPlayType)
  }
  function fastSeek(time: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/fastSeek)
    """
    aliasFor(__js_fastSeek)
  }
  function load(): Any {
    """
    Resets the audio or video object and loads a new media resource.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/load)
    """
    aliasFor(__js_load)
  }
  function pause(): Any {
    """
    Pauses the current playback and sets paused to TRUE.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause)
    """
    aliasFor(__js_pause)
  }
  function play(): Promise[Any] {
    """
    Loads and starts playback of a media resource.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play)
    """
    aliasFor(__js_play)
  }
  function setMediaKeys(mediaKeys: Union[MediaKeys, Null]): Promise[Any] {
    """
    Available only in secure contexts.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/setMediaKeys)
    """
    aliasFor(__js_setMediaKeys)
  }
  function setSinkId(sinkId: String): Promise[Any] {
    """
    Available only in secure contexts.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/setSinkId)
    """
    aliasFor(__js_setSinkId)
  }
  const NETWORK_EMPTY: Number = aliasFor(__js_NETWORK_EMPTY)
  const NETWORK_IDLE: Number = aliasFor(__js_NETWORK_IDLE)
  const NETWORK_LOADING: Number = aliasFor(__js_NETWORK_LOADING)
  const NETWORK_NO_SOURCE: Number = aliasFor(__js_NETWORK_NO_SOURCE)
  const HAVE_NOTHING: Number = aliasFor(__js_HAVE_NOTHING)
  const HAVE_METADATA: Number = aliasFor(__js_HAVE_METADATA)
  const HAVE_CURRENT_DATA: Number = aliasFor(__js_HAVE_CURRENT_DATA)
  const HAVE_FUTURE_DATA: Number = aliasFor(__js_HAVE_FUTURE_DATA)
  const HAVE_ENOUGH_DATA: Number = aliasFor(__js_HAVE_ENOUGH_DATA)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLMenuElement extends HTMLElement {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMenuElement)
  """
  static {
    aliasFor(native "HTMLMenuElement")
    var prototype: HTMLMenuElement = aliasFor(__js_prototype)
    function new(): HTMLMenuElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLMetaElement extends HTMLElement {
  """
  Contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement)
  """
  static {
    aliasFor(native "HTMLMetaElement")
    var prototype: HTMLMetaElement = aliasFor(__js_prototype)
    function new(): HTMLMetaElement { aliasFor(__op_new__) }
  }
  var content: String """
  Gets or sets meta-information to associate with httpEquiv or name.
  """ = aliasFor(__js_content)
  var httpEquiv: String """
  Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.
  """ = aliasFor(__js_httpEquiv)
  var media: String = aliasFor(__js_media)
  var name: String """
  Sets or retrieves the value specified in the content attribute of the meta object.
  """ = aliasFor(__js_name)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLMeterElement extends HTMLElement {
  """
  The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement)
  """
  static {
    aliasFor(native "HTMLMeterElement")
    var prototype: HTMLMeterElement = aliasFor(__js_prototype)
    function new(): HTMLMeterElement { aliasFor(__op_new__) }
  }
  var high: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/high)
  """ = aliasFor(__js_high)
  const labels: NodeList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/labels)
  """ = aliasFor(__js_labels)
  var low: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/low)
  """ = aliasFor(__js_low)
  var max: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/max)
  """ = aliasFor(__js_max)
  var min: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/min)
  """ = aliasFor(__js_min)
  var optimum: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/optimum)
  """ = aliasFor(__js_optimum)
  var value: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/value)
  """ = aliasFor(__js_value)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLModElement extends HTMLElement {
  """
  Provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement)
  """
  static {
    aliasFor(native "HTMLModElement")
    var prototype: HTMLModElement = aliasFor(__js_prototype)
    function new(): HTMLModElement { aliasFor(__op_new__) }
  }
  var cite: String """
  Sets or retrieves reference information about the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/cite)
  """ = aliasFor(__js_cite)
  var dateTime: String """
  Sets or retrieves the date and time of a modification to the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/dateTime)
  """ = aliasFor(__js_dateTime)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLOListElement extends HTMLElement {
  """
  Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement)
  """
  static {
    aliasFor(native "HTMLOListElement")
    var prototype: HTMLOListElement = aliasFor(__js_prototype)
    function new(): HTMLOListElement { aliasFor(__op_new__) }
  }
  var reversed: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/reversed)
  """ = aliasFor(__js_reversed)
  var start: Number """
  The starting number.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/start)
  """ = aliasFor(__js_start)
  var type: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/type)
  """ = aliasFor(__js_type)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLObjectElement extends HTMLElement {
  """
  Provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement)
  """
  static {
    aliasFor(native "HTMLObjectElement")
    var prototype: HTMLObjectElement = aliasFor(__js_prototype)
    function new(): HTMLObjectElement { aliasFor(__op_new__) }
  }
  const contentDocument: Union[Document, Null] """
  Retrieves the document object of the page or frame.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentDocument)
  """ = aliasFor(__js_contentDocument)
  const contentWindow: Union[WindowProxy, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentWindow)
  """ = aliasFor(__js_contentWindow)
  var data: String """
  Sets or retrieves the URL that references the data of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/data)
  """ = aliasFor(__js_data)
  const form: Union[HTMLFormElement, Null] """
  Retrieves a reference to the form that the object is embedded in.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/form)
  """ = aliasFor(__js_form)
  var height: String """
  Sets or retrieves the height of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/height)
  """ = aliasFor(__js_height)
  var name: String """
  Sets or retrieves the name of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/name)
  """ = aliasFor(__js_name)
  var type: String """
  Sets or retrieves the MIME type of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/type)
  """ = aliasFor(__js_type)
  var useMap: String """
  Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/useMap)
  """ = aliasFor(__js_useMap)
  const validationMessage: String """
  Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validationMessage)
  """ = aliasFor(__js_validationMessage)
  const validity: ValidityState """
  Returns a  ValidityState object that represents the validity states of an element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validity)
  """ = aliasFor(__js_validity)
  var width: String """
  Sets or retrieves the width of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/width)
  """ = aliasFor(__js_width)
  const willValidate: Bool """
  Returns whether an element will successfully validate based on forms validation rules and constraints.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/willValidate)
  """ = aliasFor(__js_willValidate)
  function checkValidity(): Bool {
    """
    Returns whether a form will validate when it is submitted, without having to submit it.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/checkValidity)
    """
    aliasFor(__js_checkValidity)
  }
  function getSVGDocument(): Union[Document, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/getSVGDocument)
    """
    aliasFor(__js_getSVGDocument)
  }
  function reportValidity(): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/reportValidity)
    """
    aliasFor(__js_reportValidity)
  }
  function setCustomValidity(error: String): Any {
    """
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/setCustomValidity)
    """
    aliasFor(__js_setCustomValidity)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLOptGroupElement extends HTMLElement {
  """
  Provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement)
  """
  static {
    aliasFor(native "HTMLOptGroupElement")
    var prototype: HTMLOptGroupElement = aliasFor(__js_prototype)
    function new(): HTMLOptGroupElement { aliasFor(__op_new__) }
  }
  var disabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/disabled)
  """ = aliasFor(__js_disabled)
  var label: String """
  Sets or retrieves a value that you can use to implement your own label functionality for the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/label)
  """ = aliasFor(__js_label)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLOptionElement extends HTMLElement {
  """
  <option> elements and inherits all classes and methods of the HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement)
  """
  static {
    aliasFor(native "HTMLOptionElement")
    var prototype: HTMLOptionElement = aliasFor(__js_prototype)
    function new(): HTMLOptionElement { aliasFor(__op_new__) }
  }
  var defaultSelected: Bool """
  Sets or retrieves the status of an option.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/defaultSelected)
  """ = aliasFor(__js_defaultSelected)
  var disabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/disabled)
  """ = aliasFor(__js_disabled)
  const form: Union[HTMLFormElement, Null] """
  Retrieves a reference to the form that the object is embedded in.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/form)
  """ = aliasFor(__js_form)
  const index: Number """
  Sets or retrieves the ordinal position of an option in a list box.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/index)
  """ = aliasFor(__js_index)
  var label: String """
  Sets or retrieves a value that you can use to implement your own label functionality for the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/label)
  """ = aliasFor(__js_label)
  var selected: Bool """
  Sets or retrieves whether the option in the list box is the default item.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/selected)
  """ = aliasFor(__js_selected)
  var text: String """
  Sets or retrieves the text string specified by the option tag.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/text)
  """ = aliasFor(__js_text)
  var value: String """
  Sets or retrieves the value which is returned to the server when the form control is submitted.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/value)
  """ = aliasFor(__js_value)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLOptionsCollection extends HTMLCollection {
  """
  HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of select.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection)
  """
  static {
    aliasFor(native "HTMLOptionsCollection")
    var prototype: HTMLOptionsCollection = aliasFor(__js_prototype)
    function new(): HTMLOptionsCollection { aliasFor(__op_new__) }
  }
  var length: Number """
  Returns the number of elements in the collection.
     *
  When set to a smaller number, truncates the number of option elements in the corresponding container.
     *
  When set to a greater number, adds new blank option elements to that container.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/length)
  """ = aliasFor(__js_length)
  var selectedIndex: Number """
  Returns the index of the first selected item, if any, or −1 if there is no selected item.
     *
  Can be set, to change the selection.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/selectedIndex)
  """ = aliasFor(__js_selectedIndex)
  function add(element: Union[HTMLOptionElement, HTMLOptGroupElement], before: Union[HTMLElement, Number, Null]): Any {
    """
    Inserts element before the node given by before.
       *
    The before argument can be a number, in which case element is inserted before the item with that number, or an element from the collection, in which case element is inserted before that element.
       *
    If before is omitted, null, or a number out of range, then element will be added at the end of the list.
       *
    This method will throw a "HierarchyRequestError" DOMException if element is an ancestor of the element into which it is to be inserted.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/add)
    """
    aliasFor(__js_add)
  }
  function add(element: Union[HTMLOptionElement, HTMLOptGroupElement]): Any { aliasFor(__js_add) }
  function remove(index: Number): Any {
    """
    Removes the item with index index from the collection.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/remove)
    """
    aliasFor(__js_remove)
  }
}
export interface HTMLOrSVGElement {
  var autofocus: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autofocus)
  """ = aliasFor(__js_autofocus)
  const dataset: DOMStringMap """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dataset)
  """ = aliasFor(__js_dataset)
  var nonce: Nullable[String] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/nonce)
  """ = aliasFor(__js_nonce)
  var tabIndex: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/tabIndex)
  """ = aliasFor(__js_tabIndex)
  function blur(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/blur)
    """
    aliasFor(__js_blur)
  }
  function focus(options: FocusOptions): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/focus)
    """
    aliasFor(__js_focus)
  }
  function focus(): Any { aliasFor(__js_focus) }
}
export interface HTMLOutputElement extends HTMLElement {
  """
  Provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement)
  """
  static {
    aliasFor(native "HTMLOutputElement")
    var prototype: HTMLOutputElement = aliasFor(__js_prototype)
    function new(): HTMLOutputElement { aliasFor(__op_new__) }
  }
  var defaultValue: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/defaultValue)
  """ = aliasFor(__js_defaultValue)
  const form: Union[HTMLFormElement, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/form)
  """ = aliasFor(__js_form)
  const htmlFor: DOMTokenList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/htmlFor)
  """ = aliasFor(__js_htmlFor)
  const labels: NodeList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/labels)
  """ = aliasFor(__js_labels)
  var name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/name)
  """ = aliasFor(__js_name)
  const type: String """
  Returns the string "output".
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/type)
  """ = aliasFor(__js_type)
  const validationMessage: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validationMessage)
  """ = aliasFor(__js_validationMessage)
  const validity: ValidityState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validity)
  """ = aliasFor(__js_validity)
  var value: String """
  Returns the element's current value.
     *
  Can be set, to change the value.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/value)
  """ = aliasFor(__js_value)
  const willValidate: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/willValidate)
  """ = aliasFor(__js_willValidate)
  function checkValidity(): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/checkValidity)
    """
    aliasFor(__js_checkValidity)
  }
  function reportValidity(): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/reportValidity)
    """
    aliasFor(__js_reportValidity)
  }
  function setCustomValidity(error: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/setCustomValidity)
    """
    aliasFor(__js_setCustomValidity)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLParagraphElement extends HTMLElement {
  """
  Provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLParagraphElement)
  """
  static {
    aliasFor(native "HTMLParagraphElement")
    var prototype: HTMLParagraphElement = aliasFor(__js_prototype)
    function new(): HTMLParagraphElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLParamElement extends HTMLElement {
  """
  @deprecated
  """
  static {
    aliasFor(native "HTMLParamElement")
    var prototype: HTMLParamElement = aliasFor(__js_prototype)
    function new(): HTMLParamElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLPictureElement extends HTMLElement {
  """
  A <picture> HTML element. It doesn't implement specific properties or methods.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLPictureElement)
  """
  static {
    aliasFor(native "HTMLPictureElement")
    var prototype: HTMLPictureElement = aliasFor(__js_prototype)
    function new(): HTMLPictureElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLPreElement extends HTMLElement {
  """
  Exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (<pre>).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLPreElement)
  """
  static {
    aliasFor(native "HTMLPreElement")
    var prototype: HTMLPreElement = aliasFor(__js_prototype)
    function new(): HTMLPreElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLProgressElement extends HTMLElement {
  """
  Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement)
  """
  static {
    aliasFor(native "HTMLProgressElement")
    var prototype: HTMLProgressElement = aliasFor(__js_prototype)
    function new(): HTMLProgressElement { aliasFor(__op_new__) }
  }
  const labels: NodeList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/labels)
  """ = aliasFor(__js_labels)
  var max: Number """
  Defines the maximum, or "done" value for a progress element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/max)
  """ = aliasFor(__js_max)
  const position: Number """
  Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/position)
  """ = aliasFor(__js_position)
  var value: Number """
  Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/value)
  """ = aliasFor(__js_value)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLQuoteElement extends HTMLElement {
  """
  Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement)
  """
  static {
    aliasFor(native "HTMLQuoteElement")
    var prototype: HTMLQuoteElement = aliasFor(__js_prototype)
    function new(): HTMLQuoteElement { aliasFor(__op_new__) }
  }
  var cite: String """
  Sets or retrieves reference information about the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement/cite)
  """ = aliasFor(__js_cite)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLScriptElement extends HTMLElement {
  """
  HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement)
  """
  static {
    aliasFor(native "HTMLScriptElement")
    var prototype: HTMLScriptElement = aliasFor(__js_prototype)
    function new(): HTMLScriptElement { aliasFor(__op_new__) }
    function supports(type: String): Bool {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/supports_static)
      """
      aliasFor(__js_supports)
    }
  }
  var async: Bool = aliasFor(__js_async)
  var crossOrigin: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/crossOrigin)
  """ = aliasFor(__js_crossOrigin)
  var defer: Bool """
  Sets or retrieves the status of the script.
  """ = aliasFor(__js_defer)
  var fetchPriority: String = aliasFor(__js_fetchPriority)
  var integrity: String = aliasFor(__js_integrity)
  var noModule: Bool = aliasFor(__js_noModule)
  var referrerPolicy: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/referrerPolicy)
  """ = aliasFor(__js_referrerPolicy)
  var src: String """
  Retrieves the URL to an external file that contains the source code or data.
  """ = aliasFor(__js_src)
  var text: String """
  Retrieves or sets the text of the object as a string.
  """ = aliasFor(__js_text)
  var type: String """
  Sets or retrieves the MIME type for the associated scripting engine.
  """ = aliasFor(__js_type)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLSelectElement extends HTMLElement {
  """
  A <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement)
  """
  static {
    aliasFor(native "HTMLSelectElement")
    var prototype: HTMLSelectElement = aliasFor(__js_prototype)
    function new(): HTMLSelectElement { aliasFor(__op_new__) }
  }
  var autocomplete: AutoFill """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/autocomplete)
  """ = aliasFor(__js_autocomplete)
  var disabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/disabled)
  """ = aliasFor(__js_disabled)
  const form: Union[HTMLFormElement, Null] """
  Retrieves a reference to the form that the object is embedded in.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/form)
  """ = aliasFor(__js_form)
  const labels: NodeList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/labels)
  """ = aliasFor(__js_labels)
  var length: Number """
  Sets or retrieves the number of objects in a collection.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/length)
  """ = aliasFor(__js_length)
  var multiple: Bool """
  Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/multiple)
  """ = aliasFor(__js_multiple)
  var name: String """
  Sets or retrieves the name of the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/name)
  """ = aliasFor(__js_name)
  const options: HTMLOptionsCollection """
  Returns an HTMLOptionsCollection of the list of options.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/options)
  """ = aliasFor(__js_options)
  var required: Bool """
  When present, marks an element that can't be submitted without a value.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/required)
  """ = aliasFor(__js_required)
  var selectedIndex: Number """
  Sets or retrieves the index of the selected option in a select object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedIndex)
  """ = aliasFor(__js_selectedIndex)
  const selectedOptions: HTMLCollection """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedOptions)
  """ = aliasFor(__js_selectedOptions)
  var size: Number """
  Sets or retrieves the number of rows in the list box.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/size)
  """ = aliasFor(__js_size)
  const type: String """
  Retrieves the type of select control based on the value of the MULTIPLE attribute.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/type)
  """ = aliasFor(__js_type)
  const validationMessage: String """
  Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validationMessage)
  """ = aliasFor(__js_validationMessage)
  const validity: ValidityState """
  Returns a  ValidityState object that represents the validity states of an element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validity)
  """ = aliasFor(__js_validity)
  var value: String """
  Sets or retrieves the value which is returned to the server when the form control is submitted.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/value)
  """ = aliasFor(__js_value)
  const willValidate: Bool """
  Returns whether an element will successfully validate based on forms validation rules and constraints.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/willValidate)
  """ = aliasFor(__js_willValidate)
  function add(element: Union[HTMLOptionElement, HTMLOptGroupElement], before: Union[HTMLElement, Number, Null]): Any {
    """
    Adds an element to the areas, controlRange, or options collection.
    @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.
    @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/add)
    """
    aliasFor(__js_add)
  }
  function add(element: Union[HTMLOptionElement, HTMLOptGroupElement]): Any { aliasFor(__js_add) }
  function checkValidity(): Bool {
    """
    Returns whether a form will validate when it is submitted, without having to submit it.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/checkValidity)
    """
    aliasFor(__js_checkValidity)
  }
  function item(index: Number): Union[HTMLOptionElement, Null] {
    """
    Retrieves a select object or an object from an options collection.
    @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.
    @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/item)
    """
    aliasFor(__js_item)
  }
  function namedItem(name: String): Union[HTMLOptionElement, Null] {
    """
    Retrieves a select object or an object from an options collection.
    @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/namedItem)
    """
    aliasFor(__js_namedItem)
  }
  function remove(): Any {
    """
    Removes an element from the collection.
    @param index Number that specifies the zero-based index of the element to remove from the collection.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/remove)
    """
    aliasFor(__js_remove)
  }
  function remove(index: Number): Any { aliasFor(__js_remove) }
  function reportValidity(): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/reportValidity)
    """
    aliasFor(__js_reportValidity)
  }
  function setCustomValidity(error: String): Any {
    """
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/setCustomValidity)
    """
    aliasFor(__js_setCustomValidity)
  }
  function showPicker(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/showPicker)
    """
    aliasFor(__js_showPicker)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
  function __getitem__(name: Number): Union[HTMLOptionElement, HTMLOptGroupElement] { aliasFor(__op_getitem__) }
  function __setitem__(name: Number, value: Union[HTMLOptionElement, HTMLOptGroupElement]): Union[HTMLOptionElement, HTMLOptGroupElement] { aliasFor(__op_setitem__) }
}
export interface HTMLSlotElement extends HTMLElement {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement)
  """
  static {
    aliasFor(native "HTMLSlotElement")
    var prototype: HTMLSlotElement = aliasFor(__js_prototype)
    function new(): HTMLSlotElement { aliasFor(__op_new__) }
  }
  var name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/name)
  """ = aliasFor(__js_name)
  function assign(nodes: Union[Element, Text], nodes: Union[Element, Text], nodes: Union[Element, Text]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assign)
    """
    aliasFor(__js_assign)
  }
  function assign(nodes: Union[Element, Text], nodes: Union[Element, Text]): Any { aliasFor(__js_assign) }
  function assign(nodes: Union[Element, Text]): Any { aliasFor(__js_assign) }
  function assign(): Any { aliasFor(__js_assign) }
  function assignedElements(options: AssignedNodesOptions): List[Element] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assignedElements)
    """
    aliasFor(__js_assignedElements)
  }
  function assignedElements(): List[Element] { aliasFor(__js_assignedElements) }
  function assignedNodes(options: AssignedNodesOptions): List[Node] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assignedNodes)
    """
    aliasFor(__js_assignedNodes)
  }
  function assignedNodes(): List[Node] { aliasFor(__js_assignedNodes) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLSourceElement extends HTMLElement {
  """
  Provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement)
  """
  static {
    aliasFor(native "HTMLSourceElement")
    var prototype: HTMLSourceElement = aliasFor(__js_prototype)
    function new(): HTMLSourceElement { aliasFor(__op_new__) }
  }
  var height: Number = aliasFor(__js_height)
  var media: String """
  Gets or sets the intended media type of the media source.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/media)
  """ = aliasFor(__js_media)
  var sizes: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/sizes)
  """ = aliasFor(__js_sizes)
  var src: String """
  The address or URL of the a media resource that is to be considered.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/src)
  """ = aliasFor(__js_src)
  var srcset: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/srcset)
  """ = aliasFor(__js_srcset)
  var type: String """
  Gets or sets the MIME type of a media resource.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/type)
  """ = aliasFor(__js_type)
  var width: Number = aliasFor(__js_width)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLSpanElement extends HTMLElement {
  """
  A <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)
  """
  static {
    aliasFor(native "HTMLSpanElement")
    var prototype: HTMLSpanElement = aliasFor(__js_prototype)
    function new(): HTMLSpanElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLStyleElement extends HTMLElement, LinkStyle {
  """
  A <style> element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement)
  """
  static {
    aliasFor(native "HTMLStyleElement")
    var prototype: HTMLStyleElement = aliasFor(__js_prototype)
    function new(): HTMLStyleElement { aliasFor(__op_new__) }
  }
  var disabled: Bool """
  Enables or disables the style sheet.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/disabled)
  """ = aliasFor(__js_disabled)
  var media: String """
  Sets or retrieves the media type.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/media)
  """ = aliasFor(__js_media)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTableCaptionElement extends HTMLElement {
  """
  Special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement)
  """
  static {
    aliasFor(native "HTMLTableCaptionElement")
    var prototype: HTMLTableCaptionElement = aliasFor(__js_prototype)
    function new(): HTMLTableCaptionElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTableCellElement extends HTMLElement {
  """
  Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement)
  """
  static {
    aliasFor(native "HTMLTableCellElement")
    var prototype: HTMLTableCellElement = aliasFor(__js_prototype)
    function new(): HTMLTableCellElement { aliasFor(__op_new__) }
  }
  var abbr: String """
  Sets or retrieves abbreviated text for the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/abbr)
  """ = aliasFor(__js_abbr)
  const cellIndex: Number """
  Retrieves the position of the object in the cells collection of a row.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/cellIndex)
  """ = aliasFor(__js_cellIndex)
  var colSpan: Number """
  Sets or retrieves the number columns in the table that the object should span.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/colSpan)
  """ = aliasFor(__js_colSpan)
  var headers: String """
  Sets or retrieves a list of header cells that provide information for the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/headers)
  """ = aliasFor(__js_headers)
  var rowSpan: Number """
  Sets or retrieves how many rows in a table the cell should span.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/rowSpan)
  """ = aliasFor(__js_rowSpan)
  var scope: String """
  Sets or retrieves the group of cells in a table to which the object's information applies.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/scope)
  """ = aliasFor(__js_scope)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTableColElement extends HTMLElement {
  """
  Provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement)
  """
  static {
    aliasFor(native "HTMLTableColElement")
    var prototype: HTMLTableColElement = aliasFor(__js_prototype)
    function new(): HTMLTableColElement { aliasFor(__op_new__) }
  }
  var span: Number """
  Sets or retrieves the number of columns in the group.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/span)
  """ = aliasFor(__js_span)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTableDataCellElement extends HTMLTableCellElement {
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTableElement extends HTMLElement {
  """
  Provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement)
  """
  static {
    aliasFor(native "HTMLTableElement")
    var prototype: HTMLTableElement = aliasFor(__js_prototype)
    function new(): HTMLTableElement { aliasFor(__op_new__) }
  }
  var caption: Union[HTMLTableCaptionElement, Null] """
  Retrieves the caption object of a table.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/caption)
  """ = aliasFor(__js_caption)
  const rows: HTMLCollection """
  Sets or retrieves the number of horizontal rows contained in the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rows)
  """ = aliasFor(__js_rows)
  const tBodies: HTMLCollection """
  Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tBodies)
  """ = aliasFor(__js_tBodies)
  var tFoot: Union[HTMLTableSectionElement, Null] """
  Retrieves the tFoot object of the table.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tFoot)
  """ = aliasFor(__js_tFoot)
  var tHead: Union[HTMLTableSectionElement, Null] """
  Retrieves the tHead object of the table.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tHead)
  """ = aliasFor(__js_tHead)
  function createCaption(): HTMLTableCaptionElement {
    """
    Creates an empty caption element in the table.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createCaption)
    """
    aliasFor(__js_createCaption)
  }
  function createTBody(): HTMLTableSectionElement {
    """
    Creates an empty tBody element in the table.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTBody)
    """
    aliasFor(__js_createTBody)
  }
  function createTFoot(): HTMLTableSectionElement {
    """
    Creates an empty tFoot element in the table.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTFoot)
    """
    aliasFor(__js_createTFoot)
  }
  function createTHead(): HTMLTableSectionElement {
    """
    Returns the tHead element object if successful, or null otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTHead)
    """
    aliasFor(__js_createTHead)
  }
  function deleteCaption(): Any {
    """
    Deletes the caption element and its contents from the table.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteCaption)
    """
    aliasFor(__js_deleteCaption)
  }
  function deleteRow(index: Number): Any {
    """
    Removes the specified row (tr) from the element and from the rows collection.
    @param index Number that specifies the zero-based position in the rows collection of the row to remove.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteRow)
    """
    aliasFor(__js_deleteRow)
  }
  function deleteTFoot(): Any {
    """
    Deletes the tFoot element and its contents from the table.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteTFoot)
    """
    aliasFor(__js_deleteTFoot)
  }
  function deleteTHead(): Any {
    """
    Deletes the tHead element and its contents from the table.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteTHead)
    """
    aliasFor(__js_deleteTHead)
  }
  function insertRow(index: Number): HTMLTableRowElement {
    """
    Creates a new row (tr) in the table, and adds the row to the rows collection.
    @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/insertRow)
    """
    aliasFor(__js_insertRow)
  }
  function insertRow(): HTMLTableRowElement { aliasFor(__js_insertRow) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTableHeaderCellElement extends HTMLTableCellElement {
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTableRowElement extends HTMLElement {
  """
  Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement)
  """
  static {
    aliasFor(native "HTMLTableRowElement")
    var prototype: HTMLTableRowElement = aliasFor(__js_prototype)
    function new(): HTMLTableRowElement { aliasFor(__op_new__) }
  }
  const cells: HTMLCollection """
  Retrieves a collection of all cells in the table row.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/cells)
  """ = aliasFor(__js_cells)
  const rowIndex: Number """
  Retrieves the position of the object in the rows collection for the table.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/rowIndex)
  """ = aliasFor(__js_rowIndex)
  const sectionRowIndex: Number """
  Retrieves the position of the object in the collection.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/sectionRowIndex)
  """ = aliasFor(__js_sectionRowIndex)
  function deleteCell(index: Number): Any {
    """
    Removes the specified cell from the table row, as well as from the cells collection.
    @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/deleteCell)
    """
    aliasFor(__js_deleteCell)
  }
  function insertCell(index: Number): HTMLTableCellElement {
    """
    Creates a new cell in the table row, and adds the cell to the cells collection.
    @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/insertCell)
    """
    aliasFor(__js_insertCell)
  }
  function insertCell(): HTMLTableCellElement { aliasFor(__js_insertCell) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTableSectionElement extends HTMLElement {
  """
  Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement)
  """
  static {
    aliasFor(native "HTMLTableSectionElement")
    var prototype: HTMLTableSectionElement = aliasFor(__js_prototype)
    function new(): HTMLTableSectionElement { aliasFor(__op_new__) }
  }
  const rows: HTMLCollection """
  Sets or retrieves the number of horizontal rows contained in the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/rows)
  """ = aliasFor(__js_rows)
  function deleteRow(index: Number): Any {
    """
    Removes the specified row (tr) from the element and from the rows collection.
    @param index Number that specifies the zero-based position in the rows collection of the row to remove.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/deleteRow)
    """
    aliasFor(__js_deleteRow)
  }
  function insertRow(index: Number): HTMLTableRowElement {
    """
    Creates a new row (tr) in the table, and adds the row to the rows collection.
    @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/insertRow)
    """
    aliasFor(__js_insertRow)
  }
  function insertRow(): HTMLTableRowElement { aliasFor(__js_insertRow) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTemplateElement extends HTMLElement {
  """
  Enables access to the contents of an HTML <template> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement)
  """
  static {
    aliasFor(native "HTMLTemplateElement")
    var prototype: HTMLTemplateElement = aliasFor(__js_prototype)
    function new(): HTMLTemplateElement { aliasFor(__op_new__) }
  }
  const content: DocumentFragment """
  Returns the template contents (a DocumentFragment).
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/content)
  """ = aliasFor(__js_content)
  var shadowRootMode: String = aliasFor(__js_shadowRootMode)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTextAreaElement extends HTMLElement {
  """
  Provides special properties and methods for manipulating the layout and presentation of <textarea> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement)
  """
  static {
    aliasFor(native "HTMLTextAreaElement")
    var prototype: HTMLTextAreaElement = aliasFor(__js_prototype)
    function new(): HTMLTextAreaElement { aliasFor(__op_new__) }
  }
  var autocomplete: AutoFill """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/autocomplete)
  """ = aliasFor(__js_autocomplete)
  var cols: Number """
  Sets or retrieves the width of the object.
  """ = aliasFor(__js_cols)
  var defaultValue: String """
  Sets or retrieves the initial contents of the object.
  """ = aliasFor(__js_defaultValue)
  var dirName: String = aliasFor(__js_dirName)
  var disabled: Bool = aliasFor(__js_disabled)
  const form: Union[HTMLFormElement, Null] """
  Retrieves a reference to the form that the object is embedded in.
  """ = aliasFor(__js_form)
  const labels: NodeList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/labels)
  """ = aliasFor(__js_labels)
  var maxLength: Number """
  Sets or retrieves the maximum number of characters that the user can enter in a text control.
  """ = aliasFor(__js_maxLength)
  var minLength: Number = aliasFor(__js_minLength)
  var name: String """
  Sets or retrieves the name of the object.
  """ = aliasFor(__js_name)
  var placeholder: String """
  Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
  """ = aliasFor(__js_placeholder)
  var readOnly: Bool """
  Sets or retrieves the value indicated whether the content of the object is read-only.
  """ = aliasFor(__js_readOnly)
  var required: Bool """
  When present, marks an element that can't be submitted without a value.
  """ = aliasFor(__js_required)
  var rows: Number """
  Sets or retrieves the number of horizontal rows contained in the object.
  """ = aliasFor(__js_rows)
  var selectionDirection: Union[_SStringforward, _SStringbackward, _SStringnone] = aliasFor(__js_selectionDirection)
  var selectionEnd: Number """
  Gets or sets the end position or offset of a text selection.
  """ = aliasFor(__js_selectionEnd)
  var selectionStart: Number """
  Gets or sets the starting position or offset of a text selection.
  """ = aliasFor(__js_selectionStart)
  const textLength: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/textLength)
  """ = aliasFor(__js_textLength)
  const type: String """
  Retrieves the type of control.
  """ = aliasFor(__js_type)
  const validationMessage: String """
  Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
  """ = aliasFor(__js_validationMessage)
  const validity: ValidityState """
  Returns a  ValidityState object that represents the validity states of an element.
  """ = aliasFor(__js_validity)
  var value: String """
  Retrieves or sets the text in the entry field of the textArea element.
  """ = aliasFor(__js_value)
  const willValidate: Bool """
  Returns whether an element will successfully validate based on forms validation rules and constraints.
  """ = aliasFor(__js_willValidate)
  var wrap: String """
  Sets or retrieves how to handle wordwrapping in the object.
  """ = aliasFor(__js_wrap)
  function checkValidity(): Bool {
    """
    Returns whether a form will validate when it is submitted, without having to submit it.
    """
    aliasFor(__js_checkValidity)
  }
  function reportValidity(): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/reportValidity)
    """
    aliasFor(__js_reportValidity)
  }
  function select(): Any {
    """
    Highlights the input area of a form element.
    """
    aliasFor(__js_select)
  }
  function setCustomValidity(error: String): Any {
    """
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
    """
    aliasFor(__js_setCustomValidity)
  }
  function setRangeText(replacement: String): Any { aliasFor(__js_setRangeText) }
  function setRangeText(replacement: String, start: Number, end: Number, selectionMode: SelectionMode): Any { aliasFor(__js_setRangeText) }
  function setRangeText(replacement: String, start: Number, end: Number): Any { aliasFor(__js_setRangeText) }
  function setSelectionRange(start: Union[Number, Null], end: Union[Number, Null], direction: Union[_SStringforward, _SStringbackward, _SStringnone]): Any {
    """
    Sets the start and end positions of a selection in a text field.
    @param start The offset into the text field for the start of the selection.
    @param end The offset into the text field for the end of the selection.
    @param direction The direction in which the selection is performed.
    """
    aliasFor(__js_setSelectionRange)
  }
  function setSelectionRange(start: Union[Number, Null], end: Union[Number, Null]): Any { aliasFor(__js_setSelectionRange) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTimeElement extends HTMLElement {
  """
  Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement)
  """
  static {
    aliasFor(native "HTMLTimeElement")
    var prototype: HTMLTimeElement = aliasFor(__js_prototype)
    function new(): HTMLTimeElement { aliasFor(__op_new__) }
  }
  var dateTime: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement/dateTime)
  """ = aliasFor(__js_dateTime)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTitleElement extends HTMLElement {
  """
  Contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement)
  """
  static {
    aliasFor(native "HTMLTitleElement")
    var prototype: HTMLTitleElement = aliasFor(__js_prototype)
    function new(): HTMLTitleElement { aliasFor(__op_new__) }
  }
  var text: String """
  Retrieves or sets the text of the object as a string.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement/text)
  """ = aliasFor(__js_text)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLTrackElement extends HTMLElement {
  """
  The HTMLTrackElement
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement)
  """
  static {
    aliasFor(native "HTMLTrackElement")
    var prototype: HTMLTrackElement = aliasFor(__js_prototype)
    function new(): HTMLTrackElement { aliasFor(__op_new__) }
    const NONE: Number = aliasFor(__js_NONE)
    const LOADING: Number = aliasFor(__js_LOADING)
    const LOADED: Number = aliasFor(__js_LOADED)
    const ERROR: Number = aliasFor(__js_ERROR)
  }
  var default: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/default)
  """ = aliasFor(__js_default)
  var kind: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/kind)
  """ = aliasFor(__js_kind)
  var label: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/label)
  """ = aliasFor(__js_label)
  const readyState: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/readyState)
  """ = aliasFor(__js_readyState)
  var src: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/src)
  """ = aliasFor(__js_src)
  var srclang: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/srclang)
  """ = aliasFor(__js_srclang)
  const track: TextTrack """
  Returns the TextTrack object corresponding to the text track of the track element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/track)
  """ = aliasFor(__js_track)
  const NONE: Number = aliasFor(__js_NONE)
  const LOADING: Number = aliasFor(__js_LOADING)
  const LOADED: Number = aliasFor(__js_LOADED)
  const ERROR: Number = aliasFor(__js_ERROR)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLUListElement extends HTMLElement {
  """
  Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLUListElement)
  """
  static {
    aliasFor(native "HTMLUListElement")
    var prototype: HTMLUListElement = aliasFor(__js_prototype)
    function new(): HTMLUListElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLUnknownElement extends HTMLElement {
  """
  An invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLUnknownElement)
  """
  static {
    aliasFor(native "HTMLUnknownElement")
    var prototype: HTMLUnknownElement = aliasFor(__js_prototype)
    function new(): HTMLUnknownElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HTMLVideoElementEventMap extends HTMLMediaElementEventMap {
}
export interface HTMLVideoElement extends HTMLMediaElement {
  """
  Provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement)
  """
  static {
    aliasFor(native "HTMLVideoElement")
    var prototype: HTMLVideoElement = aliasFor(__js_prototype)
    function new(): HTMLVideoElement { aliasFor(__op_new__) }
  }
  var disablePictureInPicture: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/disablePictureInPicture)
  """ = aliasFor(__js_disablePictureInPicture)
  var height: Number """
  Gets or sets the height of the video element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/height)
  """ = aliasFor(__js_height)
  var onenterpictureinpicture: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/enterpictureinpicture_event)
  """ = aliasFor(__js_onenterpictureinpicture)
  var onleavepictureinpicture: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/leavepictureinpicture_event)
  """ = aliasFor(__js_onleavepictureinpicture)
  var playsInline: Bool """
  Gets or sets the playsinline of the video element. for example, On iPhone, video elements will now be allowed to play inline, and will not automatically enter fullscreen mode when playback begins.
  """ = aliasFor(__js_playsInline)
  var poster: String """
  Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/poster)
  """ = aliasFor(__js_poster)
  const videoHeight: Number """
  Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoHeight)
  """ = aliasFor(__js_videoHeight)
  const videoWidth: Number """
  Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoWidth)
  """ = aliasFor(__js_videoWidth)
  var width: Number """
  Gets or sets the width of the video element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/width)
  """ = aliasFor(__js_width)
  function cancelVideoFrameCallback(handle: Number): Any { aliasFor(__js_cancelVideoFrameCallback) }
  function getVideoPlaybackQuality(): VideoPlaybackQuality {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality)
    """
    aliasFor(__js_getVideoPlaybackQuality)
  }
  function requestPictureInPicture(): Promise[PictureInPictureWindow] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/requestPictureInPicture)
    """
    aliasFor(__js_requestPictureInPicture)
  }
  function requestVideoFrameCallback(callback: VideoFrameRequestCallback): Number { aliasFor(__js_requestVideoFrameCallback) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface HashChangeEvent extends Event {
  """
  Events that fire when the fragment identifier of the URL has changed.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent)
  """
  static {
    aliasFor(native "HashChangeEvent")
    var prototype: HashChangeEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: HashChangeEventInit): HashChangeEvent { aliasFor(__op_new__) }
    function new(type: String): HashChangeEvent { aliasFor(__op_new__) }
  }
  const newURL: String """
  Returns the URL of the session history entry that is now current.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/newURL)
  """ = aliasFor(__js_newURL)
  const oldURL: String """
  Returns the URL of the session history entry that was previously current.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/oldURL)
  """ = aliasFor(__js_oldURL)
}
export interface Headers {
  """
  This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers)
  """
  static {
    aliasFor(native "Headers")
    var prototype: Headers = aliasFor(__js_prototype)
    function new(init: HeadersInit): Headers { aliasFor(__op_new__) }
    function new(): Headers { aliasFor(__op_new__) }
  }
  function append(name: String, value: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/append)
    """
    aliasFor(__js_append)
  }
  function delete(name: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/delete)
    """
    aliasFor(__js_delete)
  }
  function get(name: String): Union[String, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/get)
    """
    aliasFor(__js_get)
  }
  function getSetCookie(): List[String] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/getSetCookie)
    """
    aliasFor(__js_getSetCookie)
  }
  function has(name: String): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/has)
    """
    aliasFor(__js_has)
  }
  function set(name: String, value: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/set)
    """
    aliasFor(__js_set)
  }
  function forEach(callbackfn: function(value: String, key: String, parent: Headers): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: String, key: String, parent: Headers): Any): Any { aliasFor(__js_forEach) }
}
export interface Highlight {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight)
  """
  static {
    aliasFor(native "Highlight")
    var prototype: Highlight = aliasFor(__js_prototype)
    function new(initialRanges: AbstractRange, initialRanges: AbstractRange, initialRanges: AbstractRange): Highlight { aliasFor(__op_new__) }
    function new(initialRanges: AbstractRange, initialRanges: AbstractRange): Highlight { aliasFor(__op_new__) }
    function new(initialRanges: AbstractRange): Highlight { aliasFor(__op_new__) }
    function new(): Highlight { aliasFor(__op_new__) }
  }
  var priority: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight/priority)
  """ = aliasFor(__js_priority)
  var type: HighlightType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight/type)
  """ = aliasFor(__js_type)
  function forEach(callbackfn: function(value: AbstractRange, key: AbstractRange, parent: Highlight): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: AbstractRange, key: AbstractRange, parent: Highlight): Any): Any { aliasFor(__js_forEach) }
}
export interface HighlightRegistry {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HighlightRegistry)
  """
  static {
    aliasFor(native "HighlightRegistry")
    var prototype: HighlightRegistry = aliasFor(__js_prototype)
    function new(): HighlightRegistry { aliasFor(__op_new__) }
  }
  function forEach(callbackfn: function(value: Highlight, key: String, parent: HighlightRegistry): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: Highlight, key: String, parent: HighlightRegistry): Any): Any { aliasFor(__js_forEach) }
}
export interface History {
  """
  Allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/History)
  """
  static {
    aliasFor(native "History")
    var prototype: History = aliasFor(__js_prototype)
    function new(): History { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/length)
  """ = aliasFor(__js_length)
  var scrollRestoration: ScrollRestoration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/scrollRestoration)
  """ = aliasFor(__js_scrollRestoration)
  const state: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/state)
  """ = aliasFor(__js_state)
  function back(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/back)
    """
    aliasFor(__js_back)
  }
  function forward(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/forward)
    """
    aliasFor(__js_forward)
  }
  function go(delta: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/go)
    """
    aliasFor(__js_go)
  }
  function go(): Any { aliasFor(__js_go) }
  function pushState(data: Any, unused: String, url: Union[String, URL, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/pushState)
    """
    aliasFor(__js_pushState)
  }
  function pushState(data: Any, unused: String): Any { aliasFor(__js_pushState) }
  function replaceState(data: Any, unused: String, url: Union[String, URL, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/replaceState)
    """
    aliasFor(__js_replaceState)
  }
  function replaceState(data: Any, unused: String): Any { aliasFor(__js_replaceState) }
}
export interface IDBCursor {
  """
  This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor)
  """
  static {
    aliasFor(native "IDBCursor")
    var prototype: IDBCursor = aliasFor(__js_prototype)
    function new(): IDBCursor { aliasFor(__op_new__) }
  }
  const direction: IDBCursorDirection """
  Returns the direction ("next", "nextunique", "prev" or "prevunique") of the cursor.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/direction)
  """ = aliasFor(__js_direction)
  const key: IDBValidKey """
  Returns the key of the cursor. Throws a "InvalidStateError" DOMException if the cursor is advancing or is finished.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/key)
  """ = aliasFor(__js_key)
  const primaryKey: IDBValidKey """
  Returns the effective key of the cursor. Throws a "InvalidStateError" DOMException if the cursor is advancing or is finished.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/primaryKey)
  """ = aliasFor(__js_primaryKey)
  const request: IDBRequest """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/request)
  """ = aliasFor(__js_request)
  const source: Union[IDBObjectStore, IDBIndex] """
  Returns the IDBObjectStore or IDBIndex the cursor was opened from.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/source)
  """ = aliasFor(__js_source)
  function advance(count: Number): Any {
    """
    Advances the cursor through the next count records in range.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/advance)
    """
    aliasFor(__js_advance)
  }
  function continue(key: IDBValidKey): Any {
    """
    Advances the cursor to the next record in range.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/continue)
    """
    aliasFor(__js_continue)
  }
  function continue(): Any { aliasFor(__js_continue) }
  function continuePrimaryKey(key: IDBValidKey, primaryKey: IDBValidKey): Any {
    """
    Advances the cursor to the next record in range matching or after key and primaryKey. Throws an "InvalidAccessError" DOMException if the source is not an index.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/continuePrimaryKey)
    """
    aliasFor(__js_continuePrimaryKey)
  }
  function delete(): IDBRequest {
    """
    Delete the record pointed at by the cursor with a new value.
       *
    If successful, request's result will be undefined.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/delete)
    """
    aliasFor(__js_delete)
  }
  function update(value: Any): IDBRequest {
    """
    Updated the record pointed at by the cursor with a new value.
       *
    Throws a "DataError" DOMException if the effective object store uses in-line keys and the key would have changed.
       *
    If successful, request's result will be the record's key.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/update)
    """
    aliasFor(__js_update)
  }
}
export interface IDBCursorWithValue extends IDBCursor {
  """
  This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue)
  """
  static {
    aliasFor(native "IDBCursorWithValue")
    var prototype: IDBCursorWithValue = aliasFor(__js_prototype)
    function new(): IDBCursorWithValue { aliasFor(__op_new__) }
  }
  const value: Any """
  Returns the cursor's current value.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue/value)
  """ = aliasFor(__js_value)
}
export interface IDBDatabaseEventMap {
}
export interface IDBDatabase extends EventTarget {
  """
  This IndexedDB API interface provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase)
  """
  static {
    aliasFor(native "IDBDatabase")
    var prototype: IDBDatabase = aliasFor(__js_prototype)
    function new(): IDBDatabase { aliasFor(__op_new__) }
  }
  const name: String """
  Returns the name of the database.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/name)
  """ = aliasFor(__js_name)
  const objectStoreNames: DOMStringList """
  Returns a list of the names of object stores in the database.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/objectStoreNames)
  """ = aliasFor(__js_objectStoreNames)
  var onabort: Union[function(ev: Event): Any, Null] = aliasFor(__js_onabort)
  var onclose: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close_event)
  """ = aliasFor(__js_onclose)
  var onerror: Union[function(ev: Event): Any, Null] = aliasFor(__js_onerror)
  var onversionchange: Union[function(ev: IDBVersionChangeEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/versionchange_event)
  """ = aliasFor(__js_onversionchange)
  const version: Number """
  Returns the version of the database.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/version)
  """ = aliasFor(__js_version)
  function close(): Any {
    """
    Closes the connection once all running transactions have finished.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close)
    """
    aliasFor(__js_close)
  }
  function createObjectStore(name: String, options: IDBObjectStoreParameters): IDBObjectStore {
    """
    Creates a new object store with the given name and options and returns a new IDBObjectStore.
       *
    Throws a "InvalidStateError" DOMException if not called within an upgrade transaction.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/createObjectStore)
    """
    aliasFor(__js_createObjectStore)
  }
  function createObjectStore(name: String): IDBObjectStore { aliasFor(__js_createObjectStore) }
  function deleteObjectStore(name: String): Any {
    """
    Deletes the object store with the given name.
       *
    Throws a "InvalidStateError" DOMException if not called within an upgrade transaction.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/deleteObjectStore)
    """
    aliasFor(__js_deleteObjectStore)
  }
  function transaction(storeNames: Union[String, List[String]], mode: IDBTransactionMode, options: IDBTransactionOptions): IDBTransaction {
    """
    Returns a new transaction with the given mode ("readonly" or "readwrite") and scope which can be a single object store name or an array of names.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/transaction)
    """
    aliasFor(__js_transaction)
  }
  function transaction(storeNames: Union[String, List[String]], mode: IDBTransactionMode): IDBTransaction { aliasFor(__js_transaction) }
  function transaction(storeNames: Union[String, List[String]]): IDBTransaction { aliasFor(__js_transaction) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface IDBFactory {
  """
  In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory)
  """
  static {
    aliasFor(native "IDBFactory")
    var prototype: IDBFactory = aliasFor(__js_prototype)
    function new(): IDBFactory { aliasFor(__op_new__) }
  }
  function cmp(first: Any, second: Any): Number {
    """
    Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.
       *
    Throws a "DataError" DOMException if either input is not a valid key.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/cmp)
    """
    aliasFor(__js_cmp)
  }
  function databases(): Promise[List[IDBDatabaseInfo]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/databases)
    """
    aliasFor(__js_databases)
  }
  function deleteDatabase(name: String): IDBOpenDBRequest {
    """
    Attempts to delete the named database. If the database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request's result will be null.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/deleteDatabase)
    """
    aliasFor(__js_deleteDatabase)
  }
  function open(name: String, version: Number): IDBOpenDBRequest {
    """
    Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request's result will be the connection.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/open)
    """
    aliasFor(__js_open)
  }
  function open(name: String): IDBOpenDBRequest { aliasFor(__js_open) }
}
export interface IDBIndex {
  """
  IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex)
  """
  static {
    aliasFor(native "IDBIndex")
    var prototype: IDBIndex = aliasFor(__js_prototype)
    function new(): IDBIndex { aliasFor(__op_new__) }
  }
  const keyPath: Union[String, List[String]] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/keyPath)
  """ = aliasFor(__js_keyPath)
  const multiEntry: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/multiEntry)
  """ = aliasFor(__js_multiEntry)
  var name: String """
  Returns the name of the index.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/name)
  """ = aliasFor(__js_name)
  const objectStore: IDBObjectStore """
  Returns the IDBObjectStore the index belongs to.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/objectStore)
  """ = aliasFor(__js_objectStore)
  const unique: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/unique)
  """ = aliasFor(__js_unique)
  function count(query: Union[IDBValidKey, IDBKeyRange]): IDBRequest {
    """
    Retrieves the number of records matching the given key or key range in query.
       *
    If successful, request's result will be the count.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/count)
    """
    aliasFor(__js_count)
  }
  function count(): IDBRequest { aliasFor(__js_count) }
  function get(query: Union[IDBValidKey, IDBKeyRange]): IDBRequest {
    """
    Retrieves the value of the first record matching the given key or key range in query.
       *
    If successful, request's result will be the value, or undefined if there was no matching record.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/get)
    """
    aliasFor(__js_get)
  }
  function getAll(query: Union[IDBValidKey, IDBKeyRange, Null], count: Number): IDBRequest {
    """
    Retrieves the values of the records matching the given key or key range in query (up to count if given).
       *
    If successful, request's result will be an Array of the values.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/getAll)
    """
    aliasFor(__js_getAll)
  }
  function getAll(query: Union[IDBValidKey, IDBKeyRange, Null]): IDBRequest { aliasFor(__js_getAll) }
  function getAll(): IDBRequest { aliasFor(__js_getAll) }
  function getAllKeys(query: Union[IDBValidKey, IDBKeyRange, Null], count: Number): IDBRequest {
    """
    Retrieves the keys of records matching the given key or key range in query (up to count if given).
       *
    If successful, request's result will be an Array of the keys.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/getAllKeys)
    """
    aliasFor(__js_getAllKeys)
  }
  function getAllKeys(query: Union[IDBValidKey, IDBKeyRange, Null]): IDBRequest { aliasFor(__js_getAllKeys) }
  function getAllKeys(): IDBRequest { aliasFor(__js_getAllKeys) }
  function getKey(query: Union[IDBValidKey, IDBKeyRange]): IDBRequest {
    """
    Retrieves the key of the first record matching the given key or key range in query.
       *
    If successful, request's result will be the key, or undefined if there was no matching record.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/getKey)
    """
    aliasFor(__js_getKey)
  }
  function openCursor(query: Union[IDBValidKey, IDBKeyRange, Null], direction: IDBCursorDirection): IDBRequest {
    """
    Opens a cursor over the records matching query, ordered by direction. If query is null, all records in index are matched.
       *
    If successful, request's result will be an IDBCursorWithValue, or null if there were no matching records.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/openCursor)
    """
    aliasFor(__js_openCursor)
  }
  function openCursor(query: Union[IDBValidKey, IDBKeyRange, Null]): IDBRequest { aliasFor(__js_openCursor) }
  function openCursor(): IDBRequest { aliasFor(__js_openCursor) }
  function openKeyCursor(query: Union[IDBValidKey, IDBKeyRange, Null], direction: IDBCursorDirection): IDBRequest {
    """
    Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in index are matched.
       *
    If successful, request's result will be an IDBCursor, or null if there were no matching records.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/openKeyCursor)
    """
    aliasFor(__js_openKeyCursor)
  }
  function openKeyCursor(query: Union[IDBValidKey, IDBKeyRange, Null]): IDBRequest { aliasFor(__js_openKeyCursor) }
  function openKeyCursor(): IDBRequest { aliasFor(__js_openKeyCursor) }
}
export interface IDBKeyRange {
  """
  A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange)
  """
  static {
    aliasFor(native "IDBKeyRange")
    var prototype: IDBKeyRange = aliasFor(__js_prototype)
    function new(): IDBKeyRange { aliasFor(__op_new__) }
    function bound(lower: Any, upper: Any, lowerOpen: Bool, upperOpen: Bool): IDBKeyRange {
      """
      Returns a new IDBKeyRange spanning from lower to upper. If lowerOpen is true, lower is not included in the range. If upperOpen is true, upper is not included in the range.
         *
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/bound_static)
      """
      aliasFor(__js_bound)
    }
    function bound(lower: Any, upper: Any, lowerOpen: Bool): IDBKeyRange { aliasFor(__js_bound) }
    function bound(lower: Any, upper: Any): IDBKeyRange { aliasFor(__js_bound) }
    function lowerBound(lower: Any, open: Bool): IDBKeyRange {
      """
      Returns a new IDBKeyRange starting at key with no upper bound. If open is true, key is not included in the range.
         *
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerBound_static)
      """
      aliasFor(__js_lowerBound)
    }
    function lowerBound(lower: Any): IDBKeyRange { aliasFor(__js_lowerBound) }
    function only(value: Any): IDBKeyRange {
      """
      Returns a new IDBKeyRange spanning only key.
         *
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/only_static)
      """
      aliasFor(__js_only)
    }
    function upperBound(upper: Any, open: Bool): IDBKeyRange {
      """
      Returns a new IDBKeyRange with no lower bound and ending at key. If open is true, key is not included in the range.
         *
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperBound_static)
      """
      aliasFor(__js_upperBound)
    }
    function upperBound(upper: Any): IDBKeyRange { aliasFor(__js_upperBound) }
  }
  const lower: Any """
  Returns lower bound, or undefined if none.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lower)
  """ = aliasFor(__js_lower)
  const lowerOpen: Bool """
  Returns true if the lower open flag is set, and false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerOpen)
  """ = aliasFor(__js_lowerOpen)
  const upper: Any """
  Returns upper bound, or undefined if none.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upper)
  """ = aliasFor(__js_upper)
  const upperOpen: Bool """
  Returns true if the upper open flag is set, and false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperOpen)
  """ = aliasFor(__js_upperOpen)
  function includes(key: Any): Bool {
    """
    Returns true if key is included in the range, and false otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/includes)
    """
    aliasFor(__js_includes)
  }
}
export interface IDBObjectStore {
  """
  This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.)
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore)
  """
  static {
    aliasFor(native "IDBObjectStore")
    var prototype: IDBObjectStore = aliasFor(__js_prototype)
    function new(): IDBObjectStore { aliasFor(__op_new__) }
  }
  const autoIncrement: Bool """
  Returns true if the store has a key generator, and false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/autoIncrement)
  """ = aliasFor(__js_autoIncrement)
  const indexNames: DOMStringList """
  Returns a list of the names of indexes in the store.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/indexNames)
  """ = aliasFor(__js_indexNames)
  const keyPath: Union[String, List[String]] """
  Returns the key path of the store, or null if none.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/keyPath)
  """ = aliasFor(__js_keyPath)
  var name: String """
  Returns the name of the store.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/name)
  """ = aliasFor(__js_name)
  const transaction: IDBTransaction """
  Returns the associated transaction.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/transaction)
  """ = aliasFor(__js_transaction)
  function add(value: Any, key: IDBValidKey): IDBRequest {
    """
    Adds or updates a record in store with the given value and key.
       *
    If the store uses in-line keys and key is specified a "DataError" DOMException will be thrown.
       *
    If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a "ConstraintError" DOMException.
       *
    If successful, request's result will be the record's key.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/add)
    """
    aliasFor(__js_add)
  }
  function add(value: Any): IDBRequest { aliasFor(__js_add) }
  function clear(): IDBRequest {
    """
    Deletes all records in store.
       *
    If successful, request's result will be undefined.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/clear)
    """
    aliasFor(__js_clear)
  }
  function count(query: Union[IDBValidKey, IDBKeyRange]): IDBRequest {
    """
    Retrieves the number of records matching the given key or key range in query.
       *
    If successful, request's result will be the count.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/count)
    """
    aliasFor(__js_count)
  }
  function count(): IDBRequest { aliasFor(__js_count) }
  function createIndex(name: String, keyPath: Union[String, List[String]], options: IDBIndexParameters): IDBIndex {
    """
    Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.
       *
    Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex)
    """
    aliasFor(__js_createIndex)
  }
  function createIndex(name: String, keyPath: Union[String, List[String]]): IDBIndex { aliasFor(__js_createIndex) }
  function delete(query: Union[IDBValidKey, IDBKeyRange]): IDBRequest {
    """
    Deletes records in store with the given key or in the given key range in query.
       *
    If successful, request's result will be undefined.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/delete)
    """
    aliasFor(__js_delete)
  }
  function deleteIndex(name: String): Any {
    """
    Deletes the index in store with the given name.
       *
    Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/deleteIndex)
    """
    aliasFor(__js_deleteIndex)
  }
  function get(query: Union[IDBValidKey, IDBKeyRange]): IDBRequest {
    """
    Retrieves the value of the first record matching the given key or key range in query.
       *
    If successful, request's result will be the value, or undefined if there was no matching record.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/get)
    """
    aliasFor(__js_get)
  }
  function getAll(query: Union[IDBValidKey, IDBKeyRange, Null], count: Number): IDBRequest {
    """
    Retrieves the values of the records matching the given key or key range in query (up to count if given).
       *
    If successful, request's result will be an Array of the values.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getAll)
    """
    aliasFor(__js_getAll)
  }
  function getAll(query: Union[IDBValidKey, IDBKeyRange, Null]): IDBRequest { aliasFor(__js_getAll) }
  function getAll(): IDBRequest { aliasFor(__js_getAll) }
  function getAllKeys(query: Union[IDBValidKey, IDBKeyRange, Null], count: Number): IDBRequest {
    """
    Retrieves the keys of records matching the given key or key range in query (up to count if given).
       *
    If successful, request's result will be an Array of the keys.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getAllKeys)
    """
    aliasFor(__js_getAllKeys)
  }
  function getAllKeys(query: Union[IDBValidKey, IDBKeyRange, Null]): IDBRequest { aliasFor(__js_getAllKeys) }
  function getAllKeys(): IDBRequest { aliasFor(__js_getAllKeys) }
  function getKey(query: Union[IDBValidKey, IDBKeyRange]): IDBRequest {
    """
    Retrieves the key of the first record matching the given key or key range in query.
       *
    If successful, request's result will be the key, or undefined if there was no matching record.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getKey)
    """
    aliasFor(__js_getKey)
  }
  function index(name: String): IDBIndex {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/index)
    """
    aliasFor(__js_index)
  }
  function openCursor(query: Union[IDBValidKey, IDBKeyRange, Null], direction: IDBCursorDirection): IDBRequest {
    """
    Opens a cursor over the records matching query, ordered by direction. If query is null, all records in store are matched.
       *
    If successful, request's result will be an IDBCursorWithValue pointing at the first matching record, or null if there were no matching records.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/openCursor)
    """
    aliasFor(__js_openCursor)
  }
  function openCursor(query: Union[IDBValidKey, IDBKeyRange, Null]): IDBRequest { aliasFor(__js_openCursor) }
  function openCursor(): IDBRequest { aliasFor(__js_openCursor) }
  function openKeyCursor(query: Union[IDBValidKey, IDBKeyRange, Null], direction: IDBCursorDirection): IDBRequest {
    """
    Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in store are matched.
       *
    If successful, request's result will be an IDBCursor pointing at the first matching record, or null if there were no matching records.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/openKeyCursor)
    """
    aliasFor(__js_openKeyCursor)
  }
  function openKeyCursor(query: Union[IDBValidKey, IDBKeyRange, Null]): IDBRequest { aliasFor(__js_openKeyCursor) }
  function openKeyCursor(): IDBRequest { aliasFor(__js_openKeyCursor) }
  function put(value: Any, key: IDBValidKey): IDBRequest {
    """
    Adds or updates a record in store with the given value and key.
       *
    If the store uses in-line keys and key is specified a "DataError" DOMException will be thrown.
       *
    If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a "ConstraintError" DOMException.
       *
    If successful, request's result will be the record's key.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/put)
    """
    aliasFor(__js_put)
  }
  function put(value: Any): IDBRequest { aliasFor(__js_put) }
}
export interface IDBOpenDBRequestEventMap extends IDBRequestEventMap {
}
export interface IDBOpenDBRequest extends IDBRequest {
  """
  Also inherits methods from its parents IDBRequest and EventTarget.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest)
  """
  static {
    aliasFor(native "IDBOpenDBRequest")
    var prototype: IDBOpenDBRequest = aliasFor(__js_prototype)
    function new(): IDBOpenDBRequest { aliasFor(__op_new__) }
  }
  var onblocked: Union[function(ev: IDBVersionChangeEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/blocked_event)
  """ = aliasFor(__js_onblocked)
  var onupgradeneeded: Union[function(ev: IDBVersionChangeEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event)
  """ = aliasFor(__js_onupgradeneeded)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface IDBRequestEventMap {
}
export interface IDBRequest {
  static {
    aliasFor(native "IDBRequest")
    var prototype: IDBRequest = aliasFor(__js_prototype)
    function new(): IDBRequest { aliasFor(__op_new__) }
  }
}
export interface IDBTransactionEventMap {
}
export interface IDBTransaction extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction)
  """
  static {
    aliasFor(native "IDBTransaction")
    var prototype: IDBTransaction = aliasFor(__js_prototype)
    function new(): IDBTransaction { aliasFor(__op_new__) }
  }
  const db: IDBDatabase """
  Returns the transaction's connection.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/db)
  """ = aliasFor(__js_db)
  const durability: IDBTransactionDurability """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/durability)
  """ = aliasFor(__js_durability)
  const error: Union[DOMException, Null] """
  If the transaction was aborted, returns the error (a DOMException) providing the reason.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error)
  """ = aliasFor(__js_error)
  const mode: IDBTransactionMode """
  Returns the mode the transaction was created with ("readonly" or "readwrite"), or "versionchange" for an upgrade transaction.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/mode)
  """ = aliasFor(__js_mode)
  const objectStoreNames: DOMStringList """
  Returns a list of the names of object stores in the transaction's scope. For an upgrade transaction this is all object stores in the database.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStoreNames)
  """ = aliasFor(__js_objectStoreNames)
  var onabort: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort_event)
  """ = aliasFor(__js_onabort)
  var oncomplete: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/complete_event)
  """ = aliasFor(__js_oncomplete)
  var onerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error_event)
  """ = aliasFor(__js_onerror)
  function abort(): Any {
    """
    Aborts the transaction. All pending requests will fail with a "AbortError" DOMException and all changes made to the database will be reverted.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort)
    """
    aliasFor(__js_abort)
  }
  function commit(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/commit)
    """
    aliasFor(__js_commit)
  }
  function objectStore(name: String): IDBObjectStore {
    """
    Returns an IDBObjectStore in the transaction's scope.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStore)
    """
    aliasFor(__js_objectStore)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface IDBVersionChangeEvent extends Event {
  """
  This IndexedDB API interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent)
  """
  static {
    aliasFor(native "IDBVersionChangeEvent")
    var prototype: IDBVersionChangeEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: IDBVersionChangeEventInit): IDBVersionChangeEvent { aliasFor(__op_new__) }
    function new(type: String): IDBVersionChangeEvent { aliasFor(__op_new__) }
  }
  const newVersion: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/newVersion)
  """ = aliasFor(__js_newVersion)
  const oldVersion: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/oldVersion)
  """ = aliasFor(__js_oldVersion)
}
export interface IIRFilterNode extends AudioNode {
  """
  The IIRFilterNode interface of the Web Audio API is a AudioNode processor which implements a general infinite impulse response (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IIRFilterNode)
  """
  static {
    aliasFor(native "IIRFilterNode")
    var prototype: IIRFilterNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode { aliasFor(__op_new__) }
  }
  function getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IIRFilterNode/getFrequencyResponse)
    """
    aliasFor(__js_getFrequencyResponse)
  }
}
export interface IdleDeadline {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline)
  """
  static {
    aliasFor(native "IdleDeadline")
    var prototype: IdleDeadline = aliasFor(__js_prototype)
    function new(): IdleDeadline { aliasFor(__op_new__) }
  }
  const didTimeout: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline/didTimeout)
  """ = aliasFor(__js_didTimeout)
  function timeRemaining(): DOMHighResTimeStamp {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline/timeRemaining)
    """
    aliasFor(__js_timeRemaining)
  }
}
export interface ImageBitmap {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap)
  """
  static {
    aliasFor(native "ImageBitmap")
    var prototype: ImageBitmap = aliasFor(__js_prototype)
    function new(): ImageBitmap { aliasFor(__op_new__) }
  }
  const height: Number """
  Returns the intrinsic height of the image, in CSS pixels.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/height)
  """ = aliasFor(__js_height)
  const width: Number """
  Returns the intrinsic width of the image, in CSS pixels.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/width)
  """ = aliasFor(__js_width)
  function close(): Any {
    """
    Releases imageBitmap's underlying bitmap data.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/close)
    """
    aliasFor(__js_close)
  }
}
export interface ImageBitmapRenderingContext {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext)
  """
  static {
    aliasFor(native "ImageBitmapRenderingContext")
    var prototype: ImageBitmapRenderingContext = aliasFor(__js_prototype)
    function new(): ImageBitmapRenderingContext { aliasFor(__op_new__) }
  }
  const canvas: Union[HTMLCanvasElement, OffscreenCanvas] """
  Returns the canvas element that the context is bound to.
  """ = aliasFor(__js_canvas)
  function transferFromImageBitmap(bitmap: Union[ImageBitmap, Null]): Any {
    """
    Transfers the underlying bitmap data from imageBitmap to context, and the bitmap becomes the contents of the canvas element to which context is bound.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext/transferFromImageBitmap)
    """
    aliasFor(__js_transferFromImageBitmap)
  }
}
export interface ImageData {
  """
  The underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData)
  """
  static {
    aliasFor(native "ImageData")
    var prototype: ImageData = aliasFor(__js_prototype)
    function new(sw: Number, sh: Number, settings: ImageDataSettings): ImageData { aliasFor(__op_new__) }
    function new(sw: Number, sh: Number): ImageData { aliasFor(__op_new__) }
    function new(data: Uint8ClampedArray, sw: Number, sh: Number, settings: ImageDataSettings): ImageData { aliasFor(__op_new__) }
    function new(data: Uint8ClampedArray, sw: Number, sh: Number): ImageData { aliasFor(__op_new__) }
    function new(data: Uint8ClampedArray, sw: Number): ImageData { aliasFor(__op_new__) }
  }
  const colorSpace: PredefinedColorSpace """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/colorSpace)
  """ = aliasFor(__js_colorSpace)
  const data: Uint8ClampedArray """
  Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/data)
  """ = aliasFor(__js_data)
  const height: Number """
  Returns the actual dimensions of the data in the ImageData object, in pixels.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/height)
  """ = aliasFor(__js_height)
  const width: Number """
  Returns the actual dimensions of the data in the ImageData object, in pixels.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/width)
  """ = aliasFor(__js_width)
}
export interface InnerHTML {
  var innerHTML: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/innerHTML)
  """ = aliasFor(__js_innerHTML)
}
export interface InputDeviceInfo extends MediaDeviceInfo {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputDeviceInfo)
  """
  static {
    aliasFor(native "InputDeviceInfo")
    var prototype: InputDeviceInfo = aliasFor(__js_prototype)
    function new(): InputDeviceInfo { aliasFor(__op_new__) }
  }
  function getCapabilities(): MediaTrackCapabilities {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputDeviceInfo/getCapabilities)
    """
    aliasFor(__js_getCapabilities)
  }
}
export interface InputEvent extends UIEvent {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent)
  """
  static {
    aliasFor(native "InputEvent")
    var prototype: InputEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: InputEventInit): InputEvent { aliasFor(__op_new__) }
    function new(type: String): InputEvent { aliasFor(__op_new__) }
  }
  const data: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/data)
  """ = aliasFor(__js_data)
  const dataTransfer: Union[DataTransfer, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/dataTransfer)
  """ = aliasFor(__js_dataTransfer)
  const inputType: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/inputType)
  """ = aliasFor(__js_inputType)
  const isComposing: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/isComposing)
  """ = aliasFor(__js_isComposing)
  function getTargetRanges(): List[StaticRange] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/getTargetRanges)
    """
    aliasFor(__js_getTargetRanges)
  }
}
export interface IntersectionObserver {
  """
  provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver)
  """
  static {
    aliasFor(native "IntersectionObserver")
    var prototype: IntersectionObserver = aliasFor(__js_prototype)
    function new(callback: IntersectionObserverCallback, options: IntersectionObserverInit): IntersectionObserver { aliasFor(__op_new__) }
    function new(callback: IntersectionObserverCallback): IntersectionObserver { aliasFor(__op_new__) }
  }
  const root: Union[Element, Document, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/root)
  """ = aliasFor(__js_root)
  const rootMargin: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/rootMargin)
  """ = aliasFor(__js_rootMargin)
  const thresholds: List[Number] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/thresholds)
  """ = aliasFor(__js_thresholds)
  function disconnect(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/disconnect)
    """
    aliasFor(__js_disconnect)
  }
  function observe(target: Element): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/observe)
    """
    aliasFor(__js_observe)
  }
  function takeRecords(): List[IntersectionObserverEntry] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/takeRecords)
    """
    aliasFor(__js_takeRecords)
  }
  function unobserve(target: Element): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/unobserve)
    """
    aliasFor(__js_unobserve)
  }
}
export interface IntersectionObserverEntry {
  """
  This Intersection Observer API interface describes the intersection between the target element and its root container at a specific moment of transition.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry)
  """
  static {
    aliasFor(native "IntersectionObserverEntry")
    var prototype: IntersectionObserverEntry = aliasFor(__js_prototype)
    function new(intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry { aliasFor(__op_new__) }
  }
  const boundingClientRect: DOMRectReadOnly """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/boundingClientRect)
  """ = aliasFor(__js_boundingClientRect)
  const intersectionRatio: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRatio)
  """ = aliasFor(__js_intersectionRatio)
  const intersectionRect: DOMRectReadOnly """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRect)
  """ = aliasFor(__js_intersectionRect)
  const isIntersecting: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/isIntersecting)
  """ = aliasFor(__js_isIntersecting)
  const rootBounds: Union[DOMRectReadOnly, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/rootBounds)
  """ = aliasFor(__js_rootBounds)
  const target: Element """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/target)
  """ = aliasFor(__js_target)
  const time: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/time)
  """ = aliasFor(__js_time)
}
export interface KHR_parallel_shader_compile {
  const COMPLETION_STATUS_KHR: Number = aliasFor(__js_COMPLETION_STATUS_KHR)
}
export interface KeyboardEvent extends UIEvent {
  """
  KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)
  """
  static {
    aliasFor(native "KeyboardEvent")
    var prototype: KeyboardEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: KeyboardEventInit): KeyboardEvent { aliasFor(__op_new__) }
    function new(type: String): KeyboardEvent { aliasFor(__op_new__) }
    const DOM_KEY_LOCATION_STANDARD: Number = aliasFor(__js_DOM_KEY_LOCATION_STANDARD)
    const DOM_KEY_LOCATION_LEFT: Number = aliasFor(__js_DOM_KEY_LOCATION_LEFT)
    const DOM_KEY_LOCATION_RIGHT: Number = aliasFor(__js_DOM_KEY_LOCATION_RIGHT)
    const DOM_KEY_LOCATION_NUMPAD: Number = aliasFor(__js_DOM_KEY_LOCATION_NUMPAD)
  }
  const altKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/altKey)
  """ = aliasFor(__js_altKey)
  const code: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/code)
  """ = aliasFor(__js_code)
  const ctrlKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/ctrlKey)
  """ = aliasFor(__js_ctrlKey)
  const isComposing: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/isComposing)
  """ = aliasFor(__js_isComposing)
  const key: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/key)
  """ = aliasFor(__js_key)
  const location: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/location)
  """ = aliasFor(__js_location)
  const metaKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/metaKey)
  """ = aliasFor(__js_metaKey)
  const repeat: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/repeat)
  """ = aliasFor(__js_repeat)
  const shiftKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/shiftKey)
  """ = aliasFor(__js_shiftKey)
  function getModifierState(keyArg: String): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/getModifierState)
    """
    aliasFor(__js_getModifierState)
  }
  const DOM_KEY_LOCATION_STANDARD: Number = aliasFor(__js_DOM_KEY_LOCATION_STANDARD)
  const DOM_KEY_LOCATION_LEFT: Number = aliasFor(__js_DOM_KEY_LOCATION_LEFT)
  const DOM_KEY_LOCATION_RIGHT: Number = aliasFor(__js_DOM_KEY_LOCATION_RIGHT)
  const DOM_KEY_LOCATION_NUMPAD: Number = aliasFor(__js_DOM_KEY_LOCATION_NUMPAD)
}
export interface KeyframeEffect extends AnimationEffect {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect)
  """
  static {
    aliasFor(native "KeyframeEffect")
    var prototype: KeyframeEffect = aliasFor(__js_prototype)
    function new(target: Union[Element, Null], keyframes: Union[List[Keyframe], PropertyIndexedKeyframes, Null], options: Union[Number, KeyframeEffectOptions]): KeyframeEffect { aliasFor(__op_new__) }
    function new(target: Union[Element, Null], keyframes: Union[List[Keyframe], PropertyIndexedKeyframes, Null]): KeyframeEffect { aliasFor(__op_new__) }
    function new(source: KeyframeEffect): KeyframeEffect { aliasFor(__op_new__) }
  }
  var composite: CompositeOperation """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/composite)
  """ = aliasFor(__js_composite)
  var iterationComposite: IterationCompositeOperation """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/iterationComposite)
  """ = aliasFor(__js_iterationComposite)
  var pseudoElement: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/pseudoElement)
  """ = aliasFor(__js_pseudoElement)
  var target: Union[Element, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/target)
  """ = aliasFor(__js_target)
  function getKeyframes(): List[ComputedKeyframe] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/getKeyframes)
    """
    aliasFor(__js_getKeyframes)
  }
  function setKeyframes(keyframes: Union[List[Keyframe], PropertyIndexedKeyframes, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/setKeyframes)
    """
    aliasFor(__js_setKeyframes)
  }
}
export interface LinkStyle {
  const sheet: Union[CSSStyleSheet, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/sheet)
  """ = aliasFor(__js_sheet)
}
export interface Location {
  """
  The location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location)
  """
  static {
    aliasFor(native "Location")
    var prototype: Location = aliasFor(__js_prototype)
    function new(): Location { aliasFor(__op_new__) }
  }
  const ancestorOrigins: DOMStringList """
  Returns a DOMStringList object listing the origins of the ancestor browsing contexts, from the parent browsing context to the top-level browsing context.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/ancestorOrigins)
  """ = aliasFor(__js_ancestorOrigins)
  var hash: String """
  Returns the Location object's URL's fragment (includes leading "#" if non-empty).
     *
  Can be set, to navigate to the same URL with a changed fragment (ignores leading "#").
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/hash)
  """ = aliasFor(__js_hash)
  var host: String """
  Returns the Location object's URL's host and port (if different from the default port for the scheme).
     *
  Can be set, to navigate to the same URL with a changed host and port.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/host)
  """ = aliasFor(__js_host)
  var hostname: String """
  Returns the Location object's URL's host.
     *
  Can be set, to navigate to the same URL with a changed host.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/hostname)
  """ = aliasFor(__js_hostname)
  var href: String """
  Returns the Location object's URL.
     *
  Can be set, to navigate to the given URL.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/href)
  """ = aliasFor(__js_href)
  function toString(): String { aliasFor(__js_toString) }
  const origin: String """
  Returns the Location object's URL's origin.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/origin)
  """ = aliasFor(__js_origin)
  var pathname: String """
  Returns the Location object's URL's path.
     *
  Can be set, to navigate to the same URL with a changed path.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/pathname)
  """ = aliasFor(__js_pathname)
  var port: String """
  Returns the Location object's URL's port.
     *
  Can be set, to navigate to the same URL with a changed port.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/port)
  """ = aliasFor(__js_port)
  var protocol: String """
  Returns the Location object's URL's scheme.
     *
  Can be set, to navigate to the same URL with a changed scheme.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/protocol)
  """ = aliasFor(__js_protocol)
  var search: String """
  Returns the Location object's URL's query (includes leading "?" if non-empty).
     *
  Can be set, to navigate to the same URL with a changed query (ignores leading "?").
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/search)
  """ = aliasFor(__js_search)
  function assign(url: Union[String, URL]): Any {
    """
    Navigates to the given URL.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/assign)
    """
    aliasFor(__js_assign)
  }
  function reload(): Any {
    """
    Reloads the current page.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/reload)
    """
    aliasFor(__js_reload)
  }
  function replace(url: Union[String, URL]): Any {
    """
    Removes the current page from the session history and navigates to the given URL.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/replace)
    """
    aliasFor(__js_replace)
  }
}
export interface Lock {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock)
  """
  static {
    aliasFor(native "Lock")
    var prototype: Lock = aliasFor(__js_prototype)
    function new(): Lock { aliasFor(__op_new__) }
  }
  const mode: LockMode """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/mode)
  """ = aliasFor(__js_mode)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/name)
  """ = aliasFor(__js_name)
}
export interface LockManager {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager)
  """
  static {
    aliasFor(native "LockManager")
    var prototype: LockManager = aliasFor(__js_prototype)
    function new(): LockManager { aliasFor(__op_new__) }
  }
  function query(): Promise[LockManagerSnapshot] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager/query)
    """
    aliasFor(__js_query)
  }
  function request(name: String, callback: LockGrantedCallback): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager/request)
    """
    aliasFor(__js_request)
  }
  function request(name: String, options: LockOptions, callback: LockGrantedCallback): Promise[Any] { aliasFor(__js_request) }
}
export interface MIDIAccessEventMap {
}
export interface MIDIAccess extends EventTarget {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess)
  """
  static {
    aliasFor(native "MIDIAccess")
    var prototype: MIDIAccess = aliasFor(__js_prototype)
    function new(): MIDIAccess { aliasFor(__op_new__) }
  }
  const inputs: MIDIInputMap """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/inputs)
  """ = aliasFor(__js_inputs)
  var onstatechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/statechange_event)
  """ = aliasFor(__js_onstatechange)
  const outputs: MIDIOutputMap """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/outputs)
  """ = aliasFor(__js_outputs)
  const sysexEnabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/sysexEnabled)
  """ = aliasFor(__js_sysexEnabled)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MIDIConnectionEvent extends Event {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent)
  """
  static {
    aliasFor(native "MIDIConnectionEvent")
    var prototype: MIDIConnectionEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: MIDIConnectionEventInit): MIDIConnectionEvent { aliasFor(__op_new__) }
    function new(type: String): MIDIConnectionEvent { aliasFor(__op_new__) }
  }
  const port: Union[MIDIPort, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent/port)
  """ = aliasFor(__js_port)
}
export interface MIDIInputEventMap extends MIDIPortEventMap {
}
export interface MIDIInput extends MIDIPort {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInput)
  """
  static {
    aliasFor(native "MIDIInput")
    var prototype: MIDIInput = aliasFor(__js_prototype)
    function new(): MIDIInput { aliasFor(__op_new__) }
  }
  var onmidimessage: Union[function(ev: MIDIMessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInput/midimessage_event)
  """ = aliasFor(__js_onmidimessage)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MIDIInputMap {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInputMap)
  """
  static {
    aliasFor(native "MIDIInputMap")
    var prototype: MIDIInputMap = aliasFor(__js_prototype)
    function new(): MIDIInputMap { aliasFor(__op_new__) }
  }
  function forEach(callbackfn: function(value: MIDIInput, key: String, parent: MIDIInputMap): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: MIDIInput, key: String, parent: MIDIInputMap): Any): Any { aliasFor(__js_forEach) }
}
export interface MIDIMessageEvent extends Event {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent)
  """
  static {
    aliasFor(native "MIDIMessageEvent")
    var prototype: MIDIMessageEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: MIDIMessageEventInit): MIDIMessageEvent { aliasFor(__op_new__) }
    function new(type: String): MIDIMessageEvent { aliasFor(__op_new__) }
  }
  const data: Union[Uint8Array, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent/data)
  """ = aliasFor(__js_data)
}
export interface MIDIOutput extends MIDIPort {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutput)
  """
  static {
    aliasFor(native "MIDIOutput")
    var prototype: MIDIOutput = aliasFor(__js_prototype)
    function new(): MIDIOutput { aliasFor(__op_new__) }
  }
  function send(data: List[Number], timestamp: DOMHighResTimeStamp): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutput/send)
    """
    aliasFor(__js_send)
  }
  function send(data: List[Number]): Any { aliasFor(__js_send) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MIDIOutputMap {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutputMap)
  """
  static {
    aliasFor(native "MIDIOutputMap")
    var prototype: MIDIOutputMap = aliasFor(__js_prototype)
    function new(): MIDIOutputMap { aliasFor(__op_new__) }
  }
  function forEach(callbackfn: function(value: MIDIOutput, key: String, parent: MIDIOutputMap): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: MIDIOutput, key: String, parent: MIDIOutputMap): Any): Any { aliasFor(__js_forEach) }
}
export interface MIDIPortEventMap {
}
export interface MIDIPort extends EventTarget {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort)
  """
  static {
    aliasFor(native "MIDIPort")
    var prototype: MIDIPort = aliasFor(__js_prototype)
    function new(): MIDIPort { aliasFor(__op_new__) }
  }
  const connection: MIDIPortConnectionState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/connection)
  """ = aliasFor(__js_connection)
  const id: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/id)
  """ = aliasFor(__js_id)
  const manufacturer: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/manufacturer)
  """ = aliasFor(__js_manufacturer)
  const name: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/name)
  """ = aliasFor(__js_name)
  var onstatechange: Union[function(ev: MIDIConnectionEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/statechange_event)
  """ = aliasFor(__js_onstatechange)
  const state: MIDIPortDeviceState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/state)
  """ = aliasFor(__js_state)
  const type: MIDIPortType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/type)
  """ = aliasFor(__js_type)
  const version: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/version)
  """ = aliasFor(__js_version)
  function close(): Promise[MIDIPort] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/close)
    """
    aliasFor(__js_close)
  }
  function open(): Promise[MIDIPort] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/open)
    """
    aliasFor(__js_open)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MathMLElementEventMap extends ElementEventMap, GlobalEventHandlersEventMap {
}
export interface MathMLElement extends Element, ElementCSSInlineStyle, GlobalEventHandlers, HTMLOrSVGElement {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MathMLElement)
  """
  static {
    aliasFor(native "MathMLElement")
    var prototype: MathMLElement = aliasFor(__js_prototype)
    function new(): MathMLElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MediaCapabilities {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities)
  """
  static {
    aliasFor(native "MediaCapabilities")
    var prototype: MediaCapabilities = aliasFor(__js_prototype)
    function new(): MediaCapabilities { aliasFor(__op_new__) }
  }
  function decodingInfo(configuration: MediaDecodingConfiguration): Promise[MediaCapabilitiesDecodingInfo] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities/decodingInfo)
    """
    aliasFor(__js_decodingInfo)
  }
  function encodingInfo(configuration: MediaEncodingConfiguration): Promise[MediaCapabilitiesEncodingInfo] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities/encodingInfo)
    """
    aliasFor(__js_encodingInfo)
  }
}
export interface MediaDeviceInfo {
  """
  The MediaDevicesInfo interface contains information that describes a single media input or output device.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo)
  """
  static {
    aliasFor(native "MediaDeviceInfo")
    var prototype: MediaDeviceInfo = aliasFor(__js_prototype)
    function new(): MediaDeviceInfo { aliasFor(__op_new__) }
  }
  const deviceId: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/deviceId)
  """ = aliasFor(__js_deviceId)
  const groupId: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/groupId)
  """ = aliasFor(__js_groupId)
  const kind: MediaDeviceKind """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/kind)
  """ = aliasFor(__js_kind)
  const label: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/label)
  """ = aliasFor(__js_label)
  function toJSON(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface MediaDevicesEventMap {
}
export interface MediaDevices extends EventTarget {
  """
  Provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices)
  """
  static {
    aliasFor(native "MediaDevices")
    var prototype: MediaDevices = aliasFor(__js_prototype)
    function new(): MediaDevices { aliasFor(__op_new__) }
  }
  var ondevicechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/devicechange_event)
  """ = aliasFor(__js_ondevicechange)
  function enumerateDevices(): Promise[List[MediaDeviceInfo]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/enumerateDevices)
    """
    aliasFor(__js_enumerateDevices)
  }
  function getDisplayMedia(options: DisplayMediaStreamOptions): Promise[MediaStream] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/getDisplayMedia)
    """
    aliasFor(__js_getDisplayMedia)
  }
  function getDisplayMedia(): Promise[MediaStream] { aliasFor(__js_getDisplayMedia) }
  function getSupportedConstraints(): MediaTrackSupportedConstraints {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/getSupportedConstraints)
    """
    aliasFor(__js_getSupportedConstraints)
  }
  function getUserMedia(constraints: MediaStreamConstraints): Promise[MediaStream] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/getUserMedia)
    """
    aliasFor(__js_getUserMedia)
  }
  function getUserMedia(): Promise[MediaStream] { aliasFor(__js_getUserMedia) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MediaElementAudioSourceNode extends AudioNode {
  """
  A MediaElementSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaElementSource method. The amount of channels in the output equals the number of channels of the audio referenced by the HTMLMediaElement used in the creation of the node, or is 1 if the HTMLMediaElement has no audio.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode)
  """
  static {
    aliasFor(native "MediaElementAudioSourceNode")
    var prototype: MediaElementAudioSourceNode = aliasFor(__js_prototype)
    function new(context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode { aliasFor(__op_new__) }
  }
  const mediaElement: HTMLMediaElement """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode/mediaElement)
  """ = aliasFor(__js_mediaElement)
}
export interface MediaEncryptedEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent)
  """
  static {
    aliasFor(native "MediaEncryptedEvent")
    var prototype: MediaEncryptedEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: MediaEncryptedEventInit): MediaEncryptedEvent { aliasFor(__op_new__) }
    function new(type: String): MediaEncryptedEvent { aliasFor(__op_new__) }
  }
  const initData: Union[ArrayBuffer, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initData)
  """ = aliasFor(__js_initData)
  const initDataType: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initDataType)
  """ = aliasFor(__js_initDataType)
}
export interface MediaError {
  """
  An error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as <audio> or <video>.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError)
  """
  static {
    aliasFor(native "MediaError")
    var prototype: MediaError = aliasFor(__js_prototype)
    function new(): MediaError { aliasFor(__op_new__) }
    const MEDIA_ERR_ABORTED: Number = aliasFor(__js_MEDIA_ERR_ABORTED)
    const MEDIA_ERR_NETWORK: Number = aliasFor(__js_MEDIA_ERR_NETWORK)
    const MEDIA_ERR_DECODE: Number = aliasFor(__js_MEDIA_ERR_DECODE)
    const MEDIA_ERR_SRC_NOT_SUPPORTED: Number = aliasFor(__js_MEDIA_ERR_SRC_NOT_SUPPORTED)
  }
  const code: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError/code)
  """ = aliasFor(__js_code)
  const message: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError/message)
  """ = aliasFor(__js_message)
  const MEDIA_ERR_ABORTED: Number = aliasFor(__js_MEDIA_ERR_ABORTED)
  const MEDIA_ERR_NETWORK: Number = aliasFor(__js_MEDIA_ERR_NETWORK)
  const MEDIA_ERR_DECODE: Number = aliasFor(__js_MEDIA_ERR_DECODE)
  const MEDIA_ERR_SRC_NOT_SUPPORTED: Number = aliasFor(__js_MEDIA_ERR_SRC_NOT_SUPPORTED)
}
export interface MediaKeyMessageEvent extends Event {
  """
  This EncryptedMediaExtensions API interface contains the content and related data when the content decryption module generates a message for the session.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent)
  """
  static {
    aliasFor(native "MediaKeyMessageEvent")
    var prototype: MediaKeyMessageEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent { aliasFor(__op_new__) }
  }
  const message: ArrayBuffer """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/message)
  """ = aliasFor(__js_message)
  const messageType: MediaKeyMessageType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/messageType)
  """ = aliasFor(__js_messageType)
}
export interface MediaKeySessionEventMap {
}
export interface MediaKeySession extends EventTarget {
  """
  This EncryptedMediaExtensions API interface represents a context for message exchange with a content decryption module (CDM).
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession)
  """
  static {
    aliasFor(native "MediaKeySession")
    var prototype: MediaKeySession = aliasFor(__js_prototype)
    function new(): MediaKeySession { aliasFor(__op_new__) }
  }
  const closed: Promise[MediaKeySessionClosedReason] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/closed)
  """ = aliasFor(__js_closed)
  const expiration: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/expiration)
  """ = aliasFor(__js_expiration)
  const keyStatuses: MediaKeyStatusMap """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keyStatuses)
  """ = aliasFor(__js_keyStatuses)
  var onkeystatuseschange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keystatuseschange_event)
  """ = aliasFor(__js_onkeystatuseschange)
  var onmessage: Union[function(ev: MediaKeyMessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/message_event)
  """ = aliasFor(__js_onmessage)
  const sessionId: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/sessionId)
  """ = aliasFor(__js_sessionId)
  function close(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/close)
    """
    aliasFor(__js_close)
  }
  function generateRequest(initDataType: String, initData: BufferSource): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/generateRequest)
    """
    aliasFor(__js_generateRequest)
  }
  function load(sessionId: String): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/load)
    """
    aliasFor(__js_load)
  }
  function remove(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/remove)
    """
    aliasFor(__js_remove)
  }
  function update(response: BufferSource): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/update)
    """
    aliasFor(__js_update)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MediaKeyStatusMap {
  """
  This EncryptedMediaExtensions API interface is a read-only map of media key statuses by key IDs.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap)
  """
  static {
    aliasFor(native "MediaKeyStatusMap")
    var prototype: MediaKeyStatusMap = aliasFor(__js_prototype)
    function new(): MediaKeyStatusMap { aliasFor(__op_new__) }
  }
  const size: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/size)
  """ = aliasFor(__js_size)
  function get(keyId: BufferSource): Union[MediaKeyStatus, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/get)
    """
    aliasFor(__js_get)
  }
  function has(keyId: BufferSource): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/has)
    """
    aliasFor(__js_has)
  }
  function forEach(callbackfn: function(value: MediaKeyStatus, key: BufferSource, parent: MediaKeyStatusMap): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: MediaKeyStatus, key: BufferSource, parent: MediaKeyStatusMap): Any): Any { aliasFor(__js_forEach) }
}
export interface MediaKeySystemAccess {
  """
  This EncryptedMediaExtensions API interface provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess method.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess)
  """
  static {
    aliasFor(native "MediaKeySystemAccess")
    var prototype: MediaKeySystemAccess = aliasFor(__js_prototype)
    function new(): MediaKeySystemAccess { aliasFor(__op_new__) }
  }
  const keySystem: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/keySystem)
  """ = aliasFor(__js_keySystem)
  function createMediaKeys(): Promise[MediaKeys] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/createMediaKeys)
    """
    aliasFor(__js_createMediaKeys)
  }
  function getConfiguration(): MediaKeySystemConfiguration {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/getConfiguration)
    """
    aliasFor(__js_getConfiguration)
  }
}
export interface MediaKeys {
  """
  This EncryptedMediaExtensions API interface the represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys)
  """
  static {
    aliasFor(native "MediaKeys")
    var prototype: MediaKeys = aliasFor(__js_prototype)
    function new(): MediaKeys { aliasFor(__op_new__) }
  }
  function createSession(sessionType: MediaKeySessionType): MediaKeySession {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys/createSession)
    """
    aliasFor(__js_createSession)
  }
  function createSession(): MediaKeySession { aliasFor(__js_createSession) }
  function setServerCertificate(serverCertificate: BufferSource): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys/setServerCertificate)
    """
    aliasFor(__js_setServerCertificate)
  }
}
export interface MediaList {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList)
  """
  static {
    aliasFor(native "MediaList")
    var prototype: MediaList = aliasFor(__js_prototype)
    function new(): MediaList { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/length)
  """ = aliasFor(__js_length)
  var mediaText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/mediaText)
  """ = aliasFor(__js_mediaText)
  function toString(): String { aliasFor(__js_toString) }
  function appendMedium(medium: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/appendMedium)
    """
    aliasFor(__js_appendMedium)
  }
  function deleteMedium(medium: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/deleteMedium)
    """
    aliasFor(__js_deleteMedium)
  }
  function item(index: Number): Union[String, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/item)
    """
    aliasFor(__js_item)
  }
  function __getitem__(index: Number): String { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: String): String { aliasFor(__op_setitem__) }
}
export interface MediaMetadata {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata)
  """
  static {
    aliasFor(native "MediaMetadata")
    var prototype: MediaMetadata = aliasFor(__js_prototype)
    function new(init: MediaMetadataInit): MediaMetadata { aliasFor(__op_new__) }
    function new(): MediaMetadata { aliasFor(__op_new__) }
  }
  var album: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/album)
  """ = aliasFor(__js_album)
  var artist: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artist)
  """ = aliasFor(__js_artist)
  var artwork: List[MediaImage] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artwork)
  """ = aliasFor(__js_artwork)
  var title: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/title)
  """ = aliasFor(__js_title)
}
export interface MediaQueryListEventMap {
}
export interface MediaQueryList extends EventTarget {
  """
  Stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to true).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList)
  """
  static {
    aliasFor(native "MediaQueryList")
    var prototype: MediaQueryList = aliasFor(__js_prototype)
    function new(): MediaQueryList { aliasFor(__op_new__) }
  }
  const matches: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/matches)
  """ = aliasFor(__js_matches)
  const media: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/media)
  """ = aliasFor(__js_media)
  var onchange: Union[function(ev: MediaQueryListEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/change_event)
  """ = aliasFor(__js_onchange)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MediaQueryListEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent)
  """
  static {
    aliasFor(native "MediaQueryListEvent")
    var prototype: MediaQueryListEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: MediaQueryListEventInit): MediaQueryListEvent { aliasFor(__op_new__) }
    function new(type: String): MediaQueryListEvent { aliasFor(__op_new__) }
  }
  const matches: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/matches)
  """ = aliasFor(__js_matches)
  const media: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/media)
  """ = aliasFor(__js_media)
}
export interface MediaRecorderEventMap {
}
export interface MediaRecorder extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder)
  """
  static {
    aliasFor(native "MediaRecorder")
    var prototype: MediaRecorder = aliasFor(__js_prototype)
    function new(stream: MediaStream, options: MediaRecorderOptions): MediaRecorder { aliasFor(__op_new__) }
    function new(stream: MediaStream): MediaRecorder { aliasFor(__op_new__) }
    function isTypeSupported(type: String): Bool {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/isTypeSupported_static)
      """
      aliasFor(__js_isTypeSupported)
    }
  }
  const audioBitsPerSecond: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/audioBitsPerSecond)
  """ = aliasFor(__js_audioBitsPerSecond)
  const mimeType: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/mimeType)
  """ = aliasFor(__js_mimeType)
  var ondataavailable: Union[function(ev: BlobEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/dataavailable_event)
  """ = aliasFor(__js_ondataavailable)
  var onerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/error_event)
  """ = aliasFor(__js_onerror)
  var onpause: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/pause_event)
  """ = aliasFor(__js_onpause)
  var onresume: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/resume_event)
  """ = aliasFor(__js_onresume)
  var onstart: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/start_event)
  """ = aliasFor(__js_onstart)
  var onstop: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stop_event)
  """ = aliasFor(__js_onstop)
  const state: RecordingState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/state)
  """ = aliasFor(__js_state)
  const stream: MediaStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stream)
  """ = aliasFor(__js_stream)
  const videoBitsPerSecond: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/videoBitsPerSecond)
  """ = aliasFor(__js_videoBitsPerSecond)
  function pause(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/pause)
    """
    aliasFor(__js_pause)
  }
  function requestData(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/requestData)
    """
    aliasFor(__js_requestData)
  }
  function resume(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/resume)
    """
    aliasFor(__js_resume)
  }
  function start(timeslice: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/start)
    """
    aliasFor(__js_start)
  }
  function start(): Any { aliasFor(__js_start) }
  function stop(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stop)
    """
    aliasFor(__js_stop)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MediaSession {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession)
  """
  static {
    aliasFor(native "MediaSession")
    var prototype: MediaSession = aliasFor(__js_prototype)
    function new(): MediaSession { aliasFor(__op_new__) }
  }
  var metadata: Union[MediaMetadata, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/metadata)
  """ = aliasFor(__js_metadata)
  var playbackState: MediaSessionPlaybackState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/playbackState)
  """ = aliasFor(__js_playbackState)
  function setActionHandler(action: MediaSessionAction, handler: Union[MediaSessionActionHandler, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/setActionHandler)
    """
    aliasFor(__js_setActionHandler)
  }
  function setPositionState(state: MediaPositionState): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/setPositionState)
    """
    aliasFor(__js_setPositionState)
  }
  function setPositionState(): Any { aliasFor(__js_setPositionState) }
}
export interface MediaSourceEventMap {
}
export interface MediaSource extends EventTarget {
  """
  This Media Source Extensions API interface represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource)
  """
  static {
    aliasFor(native "MediaSource")
    var prototype: MediaSource = aliasFor(__js_prototype)
    function new(): MediaSource { aliasFor(__op_new__) }
    function isTypeSupported(type: String): Bool {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/isTypeSupported_static)
      """
      aliasFor(__js_isTypeSupported)
    }
  }
  const activeSourceBuffers: SourceBufferList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/activeSourceBuffers)
  """ = aliasFor(__js_activeSourceBuffers)
  var duration: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/duration)
  """ = aliasFor(__js_duration)
  var onsourceclose: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceclose_event)
  """ = aliasFor(__js_onsourceclose)
  var onsourceended: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceended_event)
  """ = aliasFor(__js_onsourceended)
  var onsourceopen: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceopen_event)
  """ = aliasFor(__js_onsourceopen)
  const readyState: ReadyState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/readyState)
  """ = aliasFor(__js_readyState)
  const sourceBuffers: SourceBufferList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceBuffers)
  """ = aliasFor(__js_sourceBuffers)
  function addSourceBuffer(type: String): SourceBuffer {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/addSourceBuffer)
    """
    aliasFor(__js_addSourceBuffer)
  }
  function clearLiveSeekableRange(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/clearLiveSeekableRange)
    """
    aliasFor(__js_clearLiveSeekableRange)
  }
  function endOfStream(error: EndOfStreamError): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/endOfStream)
    """
    aliasFor(__js_endOfStream)
  }
  function endOfStream(): Any { aliasFor(__js_endOfStream) }
  function removeSourceBuffer(sourceBuffer: SourceBuffer): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/removeSourceBuffer)
    """
    aliasFor(__js_removeSourceBuffer)
  }
  function setLiveSeekableRange(start: Number, end: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/setLiveSeekableRange)
    """
    aliasFor(__js_setLiveSeekableRange)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MediaStreamEventMap {
}
export interface MediaStream extends EventTarget {
  """
  A stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of MediaStreamTrack.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream)
  """
  static {
    aliasFor(native "MediaStream")
    var prototype: MediaStream = aliasFor(__js_prototype)
    function new(): MediaStream { aliasFor(__op_new__) }
    function new(stream: MediaStream): MediaStream { aliasFor(__op_new__) }
    function new(tracks: List[MediaStreamTrack]): MediaStream { aliasFor(__op_new__) }
  }
  const active: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/active)
  """ = aliasFor(__js_active)
  const id: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/id)
  """ = aliasFor(__js_id)
  var onaddtrack: Union[function(ev: MediaStreamTrackEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/addtrack_event)
  """ = aliasFor(__js_onaddtrack)
  var onremovetrack: Union[function(ev: MediaStreamTrackEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/removetrack_event)
  """ = aliasFor(__js_onremovetrack)
  function addTrack(track: MediaStreamTrack): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/addTrack)
    """
    aliasFor(__js_addTrack)
  }
  function clone(): MediaStream {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/clone)
    """
    aliasFor(__js_clone)
  }
  function getAudioTracks(): List[MediaStreamTrack] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getAudioTracks)
    """
    aliasFor(__js_getAudioTracks)
  }
  function getTrackById(trackId: String): Union[MediaStreamTrack, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getTrackById)
    """
    aliasFor(__js_getTrackById)
  }
  function getTracks(): List[MediaStreamTrack] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getTracks)
    """
    aliasFor(__js_getTracks)
  }
  function getVideoTracks(): List[MediaStreamTrack] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getVideoTracks)
    """
    aliasFor(__js_getVideoTracks)
  }
  function removeTrack(track: MediaStreamTrack): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/removeTrack)
    """
    aliasFor(__js_removeTrack)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MediaStreamAudioDestinationNode extends AudioNode {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode)
  """
  static {
    aliasFor(native "MediaStreamAudioDestinationNode")
    var prototype: MediaStreamAudioDestinationNode = aliasFor(__js_prototype)
    function new(context: AudioContext, options: AudioNodeOptions): MediaStreamAudioDestinationNode { aliasFor(__op_new__) }
    function new(context: AudioContext): MediaStreamAudioDestinationNode { aliasFor(__op_new__) }
  }
  const stream: MediaStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode/stream)
  """ = aliasFor(__js_stream)
}
export interface MediaStreamAudioSourceNode extends AudioNode {
  """
  A type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode)
  """
  static {
    aliasFor(native "MediaStreamAudioSourceNode")
    var prototype: MediaStreamAudioSourceNode = aliasFor(__js_prototype)
    function new(context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode { aliasFor(__op_new__) }
  }
  const mediaStream: MediaStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode/mediaStream)
  """ = aliasFor(__js_mediaStream)
}
export interface MediaStreamTrackEventMap {
}
export interface MediaStreamTrack extends EventTarget {
  """
  A single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack)
  """
  static {
    aliasFor(native "MediaStreamTrack")
    var prototype: MediaStreamTrack = aliasFor(__js_prototype)
    function new(): MediaStreamTrack { aliasFor(__op_new__) }
  }
  var contentHint: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/contentHint)
  """ = aliasFor(__js_contentHint)
  var enabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/enabled)
  """ = aliasFor(__js_enabled)
  const id: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/id)
  """ = aliasFor(__js_id)
  const kind: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/kind)
  """ = aliasFor(__js_kind)
  const label: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/label)
  """ = aliasFor(__js_label)
  const muted: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/muted)
  """ = aliasFor(__js_muted)
  var onended: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/ended_event)
  """ = aliasFor(__js_onended)
  var onmute: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/mute_event)
  """ = aliasFor(__js_onmute)
  var onunmute: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/unmute_event)
  """ = aliasFor(__js_onunmute)
  const readyState: MediaStreamTrackState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/readyState)
  """ = aliasFor(__js_readyState)
  function applyConstraints(constraints: MediaTrackConstraints): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/applyConstraints)
    """
    aliasFor(__js_applyConstraints)
  }
  function applyConstraints(): Promise[Any] { aliasFor(__js_applyConstraints) }
  function clone(): MediaStreamTrack {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/clone)
    """
    aliasFor(__js_clone)
  }
  function getCapabilities(): MediaTrackCapabilities {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getCapabilities)
    """
    aliasFor(__js_getCapabilities)
  }
  function getConstraints(): MediaTrackConstraints {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getConstraints)
    """
    aliasFor(__js_getConstraints)
  }
  function getSettings(): MediaTrackSettings {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getSettings)
    """
    aliasFor(__js_getSettings)
  }
  function stop(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/stop)
    """
    aliasFor(__js_stop)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MediaStreamTrackEvent extends Event {
  """
  Events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent)
  """
  static {
    aliasFor(native "MediaStreamTrackEvent")
    var prototype: MediaStreamTrackEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent { aliasFor(__op_new__) }
  }
  const track: MediaStreamTrack """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent/track)
  """ = aliasFor(__js_track)
}
export interface MessageChannel {
  """
  This Channel Messaging API interface allows us to create a new message channel and send data through it via its two MessagePort properties.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel)
  """
  static {
    aliasFor(native "MessageChannel")
    var prototype: MessageChannel = aliasFor(__js_prototype)
    function new(): MessageChannel { aliasFor(__op_new__) }
  }
  const port1: MessagePort """
  Returns the first MessagePort object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port1)
  """ = aliasFor(__js_port1)
  const port2: MessagePort """
  Returns the second MessagePort object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port2)
  """ = aliasFor(__js_port2)
}
export interface MessageEvent {
  static {
    aliasFor(native "MessageEvent")
    var prototype: MessageEvent = aliasFor(__js_prototype)
  }
}
export interface MessagePortEventMap {
}
export interface MessagePort extends EventTarget {
  """
  This Channel Messaging API interface represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort)
  """
  static {
    aliasFor(native "MessagePort")
    var prototype: MessagePort = aliasFor(__js_prototype)
    function new(): MessagePort { aliasFor(__op_new__) }
  }
  var onmessage: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/message_event)
  """ = aliasFor(__js_onmessage)
  var onmessageerror: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/messageerror_event)
  """ = aliasFor(__js_onmessageerror)
  function close(): Any {
    """
    Disconnects the port, so that it is no longer active.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/close)
    """
    aliasFor(__js_close)
  }
  function postMessage(message: Any, transfer: List[Transferable]): Any {
    """
    Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.
       *
    Throws a "DataCloneError" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/postMessage)
    """
    aliasFor(__js_postMessage)
  }
  function postMessage(message: Any, options: StructuredSerializeOptions): Any { aliasFor(__js_postMessage) }
  function postMessage(message: Any): Any { aliasFor(__js_postMessage) }
  function start(): Any {
    """
    Begins dispatching messages received on the port.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/start)
    """
    aliasFor(__js_start)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface MimeType {
  """
  @deprecated
  """
  static {
    aliasFor(native "MimeType")
    var prototype: MimeType = aliasFor(__js_prototype)
    function new(): MimeType { aliasFor(__op_new__) }
  }
}
export interface MimeTypeArray {
  """
  @deprecated
  """
  static {
    aliasFor(native "MimeTypeArray")
    var prototype: MimeTypeArray = aliasFor(__js_prototype)
    function new(): MimeTypeArray { aliasFor(__op_new__) }
  }
  function __getitem__(index: Number): MimeType { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: MimeType): MimeType { aliasFor(__op_setitem__) }
}
export interface MouseEvent extends UIEvent {
  """
  Events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent)
  """
  static {
    aliasFor(native "MouseEvent")
    var prototype: MouseEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: MouseEventInit): MouseEvent { aliasFor(__op_new__) }
    function new(type: String): MouseEvent { aliasFor(__op_new__) }
  }
  const altKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/altKey)
  """ = aliasFor(__js_altKey)
  const button: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/button)
  """ = aliasFor(__js_button)
  const buttons: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/buttons)
  """ = aliasFor(__js_buttons)
  const clientX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientX)
  """ = aliasFor(__js_clientX)
  const clientY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientY)
  """ = aliasFor(__js_clientY)
  const ctrlKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/ctrlKey)
  """ = aliasFor(__js_ctrlKey)
  const layerX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerX)
  """ = aliasFor(__js_layerX)
  const layerY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerY)
  """ = aliasFor(__js_layerY)
  const metaKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/metaKey)
  """ = aliasFor(__js_metaKey)
  const movementX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementX)
  """ = aliasFor(__js_movementX)
  const movementY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementY)
  """ = aliasFor(__js_movementY)
  const offsetX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetX)
  """ = aliasFor(__js_offsetX)
  const offsetY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetY)
  """ = aliasFor(__js_offsetY)
  const pageX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageX)
  """ = aliasFor(__js_pageX)
  const pageY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageY)
  """ = aliasFor(__js_pageY)
  const relatedTarget: Union[EventTarget, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/relatedTarget)
  """ = aliasFor(__js_relatedTarget)
  const screenX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenX)
  """ = aliasFor(__js_screenX)
  const screenY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenY)
  """ = aliasFor(__js_screenY)
  const shiftKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/shiftKey)
  """ = aliasFor(__js_shiftKey)
  const x: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/x)
  """ = aliasFor(__js_x)
  const y: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/y)
  """ = aliasFor(__js_y)
  function getModifierState(keyArg: String): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/getModifierState)
    """
    aliasFor(__js_getModifierState)
  }
}
export interface MutationEvent extends Event {
  """
  @deprecated
  """
  static {
    aliasFor(native "MutationEvent")
    var prototype: MutationEvent = aliasFor(__js_prototype)
    function new(): MutationEvent { aliasFor(__op_new__) }
    const MODIFICATION: Number = aliasFor(__js_MODIFICATION)
    const ADDITION: Number = aliasFor(__js_ADDITION)
    const REMOVAL: Number = aliasFor(__js_REMOVAL)
  }
  const MODIFICATION: Number = aliasFor(__js_MODIFICATION)
  const ADDITION: Number = aliasFor(__js_ADDITION)
  const REMOVAL: Number = aliasFor(__js_REMOVAL)
}
export interface MutationObserver {
  """
  Provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature which was part of the DOM3 Events specification.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver)
  """
  static {
    aliasFor(native "MutationObserver")
    var prototype: MutationObserver = aliasFor(__js_prototype)
    function new(callback: MutationCallback): MutationObserver { aliasFor(__op_new__) }
  }
  function disconnect(): Any {
    """
    Stops observer from observing any mutations. Until the observe() method is used again, observer's callback will not be invoked.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver/disconnect)
    """
    aliasFor(__js_disconnect)
  }
  function observe(target: Node, options: MutationObserverInit): Any {
    """
    Instructs the user agent to observe a given target (a node) and report any mutations based on the criteria given by options (an object).
       *
    The options argument allows for setting mutation observation options via object members.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver/observe)
    """
    aliasFor(__js_observe)
  }
  function observe(target: Node): Any { aliasFor(__js_observe) }
  function takeRecords(): List[MutationRecord] {
    """
    Empties the record queue and returns what was in there.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver/takeRecords)
    """
    aliasFor(__js_takeRecords)
  }
}
export interface MutationRecord {
  """
  A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver's callback.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord)
  """
  static {
    aliasFor(native "MutationRecord")
    var prototype: MutationRecord = aliasFor(__js_prototype)
    function new(): MutationRecord { aliasFor(__op_new__) }
  }
  const addedNodes: NodeList """
  Return the nodes added and removed respectively.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/addedNodes)
  """ = aliasFor(__js_addedNodes)
  const attributeName: Union[String, Null] """
  Returns the local name of the changed attribute, and null otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeName)
  """ = aliasFor(__js_attributeName)
  const attributeNamespace: Union[String, Null] """
  Returns the namespace of the changed attribute, and null otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeNamespace)
  """ = aliasFor(__js_attributeNamespace)
  const nextSibling: Union[Node, Null] """
  Return the previous and next sibling respectively of the added or removed nodes, and null otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/nextSibling)
  """ = aliasFor(__js_nextSibling)
  const oldValue: Union[String, Null] """
  The return value depends on type. For "attributes", it is the value of the changed attribute before the change. For "characterData", it is the data of the changed node before the change. For "childList", it is null.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/oldValue)
  """ = aliasFor(__js_oldValue)
  const previousSibling: Union[Node, Null] """
  Return the previous and next sibling respectively of the added or removed nodes, and null otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/previousSibling)
  """ = aliasFor(__js_previousSibling)
  const removedNodes: NodeList """
  Return the nodes added and removed respectively.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/removedNodes)
  """ = aliasFor(__js_removedNodes)
  const target: Node """
  Returns the node the mutation affected, depending on the type. For "attributes", it is the element whose attribute changed. For "characterData", it is the CharacterData node. For "childList", it is the node whose children changed.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/target)
  """ = aliasFor(__js_target)
  const type: MutationRecordType """
  Returns "attributes" if it was an attribute mutation. "characterData" if it was a mutation to a CharacterData node. And "childList" if it was a mutation to the tree of nodes.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/type)
  """ = aliasFor(__js_type)
}
export interface NamedNodeMap {
  """
  A collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap)
  """
  static {
    aliasFor(native "NamedNodeMap")
    var prototype: NamedNodeMap = aliasFor(__js_prototype)
    function new(): NamedNodeMap { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/length)
  """ = aliasFor(__js_length)
  function getNamedItem(qualifiedName: String): Union[Attr, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/getNamedItem)
    """
    aliasFor(__js_getNamedItem)
  }
  function getNamedItemNS(namespace: Union[String, Null], localName: String): Union[Attr, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/getNamedItemNS)
    """
    aliasFor(__js_getNamedItemNS)
  }
  function item(index: Number): Union[Attr, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/item)
    """
    aliasFor(__js_item)
  }
  function removeNamedItem(qualifiedName: String): Attr {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/removeNamedItem)
    """
    aliasFor(__js_removeNamedItem)
  }
  function removeNamedItemNS(namespace: Union[String, Null], localName: String): Attr {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/removeNamedItemNS)
    """
    aliasFor(__js_removeNamedItemNS)
  }
  function setNamedItem(attr: Attr): Union[Attr, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/setNamedItem)
    """
    aliasFor(__js_setNamedItem)
  }
  function setNamedItemNS(attr: Attr): Union[Attr, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/setNamedItemNS)
    """
    aliasFor(__js_setNamedItemNS)
  }
  function __getitem__(index: Number): Attr { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: Attr): Attr { aliasFor(__op_setitem__) }
}
export interface NavigationPreloadManager {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager)
  """
  static {
    aliasFor(native "NavigationPreloadManager")
    var prototype: NavigationPreloadManager = aliasFor(__js_prototype)
    function new(): NavigationPreloadManager { aliasFor(__op_new__) }
  }
  function disable(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/disable)
    """
    aliasFor(__js_disable)
  }
  function enable(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/enable)
    """
    aliasFor(__js_enable)
  }
  function getState(): Promise[NavigationPreloadState] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/getState)
    """
    aliasFor(__js_getState)
  }
  function setHeaderValue(value: String): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/setHeaderValue)
    """
    aliasFor(__js_setHeaderValue)
  }
}
export interface Navigator extends NavigatorAutomationInformation, NavigatorBadge, NavigatorConcurrentHardware, NavigatorContentUtils, NavigatorCookies, NavigatorID, NavigatorLanguage, NavigatorLocks, NavigatorOnLine, NavigatorPlugins, NavigatorStorage {
  """
  The state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator)
  """
  static {
    aliasFor(native "Navigator")
    var prototype: Navigator = aliasFor(__js_prototype)
    function new(): Navigator { aliasFor(__op_new__) }
  }
  const clipboard: Clipboard """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/clipboard)
  """ = aliasFor(__js_clipboard)
  const credentials: CredentialsContainer """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/credentials)
  """ = aliasFor(__js_credentials)
  const doNotTrack: Union[String, Null] = aliasFor(__js_doNotTrack)
  const geolocation: Geolocation """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/geolocation)
  """ = aliasFor(__js_geolocation)
  const maxTouchPoints: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/maxTouchPoints)
  """ = aliasFor(__js_maxTouchPoints)
  const mediaCapabilities: MediaCapabilities """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaCapabilities)
  """ = aliasFor(__js_mediaCapabilities)
  const mediaDevices: MediaDevices """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaDevices)
  """ = aliasFor(__js_mediaDevices)
  const mediaSession: MediaSession """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaSession)
  """ = aliasFor(__js_mediaSession)
  const permissions: Permissions """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/permissions)
  """ = aliasFor(__js_permissions)
  const serviceWorker: ServiceWorkerContainer """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/serviceWorker)
  """ = aliasFor(__js_serviceWorker)
  const userActivation: UserActivation """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/userActivation)
  """ = aliasFor(__js_userActivation)
  const wakeLock: WakeLock """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/wakeLock)
  """ = aliasFor(__js_wakeLock)
  function canShare(data: ShareData): Bool {
    """
    Available only in secure contexts.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/canShare)
    """
    aliasFor(__js_canShare)
  }
  function canShare(): Bool { aliasFor(__js_canShare) }
  function getGamepads(): List[Union[Gamepad, Null]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/getGamepads)
    """
    aliasFor(__js_getGamepads)
  }
  function requestMIDIAccess(options: MIDIOptions): Promise[MIDIAccess] {
    """
    Available only in secure contexts.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/requestMIDIAccess)
    """
    aliasFor(__js_requestMIDIAccess)
  }
  function requestMIDIAccess(): Promise[MIDIAccess] { aliasFor(__js_requestMIDIAccess) }
  function requestMediaKeySystemAccess(keySystem: String, supportedConfigurations: List[MediaKeySystemConfiguration]): Promise[MediaKeySystemAccess] {
    """
    Available only in secure contexts.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/requestMediaKeySystemAccess)
    """
    aliasFor(__js_requestMediaKeySystemAccess)
  }
  function sendBeacon(url: Union[String, URL], data: Union[BodyInit, Null]): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/sendBeacon)
    """
    aliasFor(__js_sendBeacon)
  }
  function sendBeacon(url: Union[String, URL]): Bool { aliasFor(__js_sendBeacon) }
  function share(data: ShareData): Promise[Any] {
    """
    Available only in secure contexts.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/share)
    """
    aliasFor(__js_share)
  }
  function share(): Promise[Any] { aliasFor(__js_share) }
  function vibrate(pattern: VibratePattern): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/vibrate)
    """
    aliasFor(__js_vibrate)
  }
}
export interface NavigatorAutomationInformation {
  const webdriver: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/webdriver)
  """ = aliasFor(__js_webdriver)
}
export interface NavigatorBadge {
  function clearAppBadge(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/clearAppBadge)
    """
    aliasFor(__js_clearAppBadge)
  }
  function setAppBadge(contents: Number): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/setAppBadge)
    """
    aliasFor(__js_setAppBadge)
  }
  function setAppBadge(): Promise[Any] { aliasFor(__js_setAppBadge) }
}
export interface NavigatorConcurrentHardware {
  const hardwareConcurrency: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/hardwareConcurrency)
  """ = aliasFor(__js_hardwareConcurrency)
}
export interface NavigatorContentUtils {
  function registerProtocolHandler(scheme: String, url: Union[String, URL]): Any {
    """
    Available only in secure contexts.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/registerProtocolHandler)
    """
    aliasFor(__js_registerProtocolHandler)
  }
}
export interface NavigatorCookies {
  const cookieEnabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/cookieEnabled)
  """ = aliasFor(__js_cookieEnabled)
}
export interface NavigatorID {
  const userAgent: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/userAgent)
  """ = aliasFor(__js_userAgent)
}
export interface NavigatorLanguage {
  const language: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/language)
  """ = aliasFor(__js_language)
  const languages: List[String] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/languages)
  """ = aliasFor(__js_languages)
}
export interface NavigatorLocks {
  const locks: LockManager """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/locks)
  """ = aliasFor(__js_locks)
}
export interface NavigatorOnLine {
  const onLine: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/onLine)
  """ = aliasFor(__js_onLine)
}
export interface NavigatorPlugins {
  const pdfViewerEnabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/pdfViewerEnabled)
  """ = aliasFor(__js_pdfViewerEnabled)
}
export interface NavigatorStorage {
  const storage: StorageManager """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/storage)
  """ = aliasFor(__js_storage)
}
export interface Node extends EventTarget {
  """
  Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node)
  """
  static {
    aliasFor(native "Node")
    var prototype: Node = aliasFor(__js_prototype)
    function new(): Node { aliasFor(__op_new__) }
    const ELEMENT_NODE: Number """
    node is an element.
    """ = aliasFor(__js_ELEMENT_NODE)
    const ATTRIBUTE_NODE: Number = aliasFor(__js_ATTRIBUTE_NODE)
    const TEXT_NODE: Number """
    node is a Text node.
    """ = aliasFor(__js_TEXT_NODE)
    const CDATA_SECTION_NODE: Number """
    node is a CDATASection node.
    """ = aliasFor(__js_CDATA_SECTION_NODE)
    const ENTITY_REFERENCE_NODE: Number = aliasFor(__js_ENTITY_REFERENCE_NODE)
    const ENTITY_NODE: Number = aliasFor(__js_ENTITY_NODE)
    const PROCESSING_INSTRUCTION_NODE: Number """
    node is a ProcessingInstruction node.
    """ = aliasFor(__js_PROCESSING_INSTRUCTION_NODE)
    const COMMENT_NODE: Number """
    node is a Comment node.
    """ = aliasFor(__js_COMMENT_NODE)
    const DOCUMENT_NODE: Number """
    node is a document.
    """ = aliasFor(__js_DOCUMENT_NODE)
    const DOCUMENT_TYPE_NODE: Number """
    node is a doctype.
    """ = aliasFor(__js_DOCUMENT_TYPE_NODE)
    const DOCUMENT_FRAGMENT_NODE: Number """
    node is a DocumentFragment node.
    """ = aliasFor(__js_DOCUMENT_FRAGMENT_NODE)
    const NOTATION_NODE: Number = aliasFor(__js_NOTATION_NODE)
    const DOCUMENT_POSITION_DISCONNECTED: Number """
    Set when node and other are not in the same tree.
    """ = aliasFor(__js_DOCUMENT_POSITION_DISCONNECTED)
    const DOCUMENT_POSITION_PRECEDING: Number """
    Set when other is preceding node.
    """ = aliasFor(__js_DOCUMENT_POSITION_PRECEDING)
    const DOCUMENT_POSITION_FOLLOWING: Number """
    Set when other is following node.
    """ = aliasFor(__js_DOCUMENT_POSITION_FOLLOWING)
    const DOCUMENT_POSITION_CONTAINS: Number """
    Set when other is an ancestor of node.
    """ = aliasFor(__js_DOCUMENT_POSITION_CONTAINS)
    const DOCUMENT_POSITION_CONTAINED_BY: Number """
    Set when other is a descendant of node.
    """ = aliasFor(__js_DOCUMENT_POSITION_CONTAINED_BY)
    const DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Number = aliasFor(__js_DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC)
  }
  const baseURI: String """
  Returns node's node document's document base URL.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/baseURI)
  """ = aliasFor(__js_baseURI)
  const childNodes: NodeList """
  Returns the children.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/childNodes)
  """ = aliasFor(__js_childNodes)
  const firstChild: Union[ChildNode, Null] """
  Returns the first child.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/firstChild)
  """ = aliasFor(__js_firstChild)
  const isConnected: Bool """
  Returns true if node is connected and false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isConnected)
  """ = aliasFor(__js_isConnected)
  const lastChild: Union[ChildNode, Null] """
  Returns the last child.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lastChild)
  """ = aliasFor(__js_lastChild)
  const nextSibling: Union[ChildNode, Null] """
  Returns the next sibling.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nextSibling)
  """ = aliasFor(__js_nextSibling)
  const nodeName: String """
  Returns a string appropriate for the type of node.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeName)
  """ = aliasFor(__js_nodeName)
  const nodeType: Number """
  Returns the type of node.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeType)
  """ = aliasFor(__js_nodeType)
  var nodeValue: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeValue)
  """ = aliasFor(__js_nodeValue)
  const ownerDocument: Union[Document, Null] """
  Returns the node document. Returns null for documents.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
  """ = aliasFor(__js_ownerDocument)
  const parentElement: Union[HTMLElement, Null] """
  Returns the parent element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/parentElement)
  """ = aliasFor(__js_parentElement)
  const parentNode: Union[ParentNode, Null] """
  Returns the parent.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/parentNode)
  """ = aliasFor(__js_parentNode)
  const previousSibling: Union[ChildNode, Null] """
  Returns the previous sibling.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/previousSibling)
  """ = aliasFor(__js_previousSibling)
  var textContent: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/textContent)
  """ = aliasFor(__js_textContent)
  function cloneNode(deep: Bool): Node {
    """
    Returns a copy of node. If deep is true, the copy also includes the node's descendants.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/cloneNode)
    """
    aliasFor(__js_cloneNode)
  }
  function cloneNode(): Node { aliasFor(__js_cloneNode) }
  function compareDocumentPosition(other: Node): Number {
    """
    Returns a bitmask indicating the position of other relative to node.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/compareDocumentPosition)
    """
    aliasFor(__js_compareDocumentPosition)
  }
  function contains(other: Union[Node, Null]): Bool {
    """
    Returns true if other is an inclusive descendant of node, and false otherwise.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/contains)
    """
    aliasFor(__js_contains)
  }
  function getRootNode(options: GetRootNodeOptions): Node {
    """
    Returns node's root.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/getRootNode)
    """
    aliasFor(__js_getRootNode)
  }
  function getRootNode(): Node { aliasFor(__js_getRootNode) }
  function hasChildNodes(): Bool {
    """
    Returns whether node has children.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/hasChildNodes)
    """
    aliasFor(__js_hasChildNodes)
  }
  function isDefaultNamespace(namespace: Union[String, Null]): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isDefaultNamespace)
    """
    aliasFor(__js_isDefaultNamespace)
  }
  function isEqualNode(otherNode: Union[Node, Null]): Bool {
    """
    Returns whether node and otherNode have the same properties.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isEqualNode)
    """
    aliasFor(__js_isEqualNode)
  }
  function isSameNode(otherNode: Union[Node, Null]): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isSameNode)
    """
    aliasFor(__js_isSameNode)
  }
  function lookupNamespaceURI(prefix: Union[String, Null]): Union[String, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lookupNamespaceURI)
    """
    aliasFor(__js_lookupNamespaceURI)
  }
  function lookupPrefix(namespace: Union[String, Null]): Union[String, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lookupPrefix)
    """
    aliasFor(__js_lookupPrefix)
  }
  function normalize(): Any {
    """
    Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/normalize)
    """
    aliasFor(__js_normalize)
  }
  const ELEMENT_NODE: Number """
  node is an element.
  """ = aliasFor(__js_ELEMENT_NODE)
  const ATTRIBUTE_NODE: Number = aliasFor(__js_ATTRIBUTE_NODE)
  const TEXT_NODE: Number """
  node is a Text node.
  """ = aliasFor(__js_TEXT_NODE)
  const CDATA_SECTION_NODE: Number """
  node is a CDATASection node.
  """ = aliasFor(__js_CDATA_SECTION_NODE)
  const ENTITY_REFERENCE_NODE: Number = aliasFor(__js_ENTITY_REFERENCE_NODE)
  const ENTITY_NODE: Number = aliasFor(__js_ENTITY_NODE)
  const PROCESSING_INSTRUCTION_NODE: Number """
  node is a ProcessingInstruction node.
  """ = aliasFor(__js_PROCESSING_INSTRUCTION_NODE)
  const COMMENT_NODE: Number """
  node is a Comment node.
  """ = aliasFor(__js_COMMENT_NODE)
  const DOCUMENT_NODE: Number """
  node is a document.
  """ = aliasFor(__js_DOCUMENT_NODE)
  const DOCUMENT_TYPE_NODE: Number """
  node is a doctype.
  """ = aliasFor(__js_DOCUMENT_TYPE_NODE)
  const DOCUMENT_FRAGMENT_NODE: Number """
  node is a DocumentFragment node.
  """ = aliasFor(__js_DOCUMENT_FRAGMENT_NODE)
  const NOTATION_NODE: Number = aliasFor(__js_NOTATION_NODE)
  const DOCUMENT_POSITION_DISCONNECTED: Number """
  Set when node and other are not in the same tree.
  """ = aliasFor(__js_DOCUMENT_POSITION_DISCONNECTED)
  const DOCUMENT_POSITION_PRECEDING: Number """
  Set when other is preceding node.
  """ = aliasFor(__js_DOCUMENT_POSITION_PRECEDING)
  const DOCUMENT_POSITION_FOLLOWING: Number """
  Set when other is following node.
  """ = aliasFor(__js_DOCUMENT_POSITION_FOLLOWING)
  const DOCUMENT_POSITION_CONTAINS: Number """
  Set when other is an ancestor of node.
  """ = aliasFor(__js_DOCUMENT_POSITION_CONTAINS)
  const DOCUMENT_POSITION_CONTAINED_BY: Number """
  Set when other is a descendant of node.
  """ = aliasFor(__js_DOCUMENT_POSITION_CONTAINED_BY)
  const DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Number = aliasFor(__js_DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC)
}
export interface NodeIterator {
  """
  An iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator)
  """
  static {
    aliasFor(native "NodeIterator")
    var prototype: NodeIterator = aliasFor(__js_prototype)
    function new(): NodeIterator { aliasFor(__op_new__) }
  }
  const filter: Union[NodeFilter, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/filter)
  """ = aliasFor(__js_filter)
  const pointerBeforeReferenceNode: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/pointerBeforeReferenceNode)
  """ = aliasFor(__js_pointerBeforeReferenceNode)
  const referenceNode: Node """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/referenceNode)
  """ = aliasFor(__js_referenceNode)
  const root: Node """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/root)
  """ = aliasFor(__js_root)
  const whatToShow: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/whatToShow)
  """ = aliasFor(__js_whatToShow)
  function nextNode(): Union[Node, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/nextNode)
    """
    aliasFor(__js_nextNode)
  }
  function previousNode(): Union[Node, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/previousNode)
    """
    aliasFor(__js_previousNode)
  }
}
export interface NodeList {
  """
  NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList)
  """
  static {
    aliasFor(native "NodeList")
    var prototype: NodeList = aliasFor(__js_prototype)
    function new(): NodeList { aliasFor(__op_new__) }
  }
  const length: Number """
  Returns the number of nodes in the collection.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList/length)
  """ = aliasFor(__js_length)
  function item(index: Number): Union[Node, Null] {
    """
    Returns the node with index index from the collection. The nodes are sorted in tree order.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList/item)
    """
    aliasFor(__js_item)
  }
  function forEach(callbackfn: function(value: Node, key: Number, parent: NodeList): Any, thisArg: Any): Any {
    """
    Performs the specified action for each node in an list.
    @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.
    @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
    """
    aliasFor(__js_forEach)
  }
  function forEach(callbackfn: function(value: Node, key: Number, parent: NodeList): Any): Any { aliasFor(__js_forEach) }
  function __getitem__(index: Number): Node { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: Node): Node { aliasFor(__op_setitem__) }
}
export interface NonDocumentTypeChildNode {
  const nextElementSibling: Union[Element, Null] """
  Returns the first following sibling that is an element, and null otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/nextElementSibling)
  """ = aliasFor(__js_nextElementSibling)
  const previousElementSibling: Union[Element, Null] """
  Returns the first preceding sibling that is an element, and null otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/previousElementSibling)
  """ = aliasFor(__js_previousElementSibling)
}
export interface NonElementParentNode {
  function getElementById(elementId: String): Union[Element, Null] {
    """
    Returns the first element within node's descendants whose ID is elementId.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementById)
    """
    aliasFor(__js_getElementById)
  }
}
export interface NotificationEventMap {
}
export interface Notification extends EventTarget {
  """
  This Notifications API interface is used to configure and display desktop notifications to the user.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification)
  """
  static {
    aliasFor(native "Notification")
    var prototype: Notification = aliasFor(__js_prototype)
    function new(title: String, options: NotificationOptions): Notification { aliasFor(__op_new__) }
    function new(title: String): Notification { aliasFor(__op_new__) }
    const permission: NotificationPermission """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/permission_static)
    """ = aliasFor(__js_permission)
    function requestPermission(deprecatedCallback: NotificationPermissionCallback): Promise[NotificationPermission] {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/requestPermission_static)
      """
      aliasFor(__js_requestPermission)
    }
    function requestPermission(): Promise[NotificationPermission] { aliasFor(__js_requestPermission) }
  }
  const badge: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/badge)
  """ = aliasFor(__js_badge)
  const body: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/body)
  """ = aliasFor(__js_body)
  const data: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/data)
  """ = aliasFor(__js_data)
  const dir: NotificationDirection """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/dir)
  """ = aliasFor(__js_dir)
  const icon: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/icon)
  """ = aliasFor(__js_icon)
  const lang: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/lang)
  """ = aliasFor(__js_lang)
  var onclick: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/click_event)
  """ = aliasFor(__js_onclick)
  var onclose: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/close_event)
  """ = aliasFor(__js_onclose)
  var onerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/error_event)
  """ = aliasFor(__js_onerror)
  var onshow: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/show_event)
  """ = aliasFor(__js_onshow)
  const requireInteraction: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/requireInteraction)
  """ = aliasFor(__js_requireInteraction)
  const silent: Union[Bool, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/silent)
  """ = aliasFor(__js_silent)
  const tag: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/tag)
  """ = aliasFor(__js_tag)
  const title: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/title)
  """ = aliasFor(__js_title)
  function close(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/close)
    """
    aliasFor(__js_close)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface OES_draw_buffers_indexed {
  function blendEquationSeparateiOES(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendEquationSeparateiOES)
    """
    aliasFor(__js_blendEquationSeparateiOES)
  }
  function blendEquationiOES(buf: GLuint, mode: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendEquationiOES)
    """
    aliasFor(__js_blendEquationiOES)
  }
  function blendFuncSeparateiOES(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendFuncSeparateiOES)
    """
    aliasFor(__js_blendFuncSeparateiOES)
  }
  function blendFunciOES(buf: GLuint, src: GLenum, dst: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendFunciOES)
    """
    aliasFor(__js_blendFunciOES)
  }
  function colorMaskiOES(buf: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/colorMaskiOES)
    """
    aliasFor(__js_colorMaskiOES)
  }
  function disableiOES(target: GLenum, index: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/disableiOES)
    """
    aliasFor(__js_disableiOES)
  }
  function enableiOES(target: GLenum, index: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/enableiOES)
    """
    aliasFor(__js_enableiOES)
  }
}
export interface OES_element_index_uint {
}
export interface OES_fbo_render_mipmap {
}
export interface OES_standard_derivatives {
  const FRAGMENT_SHADER_DERIVATIVE_HINT_OES: Number = aliasFor(__js_FRAGMENT_SHADER_DERIVATIVE_HINT_OES)
}
export interface OES_texture_float {
}
export interface OES_texture_float_linear {
}
export interface OES_texture_half_float {
  const HALF_FLOAT_OES: Number = aliasFor(__js_HALF_FLOAT_OES)
}
export interface OES_texture_half_float_linear {
}
export interface OES_vertex_array_object {
  function bindVertexArrayOES(arrayObject: Union[WebGLVertexArrayObjectOES, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/bindVertexArrayOES)
    """
    aliasFor(__js_bindVertexArrayOES)
  }
  function createVertexArrayOES(): Union[WebGLVertexArrayObjectOES, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/createVertexArrayOES)
    """
    aliasFor(__js_createVertexArrayOES)
  }
  function deleteVertexArrayOES(arrayObject: Union[WebGLVertexArrayObjectOES, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/deleteVertexArrayOES)
    """
    aliasFor(__js_deleteVertexArrayOES)
  }
  function isVertexArrayOES(arrayObject: Union[WebGLVertexArrayObjectOES, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/isVertexArrayOES)
    """
    aliasFor(__js_isVertexArrayOES)
  }
  const VERTEX_ARRAY_BINDING_OES: Number = aliasFor(__js_VERTEX_ARRAY_BINDING_OES)
}
export interface OVR_multiview2 {
  function framebufferTextureMultiviewOVR(target: GLenum, attachment: GLenum, texture: Union[WebGLTexture, Null], level: GLint, baseViewIndex: GLint, numViews: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OVR_multiview2/framebufferTextureMultiviewOVR)
    """
    aliasFor(__js_framebufferTextureMultiviewOVR)
  }
  const FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR)
  const FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR)
  const MAX_VIEWS_OVR: Number = aliasFor(__js_MAX_VIEWS_OVR)
  const FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR)
}
export interface OfflineAudioCompletionEvent extends Event {
  """
  The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event implements this interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent)
  """
  static {
    aliasFor(native "OfflineAudioCompletionEvent")
    var prototype: OfflineAudioCompletionEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent { aliasFor(__op_new__) }
  }
  const renderedBuffer: AudioBuffer """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent/renderedBuffer)
  """ = aliasFor(__js_renderedBuffer)
}
export interface OfflineAudioContextEventMap extends BaseAudioContextEventMap {
}
export interface OfflineAudioContext extends BaseAudioContext {
  """
  An AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext)
  """
  static {
    aliasFor(native "OfflineAudioContext")
    var prototype: OfflineAudioContext = aliasFor(__js_prototype)
    function new(contextOptions: OfflineAudioContextOptions): OfflineAudioContext { aliasFor(__op_new__) }
    function new(numberOfChannels: Number, length: Number, sampleRate: Number): OfflineAudioContext { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/length)
  """ = aliasFor(__js_length)
  var oncomplete: Union[function(ev: OfflineAudioCompletionEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/complete_event)
  """ = aliasFor(__js_oncomplete)
  function resume(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/resume)
    """
    aliasFor(__js_resume)
  }
  function startRendering(): Promise[AudioBuffer] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/startRendering)
    """
    aliasFor(__js_startRendering)
  }
  function suspend(suspendTime: Number): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/suspend)
    """
    aliasFor(__js_suspend)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface OffscreenCanvasEventMap {
}
export interface OffscreenCanvas extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas)
  """
  static {
    aliasFor(native "OffscreenCanvas")
    var prototype: OffscreenCanvas = aliasFor(__js_prototype)
    function new(width: Number, height: Number): OffscreenCanvas { aliasFor(__op_new__) }
  }
  var height: Number """
  These attributes return the dimensions of the OffscreenCanvas object's bitmap.
     *
  They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height)
  """ = aliasFor(__js_height)
  var oncontextlost: Union[function(ev: Event): Any, Null] = aliasFor(__js_oncontextlost)
  var oncontextrestored: Union[function(ev: Event): Any, Null] = aliasFor(__js_oncontextrestored)
  var width: Number """
  These attributes return the dimensions of the OffscreenCanvas object's bitmap.
     *
  They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/width)
  """ = aliasFor(__js_width)
  function convertToBlob(options: ImageEncodeOptions): Promise[Blob] {
    """
    Returns a promise that will fulfill with a new Blob object representing a file containing the image in the OffscreenCanvas object.
       *
    The argument, if provided, is a dictionary that controls the encoding options of the image file to be created. The type field specifies the file format and has a default value of "image/png"; that type is also used if the requested type isn't supported. If the image format supports variable quality (such as "image/jpeg"), then the quality field is a number in the range 0.0 to 1.0 inclusive indicating the desired quality level for the resulting image.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/convertToBlob)
    """
    aliasFor(__js_convertToBlob)
  }
  function convertToBlob(): Promise[Blob] { aliasFor(__js_convertToBlob) }
  function getContext(contextId: _SString2d, options: Any): Union[OffscreenCanvasRenderingContext2D, Null] {
    """
    Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
       *
    This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
       *
    Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
    """
    aliasFor(__js_getContext)
  }
  function getContext(contextId: _SString2d): Union[OffscreenCanvasRenderingContext2D, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringbitmaprenderer, options: Any): Union[ImageBitmapRenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringbitmaprenderer): Union[ImageBitmapRenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringwebgl, options: Any): Union[WebGLRenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringwebgl): Union[WebGLRenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringwebgl2, options: Any): Union[WebGL2RenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: _SStringwebgl2): Union[WebGL2RenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: OffscreenRenderingContextId, options: Any): Union[OffscreenRenderingContext, Null] { aliasFor(__js_getContext) }
  function getContext(contextId: OffscreenRenderingContextId): Union[OffscreenRenderingContext, Null] { aliasFor(__js_getContext) }
  function transferToImageBitmap(): ImageBitmap {
    """
    Returns a newly created ImageBitmap object with the image in the OffscreenCanvas object. The image in the OffscreenCanvas object is replaced with a new blank image.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/transferToImageBitmap)
    """
    aliasFor(__js_transferToImageBitmap)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface OffscreenCanvasRenderingContext2D extends CanvasCompositing, CanvasDrawImage, CanvasDrawPath, CanvasFillStrokeStyles, CanvasFilters, CanvasImageData, CanvasImageSmoothing, CanvasPath, CanvasPathDrawingStyles, CanvasRect, CanvasShadowStyles, CanvasState, CanvasText, CanvasTextDrawingStyles, CanvasTransform {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D)
  """
  static {
    aliasFor(native "OffscreenCanvasRenderingContext2D")
    var prototype: OffscreenCanvasRenderingContext2D = aliasFor(__js_prototype)
    function new(): OffscreenCanvasRenderingContext2D { aliasFor(__op_new__) }
  }
  const canvas: OffscreenCanvas = aliasFor(__js_canvas)
  function commit(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D/commit)
    """
    aliasFor(__js_commit)
  }
}
export interface OscillatorNode extends AudioScheduledSourceNode {
  """
  The OscillatorNode interface represents a periodic waveform, such as a sine wave. It is an AudioScheduledSourceNode audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode)
  """
  static {
    aliasFor(native "OscillatorNode")
    var prototype: OscillatorNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: OscillatorOptions): OscillatorNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): OscillatorNode { aliasFor(__op_new__) }
  }
  const detune: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/detune)
  """ = aliasFor(__js_detune)
  const frequency: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/frequency)
  """ = aliasFor(__js_frequency)
  var type: OscillatorType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/type)
  """ = aliasFor(__js_type)
  function setPeriodicWave(periodicWave: PeriodicWave): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/setPeriodicWave)
    """
    aliasFor(__js_setPeriodicWave)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface OverconstrainedError extends DOMException {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OverconstrainedError)
  """
  static {
    aliasFor(native "OverconstrainedError")
    var prototype: OverconstrainedError = aliasFor(__js_prototype)
    function new(constraint: String, message: String): OverconstrainedError { aliasFor(__op_new__) }
    function new(constraint: String): OverconstrainedError { aliasFor(__op_new__) }
  }
  const constraint: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OverconstrainedError/constraint)
  """ = aliasFor(__js_constraint)
}
export interface PageTransitionEvent extends Event {
  """
  The PageTransitionEvent is fired when a document is being loaded or unloaded.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent)
  """
  static {
    aliasFor(native "PageTransitionEvent")
    var prototype: PageTransitionEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: PageTransitionEventInit): PageTransitionEvent { aliasFor(__op_new__) }
    function new(type: String): PageTransitionEvent { aliasFor(__op_new__) }
  }
  const persisted: Bool """
  For the pageshow event, returns false if the page is newly being loaded (and the load event will fire). Otherwise, returns true.
     *
  For the pagehide event, returns false if the page is going away for the last time. Otherwise, returns true, meaning that (if nothing conspires to make the page unsalvageable) the page might be reused if the user navigates back to this page.
     *
  Things that can cause the page to be unsalvageable include:
     *
  The user agent decided to not keep the Document alive in a session history entry after unload
  Having iframes that are not salvageable
  Active WebSocket objects
  Aborting a Document
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent/persisted)
  """ = aliasFor(__js_persisted)
}
export interface PannerNode extends AudioNode {
  """
  A PannerNode always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode)
  """
  static {
    aliasFor(native "PannerNode")
    var prototype: PannerNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: PannerOptions): PannerNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): PannerNode { aliasFor(__op_new__) }
  }
  var coneInnerAngle: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneInnerAngle)
  """ = aliasFor(__js_coneInnerAngle)
  var coneOuterAngle: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterAngle)
  """ = aliasFor(__js_coneOuterAngle)
  var coneOuterGain: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterGain)
  """ = aliasFor(__js_coneOuterGain)
  var distanceModel: DistanceModelType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/distanceModel)
  """ = aliasFor(__js_distanceModel)
  var maxDistance: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/maxDistance)
  """ = aliasFor(__js_maxDistance)
  const orientationX: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationX)
  """ = aliasFor(__js_orientationX)
  const orientationY: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationY)
  """ = aliasFor(__js_orientationY)
  const orientationZ: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationZ)
  """ = aliasFor(__js_orientationZ)
  var panningModel: PanningModelType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/panningModel)
  """ = aliasFor(__js_panningModel)
  const positionX: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionX)
  """ = aliasFor(__js_positionX)
  const positionY: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionY)
  """ = aliasFor(__js_positionY)
  const positionZ: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionZ)
  """ = aliasFor(__js_positionZ)
  var refDistance: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/refDistance)
  """ = aliasFor(__js_refDistance)
  var rolloffFactor: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/rolloffFactor)
  """ = aliasFor(__js_rolloffFactor)
}
export interface ParentNode extends Node {
  const childElementCount: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/childElementCount)
  """ = aliasFor(__js_childElementCount)
  const children: HTMLCollection """
  Returns the child elements.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/children)
  """ = aliasFor(__js_children)
  const firstElementChild: Union[Element, Null] """
  Returns the first child that is an element, and null otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/firstElementChild)
  """ = aliasFor(__js_firstElementChild)
  const lastElementChild: Union[Element, Null] """
  Returns the last child that is an element, and null otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lastElementChild)
  """ = aliasFor(__js_lastElementChild)
  function append(nodes: Union[Node, String], nodes: Union[Node, String], nodes: Union[Node, String]): Any {
    """
    Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.
       *
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/append)
    """
    aliasFor(__js_append)
  }
  function append(nodes: Union[Node, String], nodes: Union[Node, String]): Any { aliasFor(__js_append) }
  function append(nodes: Union[Node, String]): Any { aliasFor(__js_append) }
  function append(): Any { aliasFor(__js_append) }
  function prepend(nodes: Union[Node, String], nodes: Union[Node, String], nodes: Union[Node, String]): Any {
    """
    Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.
       *
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/prepend)
    """
    aliasFor(__js_prepend)
  }
  function prepend(nodes: Union[Node, String], nodes: Union[Node, String]): Any { aliasFor(__js_prepend) }
  function prepend(nodes: Union[Node, String]): Any { aliasFor(__js_prepend) }
  function prepend(): Any { aliasFor(__js_prepend) }
  function replaceChildren(nodes: Union[Node, String], nodes: Union[Node, String], nodes: Union[Node, String]): Any {
    """
    Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.
       *
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/replaceChildren)
    """
    aliasFor(__js_replaceChildren)
  }
  function replaceChildren(nodes: Union[Node, String], nodes: Union[Node, String]): Any { aliasFor(__js_replaceChildren) }
  function replaceChildren(nodes: Union[Node, String]): Any { aliasFor(__js_replaceChildren) }
  function replaceChildren(): Any { aliasFor(__js_replaceChildren) }
}
export interface Path2D extends CanvasPath {
  """
  This Canvas 2D API interface is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Path2D)
  """
  static {
    aliasFor(native "Path2D")
    var prototype: Path2D = aliasFor(__js_prototype)
    function new(path: Union[Path2D, String]): Path2D { aliasFor(__op_new__) }
    function new(): Path2D { aliasFor(__op_new__) }
  }
  function addPath(path: Path2D, transform: DOMMatrix2DInit): Any {
    """
    Adds to the path the path given by the argument.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Path2D/addPath)
    """
    aliasFor(__js_addPath)
  }
  function addPath(path: Path2D): Any { aliasFor(__js_addPath) }
}
export interface PaymentMethodChangeEvent extends PaymentRequestUpdateEvent {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent)
  """
  static {
    aliasFor(native "PaymentMethodChangeEvent")
    var prototype: PaymentMethodChangeEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: PaymentMethodChangeEventInit): PaymentMethodChangeEvent { aliasFor(__op_new__) }
    function new(type: String): PaymentMethodChangeEvent { aliasFor(__op_new__) }
  }
  const methodDetails: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodDetails)
  """ = aliasFor(__js_methodDetails)
  const methodName: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodName)
  """ = aliasFor(__js_methodName)
}
export interface PaymentRequestEventMap {
}
export interface PaymentRequest extends EventTarget {
  """
  This Payment Request API interface is the primary access point into the API, and lets web content and apps accept payments from the end user.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest)
  """
  static {
    aliasFor(native "PaymentRequest")
    var prototype: PaymentRequest = aliasFor(__js_prototype)
    function new(methodData: List[PaymentMethodData], details: PaymentDetailsInit): PaymentRequest { aliasFor(__op_new__) }
  }
  const id: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/id)
  """ = aliasFor(__js_id)
  var onpaymentmethodchange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/paymentmethodchange_event)
  """ = aliasFor(__js_onpaymentmethodchange)
  function abort(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/abort)
    """
    aliasFor(__js_abort)
  }
  function canMakePayment(): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/canMakePayment)
    """
    aliasFor(__js_canMakePayment)
  }
  function show(detailsPromise: Union[PaymentDetailsUpdate, Promise[PaymentDetailsUpdate]]): Promise[PaymentResponse] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/show)
    """
    aliasFor(__js_show)
  }
  function show(): Promise[PaymentResponse] { aliasFor(__js_show) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface PaymentRequestUpdateEvent extends Event {
  """
  This Payment Request API interface enables a web page to update the details of a PaymentRequest in response to a user action.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequestUpdateEvent)
  """
  static {
    aliasFor(native "PaymentRequestUpdateEvent")
    var prototype: PaymentRequestUpdateEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: PaymentRequestUpdateEventInit): PaymentRequestUpdateEvent { aliasFor(__op_new__) }
    function new(type: String): PaymentRequestUpdateEvent { aliasFor(__op_new__) }
  }
  function updateWith(detailsPromise: Union[PaymentDetailsUpdate, Promise[PaymentDetailsUpdate]]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequestUpdateEvent/updateWith)
    """
    aliasFor(__js_updateWith)
  }
}
export interface PaymentResponse extends EventTarget {
  """
  This Payment Request API interface is returned after a user selects a payment method and approves a payment request.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse)
  """
  static {
    aliasFor(native "PaymentResponse")
    var prototype: PaymentResponse = aliasFor(__js_prototype)
    function new(): PaymentResponse { aliasFor(__op_new__) }
  }
  const details: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/details)
  """ = aliasFor(__js_details)
  const methodName: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/methodName)
  """ = aliasFor(__js_methodName)
  const requestId: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/requestId)
  """ = aliasFor(__js_requestId)
  function complete(result: PaymentComplete): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/complete)
    """
    aliasFor(__js_complete)
  }
  function complete(): Promise[Any] { aliasFor(__js_complete) }
  function retry(errorFields: PaymentValidationErrors): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/retry)
    """
    aliasFor(__js_retry)
  }
  function retry(): Promise[Any] { aliasFor(__js_retry) }
  function toJSON(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface PerformanceEventMap {
}
export interface Performance extends EventTarget {
  """
  Provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance)
  """
  static {
    aliasFor(native "Performance")
    var prototype: Performance = aliasFor(__js_prototype)
    function new(): Performance { aliasFor(__op_new__) }
  }
  const eventCounts: EventCounts """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/eventCounts)
  """ = aliasFor(__js_eventCounts)
  var onresourcetimingbufferfull: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event)
  """ = aliasFor(__js_onresourcetimingbufferfull)
  const timeOrigin: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin)
  """ = aliasFor(__js_timeOrigin)
  function clearMarks(markName: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/clearMarks)
    """
    aliasFor(__js_clearMarks)
  }
  function clearMarks(): Any { aliasFor(__js_clearMarks) }
  function clearMeasures(measureName: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/clearMeasures)
    """
    aliasFor(__js_clearMeasures)
  }
  function clearMeasures(): Any { aliasFor(__js_clearMeasures) }
  function clearResourceTimings(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/clearResourceTimings)
    """
    aliasFor(__js_clearResourceTimings)
  }
  function getEntries(): PerformanceEntryList {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/getEntries)
    """
    aliasFor(__js_getEntries)
  }
  function getEntriesByName(name: String, type: String): PerformanceEntryList {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByName)
    """
    aliasFor(__js_getEntriesByName)
  }
  function getEntriesByName(name: String): PerformanceEntryList { aliasFor(__js_getEntriesByName) }
  function getEntriesByType(type: String): PerformanceEntryList {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType)
    """
    aliasFor(__js_getEntriesByType)
  }
  function mark(markName: String, markOptions: PerformanceMarkOptions): PerformanceMark {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/mark)
    """
    aliasFor(__js_mark)
  }
  function mark(markName: String): PerformanceMark { aliasFor(__js_mark) }
  function measure(measureName: String, startOrMeasureOptions: Union[String, PerformanceMeasureOptions], endMark: String): PerformanceMeasure {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/measure)
    """
    aliasFor(__js_measure)
  }
  function measure(measureName: String, startOrMeasureOptions: Union[String, PerformanceMeasureOptions]): PerformanceMeasure { aliasFor(__js_measure) }
  function measure(measureName: String): PerformanceMeasure { aliasFor(__js_measure) }
  function now(): DOMHighResTimeStamp {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/now)
    """
    aliasFor(__js_now)
  }
  function setResourceTimingBufferSize(maxSize: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/setResourceTimingBufferSize)
    """
    aliasFor(__js_setResourceTimingBufferSize)
  }
  function toJSON(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/toJSON)
    """
    aliasFor(__js_toJSON)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface PerformanceEntry {
  """
  Encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry)
  """
  static {
    aliasFor(native "PerformanceEntry")
    var prototype: PerformanceEntry = aliasFor(__js_prototype)
    function new(): PerformanceEntry { aliasFor(__op_new__) }
  }
  const duration: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/duration)
  """ = aliasFor(__js_duration)
  const entryType: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/entryType)
  """ = aliasFor(__js_entryType)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/name)
  """ = aliasFor(__js_name)
  const startTime: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/startTime)
  """ = aliasFor(__js_startTime)
  function toJSON(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface PerformanceEventTiming extends PerformanceEntry {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming)
  """
  static {
    aliasFor(native "PerformanceEventTiming")
    var prototype: PerformanceEventTiming = aliasFor(__js_prototype)
    function new(): PerformanceEventTiming { aliasFor(__op_new__) }
  }
  const cancelable: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/cancelable)
  """ = aliasFor(__js_cancelable)
  const processingEnd: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingEnd)
  """ = aliasFor(__js_processingEnd)
  const processingStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingStart)
  """ = aliasFor(__js_processingStart)
  const target: Union[Node, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/target)
  """ = aliasFor(__js_target)
  function toJSON(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface PerformanceMark extends PerformanceEntry {
  """
  PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of "mark". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark)
  """
  static {
    aliasFor(native "PerformanceMark")
    var prototype: PerformanceMark = aliasFor(__js_prototype)
    function new(markName: String, markOptions: PerformanceMarkOptions): PerformanceMark { aliasFor(__op_new__) }
    function new(markName: String): PerformanceMark { aliasFor(__op_new__) }
  }
  const detail: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark/detail)
  """ = aliasFor(__js_detail)
}
export interface PerformanceMeasure extends PerformanceEntry {
  """
  PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of "measure". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure)
  """
  static {
    aliasFor(native "PerformanceMeasure")
    var prototype: PerformanceMeasure = aliasFor(__js_prototype)
    function new(): PerformanceMeasure { aliasFor(__op_new__) }
  }
  const detail: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure/detail)
  """ = aliasFor(__js_detail)
}
export interface PerformanceNavigation {
  """
  @deprecated
  """
  static {
    aliasFor(native "PerformanceNavigation")
    var prototype: PerformanceNavigation = aliasFor(__js_prototype)
    function new(): PerformanceNavigation { aliasFor(__op_new__) }
    const TYPE_NAVIGATE: Number = aliasFor(__js_TYPE_NAVIGATE)
    const TYPE_RELOAD: Number = aliasFor(__js_TYPE_RELOAD)
    const TYPE_BACK_FORWARD: Number = aliasFor(__js_TYPE_BACK_FORWARD)
    const TYPE_RESERVED: Number = aliasFor(__js_TYPE_RESERVED)
  }
  const TYPE_NAVIGATE: Number = aliasFor(__js_TYPE_NAVIGATE)
  const TYPE_RELOAD: Number = aliasFor(__js_TYPE_RELOAD)
  const TYPE_BACK_FORWARD: Number = aliasFor(__js_TYPE_BACK_FORWARD)
  const TYPE_RESERVED: Number = aliasFor(__js_TYPE_RESERVED)
}
export interface PerformanceNavigationTiming extends PerformanceResourceTiming {
  """
  Provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming)
  """
  static {
    aliasFor(native "PerformanceNavigationTiming")
    var prototype: PerformanceNavigationTiming = aliasFor(__js_prototype)
    function new(): PerformanceNavigationTiming { aliasFor(__op_new__) }
  }
  const domComplete: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domComplete)
  """ = aliasFor(__js_domComplete)
  const domContentLoadedEventEnd: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventEnd)
  """ = aliasFor(__js_domContentLoadedEventEnd)
  const domContentLoadedEventStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventStart)
  """ = aliasFor(__js_domContentLoadedEventStart)
  const domInteractive: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domInteractive)
  """ = aliasFor(__js_domInteractive)
  const loadEventEnd: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventEnd)
  """ = aliasFor(__js_loadEventEnd)
  const loadEventStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventStart)
  """ = aliasFor(__js_loadEventStart)
  const redirectCount: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/redirectCount)
  """ = aliasFor(__js_redirectCount)
  const type: NavigationTimingType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/type)
  """ = aliasFor(__js_type)
  const unloadEventEnd: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventEnd)
  """ = aliasFor(__js_unloadEventEnd)
  const unloadEventStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventStart)
  """ = aliasFor(__js_unloadEventStart)
  function toJSON(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface PerformanceObserver {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver)
  """
  static {
    aliasFor(native "PerformanceObserver")
    var prototype: PerformanceObserver = aliasFor(__js_prototype)
    function new(callback: PerformanceObserverCallback): PerformanceObserver { aliasFor(__op_new__) }
    const supportedEntryTypes: List[String] """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/supportedEntryTypes_static)
    """ = aliasFor(__js_supportedEntryTypes)
  }
  function disconnect(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/disconnect)
    """
    aliasFor(__js_disconnect)
  }
  function observe(options: PerformanceObserverInit): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/observe)
    """
    aliasFor(__js_observe)
  }
  function observe(): Any { aliasFor(__js_observe) }
  function takeRecords(): PerformanceEntryList {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/takeRecords)
    """
    aliasFor(__js_takeRecords)
  }
}
export interface PerformanceObserverEntryList {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList)
  """
  static {
    aliasFor(native "PerformanceObserverEntryList")
    var prototype: PerformanceObserverEntryList = aliasFor(__js_prototype)
    function new(): PerformanceObserverEntryList { aliasFor(__op_new__) }
  }
  function getEntries(): PerformanceEntryList {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntries)
    """
    aliasFor(__js_getEntries)
  }
  function getEntriesByName(name: String, type: String): PerformanceEntryList {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntriesByName)
    """
    aliasFor(__js_getEntriesByName)
  }
  function getEntriesByName(name: String): PerformanceEntryList { aliasFor(__js_getEntriesByName) }
  function getEntriesByType(type: String): PerformanceEntryList {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntriesByType)
    """
    aliasFor(__js_getEntriesByType)
  }
}
export interface PerformancePaintTiming extends PerformanceEntry {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformancePaintTiming)
  """
  static {
    aliasFor(native "PerformancePaintTiming")
    var prototype: PerformancePaintTiming = aliasFor(__js_prototype)
    function new(): PerformancePaintTiming { aliasFor(__op_new__) }
  }
}
export interface PerformanceResourceTiming extends PerformanceEntry {
  """
  Enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming)
  """
  static {
    aliasFor(native "PerformanceResourceTiming")
    var prototype: PerformanceResourceTiming = aliasFor(__js_prototype)
    function new(): PerformanceResourceTiming { aliasFor(__op_new__) }
  }
  const connectEnd: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectEnd)
  """ = aliasFor(__js_connectEnd)
  const connectStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectStart)
  """ = aliasFor(__js_connectStart)
  const decodedBodySize: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/decodedBodySize)
  """ = aliasFor(__js_decodedBodySize)
  const domainLookupEnd: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupEnd)
  """ = aliasFor(__js_domainLookupEnd)
  const domainLookupStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupStart)
  """ = aliasFor(__js_domainLookupStart)
  const encodedBodySize: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/encodedBodySize)
  """ = aliasFor(__js_encodedBodySize)
  const fetchStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/fetchStart)
  """ = aliasFor(__js_fetchStart)
  const initiatorType: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/initiatorType)
  """ = aliasFor(__js_initiatorType)
  const nextHopProtocol: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/nextHopProtocol)
  """ = aliasFor(__js_nextHopProtocol)
  const redirectEnd: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectEnd)
  """ = aliasFor(__js_redirectEnd)
  const redirectStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectStart)
  """ = aliasFor(__js_redirectStart)
  const requestStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/requestStart)
  """ = aliasFor(__js_requestStart)
  const responseEnd: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseEnd)
  """ = aliasFor(__js_responseEnd)
  const responseStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseStart)
  """ = aliasFor(__js_responseStart)
  const secureConnectionStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/secureConnectionStart)
  """ = aliasFor(__js_secureConnectionStart)
  const serverTiming: List[PerformanceServerTiming] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/serverTiming)
  """ = aliasFor(__js_serverTiming)
  const transferSize: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/transferSize)
  """ = aliasFor(__js_transferSize)
  const workerStart: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/workerStart)
  """ = aliasFor(__js_workerStart)
  function toJSON(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface PerformanceServerTiming {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming)
  """
  static {
    aliasFor(native "PerformanceServerTiming")
    var prototype: PerformanceServerTiming = aliasFor(__js_prototype)
    function new(): PerformanceServerTiming { aliasFor(__op_new__) }
  }
  const description: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/description)
  """ = aliasFor(__js_description)
  const duration: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/duration)
  """ = aliasFor(__js_duration)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/name)
  """ = aliasFor(__js_name)
  function toJSON(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface PerformanceTiming {
  """
  @deprecated
  """
  static {
    aliasFor(native "PerformanceTiming")
    var prototype: PerformanceTiming = aliasFor(__js_prototype)
    function new(): PerformanceTiming { aliasFor(__op_new__) }
  }
}
export interface PeriodicWave {
  """
  PeriodicWave has no inputs or outputs; it is used to define custom oscillators when calling OscillatorNode.setPeriodicWave(). The PeriodicWave itself is created/returned by AudioContext.createPeriodicWave().
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PeriodicWave)
  """
  static {
    aliasFor(native "PeriodicWave")
    var prototype: PeriodicWave = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: PeriodicWaveOptions): PeriodicWave { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): PeriodicWave { aliasFor(__op_new__) }
  }
}
export interface PermissionStatusEventMap {
}
export interface PermissionStatus extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus)
  """
  static {
    aliasFor(native "PermissionStatus")
    var prototype: PermissionStatus = aliasFor(__js_prototype)
    function new(): PermissionStatus { aliasFor(__op_new__) }
  }
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/name)
  """ = aliasFor(__js_name)
  var onchange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/change_event)
  """ = aliasFor(__js_onchange)
  const state: PermissionState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/state)
  """ = aliasFor(__js_state)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface Permissions {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Permissions)
  """
  static {
    aliasFor(native "Permissions")
    var prototype: Permissions = aliasFor(__js_prototype)
    function new(): Permissions { aliasFor(__op_new__) }
  }
  function query(permissionDesc: PermissionDescriptor): Promise[PermissionStatus] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Permissions/query)
    """
    aliasFor(__js_query)
  }
}
export interface PictureInPictureEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent)
  """
  static {
    aliasFor(native "PictureInPictureEvent")
    var prototype: PictureInPictureEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent { aliasFor(__op_new__) }
  }
  const pictureInPictureWindow: PictureInPictureWindow """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent/pictureInPictureWindow)
  """ = aliasFor(__js_pictureInPictureWindow)
}
export interface PictureInPictureWindowEventMap {
}
export interface PictureInPictureWindow extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow)
  """
  static {
    aliasFor(native "PictureInPictureWindow")
    var prototype: PictureInPictureWindow = aliasFor(__js_prototype)
    function new(): PictureInPictureWindow { aliasFor(__op_new__) }
  }
  const height: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/height)
  """ = aliasFor(__js_height)
  var onresize: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/resize_event)
  """ = aliasFor(__js_onresize)
  const width: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/width)
  """ = aliasFor(__js_width)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface Plugin {
  """
  @deprecated
  """
  static {
    aliasFor(native "Plugin")
    var prototype: Plugin = aliasFor(__js_prototype)
    function new(): Plugin { aliasFor(__op_new__) }
  }
  function __getitem__(index: Number): MimeType { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: MimeType): MimeType { aliasFor(__op_setitem__) }
}
export interface PluginArray {
  """
  @deprecated
  """
  static {
    aliasFor(native "PluginArray")
    var prototype: PluginArray = aliasFor(__js_prototype)
    function new(): PluginArray { aliasFor(__op_new__) }
  }
  function __getitem__(index: Number): Plugin { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: Plugin): Plugin { aliasFor(__op_setitem__) }
}
export interface PointerEvent extends MouseEvent {
  """
  The state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent)
  """
  static {
    aliasFor(native "PointerEvent")
    var prototype: PointerEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: PointerEventInit): PointerEvent { aliasFor(__op_new__) }
    function new(type: String): PointerEvent { aliasFor(__op_new__) }
  }
  const height: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/height)
  """ = aliasFor(__js_height)
  const isPrimary: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/isPrimary)
  """ = aliasFor(__js_isPrimary)
  const pointerId: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerId)
  """ = aliasFor(__js_pointerId)
  const pointerType: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerType)
  """ = aliasFor(__js_pointerType)
  const pressure: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pressure)
  """ = aliasFor(__js_pressure)
  const tangentialPressure: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tangentialPressure)
  """ = aliasFor(__js_tangentialPressure)
  const tiltX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltX)
  """ = aliasFor(__js_tiltX)
  const tiltY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltY)
  """ = aliasFor(__js_tiltY)
  const twist: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/twist)
  """ = aliasFor(__js_twist)
  const width: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/width)
  """ = aliasFor(__js_width)
  function getCoalescedEvents(): List[PointerEvent] {
    """
    Available only in secure contexts.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/getCoalescedEvents)
    """
    aliasFor(__js_getCoalescedEvents)
  }
  function getPredictedEvents(): List[PointerEvent] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/getPredictedEvents)
    """
    aliasFor(__js_getPredictedEvents)
  }
}
export interface PopStateEvent extends Event {
  """
  PopStateEvent is an event handler for the popstate event on the window.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent)
  """
  static {
    aliasFor(native "PopStateEvent")
    var prototype: PopStateEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: PopStateEventInit): PopStateEvent { aliasFor(__op_new__) }
    function new(type: String): PopStateEvent { aliasFor(__op_new__) }
  }
  const state: Any """
  Returns a copy of the information that was provided to pushState() or replaceState().
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent/state)
  """ = aliasFor(__js_state)
}
export interface PopoverInvokerElement {
  var popoverTargetAction: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetAction)
  """ = aliasFor(__js_popoverTargetAction)
  var popoverTargetElement: Union[Element, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetElement)
  """ = aliasFor(__js_popoverTargetElement)
}
export interface ProcessingInstruction extends CharacterData, LinkStyle {
  """
  A processing instruction embeds application-specific instructions in XML which can be ignored by other applications that don't recognize them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction)
  """
  static {
    aliasFor(native "ProcessingInstruction")
    var prototype: ProcessingInstruction = aliasFor(__js_prototype)
    function new(): ProcessingInstruction { aliasFor(__op_new__) }
  }
  const ownerDocument: Document = aliasFor(__js_ownerDocument)
  const target: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction/target)
  """ = aliasFor(__js_target)
}
export interface ProgressEvent {
  static {
    aliasFor(native "ProgressEvent")
    var prototype: ProgressEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: ProgressEventInit): ProgressEvent { aliasFor(__op_new__) }
    function new(type: String): ProgressEvent { aliasFor(__op_new__) }
  }
}
export interface PromiseRejectionEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent)
  """
  static {
    aliasFor(native "PromiseRejectionEvent")
    var prototype: PromiseRejectionEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent { aliasFor(__op_new__) }
  }
  const promise: Promise[Any] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/promise)
  """ = aliasFor(__js_promise)
  const reason: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/reason)
  """ = aliasFor(__js_reason)
}
export interface PublicKeyCredential extends Credential {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential)
  """
  static {
    aliasFor(native "PublicKeyCredential")
    var prototype: PublicKeyCredential = aliasFor(__js_prototype)
    function new(): PublicKeyCredential { aliasFor(__op_new__) }
    function isConditionalMediationAvailable(): Promise[Bool] {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/isConditionalMediationAvailable)
      """
      aliasFor(__js_isConditionalMediationAvailable)
    }
    function isUserVerifyingPlatformAuthenticatorAvailable(): Promise[Bool] {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/isUserVerifyingPlatformAuthenticatorAvailable_static)
      """
      aliasFor(__js_isUserVerifyingPlatformAuthenticatorAvailable)
    }
  }
  const authenticatorAttachment: Union[String, Null] = aliasFor(__js_authenticatorAttachment)
  const rawId: ArrayBuffer """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/rawId)
  """ = aliasFor(__js_rawId)
  const response: AuthenticatorResponse """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/response)
  """ = aliasFor(__js_response)
  function getClientExtensionResults(): AuthenticationExtensionsClientOutputs {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/getClientExtensionResults)
    """
    aliasFor(__js_getClientExtensionResults)
  }
}
export interface PushManager {
  """
  This Push API interface provides a way to receive notifications from third-party servers as well as request URLs for push notifications.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager)
  """
  static {
    aliasFor(native "PushManager")
    var prototype: PushManager = aliasFor(__js_prototype)
    function new(): PushManager { aliasFor(__op_new__) }
    const supportedContentEncodings: List[String] """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager/supportedContentEncodings_static)
    """ = aliasFor(__js_supportedContentEncodings)
  }
  function getSubscription(): Promise[Union[PushSubscription, Null]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager/getSubscription)
    """
    aliasFor(__js_getSubscription)
  }
  function permissionState(options: PushSubscriptionOptionsInit): Promise[PermissionState] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager/permissionState)
    """
    aliasFor(__js_permissionState)
  }
  function permissionState(): Promise[PermissionState] { aliasFor(__js_permissionState) }
  function subscribe(options: PushSubscriptionOptionsInit): Promise[PushSubscription] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager/subscribe)
    """
    aliasFor(__js_subscribe)
  }
  function subscribe(): Promise[PushSubscription] { aliasFor(__js_subscribe) }
}
export interface PushSubscription {
  """
  This Push API interface provides a subcription's URL endpoint and allows unsubscription from a push service.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription)
  """
  static {
    aliasFor(native "PushSubscription")
    var prototype: PushSubscription = aliasFor(__js_prototype)
    function new(): PushSubscription { aliasFor(__op_new__) }
  }
  const endpoint: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/endpoint)
  """ = aliasFor(__js_endpoint)
  const expirationTime: Union[EpochTimeStamp, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/expirationTime)
  """ = aliasFor(__js_expirationTime)
  const options: PushSubscriptionOptions """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/options)
  """ = aliasFor(__js_options)
  function getKey(name: PushEncryptionKeyName): Union[ArrayBuffer, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/getKey)
    """
    aliasFor(__js_getKey)
  }
  function toJSON(): PushSubscriptionJSON {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/toJSON)
    """
    aliasFor(__js_toJSON)
  }
  function unsubscribe(): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/unsubscribe)
    """
    aliasFor(__js_unsubscribe)
  }
}
export interface PushSubscriptionOptions {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions)
  """
  static {
    aliasFor(native "PushSubscriptionOptions")
    var prototype: PushSubscriptionOptions = aliasFor(__js_prototype)
    function new(): PushSubscriptionOptions { aliasFor(__op_new__) }
  }
  const applicationServerKey: Union[ArrayBuffer, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/applicationServerKey)
  """ = aliasFor(__js_applicationServerKey)
  const userVisibleOnly: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/userVisibleOnly)
  """ = aliasFor(__js_userVisibleOnly)
}
export interface RTCCertificate {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate)
  """
  static {
    aliasFor(native "RTCCertificate")
    var prototype: RTCCertificate = aliasFor(__js_prototype)
    function new(): RTCCertificate { aliasFor(__op_new__) }
  }
  const expires: EpochTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate/expires)
  """ = aliasFor(__js_expires)
  function getFingerprints(): List[RTCDtlsFingerprint] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate/getFingerprints)
    """
    aliasFor(__js_getFingerprints)
  }
}
export interface RTCDTMFSenderEventMap {
}
export interface RTCDTMFSender extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender)
  """
  static {
    aliasFor(native "RTCDTMFSender")
    var prototype: RTCDTMFSender = aliasFor(__js_prototype)
    function new(): RTCDTMFSender { aliasFor(__op_new__) }
  }
  const canInsertDTMF: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/canInsertDTMF)
  """ = aliasFor(__js_canInsertDTMF)
  var ontonechange: Union[function(ev: RTCDTMFToneChangeEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/tonechange_event)
  """ = aliasFor(__js_ontonechange)
  const toneBuffer: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/toneBuffer)
  """ = aliasFor(__js_toneBuffer)
  function insertDTMF(tones: String, duration: Number, interToneGap: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/insertDTMF)
    """
    aliasFor(__js_insertDTMF)
  }
  function insertDTMF(tones: String, duration: Number): Any { aliasFor(__js_insertDTMF) }
  function insertDTMF(tones: String): Any { aliasFor(__js_insertDTMF) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface RTCDTMFToneChangeEvent extends Event {
  """
  Events sent to indicate that DTMF tones have started or finished playing. This interface is used by the tonechange event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent)
  """
  static {
    aliasFor(native "RTCDTMFToneChangeEvent")
    var prototype: RTCDTMFToneChangeEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: RTCDTMFToneChangeEventInit): RTCDTMFToneChangeEvent { aliasFor(__op_new__) }
    function new(type: String): RTCDTMFToneChangeEvent { aliasFor(__op_new__) }
  }
  const tone: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent/tone)
  """ = aliasFor(__js_tone)
}
export interface RTCDataChannelEventMap {
}
export interface RTCDataChannel extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel)
  """
  static {
    aliasFor(native "RTCDataChannel")
    var prototype: RTCDataChannel = aliasFor(__js_prototype)
    function new(): RTCDataChannel { aliasFor(__op_new__) }
  }
  var binaryType: BinaryType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/binaryType)
  """ = aliasFor(__js_binaryType)
  const bufferedAmount: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmount)
  """ = aliasFor(__js_bufferedAmount)
  var bufferedAmountLowThreshold: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold)
  """ = aliasFor(__js_bufferedAmountLowThreshold)
  const id: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/id)
  """ = aliasFor(__js_id)
  const label: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/label)
  """ = aliasFor(__js_label)
  const maxPacketLifeTime: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxPacketLifeTime)
  """ = aliasFor(__js_maxPacketLifeTime)
  const maxRetransmits: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxRetransmits)
  """ = aliasFor(__js_maxRetransmits)
  const negotiated: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/negotiated)
  """ = aliasFor(__js_negotiated)
  var onbufferedamountlow: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedamountlow_event)
  """ = aliasFor(__js_onbufferedamountlow)
  var onclose: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/close_event)
  """ = aliasFor(__js_onclose)
  var onclosing: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/closing_event)
  """ = aliasFor(__js_onclosing)
  var onerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/error_event)
  """ = aliasFor(__js_onerror)
  var onmessage: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/message_event)
  """ = aliasFor(__js_onmessage)
  var onopen: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/open_event)
  """ = aliasFor(__js_onopen)
  const ordered: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/ordered)
  """ = aliasFor(__js_ordered)
  const protocol: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/protocol)
  """ = aliasFor(__js_protocol)
  const readyState: RTCDataChannelState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/readyState)
  """ = aliasFor(__js_readyState)
  function close(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/close)
    """
    aliasFor(__js_close)
  }
  function send(data: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send)
    """
    aliasFor(__js_send)
  }
  function send(data: Blob): Any { aliasFor(__js_send) }
  function send(data: ArrayBuffer): Any { aliasFor(__js_send) }
  function send(data: ArrayBufferView): Any { aliasFor(__js_send) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface RTCDataChannelEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent)
  """
  static {
    aliasFor(native "RTCDataChannelEvent")
    var prototype: RTCDataChannelEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent { aliasFor(__op_new__) }
  }
  const channel: RTCDataChannel """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent/channel)
  """ = aliasFor(__js_channel)
}
export interface RTCDtlsTransportEventMap {
}
export interface RTCDtlsTransport extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport)
  """
  static {
    aliasFor(native "RTCDtlsTransport")
    var prototype: RTCDtlsTransport = aliasFor(__js_prototype)
    function new(): RTCDtlsTransport { aliasFor(__op_new__) }
  }
  const iceTransport: RTCIceTransport """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/iceTransport)
  """ = aliasFor(__js_iceTransport)
  var onerror: Union[function(ev: Event): Any, Null] = aliasFor(__js_onerror)
  var onstatechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/statechange_event)
  """ = aliasFor(__js_onstatechange)
  const state: RTCDtlsTransportState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/state)
  """ = aliasFor(__js_state)
  function getRemoteCertificates(): List[ArrayBuffer] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/getRemoteCertificates)
    """
    aliasFor(__js_getRemoteCertificates)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface RTCEncodedAudioFrame {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame)
  """
  static {
    aliasFor(native "RTCEncodedAudioFrame")
    var prototype: RTCEncodedAudioFrame = aliasFor(__js_prototype)
    function new(): RTCEncodedAudioFrame { aliasFor(__op_new__) }
  }
  var data: ArrayBuffer """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/data)
  """ = aliasFor(__js_data)
  const timestamp: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/timestamp)
  """ = aliasFor(__js_timestamp)
  function getMetadata(): RTCEncodedAudioFrameMetadata {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/getMetadata)
    """
    aliasFor(__js_getMetadata)
  }
}
export interface RTCEncodedVideoFrame {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame)
  """
  static {
    aliasFor(native "RTCEncodedVideoFrame")
    var prototype: RTCEncodedVideoFrame = aliasFor(__js_prototype)
    function new(): RTCEncodedVideoFrame { aliasFor(__op_new__) }
  }
  var data: ArrayBuffer """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/data)
  """ = aliasFor(__js_data)
  const timestamp: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/timestamp)
  """ = aliasFor(__js_timestamp)
  const type: RTCEncodedVideoFrameType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/type)
  """ = aliasFor(__js_type)
  function getMetadata(): RTCEncodedVideoFrameMetadata {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/getMetadata)
    """
    aliasFor(__js_getMetadata)
  }
}
export interface RTCError extends DOMException {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError)
  """
  static {
    aliasFor(native "RTCError")
    var prototype: RTCError = aliasFor(__js_prototype)
    function new(init: RTCErrorInit, message: String): RTCError { aliasFor(__op_new__) }
    function new(init: RTCErrorInit): RTCError { aliasFor(__op_new__) }
  }
  const errorDetail: RTCErrorDetailType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/errorDetail)
  """ = aliasFor(__js_errorDetail)
  const receivedAlert: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/receivedAlert)
  """ = aliasFor(__js_receivedAlert)
  const sctpCauseCode: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sctpCauseCode)
  """ = aliasFor(__js_sctpCauseCode)
  const sdpLineNumber: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sdpLineNumber)
  """ = aliasFor(__js_sdpLineNumber)
  const sentAlert: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sentAlert)
  """ = aliasFor(__js_sentAlert)
}
export interface RTCErrorEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent)
  """
  static {
    aliasFor(native "RTCErrorEvent")
    var prototype: RTCErrorEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: RTCErrorEventInit): RTCErrorEvent { aliasFor(__op_new__) }
  }
  const error: RTCError """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent/error)
  """ = aliasFor(__js_error)
}
export interface RTCIceCandidate {
  """
  The RTCIceCandidate interface—part of the WebRTC API—represents a candidate Internet Connectivity Establishment (ICE) configuration which may be used to establish an RTCPeerConnection.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate)
  """
  static {
    aliasFor(native "RTCIceCandidate")
    var prototype: RTCIceCandidate = aliasFor(__js_prototype)
    function new(candidateInitDict: RTCIceCandidateInit): RTCIceCandidate { aliasFor(__op_new__) }
    function new(): RTCIceCandidate { aliasFor(__op_new__) }
  }
  const address: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/address)
  """ = aliasFor(__js_address)
  const candidate: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/candidate)
  """ = aliasFor(__js_candidate)
  const component: Union[RTCIceComponent, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/component)
  """ = aliasFor(__js_component)
  const foundation: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/foundation)
  """ = aliasFor(__js_foundation)
  const port: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/port)
  """ = aliasFor(__js_port)
  const priority: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/priority)
  """ = aliasFor(__js_priority)
  const protocol: Union[RTCIceProtocol, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/protocol)
  """ = aliasFor(__js_protocol)
  const relatedAddress: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedAddress)
  """ = aliasFor(__js_relatedAddress)
  const relatedPort: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedPort)
  """ = aliasFor(__js_relatedPort)
  const sdpMLineIndex: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMLineIndex)
  """ = aliasFor(__js_sdpMLineIndex)
  const sdpMid: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMid)
  """ = aliasFor(__js_sdpMid)
  const tcpType: Union[RTCIceTcpCandidateType, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/tcpType)
  """ = aliasFor(__js_tcpType)
  const type: Union[RTCIceCandidateType, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/type)
  """ = aliasFor(__js_type)
  const usernameFragment: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/usernameFragment)
  """ = aliasFor(__js_usernameFragment)
  function toJSON(): RTCIceCandidateInit {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface RTCIceTransportEventMap {
}
export interface RTCIceTransport extends EventTarget {
  """
  Provides access to information about the ICE transport layer over which the data is being sent and received.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport)
  """
  static {
    aliasFor(native "RTCIceTransport")
    var prototype: RTCIceTransport = aliasFor(__js_prototype)
    function new(): RTCIceTransport { aliasFor(__op_new__) }
  }
  const gatheringState: RTCIceGathererState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringState)
  """ = aliasFor(__js_gatheringState)
  var ongatheringstatechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringstatechange_event)
  """ = aliasFor(__js_ongatheringstatechange)
  var onselectedcandidatepairchange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/selectedcandidatepairchange_event)
  """ = aliasFor(__js_onselectedcandidatepairchange)
  var onstatechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/statechange_event)
  """ = aliasFor(__js_onstatechange)
  const state: RTCIceTransportState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/state)
  """ = aliasFor(__js_state)
  function getSelectedCandidatePair(): Union[RTCIceCandidatePair, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/getSelectedCandidatePair)
    """
    aliasFor(__js_getSelectedCandidatePair)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface RTCPeerConnectionEventMap {
}
export interface RTCPeerConnection extends EventTarget {
  """
  A WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection)
  """
  static {
    aliasFor(native "RTCPeerConnection")
    var prototype: RTCPeerConnection = aliasFor(__js_prototype)
    function new(configuration: RTCConfiguration): RTCPeerConnection { aliasFor(__op_new__) }
    function new(): RTCPeerConnection { aliasFor(__op_new__) }
    function generateCertificate(keygenAlgorithm: AlgorithmIdentifier): Promise[RTCCertificate] {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/generateCertificate_static)
      """
      aliasFor(__js_generateCertificate)
    }
  }
  const canTrickleIceCandidates: Union[Bool, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates)
  """ = aliasFor(__js_canTrickleIceCandidates)
  const connectionState: RTCPeerConnectionState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionState)
  """ = aliasFor(__js_connectionState)
  const currentLocalDescription: Union[RTCSessionDescription, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentLocalDescription)
  """ = aliasFor(__js_currentLocalDescription)
  const currentRemoteDescription: Union[RTCSessionDescription, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentRemoteDescription)
  """ = aliasFor(__js_currentRemoteDescription)
  const iceConnectionState: RTCIceConnectionState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceConnectionState)
  """ = aliasFor(__js_iceConnectionState)
  const iceGatheringState: RTCIceGatheringState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceGatheringState)
  """ = aliasFor(__js_iceGatheringState)
  const localDescription: Union[RTCSessionDescription, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/localDescription)
  """ = aliasFor(__js_localDescription)
  var onconnectionstatechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionstatechange_event)
  """ = aliasFor(__js_onconnectionstatechange)
  var ondatachannel: Union[function(ev: RTCDataChannelEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/datachannel_event)
  """ = aliasFor(__js_ondatachannel)
  var onicecandidate: Union[function(ev: RTCPeerConnectionIceEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidate_event)
  """ = aliasFor(__js_onicecandidate)
  var onicecandidateerror: Union[function(ev: RTCPeerConnectionIceErrorEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidateerror_event)
  """ = aliasFor(__js_onicecandidateerror)
  var oniceconnectionstatechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event)
  """ = aliasFor(__js_oniceconnectionstatechange)
  var onicegatheringstatechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event)
  """ = aliasFor(__js_onicegatheringstatechange)
  var onnegotiationneeded: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/negotiationneeded_event)
  """ = aliasFor(__js_onnegotiationneeded)
  var onsignalingstatechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingstatechange_event)
  """ = aliasFor(__js_onsignalingstatechange)
  var ontrack: Union[function(ev: RTCTrackEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/track_event)
  """ = aliasFor(__js_ontrack)
  const pendingLocalDescription: Union[RTCSessionDescription, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingLocalDescription)
  """ = aliasFor(__js_pendingLocalDescription)
  const pendingRemoteDescription: Union[RTCSessionDescription, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingRemoteDescription)
  """ = aliasFor(__js_pendingRemoteDescription)
  const remoteDescription: Union[RTCSessionDescription, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/remoteDescription)
  """ = aliasFor(__js_remoteDescription)
  const sctp: Union[RTCSctpTransport, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/sctp)
  """ = aliasFor(__js_sctp)
  const signalingState: RTCSignalingState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingState)
  """ = aliasFor(__js_signalingState)
  function addIceCandidate(candidate: RTCIceCandidateInit): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addIceCandidate)
    """
    aliasFor(__js_addIceCandidate)
  }
  function addIceCandidate(): Promise[Any] { aliasFor(__js_addIceCandidate) }
  function addTrack(track: MediaStreamTrack, streams: MediaStream, streams: MediaStream, streams: MediaStream): RTCRtpSender {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addTrack)
    """
    aliasFor(__js_addTrack)
  }
  function addTrack(track: MediaStreamTrack, streams: MediaStream, streams: MediaStream): RTCRtpSender { aliasFor(__js_addTrack) }
  function addTrack(track: MediaStreamTrack, streams: MediaStream): RTCRtpSender { aliasFor(__js_addTrack) }
  function addTrack(track: MediaStreamTrack): RTCRtpSender { aliasFor(__js_addTrack) }
  function addTransceiver(trackOrKind: Union[MediaStreamTrack, String], init: RTCRtpTransceiverInit): RTCRtpTransceiver {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addTransceiver)
    """
    aliasFor(__js_addTransceiver)
  }
  function addTransceiver(trackOrKind: Union[MediaStreamTrack, String]): RTCRtpTransceiver { aliasFor(__js_addTransceiver) }
  function close(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/close)
    """
    aliasFor(__js_close)
  }
  function createAnswer(options: RTCAnswerOptions): Promise[RTCSessionDescriptionInit] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createAnswer)
    """
    aliasFor(__js_createAnswer)
  }
  function createAnswer(): Promise[RTCSessionDescriptionInit] { aliasFor(__js_createAnswer) }
  function createDataChannel(label: String, dataChannelDict: RTCDataChannelInit): RTCDataChannel {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createDataChannel)
    """
    aliasFor(__js_createDataChannel)
  }
  function createDataChannel(label: String): RTCDataChannel { aliasFor(__js_createDataChannel) }
  function createOffer(options: RTCOfferOptions): Promise[RTCSessionDescriptionInit] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createOffer)
    """
    aliasFor(__js_createOffer)
  }
  function createOffer(): Promise[RTCSessionDescriptionInit] { aliasFor(__js_createOffer) }
  function getConfiguration(): RTCConfiguration {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getConfiguration)
    """
    aliasFor(__js_getConfiguration)
  }
  function getReceivers(): List[RTCRtpReceiver] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getReceivers)
    """
    aliasFor(__js_getReceivers)
  }
  function getSenders(): List[RTCRtpSender] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getSenders)
    """
    aliasFor(__js_getSenders)
  }
  function getStats(selector: Union[MediaStreamTrack, Null]): Promise[RTCStatsReport] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getStats)
    """
    aliasFor(__js_getStats)
  }
  function getStats(): Promise[RTCStatsReport] { aliasFor(__js_getStats) }
  function getTransceivers(): List[RTCRtpTransceiver] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getTransceivers)
    """
    aliasFor(__js_getTransceivers)
  }
  function removeTrack(sender: RTCRtpSender): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/removeTrack)
    """
    aliasFor(__js_removeTrack)
  }
  function restartIce(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/restartIce)
    """
    aliasFor(__js_restartIce)
  }
  function setConfiguration(configuration: RTCConfiguration): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setConfiguration)
    """
    aliasFor(__js_setConfiguration)
  }
  function setConfiguration(): Any { aliasFor(__js_setConfiguration) }
  function setLocalDescription(description: RTCLocalSessionDescriptionInit): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setLocalDescription)
    """
    aliasFor(__js_setLocalDescription)
  }
  function setLocalDescription(): Promise[Any] { aliasFor(__js_setLocalDescription) }
  function setRemoteDescription(description: RTCSessionDescriptionInit): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setRemoteDescription)
    """
    aliasFor(__js_setRemoteDescription)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface RTCPeerConnectionIceErrorEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent)
  """
  static {
    aliasFor(native "RTCPeerConnectionIceErrorEvent")
    var prototype: RTCPeerConnectionIceErrorEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent { aliasFor(__op_new__) }
  }
  const address: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/address)
  """ = aliasFor(__js_address)
  const errorCode: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/errorCode)
  """ = aliasFor(__js_errorCode)
  const errorText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/errorText)
  """ = aliasFor(__js_errorText)
  const port: Union[Number, Null] = aliasFor(__js_port)
  const url: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/url)
  """ = aliasFor(__js_url)
}
export interface RTCPeerConnectionIceEvent extends Event {
  """
  Events that occurs in relation to ICE candidates with the target, usually an RTCPeerConnection. Only one event is of this type: icecandidate.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent)
  """
  static {
    aliasFor(native "RTCPeerConnectionIceEvent")
    var prototype: RTCPeerConnectionIceEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: RTCPeerConnectionIceEventInit): RTCPeerConnectionIceEvent { aliasFor(__op_new__) }
    function new(type: String): RTCPeerConnectionIceEvent { aliasFor(__op_new__) }
  }
  const candidate: Union[RTCIceCandidate, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent/candidate)
  """ = aliasFor(__js_candidate)
}
export interface RTCRtpReceiver {
  """
  This WebRTC API interface manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver)
  """
  static {
    aliasFor(native "RTCRtpReceiver")
    var prototype: RTCRtpReceiver = aliasFor(__js_prototype)
    function new(): RTCRtpReceiver { aliasFor(__op_new__) }
    function getCapabilities(kind: String): Union[RTCRtpCapabilities, Null] {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getCapabilities_static)
      """
      aliasFor(__js_getCapabilities)
    }
  }
  const track: MediaStreamTrack """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/track)
  """ = aliasFor(__js_track)
  var transform: Union[RTCRtpTransform, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transform)
  """ = aliasFor(__js_transform)
  const transport: Union[RTCDtlsTransport, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transport)
  """ = aliasFor(__js_transport)
  function getContributingSources(): List[RTCRtpContributingSource] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getContributingSources)
    """
    aliasFor(__js_getContributingSources)
  }
  function getParameters(): RTCRtpReceiveParameters {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getParameters)
    """
    aliasFor(__js_getParameters)
  }
  function getStats(): Promise[RTCStatsReport] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getStats)
    """
    aliasFor(__js_getStats)
  }
  function getSynchronizationSources(): List[RTCRtpSynchronizationSource] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getSynchronizationSources)
    """
    aliasFor(__js_getSynchronizationSources)
  }
}
export interface RTCRtpScriptTransform {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpScriptTransform)
  """
  static {
    aliasFor(native "RTCRtpScriptTransform")
    var prototype: RTCRtpScriptTransform = aliasFor(__js_prototype)
    function new(worker: Worker, options: Any, transfer: List[Any]): RTCRtpScriptTransform { aliasFor(__op_new__) }
    function new(worker: Worker, options: Any): RTCRtpScriptTransform { aliasFor(__op_new__) }
    function new(worker: Worker): RTCRtpScriptTransform { aliasFor(__op_new__) }
  }
}
export interface RTCRtpSender {
  """
  Provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender)
  """
  static {
    aliasFor(native "RTCRtpSender")
    var prototype: RTCRtpSender = aliasFor(__js_prototype)
    function new(): RTCRtpSender { aliasFor(__op_new__) }
    function getCapabilities(kind: String): Union[RTCRtpCapabilities, Null] {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getCapabilities_static)
      """
      aliasFor(__js_getCapabilities)
    }
  }
  const dtmf: Union[RTCDTMFSender, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/dtmf)
  """ = aliasFor(__js_dtmf)
  const track: Union[MediaStreamTrack, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/track)
  """ = aliasFor(__js_track)
  var transform: Union[RTCRtpTransform, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transform)
  """ = aliasFor(__js_transform)
  const transport: Union[RTCDtlsTransport, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transport)
  """ = aliasFor(__js_transport)
  function getParameters(): RTCRtpSendParameters {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getParameters)
    """
    aliasFor(__js_getParameters)
  }
  function getStats(): Promise[RTCStatsReport] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getStats)
    """
    aliasFor(__js_getStats)
  }
  function replaceTrack(withTrack: Union[MediaStreamTrack, Null]): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/replaceTrack)
    """
    aliasFor(__js_replaceTrack)
  }
  function setParameters(parameters: RTCRtpSendParameters, setParameterOptions: RTCSetParameterOptions): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/setParameters)
    """
    aliasFor(__js_setParameters)
  }
  function setParameters(parameters: RTCRtpSendParameters): Promise[Any] { aliasFor(__js_setParameters) }
  function setStreams(streams: MediaStream, streams: MediaStream, streams: MediaStream): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/setStreams)
    """
    aliasFor(__js_setStreams)
  }
  function setStreams(streams: MediaStream, streams: MediaStream): Any { aliasFor(__js_setStreams) }
  function setStreams(streams: MediaStream): Any { aliasFor(__js_setStreams) }
  function setStreams(): Any { aliasFor(__js_setStreams) }
}
export interface RTCRtpTransceiver {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver)
  """
  static {
    aliasFor(native "RTCRtpTransceiver")
    var prototype: RTCRtpTransceiver = aliasFor(__js_prototype)
    function new(): RTCRtpTransceiver { aliasFor(__op_new__) }
  }
  const currentDirection: Union[RTCRtpTransceiverDirection, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/currentDirection)
  """ = aliasFor(__js_currentDirection)
  var direction: RTCRtpTransceiverDirection """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/direction)
  """ = aliasFor(__js_direction)
  const mid: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/mid)
  """ = aliasFor(__js_mid)
  const receiver: RTCRtpReceiver """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/receiver)
  """ = aliasFor(__js_receiver)
  const sender: RTCRtpSender """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/sender)
  """ = aliasFor(__js_sender)
  function setCodecPreferences(codecs: List[RTCRtpCodecCapability]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/setCodecPreferences)
    """
    aliasFor(__js_setCodecPreferences)
  }
  function stop(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/stop)
    """
    aliasFor(__js_stop)
  }
}
export interface RTCSctpTransportEventMap {
}
export interface RTCSctpTransport extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport)
  """
  static {
    aliasFor(native "RTCSctpTransport")
    var prototype: RTCSctpTransport = aliasFor(__js_prototype)
    function new(): RTCSctpTransport { aliasFor(__op_new__) }
  }
  const maxChannels: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxChannels)
  """ = aliasFor(__js_maxChannels)
  const maxMessageSize: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxMessageSize)
  """ = aliasFor(__js_maxMessageSize)
  var onstatechange: Union[function(ev: Event): Any, Null] = aliasFor(__js_onstatechange)
  const state: RTCSctpTransportState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/state)
  """ = aliasFor(__js_state)
  const transport: RTCDtlsTransport """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/transport)
  """ = aliasFor(__js_transport)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface RTCSessionDescription {
  """
  One end of a connection—or potential connection—and how it's configured. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription)
  """
  static {
    aliasFor(native "RTCSessionDescription")
    var prototype: RTCSessionDescription = aliasFor(__js_prototype)
    function new(descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription { aliasFor(__op_new__) }
  }
  const sdp: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/sdp)
  """ = aliasFor(__js_sdp)
  const type: RTCSdpType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/type)
  """ = aliasFor(__js_type)
  function toJSON(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface RTCStatsReport {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCStatsReport)
  """
  static {
    aliasFor(native "RTCStatsReport")
    var prototype: RTCStatsReport = aliasFor(__js_prototype)
    function new(): RTCStatsReport { aliasFor(__op_new__) }
  }
  function forEach(callbackfn: function(value: Any, key: String, parent: RTCStatsReport): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: Any, key: String, parent: RTCStatsReport): Any): Any { aliasFor(__js_forEach) }
}
export interface RTCTrackEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent)
  """
  static {
    aliasFor(native "RTCTrackEvent")
    var prototype: RTCTrackEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: RTCTrackEventInit): RTCTrackEvent { aliasFor(__op_new__) }
  }
  const receiver: RTCRtpReceiver """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/receiver)
  """ = aliasFor(__js_receiver)
  const streams: List[MediaStream] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/streams)
  """ = aliasFor(__js_streams)
  const track: MediaStreamTrack """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/track)
  """ = aliasFor(__js_track)
  const transceiver: RTCRtpTransceiver """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/transceiver)
  """ = aliasFor(__js_transceiver)
}
export interface RadioNodeList extends NodeList {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RadioNodeList)
  """
  static {
    aliasFor(native "RadioNodeList")
    var prototype: RadioNodeList = aliasFor(__js_prototype)
    function new(): RadioNodeList { aliasFor(__op_new__) }
  }
  var value: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RadioNodeList/value)
  """ = aliasFor(__js_value)
}
export interface Range extends AbstractRange {
  """
  A fragment of a document that can contain nodes and parts of text nodes.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range)
  """
  static {
    aliasFor(native "Range")
    var prototype: Range = aliasFor(__js_prototype)
    function new(): Range { aliasFor(__op_new__) }
    const START_TO_START: Number = aliasFor(__js_START_TO_START)
    const START_TO_END: Number = aliasFor(__js_START_TO_END)
    const END_TO_END: Number = aliasFor(__js_END_TO_END)
    const END_TO_START: Number = aliasFor(__js_END_TO_START)
  }
  const commonAncestorContainer: Node """
  Returns the node, furthest away from the document, that is an ancestor of both range's start node and end node.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/commonAncestorContainer)
  """ = aliasFor(__js_commonAncestorContainer)
  function cloneContents(): DocumentFragment {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/cloneContents)
    """
    aliasFor(__js_cloneContents)
  }
  function cloneRange(): Range {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/cloneRange)
    """
    aliasFor(__js_cloneRange)
  }
  function collapse(toStart: Bool): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/collapse)
    """
    aliasFor(__js_collapse)
  }
  function collapse(): Any { aliasFor(__js_collapse) }
  function compareBoundaryPoints(how: Number, sourceRange: Range): Number {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/compareBoundaryPoints)
    """
    aliasFor(__js_compareBoundaryPoints)
  }
  function comparePoint(node: Node, offset: Number): Number {
    """
    Returns −1 if the point is before the range, 0 if the point is in the range, and 1 if the point is after the range.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/comparePoint)
    """
    aliasFor(__js_comparePoint)
  }
  function createContextualFragment(fragment: String): DocumentFragment {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/createContextualFragment)
    """
    aliasFor(__js_createContextualFragment)
  }
  function deleteContents(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/deleteContents)
    """
    aliasFor(__js_deleteContents)
  }
  function detach(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/detach)
    """
    aliasFor(__js_detach)
  }
  function extractContents(): DocumentFragment {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/extractContents)
    """
    aliasFor(__js_extractContents)
  }
  function getBoundingClientRect(): DOMRect {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/getBoundingClientRect)
    """
    aliasFor(__js_getBoundingClientRect)
  }
  function getClientRects(): DOMRectList {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/getClientRects)
    """
    aliasFor(__js_getClientRects)
  }
  function insertNode(node: Node): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/insertNode)
    """
    aliasFor(__js_insertNode)
  }
  function intersectsNode(node: Node): Bool {
    """
    Returns whether range intersects node.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/intersectsNode)
    """
    aliasFor(__js_intersectsNode)
  }
  function isPointInRange(node: Node, offset: Number): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/isPointInRange)
    """
    aliasFor(__js_isPointInRange)
  }
  function selectNode(node: Node): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/selectNode)
    """
    aliasFor(__js_selectNode)
  }
  function selectNodeContents(node: Node): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/selectNodeContents)
    """
    aliasFor(__js_selectNodeContents)
  }
  function setEnd(node: Node, offset: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setEnd)
    """
    aliasFor(__js_setEnd)
  }
  function setEndAfter(node: Node): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setEndAfter)
    """
    aliasFor(__js_setEndAfter)
  }
  function setEndBefore(node: Node): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setEndBefore)
    """
    aliasFor(__js_setEndBefore)
  }
  function setStart(node: Node, offset: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setStart)
    """
    aliasFor(__js_setStart)
  }
  function setStartAfter(node: Node): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setStartAfter)
    """
    aliasFor(__js_setStartAfter)
  }
  function setStartBefore(node: Node): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setStartBefore)
    """
    aliasFor(__js_setStartBefore)
  }
  function surroundContents(newParent: Node): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/surroundContents)
    """
    aliasFor(__js_surroundContents)
  }
  function toString(): String { aliasFor(__js_toString) }
  const START_TO_START: Number = aliasFor(__js_START_TO_START)
  const START_TO_END: Number = aliasFor(__js_START_TO_END)
  const END_TO_END: Number = aliasFor(__js_END_TO_END)
  const END_TO_START: Number = aliasFor(__js_END_TO_START)
}
export interface ReadableByteStreamController {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController)
  """
  static {
    aliasFor(native "ReadableByteStreamController")
    var prototype: ReadableByteStreamController = aliasFor(__js_prototype)
    function new(): ReadableByteStreamController { aliasFor(__op_new__) }
  }
  const byobRequest: Union[ReadableStreamBYOBRequest, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/byobRequest)
  """ = aliasFor(__js_byobRequest)
  const desiredSize: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/desiredSize)
  """ = aliasFor(__js_desiredSize)
  function close(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/close)
    """
    aliasFor(__js_close)
  }
  function enqueue(chunk: ArrayBufferView): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/enqueue)
    """
    aliasFor(__js_enqueue)
  }
  function error(e: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/error)
    """
    aliasFor(__js_error)
  }
  function error(): Any { aliasFor(__js_error) }
}
export interface ReadableStream {
  static {
    aliasFor(native "ReadableStream")
    var prototype: ReadableStream = aliasFor(__js_prototype)
    function new(underlyingSource: UnderlyingByteSource, strategy: Any): Any { aliasFor(__op_new__) }
    function new(underlyingSource: UnderlyingByteSource): Any { aliasFor(__op_new__) }
  }
}
export interface ReadableStreamBYOBReader extends ReadableStreamGenericReader {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader)
  """
  static {
    aliasFor(native "ReadableStreamBYOBReader")
    var prototype: ReadableStreamBYOBReader = aliasFor(__js_prototype)
    function new(stream: ReadableStream): ReadableStreamBYOBReader { aliasFor(__op_new__) }
  }
  function releaseLock(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/releaseLock)
    """
    aliasFor(__js_releaseLock)
  }
}
export interface ReadableStreamBYOBRequest {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest)
  """
  static {
    aliasFor(native "ReadableStreamBYOBRequest")
    var prototype: ReadableStreamBYOBRequest = aliasFor(__js_prototype)
    function new(): ReadableStreamBYOBRequest { aliasFor(__op_new__) }
  }
  const view: Union[ArrayBufferView, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/view)
  """ = aliasFor(__js_view)
  function respond(bytesWritten: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respond)
    """
    aliasFor(__js_respond)
  }
  function respondWithNewView(view: ArrayBufferView): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respondWithNewView)
    """
    aliasFor(__js_respondWithNewView)
  }
}
export interface ReadableStreamDefaultController {
  static {
    aliasFor(native "ReadableStreamDefaultController")
    var prototype: ReadableStreamDefaultController = aliasFor(__js_prototype)
    function new(): ReadableStreamDefaultController { aliasFor(__op_new__) }
  }
}
export interface ReadableStreamDefaultReader {
  static {
    aliasFor(native "ReadableStreamDefaultReader")
    var prototype: ReadableStreamDefaultReader = aliasFor(__js_prototype)
  }
}
export interface ReadableStreamGenericReader {
  const closed: Promise[Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/closed)
  """ = aliasFor(__js_closed)
  function cancel(reason: Any): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/cancel)
    """
    aliasFor(__js_cancel)
  }
  function cancel(): Promise[Any] { aliasFor(__js_cancel) }
}
export interface RemotePlaybackEventMap {
}
export interface RemotePlayback extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback)
  """
  static {
    aliasFor(native "RemotePlayback")
    var prototype: RemotePlayback = aliasFor(__js_prototype)
    function new(): RemotePlayback { aliasFor(__op_new__) }
  }
  var onconnect: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connect_event)
  """ = aliasFor(__js_onconnect)
  var onconnecting: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connecting_event)
  """ = aliasFor(__js_onconnecting)
  var ondisconnect: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/disconnect_event)
  """ = aliasFor(__js_ondisconnect)
  const state: RemotePlaybackState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/state)
  """ = aliasFor(__js_state)
  function cancelWatchAvailability(id: Number): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/cancelWatchAvailability)
    """
    aliasFor(__js_cancelWatchAvailability)
  }
  function cancelWatchAvailability(): Promise[Any] { aliasFor(__js_cancelWatchAvailability) }
  function prompt(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/prompt)
    """
    aliasFor(__js_prompt)
  }
  function watchAvailability(callback: RemotePlaybackAvailabilityCallback): Promise[Number] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/watchAvailability)
    """
    aliasFor(__js_watchAvailability)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface Report {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report)
  """
  static {
    aliasFor(native "Report")
    var prototype: Report = aliasFor(__js_prototype)
    function new(): Report { aliasFor(__op_new__) }
  }
  const body: Union[ReportBody, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/body)
  """ = aliasFor(__js_body)
  const type: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/type)
  """ = aliasFor(__js_type)
  const url: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/url)
  """ = aliasFor(__js_url)
  function toJSON(): Any { aliasFor(__js_toJSON) }
}
export interface ReportBody {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportBody)
  """
  static {
    aliasFor(native "ReportBody")
    var prototype: ReportBody = aliasFor(__js_prototype)
    function new(): ReportBody { aliasFor(__op_new__) }
  }
  function toJSON(): Any { aliasFor(__js_toJSON) }
}
export interface ReportingObserver {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver)
  """
  static {
    aliasFor(native "ReportingObserver")
    var prototype: ReportingObserver = aliasFor(__js_prototype)
    function new(callback: ReportingObserverCallback, options: ReportingObserverOptions): ReportingObserver { aliasFor(__op_new__) }
    function new(callback: ReportingObserverCallback): ReportingObserver { aliasFor(__op_new__) }
  }
  function disconnect(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver/disconnect)
    """
    aliasFor(__js_disconnect)
  }
  function observe(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver/observe)
    """
    aliasFor(__js_observe)
  }
  function takeRecords(): ReportList {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver/takeRecords)
    """
    aliasFor(__js_takeRecords)
  }
}
export interface Request extends Body {
  """
  This Fetch API interface represents a resource request.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)
  """
  static {
    aliasFor(native "Request")
    var prototype: Request = aliasFor(__js_prototype)
    function new(input: Union[RequestInfo, URL], init: RequestInit): Request { aliasFor(__op_new__) }
    function new(input: Union[RequestInfo, URL]): Request { aliasFor(__op_new__) }
  }
  const cache: RequestCache """
  Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)
  """ = aliasFor(__js_cache)
  const credentials: RequestCredentials """
  Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)
  """ = aliasFor(__js_credentials)
  const destination: RequestDestination """
  Returns the kind of resource requested by request, e.g., "document" or "script".
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)
  """ = aliasFor(__js_destination)
  const headers: Headers """
  Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the "Host" header.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)
  """ = aliasFor(__js_headers)
  const integrity: String """
  Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)
  """ = aliasFor(__js_integrity)
  const keepalive: Bool """
  Returns a boolean indicating whether or not request can outlive the global in which it was created.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)
  """ = aliasFor(__js_keepalive)
  const method: String """
  Returns request's HTTP method, which is "GET" by default.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)
  """ = aliasFor(__js_method)
  const mode: RequestMode """
  Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)
  """ = aliasFor(__js_mode)
  const redirect: RequestRedirect """
  Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)
  """ = aliasFor(__js_redirect)
  const referrer: String """
  Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and "about:client" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)
  """ = aliasFor(__js_referrer)
  const referrerPolicy: ReferrerPolicy """
  Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)
  """ = aliasFor(__js_referrerPolicy)
  const signal: AbortSignal """
  Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)
  """ = aliasFor(__js_signal)
  const url: String """
  Returns the URL of request as a string.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)
  """ = aliasFor(__js_url)
  function clone(): Request {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/clone)
    """
    aliasFor(__js_clone)
  }
}
export interface ResizeObserver {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver)
  """
  static {
    aliasFor(native "ResizeObserver")
    var prototype: ResizeObserver = aliasFor(__js_prototype)
    function new(callback: ResizeObserverCallback): ResizeObserver { aliasFor(__op_new__) }
  }
  function disconnect(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver/disconnect)
    """
    aliasFor(__js_disconnect)
  }
  function observe(target: Element, options: ResizeObserverOptions): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver/observe)
    """
    aliasFor(__js_observe)
  }
  function observe(target: Element): Any { aliasFor(__js_observe) }
  function unobserve(target: Element): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver/unobserve)
    """
    aliasFor(__js_unobserve)
  }
}
export interface ResizeObserverEntry {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry)
  """
  static {
    aliasFor(native "ResizeObserverEntry")
    var prototype: ResizeObserverEntry = aliasFor(__js_prototype)
    function new(): ResizeObserverEntry { aliasFor(__op_new__) }
  }
  const borderBoxSize: List[ResizeObserverSize] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/borderBoxSize)
  """ = aliasFor(__js_borderBoxSize)
  const contentBoxSize: List[ResizeObserverSize] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentBoxSize)
  """ = aliasFor(__js_contentBoxSize)
  const contentRect: DOMRectReadOnly """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentRect)
  """ = aliasFor(__js_contentRect)
  const devicePixelContentBoxSize: List[ResizeObserverSize] = aliasFor(__js_devicePixelContentBoxSize)
  const target: Element """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/target)
  """ = aliasFor(__js_target)
}
export interface ResizeObserverSize {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize)
  """
  static {
    aliasFor(native "ResizeObserverSize")
    var prototype: ResizeObserverSize = aliasFor(__js_prototype)
    function new(): ResizeObserverSize { aliasFor(__op_new__) }
  }
  const blockSize: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/blockSize)
  """ = aliasFor(__js_blockSize)
  const inlineSize: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/inlineSize)
  """ = aliasFor(__js_inlineSize)
}
export interface Response extends Body {
  """
  This Fetch API interface represents the response to a request.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response)
  """
  static {
    aliasFor(native "Response")
    var prototype: Response = aliasFor(__js_prototype)
    function new(body: Union[BodyInit, Null], init: ResponseInit): Response { aliasFor(__op_new__) }
    function new(body: Union[BodyInit, Null]): Response { aliasFor(__op_new__) }
    function new(): Response { aliasFor(__op_new__) }
    function error(): Response {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/error_static)
      """
      aliasFor(__js_error)
    }
    function json(data: Any, init: ResponseInit): Response {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/json_static)
      """
      aliasFor(__js_json)
    }
    function json(data: Any): Response { aliasFor(__js_json) }
    function redirect(url: Union[String, URL], status: Number): Response {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/redirect_static)
      """
      aliasFor(__js_redirect)
    }
    function redirect(url: Union[String, URL]): Response { aliasFor(__js_redirect) }
  }
  const headers: Headers """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/headers)
  """ = aliasFor(__js_headers)
  const ok: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/ok)
  """ = aliasFor(__js_ok)
  const redirected: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/redirected)
  """ = aliasFor(__js_redirected)
  const status: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/status)
  """ = aliasFor(__js_status)
  const statusText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/statusText)
  """ = aliasFor(__js_statusText)
  const type: ResponseType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/type)
  """ = aliasFor(__js_type)
  const url: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/url)
  """ = aliasFor(__js_url)
  function clone(): Response {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/clone)
    """
    aliasFor(__js_clone)
  }
}
export interface SVGAElement extends SVGGraphicsElement, SVGURIReference {
  """
  Provides access to the properties of <a> element, as well as methods to manipulate them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement)
  """
  static {
    aliasFor(native "SVGAElement")
    var prototype: SVGAElement = aliasFor(__js_prototype)
    function new(): SVGAElement { aliasFor(__op_new__) }
  }
  var rel: String = aliasFor(__js_rel)
  const relList: DOMTokenList = aliasFor(__js_relList)
  const target: SVGAnimatedString """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement/target)
  """ = aliasFor(__js_target)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGAngle {
  """
  Used to represent a value that can be an <angle> or <number> value. An SVGAngle reflected through the animVal attribute is always read only.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle)
  """
  static {
    aliasFor(native "SVGAngle")
    var prototype: SVGAngle = aliasFor(__js_prototype)
    function new(): SVGAngle { aliasFor(__op_new__) }
    const SVG_ANGLETYPE_UNKNOWN: Number = aliasFor(__js_SVG_ANGLETYPE_UNKNOWN)
    const SVG_ANGLETYPE_UNSPECIFIED: Number = aliasFor(__js_SVG_ANGLETYPE_UNSPECIFIED)
    const SVG_ANGLETYPE_DEG: Number = aliasFor(__js_SVG_ANGLETYPE_DEG)
    const SVG_ANGLETYPE_RAD: Number = aliasFor(__js_SVG_ANGLETYPE_RAD)
    const SVG_ANGLETYPE_GRAD: Number = aliasFor(__js_SVG_ANGLETYPE_GRAD)
  }
  const unitType: Number = aliasFor(__js_unitType)
  var value: Number = aliasFor(__js_value)
  var valueAsString: String = aliasFor(__js_valueAsString)
  var valueInSpecifiedUnits: Number = aliasFor(__js_valueInSpecifiedUnits)
  function convertToSpecifiedUnits(unitType: Number): Any { aliasFor(__js_convertToSpecifiedUnits) }
  function newValueSpecifiedUnits(unitType: Number, valueInSpecifiedUnits: Number): Any { aliasFor(__js_newValueSpecifiedUnits) }
  const SVG_ANGLETYPE_UNKNOWN: Number = aliasFor(__js_SVG_ANGLETYPE_UNKNOWN)
  const SVG_ANGLETYPE_UNSPECIFIED: Number = aliasFor(__js_SVG_ANGLETYPE_UNSPECIFIED)
  const SVG_ANGLETYPE_DEG: Number = aliasFor(__js_SVG_ANGLETYPE_DEG)
  const SVG_ANGLETYPE_RAD: Number = aliasFor(__js_SVG_ANGLETYPE_RAD)
  const SVG_ANGLETYPE_GRAD: Number = aliasFor(__js_SVG_ANGLETYPE_GRAD)
}
export interface SVGAnimateElement extends SVGAnimationElement {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateElement)
  """
  static {
    aliasFor(native "SVGAnimateElement")
    var prototype: SVGAnimateElement = aliasFor(__js_prototype)
    function new(): SVGAnimateElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGAnimateMotionElement extends SVGAnimationElement {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateMotionElement)
  """
  static {
    aliasFor(native "SVGAnimateMotionElement")
    var prototype: SVGAnimateMotionElement = aliasFor(__js_prototype)
    function new(): SVGAnimateMotionElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGAnimateTransformElement extends SVGAnimationElement {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateTransformElement)
  """
  static {
    aliasFor(native "SVGAnimateTransformElement")
    var prototype: SVGAnimateTransformElement = aliasFor(__js_prototype)
    function new(): SVGAnimateTransformElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGAnimatedAngle {
  """
  Used for attributes of basic type <angle> which can be animated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle)
  """
  static {
    aliasFor(native "SVGAnimatedAngle")
    var prototype: SVGAnimatedAngle = aliasFor(__js_prototype)
    function new(): SVGAnimatedAngle { aliasFor(__op_new__) }
  }
  const animVal: SVGAngle = aliasFor(__js_animVal)
  const baseVal: SVGAngle = aliasFor(__js_baseVal)
}
export interface SVGAnimatedBoolean {
  """
  Used for attributes of type boolean which can be animated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean)
  """
  static {
    aliasFor(native "SVGAnimatedBoolean")
    var prototype: SVGAnimatedBoolean = aliasFor(__js_prototype)
    function new(): SVGAnimatedBoolean { aliasFor(__op_new__) }
  }
  const animVal: Bool = aliasFor(__js_animVal)
  var baseVal: Bool = aliasFor(__js_baseVal)
}
export interface SVGAnimatedEnumeration {
  """
  Used for attributes whose value must be a constant from a particular enumeration and which can be animated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration)
  """
  static {
    aliasFor(native "SVGAnimatedEnumeration")
    var prototype: SVGAnimatedEnumeration = aliasFor(__js_prototype)
    function new(): SVGAnimatedEnumeration { aliasFor(__op_new__) }
  }
  const animVal: Number = aliasFor(__js_animVal)
  var baseVal: Number = aliasFor(__js_baseVal)
}
export interface SVGAnimatedInteger {
  """
  Used for attributes of basic type <integer> which can be animated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger)
  """
  static {
    aliasFor(native "SVGAnimatedInteger")
    var prototype: SVGAnimatedInteger = aliasFor(__js_prototype)
    function new(): SVGAnimatedInteger { aliasFor(__op_new__) }
  }
  const animVal: Number = aliasFor(__js_animVal)
  var baseVal: Number = aliasFor(__js_baseVal)
}
export interface SVGAnimatedLength {
  """
  Used for attributes of basic type <length> which can be animated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength)
  """
  static {
    aliasFor(native "SVGAnimatedLength")
    var prototype: SVGAnimatedLength = aliasFor(__js_prototype)
    function new(): SVGAnimatedLength { aliasFor(__op_new__) }
  }
  const animVal: SVGLength = aliasFor(__js_animVal)
  const baseVal: SVGLength = aliasFor(__js_baseVal)
}
export interface SVGAnimatedLengthList {
  """
  Used for attributes of type SVGLengthList which can be animated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList)
  """
  static {
    aliasFor(native "SVGAnimatedLengthList")
    var prototype: SVGAnimatedLengthList = aliasFor(__js_prototype)
    function new(): SVGAnimatedLengthList { aliasFor(__op_new__) }
  }
  const animVal: SVGLengthList = aliasFor(__js_animVal)
  const baseVal: SVGLengthList = aliasFor(__js_baseVal)
}
export interface SVGAnimatedNumber {
  """
  Used for attributes of basic type <Number> which can be animated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber)
  """
  static {
    aliasFor(native "SVGAnimatedNumber")
    var prototype: SVGAnimatedNumber = aliasFor(__js_prototype)
    function new(): SVGAnimatedNumber { aliasFor(__op_new__) }
  }
  const animVal: Number = aliasFor(__js_animVal)
  var baseVal: Number = aliasFor(__js_baseVal)
}
export interface SVGAnimatedNumberList {
  """
  The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList)
  """
  static {
    aliasFor(native "SVGAnimatedNumberList")
    var prototype: SVGAnimatedNumberList = aliasFor(__js_prototype)
    function new(): SVGAnimatedNumberList { aliasFor(__op_new__) }
  }
  const animVal: SVGNumberList = aliasFor(__js_animVal)
  const baseVal: SVGNumberList = aliasFor(__js_baseVal)
}
export interface SVGAnimatedPoints {
  const animatedPoints: SVGPointList = aliasFor(__js_animatedPoints)
  const points: SVGPointList = aliasFor(__js_points)
}
export interface SVGAnimatedPreserveAspectRatio {
  """
  Used for attributes of type SVGPreserveAspectRatio which can be animated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio)
  """
  static {
    aliasFor(native "SVGAnimatedPreserveAspectRatio")
    var prototype: SVGAnimatedPreserveAspectRatio = aliasFor(__js_prototype)
    function new(): SVGAnimatedPreserveAspectRatio { aliasFor(__op_new__) }
  }
  const animVal: SVGPreserveAspectRatio = aliasFor(__js_animVal)
  const baseVal: SVGPreserveAspectRatio = aliasFor(__js_baseVal)
}
export interface SVGAnimatedRect {
  """
  Used for attributes of basic SVGRect which can be animated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect)
  """
  static {
    aliasFor(native "SVGAnimatedRect")
    var prototype: SVGAnimatedRect = aliasFor(__js_prototype)
    function new(): SVGAnimatedRect { aliasFor(__op_new__) }
  }
  const animVal: DOMRectReadOnly = aliasFor(__js_animVal)
  const baseVal: DOMRect = aliasFor(__js_baseVal)
}
export interface SVGAnimatedString {
  """
  The SVGAnimatedString interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString)
  """
  static {
    aliasFor(native "SVGAnimatedString")
    var prototype: SVGAnimatedString = aliasFor(__js_prototype)
    function new(): SVGAnimatedString { aliasFor(__op_new__) }
  }
  const animVal: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/animVal)
  """ = aliasFor(__js_animVal)
  var baseVal: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/baseVal)
  """ = aliasFor(__js_baseVal)
}
export interface SVGAnimatedTransformList {
  """
  Used for attributes which take a list of numbers and which can be animated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList)
  """
  static {
    aliasFor(native "SVGAnimatedTransformList")
    var prototype: SVGAnimatedTransformList = aliasFor(__js_prototype)
    function new(): SVGAnimatedTransformList { aliasFor(__op_new__) }
  }
  const animVal: SVGTransformList = aliasFor(__js_animVal)
  const baseVal: SVGTransformList = aliasFor(__js_baseVal)
}
export interface SVGAnimationElement extends SVGElement, SVGTests {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement)
  """
  static {
    aliasFor(native "SVGAnimationElement")
    var prototype: SVGAnimationElement = aliasFor(__js_prototype)
    function new(): SVGAnimationElement { aliasFor(__op_new__) }
  }
  const targetElement: Union[SVGElement, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/targetElement)
  """ = aliasFor(__js_targetElement)
  function beginElement(): Any { aliasFor(__js_beginElement) }
  function beginElementAt(offset: Number): Any { aliasFor(__js_beginElementAt) }
  function endElement(): Any { aliasFor(__js_endElement) }
  function endElementAt(offset: Number): Any { aliasFor(__js_endElementAt) }
  function getCurrentTime(): Number { aliasFor(__js_getCurrentTime) }
  function getSimpleDuration(): Number { aliasFor(__js_getSimpleDuration) }
  function getStartTime(): Number { aliasFor(__js_getStartTime) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGCircleElement extends SVGGeometryElement {
  """
  An interface for the <circle> element. The circle element is defined by the cx and cy attributes that denote the coordinates of the centre of the circle.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement)
  """
  static {
    aliasFor(native "SVGCircleElement")
    var prototype: SVGCircleElement = aliasFor(__js_prototype)
    function new(): SVGCircleElement { aliasFor(__op_new__) }
  }
  const cx: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cx)
  """ = aliasFor(__js_cx)
  const cy: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cy)
  """ = aliasFor(__js_cy)
  const r: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/r)
  """ = aliasFor(__js_r)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGClipPathElement extends SVGElement {
  """
  Provides access to the properties of <clipPath> elements, as well as methods to manipulate them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement)
  """
  static {
    aliasFor(native "SVGClipPathElement")
    var prototype: SVGClipPathElement = aliasFor(__js_prototype)
    function new(): SVGClipPathElement { aliasFor(__op_new__) }
  }
  const clipPathUnits: SVGAnimatedEnumeration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/clipPathUnits)
  """ = aliasFor(__js_clipPathUnits)
  const transform: SVGAnimatedTransformList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/transform)
  """ = aliasFor(__js_transform)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGComponentTransferFunctionElement extends SVGElement {
  """
  A base interface used by the component transfer function interfaces.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement)
  """
  static {
    aliasFor(native "SVGComponentTransferFunctionElement")
    var prototype: SVGComponentTransferFunctionElement = aliasFor(__js_prototype)
    function new(): SVGComponentTransferFunctionElement { aliasFor(__op_new__) }
    const SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN)
    const SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY)
    const SVG_FECOMPONENTTRANSFER_TYPE_TABLE: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_TABLE)
    const SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE)
    const SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_LINEAR)
    const SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_GAMMA)
  }
  const amplitude: SVGAnimatedNumber = aliasFor(__js_amplitude)
  const exponent: SVGAnimatedNumber = aliasFor(__js_exponent)
  const intercept: SVGAnimatedNumber = aliasFor(__js_intercept)
  const offset: SVGAnimatedNumber = aliasFor(__js_offset)
  const slope: SVGAnimatedNumber = aliasFor(__js_slope)
  const tableValues: SVGAnimatedNumberList = aliasFor(__js_tableValues)
  const type: SVGAnimatedEnumeration = aliasFor(__js_type)
  const SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN)
  const SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY)
  const SVG_FECOMPONENTTRANSFER_TYPE_TABLE: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_TABLE)
  const SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE)
  const SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_LINEAR)
  const SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: Number = aliasFor(__js_SVG_FECOMPONENTTRANSFER_TYPE_GAMMA)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGDefsElement extends SVGGraphicsElement {
  """
  Corresponds to the <defs> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGDefsElement)
  """
  static {
    aliasFor(native "SVGDefsElement")
    var prototype: SVGDefsElement = aliasFor(__js_prototype)
    function new(): SVGDefsElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGDescElement extends SVGElement {
  """
  Corresponds to the <desc> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGDescElement)
  """
  static {
    aliasFor(native "SVGDescElement")
    var prototype: SVGDescElement = aliasFor(__js_prototype)
    function new(): SVGDescElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGElementEventMap extends ElementEventMap, GlobalEventHandlersEventMap {
}
export interface SVGElement extends Element, ElementCSSInlineStyle, GlobalEventHandlers, HTMLOrSVGElement {
  """
  All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement)
  """
  static {
    aliasFor(native "SVGElement")
    var prototype: SVGElement = aliasFor(__js_prototype)
    function new(): SVGElement { aliasFor(__op_new__) }
  }
  const ownerSVGElement: Union[SVGSVGElement, Null] = aliasFor(__js_ownerSVGElement)
  const viewportElement: Union[SVGElement, Null] = aliasFor(__js_viewportElement)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGEllipseElement extends SVGGeometryElement {
  """
  Provides access to the properties of <ellipse> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement)
  """
  static {
    aliasFor(native "SVGEllipseElement")
    var prototype: SVGEllipseElement = aliasFor(__js_prototype)
    function new(): SVGEllipseElement { aliasFor(__op_new__) }
  }
  const cx: SVGAnimatedLength = aliasFor(__js_cx)
  const cy: SVGAnimatedLength = aliasFor(__js_cy)
  const rx: SVGAnimatedLength = aliasFor(__js_rx)
  const ry: SVGAnimatedLength = aliasFor(__js_ry)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEBlendElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feBlend> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement)
  """
  static {
    aliasFor(native "SVGFEBlendElement")
    var prototype: SVGFEBlendElement = aliasFor(__js_prototype)
    function new(): SVGFEBlendElement { aliasFor(__op_new__) }
    const SVG_FEBLEND_MODE_UNKNOWN: Number = aliasFor(__js_SVG_FEBLEND_MODE_UNKNOWN)
    const SVG_FEBLEND_MODE_NORMAL: Number = aliasFor(__js_SVG_FEBLEND_MODE_NORMAL)
    const SVG_FEBLEND_MODE_MULTIPLY: Number = aliasFor(__js_SVG_FEBLEND_MODE_MULTIPLY)
    const SVG_FEBLEND_MODE_SCREEN: Number = aliasFor(__js_SVG_FEBLEND_MODE_SCREEN)
    const SVG_FEBLEND_MODE_DARKEN: Number = aliasFor(__js_SVG_FEBLEND_MODE_DARKEN)
    const SVG_FEBLEND_MODE_LIGHTEN: Number = aliasFor(__js_SVG_FEBLEND_MODE_LIGHTEN)
    const SVG_FEBLEND_MODE_OVERLAY: Number = aliasFor(__js_SVG_FEBLEND_MODE_OVERLAY)
    const SVG_FEBLEND_MODE_COLOR_DODGE: Number = aliasFor(__js_SVG_FEBLEND_MODE_COLOR_DODGE)
    const SVG_FEBLEND_MODE_COLOR_BURN: Number = aliasFor(__js_SVG_FEBLEND_MODE_COLOR_BURN)
    const SVG_FEBLEND_MODE_HARD_LIGHT: Number = aliasFor(__js_SVG_FEBLEND_MODE_HARD_LIGHT)
    const SVG_FEBLEND_MODE_SOFT_LIGHT: Number = aliasFor(__js_SVG_FEBLEND_MODE_SOFT_LIGHT)
    const SVG_FEBLEND_MODE_DIFFERENCE: Number = aliasFor(__js_SVG_FEBLEND_MODE_DIFFERENCE)
    const SVG_FEBLEND_MODE_EXCLUSION: Number = aliasFor(__js_SVG_FEBLEND_MODE_EXCLUSION)
    const SVG_FEBLEND_MODE_HUE: Number = aliasFor(__js_SVG_FEBLEND_MODE_HUE)
    const SVG_FEBLEND_MODE_SATURATION: Number = aliasFor(__js_SVG_FEBLEND_MODE_SATURATION)
    const SVG_FEBLEND_MODE_COLOR: Number = aliasFor(__js_SVG_FEBLEND_MODE_COLOR)
    const SVG_FEBLEND_MODE_LUMINOSITY: Number = aliasFor(__js_SVG_FEBLEND_MODE_LUMINOSITY)
  }
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  const in2: SVGAnimatedString = aliasFor(__js_in2)
  const mode: SVGAnimatedEnumeration = aliasFor(__js_mode)
  const SVG_FEBLEND_MODE_UNKNOWN: Number = aliasFor(__js_SVG_FEBLEND_MODE_UNKNOWN)
  const SVG_FEBLEND_MODE_NORMAL: Number = aliasFor(__js_SVG_FEBLEND_MODE_NORMAL)
  const SVG_FEBLEND_MODE_MULTIPLY: Number = aliasFor(__js_SVG_FEBLEND_MODE_MULTIPLY)
  const SVG_FEBLEND_MODE_SCREEN: Number = aliasFor(__js_SVG_FEBLEND_MODE_SCREEN)
  const SVG_FEBLEND_MODE_DARKEN: Number = aliasFor(__js_SVG_FEBLEND_MODE_DARKEN)
  const SVG_FEBLEND_MODE_LIGHTEN: Number = aliasFor(__js_SVG_FEBLEND_MODE_LIGHTEN)
  const SVG_FEBLEND_MODE_OVERLAY: Number = aliasFor(__js_SVG_FEBLEND_MODE_OVERLAY)
  const SVG_FEBLEND_MODE_COLOR_DODGE: Number = aliasFor(__js_SVG_FEBLEND_MODE_COLOR_DODGE)
  const SVG_FEBLEND_MODE_COLOR_BURN: Number = aliasFor(__js_SVG_FEBLEND_MODE_COLOR_BURN)
  const SVG_FEBLEND_MODE_HARD_LIGHT: Number = aliasFor(__js_SVG_FEBLEND_MODE_HARD_LIGHT)
  const SVG_FEBLEND_MODE_SOFT_LIGHT: Number = aliasFor(__js_SVG_FEBLEND_MODE_SOFT_LIGHT)
  const SVG_FEBLEND_MODE_DIFFERENCE: Number = aliasFor(__js_SVG_FEBLEND_MODE_DIFFERENCE)
  const SVG_FEBLEND_MODE_EXCLUSION: Number = aliasFor(__js_SVG_FEBLEND_MODE_EXCLUSION)
  const SVG_FEBLEND_MODE_HUE: Number = aliasFor(__js_SVG_FEBLEND_MODE_HUE)
  const SVG_FEBLEND_MODE_SATURATION: Number = aliasFor(__js_SVG_FEBLEND_MODE_SATURATION)
  const SVG_FEBLEND_MODE_COLOR: Number = aliasFor(__js_SVG_FEBLEND_MODE_COLOR)
  const SVG_FEBLEND_MODE_LUMINOSITY: Number = aliasFor(__js_SVG_FEBLEND_MODE_LUMINOSITY)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEColorMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feColorMatrix> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement)
  """
  static {
    aliasFor(native "SVGFEColorMatrixElement")
    var prototype: SVGFEColorMatrixElement = aliasFor(__js_prototype)
    function new(): SVGFEColorMatrixElement { aliasFor(__op_new__) }
    const SVG_FECOLORMATRIX_TYPE_UNKNOWN: Number = aliasFor(__js_SVG_FECOLORMATRIX_TYPE_UNKNOWN)
    const SVG_FECOLORMATRIX_TYPE_MATRIX: Number = aliasFor(__js_SVG_FECOLORMATRIX_TYPE_MATRIX)
    const SVG_FECOLORMATRIX_TYPE_SATURATE: Number = aliasFor(__js_SVG_FECOLORMATRIX_TYPE_SATURATE)
    const SVG_FECOLORMATRIX_TYPE_HUEROTATE: Number = aliasFor(__js_SVG_FECOLORMATRIX_TYPE_HUEROTATE)
    const SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: Number = aliasFor(__js_SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA)
  }
  const in1: SVGAnimatedString """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/in1)
  """ = aliasFor(__js_in1)
  const type: SVGAnimatedEnumeration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/type)
  """ = aliasFor(__js_type)
  const values: SVGAnimatedNumberList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/values)
  """ = aliasFor(__js_values)
  const SVG_FECOLORMATRIX_TYPE_UNKNOWN: Number = aliasFor(__js_SVG_FECOLORMATRIX_TYPE_UNKNOWN)
  const SVG_FECOLORMATRIX_TYPE_MATRIX: Number = aliasFor(__js_SVG_FECOLORMATRIX_TYPE_MATRIX)
  const SVG_FECOLORMATRIX_TYPE_SATURATE: Number = aliasFor(__js_SVG_FECOLORMATRIX_TYPE_SATURATE)
  const SVG_FECOLORMATRIX_TYPE_HUEROTATE: Number = aliasFor(__js_SVG_FECOLORMATRIX_TYPE_HUEROTATE)
  const SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: Number = aliasFor(__js_SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEComponentTransferElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feComponentTransfer> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEComponentTransferElement)
  """
  static {
    aliasFor(native "SVGFEComponentTransferElement")
    var prototype: SVGFEComponentTransferElement = aliasFor(__js_prototype)
    function new(): SVGFEComponentTransferElement { aliasFor(__op_new__) }
  }
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFECompositeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feComposite> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement)
  """
  static {
    aliasFor(native "SVGFECompositeElement")
    var prototype: SVGFECompositeElement = aliasFor(__js_prototype)
    function new(): SVGFECompositeElement { aliasFor(__op_new__) }
    const SVG_FECOMPOSITE_OPERATOR_UNKNOWN: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_UNKNOWN)
    const SVG_FECOMPOSITE_OPERATOR_OVER: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_OVER)
    const SVG_FECOMPOSITE_OPERATOR_IN: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_IN)
    const SVG_FECOMPOSITE_OPERATOR_OUT: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_OUT)
    const SVG_FECOMPOSITE_OPERATOR_ATOP: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_ATOP)
    const SVG_FECOMPOSITE_OPERATOR_XOR: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_XOR)
    const SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_ARITHMETIC)
  }
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  const in2: SVGAnimatedString = aliasFor(__js_in2)
  const k1: SVGAnimatedNumber = aliasFor(__js_k1)
  const k2: SVGAnimatedNumber = aliasFor(__js_k2)
  const k3: SVGAnimatedNumber = aliasFor(__js_k3)
  const k4: SVGAnimatedNumber = aliasFor(__js_k4)
  const operator: SVGAnimatedEnumeration = aliasFor(__js_operator)
  const SVG_FECOMPOSITE_OPERATOR_UNKNOWN: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_UNKNOWN)
  const SVG_FECOMPOSITE_OPERATOR_OVER: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_OVER)
  const SVG_FECOMPOSITE_OPERATOR_IN: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_IN)
  const SVG_FECOMPOSITE_OPERATOR_OUT: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_OUT)
  const SVG_FECOMPOSITE_OPERATOR_ATOP: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_ATOP)
  const SVG_FECOMPOSITE_OPERATOR_XOR: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_XOR)
  const SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: Number = aliasFor(__js_SVG_FECOMPOSITE_OPERATOR_ARITHMETIC)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEConvolveMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feConvolveMatrix> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement)
  """
  static {
    aliasFor(native "SVGFEConvolveMatrixElement")
    var prototype: SVGFEConvolveMatrixElement = aliasFor(__js_prototype)
    function new(): SVGFEConvolveMatrixElement { aliasFor(__op_new__) }
    const SVG_EDGEMODE_UNKNOWN: Number = aliasFor(__js_SVG_EDGEMODE_UNKNOWN)
    const SVG_EDGEMODE_DUPLICATE: Number = aliasFor(__js_SVG_EDGEMODE_DUPLICATE)
    const SVG_EDGEMODE_WRAP: Number = aliasFor(__js_SVG_EDGEMODE_WRAP)
    const SVG_EDGEMODE_NONE: Number = aliasFor(__js_SVG_EDGEMODE_NONE)
  }
  const bias: SVGAnimatedNumber = aliasFor(__js_bias)
  const divisor: SVGAnimatedNumber = aliasFor(__js_divisor)
  const edgeMode: SVGAnimatedEnumeration = aliasFor(__js_edgeMode)
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  const kernelMatrix: SVGAnimatedNumberList = aliasFor(__js_kernelMatrix)
  const kernelUnitLengthX: SVGAnimatedNumber = aliasFor(__js_kernelUnitLengthX)
  const kernelUnitLengthY: SVGAnimatedNumber = aliasFor(__js_kernelUnitLengthY)
  const orderX: SVGAnimatedInteger = aliasFor(__js_orderX)
  const orderY: SVGAnimatedInteger = aliasFor(__js_orderY)
  const preserveAlpha: SVGAnimatedBoolean = aliasFor(__js_preserveAlpha)
  const targetX: SVGAnimatedInteger = aliasFor(__js_targetX)
  const targetY: SVGAnimatedInteger = aliasFor(__js_targetY)
  const SVG_EDGEMODE_UNKNOWN: Number = aliasFor(__js_SVG_EDGEMODE_UNKNOWN)
  const SVG_EDGEMODE_DUPLICATE: Number = aliasFor(__js_SVG_EDGEMODE_DUPLICATE)
  const SVG_EDGEMODE_WRAP: Number = aliasFor(__js_SVG_EDGEMODE_WRAP)
  const SVG_EDGEMODE_NONE: Number = aliasFor(__js_SVG_EDGEMODE_NONE)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEDiffuseLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feDiffuseLighting> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement)
  """
  static {
    aliasFor(native "SVGFEDiffuseLightingElement")
    var prototype: SVGFEDiffuseLightingElement = aliasFor(__js_prototype)
    function new(): SVGFEDiffuseLightingElement { aliasFor(__op_new__) }
  }
  const diffuseConstant: SVGAnimatedNumber = aliasFor(__js_diffuseConstant)
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  const kernelUnitLengthX: SVGAnimatedNumber = aliasFor(__js_kernelUnitLengthX)
  const kernelUnitLengthY: SVGAnimatedNumber = aliasFor(__js_kernelUnitLengthY)
  const surfaceScale: SVGAnimatedNumber = aliasFor(__js_surfaceScale)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEDisplacementMapElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feDisplacementMap> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement)
  """
  static {
    aliasFor(native "SVGFEDisplacementMapElement")
    var prototype: SVGFEDisplacementMapElement = aliasFor(__js_prototype)
    function new(): SVGFEDisplacementMapElement { aliasFor(__op_new__) }
    const SVG_CHANNEL_UNKNOWN: Number = aliasFor(__js_SVG_CHANNEL_UNKNOWN)
    const SVG_CHANNEL_R: Number = aliasFor(__js_SVG_CHANNEL_R)
    const SVG_CHANNEL_G: Number = aliasFor(__js_SVG_CHANNEL_G)
    const SVG_CHANNEL_B: Number = aliasFor(__js_SVG_CHANNEL_B)
    const SVG_CHANNEL_A: Number = aliasFor(__js_SVG_CHANNEL_A)
  }
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  const in2: SVGAnimatedString = aliasFor(__js_in2)
  const scale: SVGAnimatedNumber = aliasFor(__js_scale)
  const xChannelSelector: SVGAnimatedEnumeration = aliasFor(__js_xChannelSelector)
  const yChannelSelector: SVGAnimatedEnumeration = aliasFor(__js_yChannelSelector)
  const SVG_CHANNEL_UNKNOWN: Number = aliasFor(__js_SVG_CHANNEL_UNKNOWN)
  const SVG_CHANNEL_R: Number = aliasFor(__js_SVG_CHANNEL_R)
  const SVG_CHANNEL_G: Number = aliasFor(__js_SVG_CHANNEL_G)
  const SVG_CHANNEL_B: Number = aliasFor(__js_SVG_CHANNEL_B)
  const SVG_CHANNEL_A: Number = aliasFor(__js_SVG_CHANNEL_A)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEDistantLightElement extends SVGElement {
  """
  Corresponds to the <feDistantLight> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement)
  """
  static {
    aliasFor(native "SVGFEDistantLightElement")
    var prototype: SVGFEDistantLightElement = aliasFor(__js_prototype)
    function new(): SVGFEDistantLightElement { aliasFor(__op_new__) }
  }
  const azimuth: SVGAnimatedNumber = aliasFor(__js_azimuth)
  const elevation: SVGAnimatedNumber = aliasFor(__js_elevation)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEDropShadowElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement)
  """
  static {
    aliasFor(native "SVGFEDropShadowElement")
    var prototype: SVGFEDropShadowElement = aliasFor(__js_prototype)
    function new(): SVGFEDropShadowElement { aliasFor(__op_new__) }
  }
  const dx: SVGAnimatedNumber = aliasFor(__js_dx)
  const dy: SVGAnimatedNumber = aliasFor(__js_dy)
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  const stdDeviationX: SVGAnimatedNumber = aliasFor(__js_stdDeviationX)
  const stdDeviationY: SVGAnimatedNumber = aliasFor(__js_stdDeviationY)
  function setStdDeviation(stdDeviationX: Number, stdDeviationY: Number): Any { aliasFor(__js_setStdDeviation) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEFloodElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feFlood> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFloodElement)
  """
  static {
    aliasFor(native "SVGFEFloodElement")
    var prototype: SVGFEFloodElement = aliasFor(__js_prototype)
    function new(): SVGFEFloodElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEFuncAElement extends SVGComponentTransferFunctionElement {
  """
  Corresponds to the <feFuncA> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncAElement)
  """
  static {
    aliasFor(native "SVGFEFuncAElement")
    var prototype: SVGFEFuncAElement = aliasFor(__js_prototype)
    function new(): SVGFEFuncAElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEFuncBElement extends SVGComponentTransferFunctionElement {
  """
  Corresponds to the <feFuncB> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncBElement)
  """
  static {
    aliasFor(native "SVGFEFuncBElement")
    var prototype: SVGFEFuncBElement = aliasFor(__js_prototype)
    function new(): SVGFEFuncBElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEFuncGElement extends SVGComponentTransferFunctionElement {
  """
  Corresponds to the <feFuncG> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncGElement)
  """
  static {
    aliasFor(native "SVGFEFuncGElement")
    var prototype: SVGFEFuncGElement = aliasFor(__js_prototype)
    function new(): SVGFEFuncGElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEFuncRElement extends SVGComponentTransferFunctionElement {
  """
  Corresponds to the <feFuncR> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncRElement)
  """
  static {
    aliasFor(native "SVGFEFuncRElement")
    var prototype: SVGFEFuncRElement = aliasFor(__js_prototype)
    function new(): SVGFEFuncRElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEGaussianBlurElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feGaussianBlur> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement)
  """
  static {
    aliasFor(native "SVGFEGaussianBlurElement")
    var prototype: SVGFEGaussianBlurElement = aliasFor(__js_prototype)
    function new(): SVGFEGaussianBlurElement { aliasFor(__op_new__) }
  }
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  const stdDeviationX: SVGAnimatedNumber = aliasFor(__js_stdDeviationX)
  const stdDeviationY: SVGAnimatedNumber = aliasFor(__js_stdDeviationY)
  function setStdDeviation(stdDeviationX: Number, stdDeviationY: Number): Any { aliasFor(__js_setStdDeviation) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEImageElement extends SVGElement, SVGFilterPrimitiveStandardAttributes, SVGURIReference {
  """
  Corresponds to the <feImage> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEImageElement)
  """
  static {
    aliasFor(native "SVGFEImageElement")
    var prototype: SVGFEImageElement = aliasFor(__js_prototype)
    function new(): SVGFEImageElement { aliasFor(__op_new__) }
  }
  const preserveAspectRatio: SVGAnimatedPreserveAspectRatio = aliasFor(__js_preserveAspectRatio)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEMergeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feMerge> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeElement)
  """
  static {
    aliasFor(native "SVGFEMergeElement")
    var prototype: SVGFEMergeElement = aliasFor(__js_prototype)
    function new(): SVGFEMergeElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEMergeNodeElement extends SVGElement {
  """
  Corresponds to the <feMergeNode> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeNodeElement)
  """
  static {
    aliasFor(native "SVGFEMergeNodeElement")
    var prototype: SVGFEMergeNodeElement = aliasFor(__js_prototype)
    function new(): SVGFEMergeNodeElement { aliasFor(__op_new__) }
  }
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feMorphology> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement)
  """
  static {
    aliasFor(native "SVGFEMorphologyElement")
    var prototype: SVGFEMorphologyElement = aliasFor(__js_prototype)
    function new(): SVGFEMorphologyElement { aliasFor(__op_new__) }
    const SVG_MORPHOLOGY_OPERATOR_UNKNOWN: Number = aliasFor(__js_SVG_MORPHOLOGY_OPERATOR_UNKNOWN)
    const SVG_MORPHOLOGY_OPERATOR_ERODE: Number = aliasFor(__js_SVG_MORPHOLOGY_OPERATOR_ERODE)
    const SVG_MORPHOLOGY_OPERATOR_DILATE: Number = aliasFor(__js_SVG_MORPHOLOGY_OPERATOR_DILATE)
  }
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  const operator: SVGAnimatedEnumeration = aliasFor(__js_operator)
  const radiusX: SVGAnimatedNumber = aliasFor(__js_radiusX)
  const radiusY: SVGAnimatedNumber = aliasFor(__js_radiusY)
  const SVG_MORPHOLOGY_OPERATOR_UNKNOWN: Number = aliasFor(__js_SVG_MORPHOLOGY_OPERATOR_UNKNOWN)
  const SVG_MORPHOLOGY_OPERATOR_ERODE: Number = aliasFor(__js_SVG_MORPHOLOGY_OPERATOR_ERODE)
  const SVG_MORPHOLOGY_OPERATOR_DILATE: Number = aliasFor(__js_SVG_MORPHOLOGY_OPERATOR_DILATE)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEOffsetElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feOffset> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement)
  """
  static {
    aliasFor(native "SVGFEOffsetElement")
    var prototype: SVGFEOffsetElement = aliasFor(__js_prototype)
    function new(): SVGFEOffsetElement { aliasFor(__op_new__) }
  }
  const dx: SVGAnimatedNumber = aliasFor(__js_dx)
  const dy: SVGAnimatedNumber = aliasFor(__js_dy)
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFEPointLightElement extends SVGElement {
  """
  Corresponds to the <fePointLight> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement)
  """
  static {
    aliasFor(native "SVGFEPointLightElement")
    var prototype: SVGFEPointLightElement = aliasFor(__js_prototype)
    function new(): SVGFEPointLightElement { aliasFor(__op_new__) }
  }
  const x: SVGAnimatedNumber = aliasFor(__js_x)
  const y: SVGAnimatedNumber = aliasFor(__js_y)
  const z: SVGAnimatedNumber = aliasFor(__js_z)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFESpecularLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feSpecularLighting> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement)
  """
  static {
    aliasFor(native "SVGFESpecularLightingElement")
    var prototype: SVGFESpecularLightingElement = aliasFor(__js_prototype)
    function new(): SVGFESpecularLightingElement { aliasFor(__op_new__) }
  }
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  const kernelUnitLengthX: SVGAnimatedNumber = aliasFor(__js_kernelUnitLengthX)
  const kernelUnitLengthY: SVGAnimatedNumber = aliasFor(__js_kernelUnitLengthY)
  const specularConstant: SVGAnimatedNumber = aliasFor(__js_specularConstant)
  const specularExponent: SVGAnimatedNumber = aliasFor(__js_specularExponent)
  const surfaceScale: SVGAnimatedNumber = aliasFor(__js_surfaceScale)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFESpotLightElement extends SVGElement {
  """
  Corresponds to the <feSpotLight> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement)
  """
  static {
    aliasFor(native "SVGFESpotLightElement")
    var prototype: SVGFESpotLightElement = aliasFor(__js_prototype)
    function new(): SVGFESpotLightElement { aliasFor(__op_new__) }
  }
  const limitingConeAngle: SVGAnimatedNumber = aliasFor(__js_limitingConeAngle)
  const pointsAtX: SVGAnimatedNumber = aliasFor(__js_pointsAtX)
  const pointsAtY: SVGAnimatedNumber = aliasFor(__js_pointsAtY)
  const pointsAtZ: SVGAnimatedNumber = aliasFor(__js_pointsAtZ)
  const specularExponent: SVGAnimatedNumber = aliasFor(__js_specularExponent)
  const x: SVGAnimatedNumber = aliasFor(__js_x)
  const y: SVGAnimatedNumber = aliasFor(__js_y)
  const z: SVGAnimatedNumber = aliasFor(__js_z)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFETileElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feTile> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETileElement)
  """
  static {
    aliasFor(native "SVGFETileElement")
    var prototype: SVGFETileElement = aliasFor(__js_prototype)
    function new(): SVGFETileElement { aliasFor(__op_new__) }
  }
  const in1: SVGAnimatedString = aliasFor(__js_in1)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFETurbulenceElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
  """
  Corresponds to the <feTurbulence> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement)
  """
  static {
    aliasFor(native "SVGFETurbulenceElement")
    var prototype: SVGFETurbulenceElement = aliasFor(__js_prototype)
    function new(): SVGFETurbulenceElement { aliasFor(__op_new__) }
    const SVG_TURBULENCE_TYPE_UNKNOWN: Number = aliasFor(__js_SVG_TURBULENCE_TYPE_UNKNOWN)
    const SVG_TURBULENCE_TYPE_FRACTALNOISE: Number = aliasFor(__js_SVG_TURBULENCE_TYPE_FRACTALNOISE)
    const SVG_TURBULENCE_TYPE_TURBULENCE: Number = aliasFor(__js_SVG_TURBULENCE_TYPE_TURBULENCE)
    const SVG_STITCHTYPE_UNKNOWN: Number = aliasFor(__js_SVG_STITCHTYPE_UNKNOWN)
    const SVG_STITCHTYPE_STITCH: Number = aliasFor(__js_SVG_STITCHTYPE_STITCH)
    const SVG_STITCHTYPE_NOSTITCH: Number = aliasFor(__js_SVG_STITCHTYPE_NOSTITCH)
  }
  const baseFrequencyX: SVGAnimatedNumber = aliasFor(__js_baseFrequencyX)
  const baseFrequencyY: SVGAnimatedNumber = aliasFor(__js_baseFrequencyY)
  const numOctaves: SVGAnimatedInteger = aliasFor(__js_numOctaves)
  const seed: SVGAnimatedNumber = aliasFor(__js_seed)
  const stitchTiles: SVGAnimatedEnumeration = aliasFor(__js_stitchTiles)
  const type: SVGAnimatedEnumeration = aliasFor(__js_type)
  const SVG_TURBULENCE_TYPE_UNKNOWN: Number = aliasFor(__js_SVG_TURBULENCE_TYPE_UNKNOWN)
  const SVG_TURBULENCE_TYPE_FRACTALNOISE: Number = aliasFor(__js_SVG_TURBULENCE_TYPE_FRACTALNOISE)
  const SVG_TURBULENCE_TYPE_TURBULENCE: Number = aliasFor(__js_SVG_TURBULENCE_TYPE_TURBULENCE)
  const SVG_STITCHTYPE_UNKNOWN: Number = aliasFor(__js_SVG_STITCHTYPE_UNKNOWN)
  const SVG_STITCHTYPE_STITCH: Number = aliasFor(__js_SVG_STITCHTYPE_STITCH)
  const SVG_STITCHTYPE_NOSTITCH: Number = aliasFor(__js_SVG_STITCHTYPE_NOSTITCH)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFilterElement extends SVGElement, SVGURIReference {
  """
  Provides access to the properties of <filter> elements, as well as methods to manipulate them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement)
  """
  static {
    aliasFor(native "SVGFilterElement")
    var prototype: SVGFilterElement = aliasFor(__js_prototype)
    function new(): SVGFilterElement { aliasFor(__op_new__) }
  }
  const filterUnits: SVGAnimatedEnumeration = aliasFor(__js_filterUnits)
  const height: SVGAnimatedLength = aliasFor(__js_height)
  const primitiveUnits: SVGAnimatedEnumeration = aliasFor(__js_primitiveUnits)
  const width: SVGAnimatedLength = aliasFor(__js_width)
  const x: SVGAnimatedLength = aliasFor(__js_x)
  const y: SVGAnimatedLength = aliasFor(__js_y)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGFilterPrimitiveStandardAttributes {
  const height: SVGAnimatedLength = aliasFor(__js_height)
  const result: SVGAnimatedString = aliasFor(__js_result)
  const width: SVGAnimatedLength = aliasFor(__js_width)
  const x: SVGAnimatedLength = aliasFor(__js_x)
  const y: SVGAnimatedLength = aliasFor(__js_y)
}
export interface SVGFitToViewBox {
  const preserveAspectRatio: SVGAnimatedPreserveAspectRatio """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/preserveAspectRatio)
  """ = aliasFor(__js_preserveAspectRatio)
  const viewBox: SVGAnimatedRect """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/viewBox)
  """ = aliasFor(__js_viewBox)
}
export interface SVGForeignObjectElement extends SVGGraphicsElement {
  """
  Provides access to the properties of <foreignObject> elements, as well as methods to manipulate them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement)
  """
  static {
    aliasFor(native "SVGForeignObjectElement")
    var prototype: SVGForeignObjectElement = aliasFor(__js_prototype)
    function new(): SVGForeignObjectElement { aliasFor(__op_new__) }
  }
  const height: SVGAnimatedLength = aliasFor(__js_height)
  const width: SVGAnimatedLength = aliasFor(__js_width)
  const x: SVGAnimatedLength = aliasFor(__js_x)
  const y: SVGAnimatedLength = aliasFor(__js_y)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGGElement extends SVGGraphicsElement {
  """
  Corresponds to the <g> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGElement)
  """
  static {
    aliasFor(native "SVGGElement")
    var prototype: SVGGElement = aliasFor(__js_prototype)
    function new(): SVGGElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGGeometryElement extends SVGGraphicsElement {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement)
  """
  static {
    aliasFor(native "SVGGeometryElement")
    var prototype: SVGGeometryElement = aliasFor(__js_prototype)
    function new(): SVGGeometryElement { aliasFor(__op_new__) }
  }
  const pathLength: SVGAnimatedNumber """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/pathLength)
  """ = aliasFor(__js_pathLength)
  function getPointAtLength(distance: Number): DOMPoint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/getPointAtLength)
    """
    aliasFor(__js_getPointAtLength)
  }
  function getTotalLength(): Number {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/getTotalLength)
    """
    aliasFor(__js_getTotalLength)
  }
  function isPointInFill(point: DOMPointInit): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/isPointInFill)
    """
    aliasFor(__js_isPointInFill)
  }
  function isPointInFill(): Bool { aliasFor(__js_isPointInFill) }
  function isPointInStroke(point: DOMPointInit): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/isPointInStroke)
    """
    aliasFor(__js_isPointInStroke)
  }
  function isPointInStroke(): Bool { aliasFor(__js_isPointInStroke) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGGradientElement extends SVGElement, SVGURIReference {
  """
  The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement)
  """
  static {
    aliasFor(native "SVGGradientElement")
    var prototype: SVGGradientElement = aliasFor(__js_prototype)
    function new(): SVGGradientElement { aliasFor(__op_new__) }
    const SVG_SPREADMETHOD_UNKNOWN: Number = aliasFor(__js_SVG_SPREADMETHOD_UNKNOWN)
    const SVG_SPREADMETHOD_PAD: Number = aliasFor(__js_SVG_SPREADMETHOD_PAD)
    const SVG_SPREADMETHOD_REFLECT: Number = aliasFor(__js_SVG_SPREADMETHOD_REFLECT)
    const SVG_SPREADMETHOD_REPEAT: Number = aliasFor(__js_SVG_SPREADMETHOD_REPEAT)
  }
  const gradientTransform: SVGAnimatedTransformList = aliasFor(__js_gradientTransform)
  const gradientUnits: SVGAnimatedEnumeration = aliasFor(__js_gradientUnits)
  const spreadMethod: SVGAnimatedEnumeration = aliasFor(__js_spreadMethod)
  const SVG_SPREADMETHOD_UNKNOWN: Number = aliasFor(__js_SVG_SPREADMETHOD_UNKNOWN)
  const SVG_SPREADMETHOD_PAD: Number = aliasFor(__js_SVG_SPREADMETHOD_PAD)
  const SVG_SPREADMETHOD_REFLECT: Number = aliasFor(__js_SVG_SPREADMETHOD_REFLECT)
  const SVG_SPREADMETHOD_REPEAT: Number = aliasFor(__js_SVG_SPREADMETHOD_REPEAT)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGGraphicsElement extends SVGElement, SVGTests {
  """
  SVG elements whose primary purpose is to directly render graphics into a group.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement)
  """
  static {
    aliasFor(native "SVGGraphicsElement")
    var prototype: SVGGraphicsElement = aliasFor(__js_prototype)
    function new(): SVGGraphicsElement { aliasFor(__op_new__) }
  }
  const transform: SVGAnimatedTransformList = aliasFor(__js_transform)
  function getBBox(options: SVGBoundingBoxOptions): DOMRect {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement/getBBox)
    """
    aliasFor(__js_getBBox)
  }
  function getBBox(): DOMRect { aliasFor(__js_getBBox) }
  function getCTM(): Union[DOMMatrix, Null] { aliasFor(__js_getCTM) }
  function getScreenCTM(): Union[DOMMatrix, Null] { aliasFor(__js_getScreenCTM) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGImageElement extends SVGGraphicsElement, SVGURIReference {
  """
  Corresponds to the <image> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement)
  """
  static {
    aliasFor(native "SVGImageElement")
    var prototype: SVGImageElement = aliasFor(__js_prototype)
    function new(): SVGImageElement { aliasFor(__op_new__) }
  }
  var crossOrigin: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/crossorigin)
  """ = aliasFor(__js_crossOrigin)
  const height: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/height)
  """ = aliasFor(__js_height)
  const preserveAspectRatio: SVGAnimatedPreserveAspectRatio """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/preserveAspectRatio)
  """ = aliasFor(__js_preserveAspectRatio)
  const width: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/width)
  """ = aliasFor(__js_width)
  const x: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/x)
  """ = aliasFor(__js_x)
  const y: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/y)
  """ = aliasFor(__js_y)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGLength {
  """
  Correspond to the <length> basic data type.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength)
  """
  static {
    aliasFor(native "SVGLength")
    var prototype: SVGLength = aliasFor(__js_prototype)
    function new(): SVGLength { aliasFor(__op_new__) }
    const SVG_LENGTHTYPE_UNKNOWN: Number = aliasFor(__js_SVG_LENGTHTYPE_UNKNOWN)
    const SVG_LENGTHTYPE_NUMBER: Number = aliasFor(__js_SVG_LENGTHTYPE_NUMBER)
    const SVG_LENGTHTYPE_PERCENTAGE: Number = aliasFor(__js_SVG_LENGTHTYPE_PERCENTAGE)
    const SVG_LENGTHTYPE_EMS: Number = aliasFor(__js_SVG_LENGTHTYPE_EMS)
    const SVG_LENGTHTYPE_EXS: Number = aliasFor(__js_SVG_LENGTHTYPE_EXS)
    const SVG_LENGTHTYPE_PX: Number = aliasFor(__js_SVG_LENGTHTYPE_PX)
    const SVG_LENGTHTYPE_CM: Number = aliasFor(__js_SVG_LENGTHTYPE_CM)
    const SVG_LENGTHTYPE_MM: Number = aliasFor(__js_SVG_LENGTHTYPE_MM)
    const SVG_LENGTHTYPE_IN: Number = aliasFor(__js_SVG_LENGTHTYPE_IN)
    const SVG_LENGTHTYPE_PT: Number = aliasFor(__js_SVG_LENGTHTYPE_PT)
    const SVG_LENGTHTYPE_PC: Number = aliasFor(__js_SVG_LENGTHTYPE_PC)
  }
  const unitType: Number = aliasFor(__js_unitType)
  var value: Number = aliasFor(__js_value)
  var valueAsString: String = aliasFor(__js_valueAsString)
  var valueInSpecifiedUnits: Number = aliasFor(__js_valueInSpecifiedUnits)
  function convertToSpecifiedUnits(unitType: Number): Any { aliasFor(__js_convertToSpecifiedUnits) }
  function newValueSpecifiedUnits(unitType: Number, valueInSpecifiedUnits: Number): Any { aliasFor(__js_newValueSpecifiedUnits) }
  const SVG_LENGTHTYPE_UNKNOWN: Number = aliasFor(__js_SVG_LENGTHTYPE_UNKNOWN)
  const SVG_LENGTHTYPE_NUMBER: Number = aliasFor(__js_SVG_LENGTHTYPE_NUMBER)
  const SVG_LENGTHTYPE_PERCENTAGE: Number = aliasFor(__js_SVG_LENGTHTYPE_PERCENTAGE)
  const SVG_LENGTHTYPE_EMS: Number = aliasFor(__js_SVG_LENGTHTYPE_EMS)
  const SVG_LENGTHTYPE_EXS: Number = aliasFor(__js_SVG_LENGTHTYPE_EXS)
  const SVG_LENGTHTYPE_PX: Number = aliasFor(__js_SVG_LENGTHTYPE_PX)
  const SVG_LENGTHTYPE_CM: Number = aliasFor(__js_SVG_LENGTHTYPE_CM)
  const SVG_LENGTHTYPE_MM: Number = aliasFor(__js_SVG_LENGTHTYPE_MM)
  const SVG_LENGTHTYPE_IN: Number = aliasFor(__js_SVG_LENGTHTYPE_IN)
  const SVG_LENGTHTYPE_PT: Number = aliasFor(__js_SVG_LENGTHTYPE_PT)
  const SVG_LENGTHTYPE_PC: Number = aliasFor(__js_SVG_LENGTHTYPE_PC)
}
export interface SVGLengthList {
  """
  The SVGLengthList defines a list of SVGLength objects.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList)
  """
  static {
    aliasFor(native "SVGLengthList")
    var prototype: SVGLengthList = aliasFor(__js_prototype)
    function new(): SVGLengthList { aliasFor(__op_new__) }
  }
  const length: Number = aliasFor(__js_length)
  const numberOfItems: Number = aliasFor(__js_numberOfItems)
  function appendItem(newItem: SVGLength): SVGLength { aliasFor(__js_appendItem) }
  function clear(): Any { aliasFor(__js_clear) }
  function getItem(index: Number): SVGLength { aliasFor(__js_getItem) }
  function initialize(newItem: SVGLength): SVGLength { aliasFor(__js_initialize) }
  function insertItemBefore(newItem: SVGLength, index: Number): SVGLength { aliasFor(__js_insertItemBefore) }
  function removeItem(index: Number): SVGLength { aliasFor(__js_removeItem) }
  function replaceItem(newItem: SVGLength, index: Number): SVGLength { aliasFor(__js_replaceItem) }
  function __getitem__(index: Number): SVGLength { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: SVGLength): SVGLength { aliasFor(__op_setitem__) }
}
export interface SVGLineElement extends SVGGeometryElement {
  """
  Provides access to the properties of <line> elements, as well as methods to manipulate them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement)
  """
  static {
    aliasFor(native "SVGLineElement")
    var prototype: SVGLineElement = aliasFor(__js_prototype)
    function new(): SVGLineElement { aliasFor(__op_new__) }
  }
  const x1: SVGAnimatedLength = aliasFor(__js_x1)
  const x2: SVGAnimatedLength = aliasFor(__js_x2)
  const y1: SVGAnimatedLength = aliasFor(__js_y1)
  const y2: SVGAnimatedLength = aliasFor(__js_y2)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGLinearGradientElement extends SVGGradientElement {
  """
  Corresponds to the <linearGradient> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement)
  """
  static {
    aliasFor(native "SVGLinearGradientElement")
    var prototype: SVGLinearGradientElement = aliasFor(__js_prototype)
    function new(): SVGLinearGradientElement { aliasFor(__op_new__) }
  }
  const x1: SVGAnimatedLength = aliasFor(__js_x1)
  const x2: SVGAnimatedLength = aliasFor(__js_x2)
  const y1: SVGAnimatedLength = aliasFor(__js_y1)
  const y2: SVGAnimatedLength = aliasFor(__js_y2)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGMPathElement extends SVGElement, SVGURIReference {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMPathElement)
  """
  static {
    aliasFor(native "SVGMPathElement")
    var prototype: SVGMPathElement = aliasFor(__js_prototype)
    function new(): SVGMPathElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGMarkerElement extends SVGElement, SVGFitToViewBox {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement)
  """
  static {
    aliasFor(native "SVGMarkerElement")
    var prototype: SVGMarkerElement = aliasFor(__js_prototype)
    function new(): SVGMarkerElement { aliasFor(__op_new__) }
    const SVG_MARKERUNITS_UNKNOWN: Number = aliasFor(__js_SVG_MARKERUNITS_UNKNOWN)
    const SVG_MARKERUNITS_USERSPACEONUSE: Number = aliasFor(__js_SVG_MARKERUNITS_USERSPACEONUSE)
    const SVG_MARKERUNITS_STROKEWIDTH: Number = aliasFor(__js_SVG_MARKERUNITS_STROKEWIDTH)
    const SVG_MARKER_ORIENT_UNKNOWN: Number = aliasFor(__js_SVG_MARKER_ORIENT_UNKNOWN)
    const SVG_MARKER_ORIENT_AUTO: Number = aliasFor(__js_SVG_MARKER_ORIENT_AUTO)
    const SVG_MARKER_ORIENT_ANGLE: Number = aliasFor(__js_SVG_MARKER_ORIENT_ANGLE)
  }
  const markerHeight: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerHeight)
  """ = aliasFor(__js_markerHeight)
  const markerUnits: SVGAnimatedEnumeration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerUnits)
  """ = aliasFor(__js_markerUnits)
  const markerWidth: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerWidth)
  """ = aliasFor(__js_markerWidth)
  const orientAngle: SVGAnimatedAngle """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientAngle)
  """ = aliasFor(__js_orientAngle)
  const orientType: SVGAnimatedEnumeration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientType)
  """ = aliasFor(__js_orientType)
  const refX: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refX)
  """ = aliasFor(__js_refX)
  const refY: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refY)
  """ = aliasFor(__js_refY)
  function setOrientToAngle(angle: SVGAngle): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/setOrientToAngle)
    """
    aliasFor(__js_setOrientToAngle)
  }
  function setOrientToAuto(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/setOrientToAuto)
    """
    aliasFor(__js_setOrientToAuto)
  }
  const SVG_MARKERUNITS_UNKNOWN: Number = aliasFor(__js_SVG_MARKERUNITS_UNKNOWN)
  const SVG_MARKERUNITS_USERSPACEONUSE: Number = aliasFor(__js_SVG_MARKERUNITS_USERSPACEONUSE)
  const SVG_MARKERUNITS_STROKEWIDTH: Number = aliasFor(__js_SVG_MARKERUNITS_STROKEWIDTH)
  const SVG_MARKER_ORIENT_UNKNOWN: Number = aliasFor(__js_SVG_MARKER_ORIENT_UNKNOWN)
  const SVG_MARKER_ORIENT_AUTO: Number = aliasFor(__js_SVG_MARKER_ORIENT_AUTO)
  const SVG_MARKER_ORIENT_ANGLE: Number = aliasFor(__js_SVG_MARKER_ORIENT_ANGLE)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGMaskElement extends SVGElement {
  """
  Provides access to the properties of <mask> elements, as well as methods to manipulate them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement)
  """
  static {
    aliasFor(native "SVGMaskElement")
    var prototype: SVGMaskElement = aliasFor(__js_prototype)
    function new(): SVGMaskElement { aliasFor(__op_new__) }
  }
  const height: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/height)
  """ = aliasFor(__js_height)
  const maskContentUnits: SVGAnimatedEnumeration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskContentUnits)
  """ = aliasFor(__js_maskContentUnits)
  const maskUnits: SVGAnimatedEnumeration """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskUnits)
  """ = aliasFor(__js_maskUnits)
  const width: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/width)
  """ = aliasFor(__js_width)
  const x: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/x)
  """ = aliasFor(__js_x)
  const y: SVGAnimatedLength """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/y)
  """ = aliasFor(__js_y)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGMetadataElement extends SVGElement {
  """
  Corresponds to the <metadata> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMetadataElement)
  """
  static {
    aliasFor(native "SVGMetadataElement")
    var prototype: SVGMetadataElement = aliasFor(__js_prototype)
    function new(): SVGMetadataElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGNumber {
  """
  Corresponds to the <number> basic data type.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumber)
  """
  static {
    aliasFor(native "SVGNumber")
    var prototype: SVGNumber = aliasFor(__js_prototype)
    function new(): SVGNumber { aliasFor(__op_new__) }
  }
  var value: Number = aliasFor(__js_value)
}
export interface SVGNumberList {
  """
  The SVGNumberList defines a list of SVGNumber objects.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList)
  """
  static {
    aliasFor(native "SVGNumberList")
    var prototype: SVGNumberList = aliasFor(__js_prototype)
    function new(): SVGNumberList { aliasFor(__op_new__) }
  }
  const length: Number = aliasFor(__js_length)
  const numberOfItems: Number = aliasFor(__js_numberOfItems)
  function appendItem(newItem: SVGNumber): SVGNumber { aliasFor(__js_appendItem) }
  function clear(): Any { aliasFor(__js_clear) }
  function getItem(index: Number): SVGNumber { aliasFor(__js_getItem) }
  function initialize(newItem: SVGNumber): SVGNumber { aliasFor(__js_initialize) }
  function insertItemBefore(newItem: SVGNumber, index: Number): SVGNumber { aliasFor(__js_insertItemBefore) }
  function removeItem(index: Number): SVGNumber { aliasFor(__js_removeItem) }
  function replaceItem(newItem: SVGNumber, index: Number): SVGNumber { aliasFor(__js_replaceItem) }
  function __getitem__(index: Number): SVGNumber { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: SVGNumber): SVGNumber { aliasFor(__op_setitem__) }
}
export interface SVGPathElement extends SVGGeometryElement {
  """
  Corresponds to the <path> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPathElement)
  """
  static {
    aliasFor(native "SVGPathElement")
    var prototype: SVGPathElement = aliasFor(__js_prototype)
    function new(): SVGPathElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGPatternElement extends SVGElement, SVGFitToViewBox, SVGURIReference {
  """
  Corresponds to the <pattern> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement)
  """
  static {
    aliasFor(native "SVGPatternElement")
    var prototype: SVGPatternElement = aliasFor(__js_prototype)
    function new(): SVGPatternElement { aliasFor(__op_new__) }
  }
  const height: SVGAnimatedLength = aliasFor(__js_height)
  const patternContentUnits: SVGAnimatedEnumeration = aliasFor(__js_patternContentUnits)
  const patternTransform: SVGAnimatedTransformList = aliasFor(__js_patternTransform)
  const patternUnits: SVGAnimatedEnumeration = aliasFor(__js_patternUnits)
  const width: SVGAnimatedLength = aliasFor(__js_width)
  const x: SVGAnimatedLength = aliasFor(__js_x)
  const y: SVGAnimatedLength = aliasFor(__js_y)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGPointList {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList)
  """
  static {
    aliasFor(native "SVGPointList")
    var prototype: SVGPointList = aliasFor(__js_prototype)
    function new(): SVGPointList { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/length)
  """ = aliasFor(__js_length)
  const numberOfItems: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/numberOfItems)
  """ = aliasFor(__js_numberOfItems)
  function appendItem(newItem: DOMPoint): DOMPoint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/appendItem)
    """
    aliasFor(__js_appendItem)
  }
  function clear(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/clear)
    """
    aliasFor(__js_clear)
  }
  function getItem(index: Number): DOMPoint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/getItem)
    """
    aliasFor(__js_getItem)
  }
  function initialize(newItem: DOMPoint): DOMPoint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/initialize)
    """
    aliasFor(__js_initialize)
  }
  function insertItemBefore(newItem: DOMPoint, index: Number): DOMPoint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/insertItemBefore)
    """
    aliasFor(__js_insertItemBefore)
  }
  function removeItem(index: Number): DOMPoint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/removeItem)
    """
    aliasFor(__js_removeItem)
  }
  function replaceItem(newItem: DOMPoint, index: Number): DOMPoint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/replaceItem)
    """
    aliasFor(__js_replaceItem)
  }
  function __getitem__(index: Number): DOMPoint { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: DOMPoint): DOMPoint { aliasFor(__op_setitem__) }
}
export interface SVGPolygonElement extends SVGGeometryElement, SVGAnimatedPoints {
  """
  Provides access to the properties of <polygon> elements, as well as methods to manipulate them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement)
  """
  static {
    aliasFor(native "SVGPolygonElement")
    var prototype: SVGPolygonElement = aliasFor(__js_prototype)
    function new(): SVGPolygonElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGPolylineElement extends SVGGeometryElement, SVGAnimatedPoints {
  """
  Provides access to the properties of <polyline> elements, as well as methods to manipulate them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolylineElement)
  """
  static {
    aliasFor(native "SVGPolylineElement")
    var prototype: SVGPolylineElement = aliasFor(__js_prototype)
    function new(): SVGPolylineElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGPreserveAspectRatio {
  """
  Corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio)
  """
  static {
    aliasFor(native "SVGPreserveAspectRatio")
    var prototype: SVGPreserveAspectRatio = aliasFor(__js_prototype)
    function new(): SVGPreserveAspectRatio { aliasFor(__op_new__) }
    const SVG_PRESERVEASPECTRATIO_UNKNOWN: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_UNKNOWN)
    const SVG_PRESERVEASPECTRATIO_NONE: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_NONE)
    const SVG_PRESERVEASPECTRATIO_XMINYMIN: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMINYMIN)
    const SVG_PRESERVEASPECTRATIO_XMIDYMIN: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMIDYMIN)
    const SVG_PRESERVEASPECTRATIO_XMAXYMIN: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMAXYMIN)
    const SVG_PRESERVEASPECTRATIO_XMINYMID: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMINYMID)
    const SVG_PRESERVEASPECTRATIO_XMIDYMID: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMIDYMID)
    const SVG_PRESERVEASPECTRATIO_XMAXYMID: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMAXYMID)
    const SVG_PRESERVEASPECTRATIO_XMINYMAX: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMINYMAX)
    const SVG_PRESERVEASPECTRATIO_XMIDYMAX: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMIDYMAX)
    const SVG_PRESERVEASPECTRATIO_XMAXYMAX: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMAXYMAX)
    const SVG_MEETORSLICE_UNKNOWN: Number = aliasFor(__js_SVG_MEETORSLICE_UNKNOWN)
    const SVG_MEETORSLICE_MEET: Number = aliasFor(__js_SVG_MEETORSLICE_MEET)
    const SVG_MEETORSLICE_SLICE: Number = aliasFor(__js_SVG_MEETORSLICE_SLICE)
  }
  var align: Number = aliasFor(__js_align)
  var meetOrSlice: Number = aliasFor(__js_meetOrSlice)
  const SVG_PRESERVEASPECTRATIO_UNKNOWN: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_UNKNOWN)
  const SVG_PRESERVEASPECTRATIO_NONE: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_NONE)
  const SVG_PRESERVEASPECTRATIO_XMINYMIN: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMINYMIN)
  const SVG_PRESERVEASPECTRATIO_XMIDYMIN: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMIDYMIN)
  const SVG_PRESERVEASPECTRATIO_XMAXYMIN: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMAXYMIN)
  const SVG_PRESERVEASPECTRATIO_XMINYMID: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMINYMID)
  const SVG_PRESERVEASPECTRATIO_XMIDYMID: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMIDYMID)
  const SVG_PRESERVEASPECTRATIO_XMAXYMID: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMAXYMID)
  const SVG_PRESERVEASPECTRATIO_XMINYMAX: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMINYMAX)
  const SVG_PRESERVEASPECTRATIO_XMIDYMAX: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMIDYMAX)
  const SVG_PRESERVEASPECTRATIO_XMAXYMAX: Number = aliasFor(__js_SVG_PRESERVEASPECTRATIO_XMAXYMAX)
  const SVG_MEETORSLICE_UNKNOWN: Number = aliasFor(__js_SVG_MEETORSLICE_UNKNOWN)
  const SVG_MEETORSLICE_MEET: Number = aliasFor(__js_SVG_MEETORSLICE_MEET)
  const SVG_MEETORSLICE_SLICE: Number = aliasFor(__js_SVG_MEETORSLICE_SLICE)
}
export interface SVGRadialGradientElement extends SVGGradientElement {
  """
  Corresponds to the <RadialGradient> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement)
  """
  static {
    aliasFor(native "SVGRadialGradientElement")
    var prototype: SVGRadialGradientElement = aliasFor(__js_prototype)
    function new(): SVGRadialGradientElement { aliasFor(__op_new__) }
  }
  const cx: SVGAnimatedLength = aliasFor(__js_cx)
  const cy: SVGAnimatedLength = aliasFor(__js_cy)
  const fr: SVGAnimatedLength = aliasFor(__js_fr)
  const fx: SVGAnimatedLength = aliasFor(__js_fx)
  const fy: SVGAnimatedLength = aliasFor(__js_fy)
  const r: SVGAnimatedLength = aliasFor(__js_r)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGRectElement extends SVGGeometryElement {
  """
  Provides access to the properties of <rect> elements, as well as methods to manipulate them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement)
  """
  static {
    aliasFor(native "SVGRectElement")
    var prototype: SVGRectElement = aliasFor(__js_prototype)
    function new(): SVGRectElement { aliasFor(__op_new__) }
  }
  const height: SVGAnimatedLength = aliasFor(__js_height)
  const rx: SVGAnimatedLength = aliasFor(__js_rx)
  const ry: SVGAnimatedLength = aliasFor(__js_ry)
  const width: SVGAnimatedLength = aliasFor(__js_width)
  const x: SVGAnimatedLength = aliasFor(__js_x)
  const y: SVGAnimatedLength = aliasFor(__js_y)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGSVGElementEventMap extends SVGElementEventMap, WindowEventHandlersEventMap {
}
export interface SVGSVGElement extends SVGGraphicsElement, SVGFitToViewBox, WindowEventHandlers {
  """
  Provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement)
  """
  static {
    aliasFor(native "SVGSVGElement")
    var prototype: SVGSVGElement = aliasFor(__js_prototype)
    function new(): SVGSVGElement { aliasFor(__op_new__) }
  }
  var currentScale: Number = aliasFor(__js_currentScale)
  const currentTranslate: DOMPointReadOnly = aliasFor(__js_currentTranslate)
  const height: SVGAnimatedLength = aliasFor(__js_height)
  const width: SVGAnimatedLength = aliasFor(__js_width)
  const x: SVGAnimatedLength = aliasFor(__js_x)
  const y: SVGAnimatedLength = aliasFor(__js_y)
  function animationsPaused(): Bool { aliasFor(__js_animationsPaused) }
  function checkEnclosure(element: SVGElement, rect: DOMRectReadOnly): Bool { aliasFor(__js_checkEnclosure) }
  function checkIntersection(element: SVGElement, rect: DOMRectReadOnly): Bool { aliasFor(__js_checkIntersection) }
  function createSVGAngle(): SVGAngle { aliasFor(__js_createSVGAngle) }
  function createSVGLength(): SVGLength { aliasFor(__js_createSVGLength) }
  function createSVGMatrix(): DOMMatrix { aliasFor(__js_createSVGMatrix) }
  function createSVGNumber(): SVGNumber { aliasFor(__js_createSVGNumber) }
  function createSVGPoint(): DOMPoint { aliasFor(__js_createSVGPoint) }
  function createSVGRect(): DOMRect { aliasFor(__js_createSVGRect) }
  function createSVGTransform(): SVGTransform { aliasFor(__js_createSVGTransform) }
  function createSVGTransformFromMatrix(matrix: DOMMatrix2DInit): SVGTransform { aliasFor(__js_createSVGTransformFromMatrix) }
  function createSVGTransformFromMatrix(): SVGTransform { aliasFor(__js_createSVGTransformFromMatrix) }
  function deselectAll(): Any { aliasFor(__js_deselectAll) }
  function getCurrentTime(): Number { aliasFor(__js_getCurrentTime) }
  function getElementById(elementId: String): Element { aliasFor(__js_getElementById) }
  function getEnclosureList(rect: DOMRectReadOnly, referenceElement: Union[SVGElement, Null]): NodeList { aliasFor(__js_getEnclosureList) }
  function getIntersectionList(rect: DOMRectReadOnly, referenceElement: Union[SVGElement, Null]): NodeList { aliasFor(__js_getIntersectionList) }
  function pauseAnimations(): Any { aliasFor(__js_pauseAnimations) }
  function setCurrentTime(seconds: Number): Any { aliasFor(__js_setCurrentTime) }
  function unpauseAnimations(): Any { aliasFor(__js_unpauseAnimations) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGScriptElement extends SVGElement, SVGURIReference {
  """
  Corresponds to the SVG <script> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGScriptElement)
  """
  static {
    aliasFor(native "SVGScriptElement")
    var prototype: SVGScriptElement = aliasFor(__js_prototype)
    function new(): SVGScriptElement { aliasFor(__op_new__) }
  }
  var type: String = aliasFor(__js_type)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGSetElement extends SVGAnimationElement {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSetElement)
  """
  static {
    aliasFor(native "SVGSetElement")
    var prototype: SVGSetElement = aliasFor(__js_prototype)
    function new(): SVGSetElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGStopElement extends SVGElement {
  """
  Corresponds to the <stop> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStopElement)
  """
  static {
    aliasFor(native "SVGStopElement")
    var prototype: SVGStopElement = aliasFor(__js_prototype)
    function new(): SVGStopElement { aliasFor(__op_new__) }
  }
  const offset: SVGAnimatedNumber = aliasFor(__js_offset)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGStringList {
  """
  The SVGStringList defines a list of DOMString objects.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList)
  """
  static {
    aliasFor(native "SVGStringList")
    var prototype: SVGStringList = aliasFor(__js_prototype)
    function new(): SVGStringList { aliasFor(__op_new__) }
  }
  const length: Number = aliasFor(__js_length)
  const numberOfItems: Number = aliasFor(__js_numberOfItems)
  function appendItem(newItem: String): String { aliasFor(__js_appendItem) }
  function clear(): Any { aliasFor(__js_clear) }
  function getItem(index: Number): String { aliasFor(__js_getItem) }
  function initialize(newItem: String): String { aliasFor(__js_initialize) }
  function insertItemBefore(newItem: String, index: Number): String { aliasFor(__js_insertItemBefore) }
  function removeItem(index: Number): String { aliasFor(__js_removeItem) }
  function replaceItem(newItem: String, index: Number): String { aliasFor(__js_replaceItem) }
  function __getitem__(index: Number): String { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: String): String { aliasFor(__op_setitem__) }
}
export interface SVGStyleElement extends SVGElement, LinkStyle {
  """
  Corresponds to the SVG <style> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement)
  """
  static {
    aliasFor(native "SVGStyleElement")
    var prototype: SVGStyleElement = aliasFor(__js_prototype)
    function new(): SVGStyleElement { aliasFor(__op_new__) }
  }
  var disabled: Bool = aliasFor(__js_disabled)
  var media: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/media)
  """ = aliasFor(__js_media)
  var title: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/title)
  """ = aliasFor(__js_title)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGSwitchElement extends SVGGraphicsElement {
  """
  Corresponds to the <switch> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSwitchElement)
  """
  static {
    aliasFor(native "SVGSwitchElement")
    var prototype: SVGSwitchElement = aliasFor(__js_prototype)
    function new(): SVGSwitchElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGSymbolElement extends SVGElement, SVGFitToViewBox {
  """
  Corresponds to the <symbol> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSymbolElement)
  """
  static {
    aliasFor(native "SVGSymbolElement")
    var prototype: SVGSymbolElement = aliasFor(__js_prototype)
    function new(): SVGSymbolElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGTSpanElement extends SVGTextPositioningElement {
  """
  A <tspan> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTSpanElement)
  """
  static {
    aliasFor(native "SVGTSpanElement")
    var prototype: SVGTSpanElement = aliasFor(__js_prototype)
    function new(): SVGTSpanElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGTests {
  const requiredExtensions: SVGStringList = aliasFor(__js_requiredExtensions)
  const systemLanguage: SVGStringList = aliasFor(__js_systemLanguage)
}
export interface SVGTextContentElement extends SVGGraphicsElement {
  """
  Implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as SVGTextElement, SVGTSpanElement, SVGTRefElement, SVGAltGlyphElement and SVGTextPathElement.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement)
  """
  static {
    aliasFor(native "SVGTextContentElement")
    var prototype: SVGTextContentElement = aliasFor(__js_prototype)
    function new(): SVGTextContentElement { aliasFor(__op_new__) }
    const LENGTHADJUST_UNKNOWN: Number = aliasFor(__js_LENGTHADJUST_UNKNOWN)
    const LENGTHADJUST_SPACING: Number = aliasFor(__js_LENGTHADJUST_SPACING)
    const LENGTHADJUST_SPACINGANDGLYPHS: Number = aliasFor(__js_LENGTHADJUST_SPACINGANDGLYPHS)
  }
  const lengthAdjust: SVGAnimatedEnumeration = aliasFor(__js_lengthAdjust)
  const textLength: SVGAnimatedLength = aliasFor(__js_textLength)
  function getCharNumAtPosition(point: DOMPointInit): Number { aliasFor(__js_getCharNumAtPosition) }
  function getCharNumAtPosition(): Number { aliasFor(__js_getCharNumAtPosition) }
  function getComputedTextLength(): Number { aliasFor(__js_getComputedTextLength) }
  function getEndPositionOfChar(charnum: Number): DOMPoint { aliasFor(__js_getEndPositionOfChar) }
  function getExtentOfChar(charnum: Number): DOMRect { aliasFor(__js_getExtentOfChar) }
  function getNumberOfChars(): Number { aliasFor(__js_getNumberOfChars) }
  function getRotationOfChar(charnum: Number): Number { aliasFor(__js_getRotationOfChar) }
  function getStartPositionOfChar(charnum: Number): DOMPoint { aliasFor(__js_getStartPositionOfChar) }
  function getSubStringLength(charnum: Number, nchars: Number): Number { aliasFor(__js_getSubStringLength) }
  const LENGTHADJUST_UNKNOWN: Number = aliasFor(__js_LENGTHADJUST_UNKNOWN)
  const LENGTHADJUST_SPACING: Number = aliasFor(__js_LENGTHADJUST_SPACING)
  const LENGTHADJUST_SPACINGANDGLYPHS: Number = aliasFor(__js_LENGTHADJUST_SPACINGANDGLYPHS)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGTextElement extends SVGTextPositioningElement {
  """
  Corresponds to the <text> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextElement)
  """
  static {
    aliasFor(native "SVGTextElement")
    var prototype: SVGTextElement = aliasFor(__js_prototype)
    function new(): SVGTextElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGTextPathElement extends SVGTextContentElement, SVGURIReference {
  """
  Corresponds to the <textPath> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement)
  """
  static {
    aliasFor(native "SVGTextPathElement")
    var prototype: SVGTextPathElement = aliasFor(__js_prototype)
    function new(): SVGTextPathElement { aliasFor(__op_new__) }
    const TEXTPATH_METHODTYPE_UNKNOWN: Number = aliasFor(__js_TEXTPATH_METHODTYPE_UNKNOWN)
    const TEXTPATH_METHODTYPE_ALIGN: Number = aliasFor(__js_TEXTPATH_METHODTYPE_ALIGN)
    const TEXTPATH_METHODTYPE_STRETCH: Number = aliasFor(__js_TEXTPATH_METHODTYPE_STRETCH)
    const TEXTPATH_SPACINGTYPE_UNKNOWN: Number = aliasFor(__js_TEXTPATH_SPACINGTYPE_UNKNOWN)
    const TEXTPATH_SPACINGTYPE_AUTO: Number = aliasFor(__js_TEXTPATH_SPACINGTYPE_AUTO)
    const TEXTPATH_SPACINGTYPE_EXACT: Number = aliasFor(__js_TEXTPATH_SPACINGTYPE_EXACT)
  }
  const method: SVGAnimatedEnumeration = aliasFor(__js_method)
  const spacing: SVGAnimatedEnumeration = aliasFor(__js_spacing)
  const startOffset: SVGAnimatedLength = aliasFor(__js_startOffset)
  const TEXTPATH_METHODTYPE_UNKNOWN: Number = aliasFor(__js_TEXTPATH_METHODTYPE_UNKNOWN)
  const TEXTPATH_METHODTYPE_ALIGN: Number = aliasFor(__js_TEXTPATH_METHODTYPE_ALIGN)
  const TEXTPATH_METHODTYPE_STRETCH: Number = aliasFor(__js_TEXTPATH_METHODTYPE_STRETCH)
  const TEXTPATH_SPACINGTYPE_UNKNOWN: Number = aliasFor(__js_TEXTPATH_SPACINGTYPE_UNKNOWN)
  const TEXTPATH_SPACINGTYPE_AUTO: Number = aliasFor(__js_TEXTPATH_SPACINGTYPE_AUTO)
  const TEXTPATH_SPACINGTYPE_EXACT: Number = aliasFor(__js_TEXTPATH_SPACINGTYPE_EXACT)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGTextPositioningElement extends SVGTextContentElement {
  """
  Implemented by elements that support attributes that position individual text glyphs. It is inherited by SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement)
  """
  static {
    aliasFor(native "SVGTextPositioningElement")
    var prototype: SVGTextPositioningElement = aliasFor(__js_prototype)
    function new(): SVGTextPositioningElement { aliasFor(__op_new__) }
  }
  const dx: SVGAnimatedLengthList = aliasFor(__js_dx)
  const dy: SVGAnimatedLengthList = aliasFor(__js_dy)
  const rotate: SVGAnimatedNumberList = aliasFor(__js_rotate)
  const x: SVGAnimatedLengthList = aliasFor(__js_x)
  const y: SVGAnimatedLengthList = aliasFor(__js_y)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGTitleElement extends SVGElement {
  """
  Corresponds to the <title> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTitleElement)
  """
  static {
    aliasFor(native "SVGTitleElement")
    var prototype: SVGTitleElement = aliasFor(__js_prototype)
    function new(): SVGTitleElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGTransform {
  """
  SVGTransform is the interface for one of the component transformations within an SVGTransformList; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a transform attribute.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform)
  """
  static {
    aliasFor(native "SVGTransform")
    var prototype: SVGTransform = aliasFor(__js_prototype)
    function new(): SVGTransform { aliasFor(__op_new__) }
    const SVG_TRANSFORM_UNKNOWN: Number = aliasFor(__js_SVG_TRANSFORM_UNKNOWN)
    const SVG_TRANSFORM_MATRIX: Number = aliasFor(__js_SVG_TRANSFORM_MATRIX)
    const SVG_TRANSFORM_TRANSLATE: Number = aliasFor(__js_SVG_TRANSFORM_TRANSLATE)
    const SVG_TRANSFORM_SCALE: Number = aliasFor(__js_SVG_TRANSFORM_SCALE)
    const SVG_TRANSFORM_ROTATE: Number = aliasFor(__js_SVG_TRANSFORM_ROTATE)
    const SVG_TRANSFORM_SKEWX: Number = aliasFor(__js_SVG_TRANSFORM_SKEWX)
    const SVG_TRANSFORM_SKEWY: Number = aliasFor(__js_SVG_TRANSFORM_SKEWY)
  }
  const angle: Number = aliasFor(__js_angle)
  const matrix: DOMMatrix = aliasFor(__js_matrix)
  const type: Number = aliasFor(__js_type)
  function setMatrix(matrix: DOMMatrix2DInit): Any { aliasFor(__js_setMatrix) }
  function setMatrix(): Any { aliasFor(__js_setMatrix) }
  function setRotate(angle: Number, cx: Number, cy: Number): Any { aliasFor(__js_setRotate) }
  function setScale(sx: Number, sy: Number): Any { aliasFor(__js_setScale) }
  function setSkewX(angle: Number): Any { aliasFor(__js_setSkewX) }
  function setSkewY(angle: Number): Any { aliasFor(__js_setSkewY) }
  function setTranslate(tx: Number, ty: Number): Any { aliasFor(__js_setTranslate) }
  const SVG_TRANSFORM_UNKNOWN: Number = aliasFor(__js_SVG_TRANSFORM_UNKNOWN)
  const SVG_TRANSFORM_MATRIX: Number = aliasFor(__js_SVG_TRANSFORM_MATRIX)
  const SVG_TRANSFORM_TRANSLATE: Number = aliasFor(__js_SVG_TRANSFORM_TRANSLATE)
  const SVG_TRANSFORM_SCALE: Number = aliasFor(__js_SVG_TRANSFORM_SCALE)
  const SVG_TRANSFORM_ROTATE: Number = aliasFor(__js_SVG_TRANSFORM_ROTATE)
  const SVG_TRANSFORM_SKEWX: Number = aliasFor(__js_SVG_TRANSFORM_SKEWX)
  const SVG_TRANSFORM_SKEWY: Number = aliasFor(__js_SVG_TRANSFORM_SKEWY)
}
export interface SVGTransformList {
  """
  The SVGTransformList defines a list of SVGTransform objects.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList)
  """
  static {
    aliasFor(native "SVGTransformList")
    var prototype: SVGTransformList = aliasFor(__js_prototype)
    function new(): SVGTransformList { aliasFor(__op_new__) }
  }
  const length: Number = aliasFor(__js_length)
  const numberOfItems: Number = aliasFor(__js_numberOfItems)
  function appendItem(newItem: SVGTransform): SVGTransform { aliasFor(__js_appendItem) }
  function clear(): Any { aliasFor(__js_clear) }
  function consolidate(): Union[SVGTransform, Null] { aliasFor(__js_consolidate) }
  function createSVGTransformFromMatrix(matrix: DOMMatrix2DInit): SVGTransform { aliasFor(__js_createSVGTransformFromMatrix) }
  function createSVGTransformFromMatrix(): SVGTransform { aliasFor(__js_createSVGTransformFromMatrix) }
  function getItem(index: Number): SVGTransform { aliasFor(__js_getItem) }
  function initialize(newItem: SVGTransform): SVGTransform { aliasFor(__js_initialize) }
  function insertItemBefore(newItem: SVGTransform, index: Number): SVGTransform { aliasFor(__js_insertItemBefore) }
  function removeItem(index: Number): SVGTransform { aliasFor(__js_removeItem) }
  function replaceItem(newItem: SVGTransform, index: Number): SVGTransform { aliasFor(__js_replaceItem) }
  function __getitem__(index: Number): SVGTransform { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: SVGTransform): SVGTransform { aliasFor(__op_setitem__) }
}
export interface SVGURIReference {
  const href: SVGAnimatedString = aliasFor(__js_href)
}
export interface SVGUnitTypes {
  """
  A commonly used set of constants used for reflecting gradientUnits, patternContentUnits and other similar attributes.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUnitTypes)
  """
  static {
    aliasFor(native "SVGUnitTypes")
    var prototype: SVGUnitTypes = aliasFor(__js_prototype)
    function new(): SVGUnitTypes { aliasFor(__op_new__) }
    const SVG_UNIT_TYPE_UNKNOWN: Number = aliasFor(__js_SVG_UNIT_TYPE_UNKNOWN)
    const SVG_UNIT_TYPE_USERSPACEONUSE: Number = aliasFor(__js_SVG_UNIT_TYPE_USERSPACEONUSE)
    const SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Number = aliasFor(__js_SVG_UNIT_TYPE_OBJECTBOUNDINGBOX)
  }
  const SVG_UNIT_TYPE_UNKNOWN: Number = aliasFor(__js_SVG_UNIT_TYPE_UNKNOWN)
  const SVG_UNIT_TYPE_USERSPACEONUSE: Number = aliasFor(__js_SVG_UNIT_TYPE_USERSPACEONUSE)
  const SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Number = aliasFor(__js_SVG_UNIT_TYPE_OBJECTBOUNDINGBOX)
}
export interface SVGUseElement extends SVGGraphicsElement, SVGURIReference {
  """
  Corresponds to the <use> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement)
  """
  static {
    aliasFor(native "SVGUseElement")
    var prototype: SVGUseElement = aliasFor(__js_prototype)
    function new(): SVGUseElement { aliasFor(__op_new__) }
  }
  const height: SVGAnimatedLength = aliasFor(__js_height)
  const width: SVGAnimatedLength = aliasFor(__js_width)
  const x: SVGAnimatedLength = aliasFor(__js_x)
  const y: SVGAnimatedLength = aliasFor(__js_y)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SVGViewElement extends SVGElement, SVGFitToViewBox {
  """
  Provides access to the properties of <view> elements, as well as methods to manipulate them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGViewElement)
  """
  static {
    aliasFor(native "SVGViewElement")
    var prototype: SVGViewElement = aliasFor(__js_prototype)
    function new(): SVGViewElement { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface Screen {
  """
  A screen, usually the one on which the current window is being rendered, and is obtained using window.screen.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen)
  """
  static {
    aliasFor(native "Screen")
    var prototype: Screen = aliasFor(__js_prototype)
    function new(): Screen { aliasFor(__op_new__) }
  }
  const availHeight: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/availHeight)
  """ = aliasFor(__js_availHeight)
  const availWidth: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/availWidth)
  """ = aliasFor(__js_availWidth)
  const colorDepth: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/colorDepth)
  """ = aliasFor(__js_colorDepth)
  const height: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/height)
  """ = aliasFor(__js_height)
  const orientation: ScreenOrientation """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/orientation)
  """ = aliasFor(__js_orientation)
  const pixelDepth: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/pixelDepth)
  """ = aliasFor(__js_pixelDepth)
  const width: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/width)
  """ = aliasFor(__js_width)
}
export interface ScreenOrientationEventMap {
}
export interface ScreenOrientation extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation)
  """
  static {
    aliasFor(native "ScreenOrientation")
    var prototype: ScreenOrientation = aliasFor(__js_prototype)
    function new(): ScreenOrientation { aliasFor(__op_new__) }
  }
  const angle: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/angle)
  """ = aliasFor(__js_angle)
  var onchange: Union[function(ev: Event): Any, Null] = aliasFor(__js_onchange)
  const type: OrientationType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/type)
  """ = aliasFor(__js_type)
  function unlock(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/unlock)
    """
    aliasFor(__js_unlock)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface ScriptProcessorNodeEventMap {
}
export interface ScriptProcessorNode extends AudioNode {
  """
  @deprecated
  """
  static {
    aliasFor(native "ScriptProcessorNode")
    var prototype: ScriptProcessorNode = aliasFor(__js_prototype)
    function new(): ScriptProcessorNode { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SecurityPolicyViolationEvent extends Event {
  """
  Inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent)
  """
  static {
    aliasFor(native "SecurityPolicyViolationEvent")
    var prototype: SecurityPolicyViolationEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: SecurityPolicyViolationEventInit): SecurityPolicyViolationEvent { aliasFor(__op_new__) }
    function new(type: String): SecurityPolicyViolationEvent { aliasFor(__op_new__) }
  }
  const blockedURI: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/blockedURI)
  """ = aliasFor(__js_blockedURI)
  const columnNumber: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/columnNumber)
  """ = aliasFor(__js_columnNumber)
  const disposition: SecurityPolicyViolationEventDisposition """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/disposition)
  """ = aliasFor(__js_disposition)
  const documentURI: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/documentURI)
  """ = aliasFor(__js_documentURI)
  const effectiveDirective: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/effectiveDirective)
  """ = aliasFor(__js_effectiveDirective)
  const lineNumber: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/lineNumber)
  """ = aliasFor(__js_lineNumber)
  const originalPolicy: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/originalPolicy)
  """ = aliasFor(__js_originalPolicy)
  const referrer: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/referrer)
  """ = aliasFor(__js_referrer)
  const sample: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sample)
  """ = aliasFor(__js_sample)
  const sourceFile: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sourceFile)
  """ = aliasFor(__js_sourceFile)
  const statusCode: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/statusCode)
  """ = aliasFor(__js_statusCode)
  const violatedDirective: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/violatedDirective)
  """ = aliasFor(__js_violatedDirective)
}
export interface Selection {
  """
  A Selection object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call Window.getSelection().
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection)
  """
  static {
    aliasFor(native "Selection")
    var prototype: Selection = aliasFor(__js_prototype)
    function new(): Selection { aliasFor(__op_new__) }
  }
  const anchorNode: Union[Node, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/anchorNode)
  """ = aliasFor(__js_anchorNode)
  const anchorOffset: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/anchorOffset)
  """ = aliasFor(__js_anchorOffset)
  const focusNode: Union[Node, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/focusNode)
  """ = aliasFor(__js_focusNode)
  const focusOffset: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/focusOffset)
  """ = aliasFor(__js_focusOffset)
  const isCollapsed: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/isCollapsed)
  """ = aliasFor(__js_isCollapsed)
  const rangeCount: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/rangeCount)
  """ = aliasFor(__js_rangeCount)
  const type: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/type)
  """ = aliasFor(__js_type)
  function addRange(range: Range): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/addRange)
    """
    aliasFor(__js_addRange)
  }
  function collapse(node: Union[Node, Null], offset: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/collapse)
    """
    aliasFor(__js_collapse)
  }
  function collapse(node: Union[Node, Null]): Any { aliasFor(__js_collapse) }
  function collapseToEnd(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/collapseToEnd)
    """
    aliasFor(__js_collapseToEnd)
  }
  function collapseToStart(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/collapseToStart)
    """
    aliasFor(__js_collapseToStart)
  }
  function containsNode(node: Node, allowPartialContainment: Bool): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/containsNode)
    """
    aliasFor(__js_containsNode)
  }
  function containsNode(node: Node): Bool { aliasFor(__js_containsNode) }
  function deleteFromDocument(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/deleteFromDocument)
    """
    aliasFor(__js_deleteFromDocument)
  }
  function empty(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/removeAllRanges)
    """
    aliasFor(__js_empty)
  }
  function extend(node: Node, offset: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/extend)
    """
    aliasFor(__js_extend)
  }
  function extend(node: Node): Any { aliasFor(__js_extend) }
  function getRangeAt(index: Number): Range {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/getRangeAt)
    """
    aliasFor(__js_getRangeAt)
  }
  function modify(alter: String, direction: String, granularity: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/modify)
    """
    aliasFor(__js_modify)
  }
  function modify(alter: String, direction: String): Any { aliasFor(__js_modify) }
  function modify(alter: String): Any { aliasFor(__js_modify) }
  function modify(): Any { aliasFor(__js_modify) }
  function removeAllRanges(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/removeAllRanges)
    """
    aliasFor(__js_removeAllRanges)
  }
  function removeRange(range: Range): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/removeRange)
    """
    aliasFor(__js_removeRange)
  }
  function selectAllChildren(node: Node): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/selectAllChildren)
    """
    aliasFor(__js_selectAllChildren)
  }
  function setBaseAndExtent(anchorNode: Node, anchorOffset: Number, focusNode: Node, focusOffset: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/setBaseAndExtent)
    """
    aliasFor(__js_setBaseAndExtent)
  }
  function setPosition(node: Union[Node, Null], offset: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/collapse)
    """
    aliasFor(__js_setPosition)
  }
  function setPosition(node: Union[Node, Null]): Any { aliasFor(__js_setPosition) }
  function toString(): String { aliasFor(__js_toString) }
}
export interface ServiceWorkerEventMap extends AbstractWorkerEventMap {
}
export interface ServiceWorker extends EventTarget, AbstractWorker {
  """
  This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker)
  """
  static {
    aliasFor(native "ServiceWorker")
    var prototype: ServiceWorker = aliasFor(__js_prototype)
    function new(): ServiceWorker { aliasFor(__op_new__) }
  }
  var onstatechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/statechange_event)
  """ = aliasFor(__js_onstatechange)
  const scriptURL: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/scriptURL)
  """ = aliasFor(__js_scriptURL)
  const state: ServiceWorkerState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/state)
  """ = aliasFor(__js_state)
  function postMessage(message: Any, transfer: List[Transferable]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/postMessage)
    """
    aliasFor(__js_postMessage)
  }
  function postMessage(message: Any, options: StructuredSerializeOptions): Any { aliasFor(__js_postMessage) }
  function postMessage(message: Any): Any { aliasFor(__js_postMessage) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface ServiceWorkerContainerEventMap {
}
export interface ServiceWorkerContainer extends EventTarget {
  """
  The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer)
  """
  static {
    aliasFor(native "ServiceWorkerContainer")
    var prototype: ServiceWorkerContainer = aliasFor(__js_prototype)
    function new(): ServiceWorkerContainer { aliasFor(__op_new__) }
  }
  const controller: Union[ServiceWorker, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controller)
  """ = aliasFor(__js_controller)
  var oncontrollerchange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controllerchange_event)
  """ = aliasFor(__js_oncontrollerchange)
  var onmessage: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/message_event)
  """ = aliasFor(__js_onmessage)
  var onmessageerror: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/messageerror_event)
  """ = aliasFor(__js_onmessageerror)
  const ready: Promise[ServiceWorkerRegistration] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/ready)
  """ = aliasFor(__js_ready)
  function getRegistration(clientURL: Union[String, URL]): Promise[Union[ServiceWorkerRegistration, Null]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/getRegistration)
    """
    aliasFor(__js_getRegistration)
  }
  function getRegistration(): Promise[Union[ServiceWorkerRegistration, Null]] { aliasFor(__js_getRegistration) }
  function getRegistrations(): Promise[List[ServiceWorkerRegistration]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/getRegistrations)
    """
    aliasFor(__js_getRegistrations)
  }
  function register(scriptURL: Union[String, URL], options: RegistrationOptions): Promise[ServiceWorkerRegistration] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/register)
    """
    aliasFor(__js_register)
  }
  function register(scriptURL: Union[String, URL]): Promise[ServiceWorkerRegistration] { aliasFor(__js_register) }
  function startMessages(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/startMessages)
    """
    aliasFor(__js_startMessages)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface ServiceWorkerRegistrationEventMap {
}
export interface ServiceWorkerRegistration extends EventTarget {
  """
  This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin.
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration)
  """
  static {
    aliasFor(native "ServiceWorkerRegistration")
    var prototype: ServiceWorkerRegistration = aliasFor(__js_prototype)
    function new(): ServiceWorkerRegistration { aliasFor(__op_new__) }
  }
  const active: Union[ServiceWorker, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/active)
  """ = aliasFor(__js_active)
  const installing: Union[ServiceWorker, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/installing)
  """ = aliasFor(__js_installing)
  const navigationPreload: NavigationPreloadManager """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/navigationPreload)
  """ = aliasFor(__js_navigationPreload)
  var onupdatefound: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updatefound_event)
  """ = aliasFor(__js_onupdatefound)
  const pushManager: PushManager """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/pushManager)
  """ = aliasFor(__js_pushManager)
  const scope: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/scope)
  """ = aliasFor(__js_scope)
  const updateViaCache: ServiceWorkerUpdateViaCache """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updateViaCache)
  """ = aliasFor(__js_updateViaCache)
  const waiting: Union[ServiceWorker, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/waiting)
  """ = aliasFor(__js_waiting)
  function getNotifications(filter: GetNotificationOptions): Promise[List[Notification]] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/getNotifications)
    """
    aliasFor(__js_getNotifications)
  }
  function getNotifications(): Promise[List[Notification]] { aliasFor(__js_getNotifications) }
  function showNotification(title: String, options: NotificationOptions): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/showNotification)
    """
    aliasFor(__js_showNotification)
  }
  function showNotification(title: String): Promise[Any] { aliasFor(__js_showNotification) }
  function unregister(): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/unregister)
    """
    aliasFor(__js_unregister)
  }
  function update(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/update)
    """
    aliasFor(__js_update)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface ShadowRootEventMap {
}
export interface ShadowRoot extends DocumentFragment, DocumentOrShadowRoot, InnerHTML {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot)
  """
  static {
    aliasFor(native "ShadowRoot")
    var prototype: ShadowRoot = aliasFor(__js_prototype)
    function new(): ShadowRoot { aliasFor(__op_new__) }
  }
  const delegatesFocus: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/delegatesFocus)
  """ = aliasFor(__js_delegatesFocus)
  const host: Element """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/host)
  """ = aliasFor(__js_host)
  const mode: ShadowRootMode """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/mode)
  """ = aliasFor(__js_mode)
  var onslotchange: Union[function(ev: Event): Any, Null] = aliasFor(__js_onslotchange)
  const slotAssignment: SlotAssignmentMode """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/slotAssignment)
  """ = aliasFor(__js_slotAssignment)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SharedWorker extends EventTarget, AbstractWorker {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorker)
  """
  static {
    aliasFor(native "SharedWorker")
    var prototype: SharedWorker = aliasFor(__js_prototype)
    function new(scriptURL: Union[String, URL], options: Union[String, WorkerOptions]): SharedWorker { aliasFor(__op_new__) }
    function new(scriptURL: Union[String, URL]): SharedWorker { aliasFor(__op_new__) }
  }
  const port: MessagePort """
  Returns sharedWorker's MessagePort object which can be used to communicate with the global environment.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorker/port)
  """ = aliasFor(__js_port)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface Slottable {
  const assignedSlot: Union[HTMLSlotElement, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/assignedSlot)
  """ = aliasFor(__js_assignedSlot)
}
export interface SourceBufferEventMap {
}
export interface SourceBuffer extends EventTarget {
  """
  A chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object. This can be made up of one or several media segments.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer)
  """
  static {
    aliasFor(native "SourceBuffer")
    var prototype: SourceBuffer = aliasFor(__js_prototype)
    function new(): SourceBuffer { aliasFor(__op_new__) }
  }
  var appendWindowEnd: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowEnd)
  """ = aliasFor(__js_appendWindowEnd)
  var appendWindowStart: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowStart)
  """ = aliasFor(__js_appendWindowStart)
  const buffered: TimeRanges """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/buffered)
  """ = aliasFor(__js_buffered)
  var mode: AppendMode """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/mode)
  """ = aliasFor(__js_mode)
  var onabort: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/abort_event)
  """ = aliasFor(__js_onabort)
  var onerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/error_event)
  """ = aliasFor(__js_onerror)
  var onupdate: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/update_event)
  """ = aliasFor(__js_onupdate)
  var onupdateend: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updateend_event)
  """ = aliasFor(__js_onupdateend)
  var onupdatestart: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updatestart_event)
  """ = aliasFor(__js_onupdatestart)
  var timestampOffset: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/timestampOffset)
  """ = aliasFor(__js_timestampOffset)
  const updating: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updating)
  """ = aliasFor(__js_updating)
  function abort(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/abort)
    """
    aliasFor(__js_abort)
  }
  function appendBuffer(data: BufferSource): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendBuffer)
    """
    aliasFor(__js_appendBuffer)
  }
  function changeType(type: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/changeType)
    """
    aliasFor(__js_changeType)
  }
  function remove(start: Number, end: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/remove)
    """
    aliasFor(__js_remove)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SourceBufferListEventMap {
}
export interface SourceBufferList extends EventTarget {
  """
  A simple container list for multiple SourceBuffer objects.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList)
  """
  static {
    aliasFor(native "SourceBufferList")
    var prototype: SourceBufferList = aliasFor(__js_prototype)
    function new(): SourceBufferList { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList/length)
  """ = aliasFor(__js_length)
  var onaddsourcebuffer: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList/addsourcebuffer_event)
  """ = aliasFor(__js_onaddsourcebuffer)
  var onremovesourcebuffer: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList/removesourcebuffer_event)
  """ = aliasFor(__js_onremovesourcebuffer)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
  function __getitem__(index: Number): SourceBuffer { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: SourceBuffer): SourceBuffer { aliasFor(__op_setitem__) }
}
export interface SpeechRecognitionAlternative {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative)
  """
  static {
    aliasFor(native "SpeechRecognitionAlternative")
    var prototype: SpeechRecognitionAlternative = aliasFor(__js_prototype)
    function new(): SpeechRecognitionAlternative { aliasFor(__op_new__) }
  }
  const confidence: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/confidence)
  """ = aliasFor(__js_confidence)
  const transcript: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/transcript)
  """ = aliasFor(__js_transcript)
}
export interface SpeechRecognitionResult {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult)
  """
  static {
    aliasFor(native "SpeechRecognitionResult")
    var prototype: SpeechRecognitionResult = aliasFor(__js_prototype)
    function new(): SpeechRecognitionResult { aliasFor(__op_new__) }
  }
  const isFinal: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/isFinal)
  """ = aliasFor(__js_isFinal)
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/length)
  """ = aliasFor(__js_length)
  function item(index: Number): SpeechRecognitionAlternative {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/item)
    """
    aliasFor(__js_item)
  }
  function __getitem__(index: Number): SpeechRecognitionAlternative { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: SpeechRecognitionAlternative): SpeechRecognitionAlternative { aliasFor(__op_setitem__) }
}
export interface SpeechRecognitionResultList {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList)
  """
  static {
    aliasFor(native "SpeechRecognitionResultList")
    var prototype: SpeechRecognitionResultList = aliasFor(__js_prototype)
    function new(): SpeechRecognitionResultList { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList/length)
  """ = aliasFor(__js_length)
  function item(index: Number): SpeechRecognitionResult {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList/item)
    """
    aliasFor(__js_item)
  }
  function __getitem__(index: Number): SpeechRecognitionResult { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: SpeechRecognitionResult): SpeechRecognitionResult { aliasFor(__op_setitem__) }
}
export interface SpeechSynthesisEventMap {
}
export interface SpeechSynthesis extends EventTarget {
  """
  This Web Speech API interface is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis)
  """
  static {
    aliasFor(native "SpeechSynthesis")
    var prototype: SpeechSynthesis = aliasFor(__js_prototype)
    function new(): SpeechSynthesis { aliasFor(__op_new__) }
  }
  var onvoiceschanged: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/voiceschanged_event)
  """ = aliasFor(__js_onvoiceschanged)
  const paused: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/paused)
  """ = aliasFor(__js_paused)
  const pending: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pending)
  """ = aliasFor(__js_pending)
  const speaking: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speaking)
  """ = aliasFor(__js_speaking)
  function cancel(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/cancel)
    """
    aliasFor(__js_cancel)
  }
  function getVoices(): List[SpeechSynthesisVoice] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/getVoices)
    """
    aliasFor(__js_getVoices)
  }
  function pause(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pause)
    """
    aliasFor(__js_pause)
  }
  function resume(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/resume)
    """
    aliasFor(__js_resume)
  }
  function speak(utterance: SpeechSynthesisUtterance): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speak)
    """
    aliasFor(__js_speak)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SpeechSynthesisErrorEvent extends SpeechSynthesisEvent {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent)
  """
  static {
    aliasFor(native "SpeechSynthesisErrorEvent")
    var prototype: SpeechSynthesisErrorEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent { aliasFor(__op_new__) }
  }
  const error: SpeechSynthesisErrorCode """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent/error)
  """ = aliasFor(__js_error)
}
export interface SpeechSynthesisEvent extends Event {
  """
  This Web Speech API interface contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent)
  """
  static {
    aliasFor(native "SpeechSynthesisEvent")
    var prototype: SpeechSynthesisEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent { aliasFor(__op_new__) }
  }
  const charIndex: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charIndex)
  """ = aliasFor(__js_charIndex)
  const charLength: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charLength)
  """ = aliasFor(__js_charLength)
  const elapsedTime: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/elapsedTime)
  """ = aliasFor(__js_elapsedTime)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/name)
  """ = aliasFor(__js_name)
  const utterance: SpeechSynthesisUtterance """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/utterance)
  """ = aliasFor(__js_utterance)
}
export interface SpeechSynthesisUtteranceEventMap {
}
export interface SpeechSynthesisUtterance extends EventTarget {
  """
  This Web Speech API interface represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance)
  """
  static {
    aliasFor(native "SpeechSynthesisUtterance")
    var prototype: SpeechSynthesisUtterance = aliasFor(__js_prototype)
    function new(text: String): SpeechSynthesisUtterance { aliasFor(__op_new__) }
    function new(): SpeechSynthesisUtterance { aliasFor(__op_new__) }
  }
  var lang: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/lang)
  """ = aliasFor(__js_lang)
  var onboundary: Union[function(ev: SpeechSynthesisEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/boundary_event)
  """ = aliasFor(__js_onboundary)
  var onend: Union[function(ev: SpeechSynthesisEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/end_event)
  """ = aliasFor(__js_onend)
  var onerror: Union[function(ev: SpeechSynthesisErrorEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/error_event)
  """ = aliasFor(__js_onerror)
  var onmark: Union[function(ev: SpeechSynthesisEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/mark_event)
  """ = aliasFor(__js_onmark)
  var onpause: Union[function(ev: SpeechSynthesisEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pause_event)
  """ = aliasFor(__js_onpause)
  var onresume: Union[function(ev: SpeechSynthesisEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/resume_event)
  """ = aliasFor(__js_onresume)
  var onstart: Union[function(ev: SpeechSynthesisEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/start_event)
  """ = aliasFor(__js_onstart)
  var pitch: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pitch)
  """ = aliasFor(__js_pitch)
  var rate: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/rate)
  """ = aliasFor(__js_rate)
  var text: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/text)
  """ = aliasFor(__js_text)
  var voice: Union[SpeechSynthesisVoice, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/voice)
  """ = aliasFor(__js_voice)
  var volume: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/volume)
  """ = aliasFor(__js_volume)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface SpeechSynthesisVoice {
  """
  This Web Speech API interface represents a voice that the system supports. Every SpeechSynthesisVoice has its own relative speech service including information about language, name and URI.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice)
  """
  static {
    aliasFor(native "SpeechSynthesisVoice")
    var prototype: SpeechSynthesisVoice = aliasFor(__js_prototype)
    function new(): SpeechSynthesisVoice { aliasFor(__op_new__) }
  }
  const default: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/default)
  """ = aliasFor(__js_default)
  const lang: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/lang)
  """ = aliasFor(__js_lang)
  const localService: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/localService)
  """ = aliasFor(__js_localService)
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/name)
  """ = aliasFor(__js_name)
  const voiceURI: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/voiceURI)
  """ = aliasFor(__js_voiceURI)
}
export interface StaticRange extends AbstractRange {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StaticRange)
  """
  static {
    aliasFor(native "StaticRange")
    var prototype: StaticRange = aliasFor(__js_prototype)
    function new(init: StaticRangeInit): StaticRange { aliasFor(__op_new__) }
  }
}
export interface StereoPannerNode extends AudioNode {
  """
  The pan property takes a unitless value between -1 (full left pan) and 1 (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full PannerNode.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StereoPannerNode)
  """
  static {
    aliasFor(native "StereoPannerNode")
    var prototype: StereoPannerNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: StereoPannerOptions): StereoPannerNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): StereoPannerNode { aliasFor(__op_new__) }
  }
  const pan: AudioParam """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StereoPannerNode/pan)
  """ = aliasFor(__js_pan)
}
export interface Storage {
  """
  This Web Storage API interface provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage)
  """
  static {
    aliasFor(native "Storage")
    var prototype: Storage = aliasFor(__js_prototype)
    function new(): Storage { aliasFor(__op_new__) }
  }
  const length: Number """
  Returns the number of key/value pairs.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/length)
  """ = aliasFor(__js_length)
  function clear(): Any {
    """
    Removes all key/value pairs, if there are any.
       *
    Dispatches a storage event on Window objects holding an equivalent Storage object.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/clear)
    """
    aliasFor(__js_clear)
  }
  function getItem(key: String): Union[String, Null] {
    """
    Returns the current value associated with the given key, or null if the given key does not exist.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/getItem)
    """
    aliasFor(__js_getItem)
  }
  function key(index: Number): Union[String, Null] {
    """
    Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/key)
    """
    aliasFor(__js_key)
  }
  function removeItem(key: String): Any {
    """
    Removes the key/value pair with the given key, if a key/value pair with the given key exists.
       *
    Dispatches a storage event on Window objects holding an equivalent Storage object.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/removeItem)
    """
    aliasFor(__js_removeItem)
  }
  function setItem(key: String, value: String): Any {
    """
    Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.
       *
    Throws a "QuotaExceededError" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)
       *
    Dispatches a storage event on Window objects holding an equivalent Storage object.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/setItem)
    """
    aliasFor(__js_setItem)
  }
  function __getitem__(name: String): Any { aliasFor(__op_getitem__) }
  function __setitem__(name: String, value: Any): Any { aliasFor(__op_setitem__) }
}
export interface StorageEvent extends Event {
  """
  A StorageEvent is sent to a window when a storage area it has access to is changed within the context of another document.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent)
  """
  static {
    aliasFor(native "StorageEvent")
    var prototype: StorageEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: StorageEventInit): StorageEvent { aliasFor(__op_new__) }
    function new(type: String): StorageEvent { aliasFor(__op_new__) }
  }
  const key: Union[String, Null] """
  Returns the key of the storage item being changed.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/key)
  """ = aliasFor(__js_key)
  const newValue: Union[String, Null] """
  Returns the new value of the key of the storage item whose value is being changed.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/newValue)
  """ = aliasFor(__js_newValue)
  const oldValue: Union[String, Null] """
  Returns the old value of the key of the storage item whose value is being changed.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/oldValue)
  """ = aliasFor(__js_oldValue)
  const storageArea: Union[Storage, Null] """
  Returns the Storage object that was affected.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/storageArea)
  """ = aliasFor(__js_storageArea)
  const url: String """
  Returns the URL of the document whose storage item changed.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/url)
  """ = aliasFor(__js_url)
}
export interface StorageManager {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager)
  """
  static {
    aliasFor(native "StorageManager")
    var prototype: StorageManager = aliasFor(__js_prototype)
    function new(): StorageManager { aliasFor(__op_new__) }
  }
  function estimate(): Promise[StorageEstimate] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/estimate)
    """
    aliasFor(__js_estimate)
  }
  function getDirectory(): Promise[FileSystemDirectoryHandle] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/getDirectory)
    """
    aliasFor(__js_getDirectory)
  }
  function persist(): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/persist)
    """
    aliasFor(__js_persist)
  }
  function persisted(): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/persisted)
    """
    aliasFor(__js_persisted)
  }
}
export interface StyleMedia {
  var type: String = aliasFor(__js_type)
  function matchMedium(mediaquery: String): Bool { aliasFor(__js_matchMedium) }
}
export interface StylePropertyMap extends StylePropertyMapReadOnly {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap)
  """
  static {
    aliasFor(native "StylePropertyMap")
    var prototype: StylePropertyMap = aliasFor(__js_prototype)
    function new(): StylePropertyMap { aliasFor(__op_new__) }
  }
  function append(property: String, values: Union[CSSStyleValue, String], values: Union[CSSStyleValue, String], values: Union[CSSStyleValue, String]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/append)
    """
    aliasFor(__js_append)
  }
  function append(property: String, values: Union[CSSStyleValue, String], values: Union[CSSStyleValue, String]): Any { aliasFor(__js_append) }
  function append(property: String, values: Union[CSSStyleValue, String]): Any { aliasFor(__js_append) }
  function append(property: String): Any { aliasFor(__js_append) }
  function clear(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/clear)
    """
    aliasFor(__js_clear)
  }
  function delete(property: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/delete)
    """
    aliasFor(__js_delete)
  }
  function set(property: String, values: Union[CSSStyleValue, String], values: Union[CSSStyleValue, String], values: Union[CSSStyleValue, String]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/set)
    """
    aliasFor(__js_set)
  }
  function set(property: String, values: Union[CSSStyleValue, String], values: Union[CSSStyleValue, String]): Any { aliasFor(__js_set) }
  function set(property: String, values: Union[CSSStyleValue, String]): Any { aliasFor(__js_set) }
  function set(property: String): Any { aliasFor(__js_set) }
}
export interface StylePropertyMapReadOnly {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly)
  """
  static {
    aliasFor(native "StylePropertyMapReadOnly")
    var prototype: StylePropertyMapReadOnly = aliasFor(__js_prototype)
    function new(): StylePropertyMapReadOnly { aliasFor(__op_new__) }
  }
  const size: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/size)
  """ = aliasFor(__js_size)
  function get(property: String): Union[Null, CSSStyleValue] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/get)
    """
    aliasFor(__js_get)
  }
  function getAll(property: String): List[CSSStyleValue] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/getAll)
    """
    aliasFor(__js_getAll)
  }
  function has(property: String): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/has)
    """
    aliasFor(__js_has)
  }
  function forEach(callbackfn: function(value: List[CSSStyleValue], key: String, parent: StylePropertyMapReadOnly): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: List[CSSStyleValue], key: String, parent: StylePropertyMapReadOnly): Any): Any { aliasFor(__js_forEach) }
}
export interface StyleSheet {
  """
  A single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet)
  """
  static {
    aliasFor(native "StyleSheet")
    var prototype: StyleSheet = aliasFor(__js_prototype)
    function new(): StyleSheet { aliasFor(__op_new__) }
  }
  var disabled: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/disabled)
  """ = aliasFor(__js_disabled)
  const href: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/href)
  """ = aliasFor(__js_href)
  const media: MediaList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/media)
  """ = aliasFor(__js_media)
  const ownerNode: Union[Element, ProcessingInstruction, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/ownerNode)
  """ = aliasFor(__js_ownerNode)
  const parentStyleSheet: Union[CSSStyleSheet, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/parentStyleSheet)
  """ = aliasFor(__js_parentStyleSheet)
  const title: Union[String, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/title)
  """ = aliasFor(__js_title)
  const type: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/type)
  """ = aliasFor(__js_type)
}
export interface StyleSheetList {
  """
  A list of StyleSheet.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList)
  """
  static {
    aliasFor(native "StyleSheetList")
    var prototype: StyleSheetList = aliasFor(__js_prototype)
    function new(): StyleSheetList { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList/length)
  """ = aliasFor(__js_length)
  function item(index: Number): Union[CSSStyleSheet, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList/item)
    """
    aliasFor(__js_item)
  }
  function __getitem__(index: Number): CSSStyleSheet { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: CSSStyleSheet): CSSStyleSheet { aliasFor(__op_setitem__) }
}
export interface SubmitEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubmitEvent)
  """
  static {
    aliasFor(native "SubmitEvent")
    var prototype: SubmitEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: SubmitEventInit): SubmitEvent { aliasFor(__op_new__) }
    function new(type: String): SubmitEvent { aliasFor(__op_new__) }
  }
  const submitter: Union[HTMLElement, Null] """
  Returns the element representing the submit button that triggered the form submission, or null if the submission was not triggered by a button.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubmitEvent/submitter)
  """ = aliasFor(__js_submitter)
}
export interface SubtleCrypto {
  """
  This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto)
  """
  static {
    aliasFor(native "SubtleCrypto")
    var prototype: SubtleCrypto = aliasFor(__js_prototype)
    function new(): SubtleCrypto { aliasFor(__op_new__) }
  }
  function decrypt(algorithm: Union[AlgorithmIdentifier, RsaOaepParams, AesCtrParams, AesCbcParams, AesGcmParams], key: CryptoKey, data: BufferSource): Promise[ArrayBuffer] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/decrypt)
    """
    aliasFor(__js_decrypt)
  }
  function deriveBits(algorithm: Union[AlgorithmIdentifier, EcdhKeyDeriveParams, HkdfParams, Pbkdf2Params], baseKey: CryptoKey, length: Number): Promise[ArrayBuffer] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveBits)
    """
    aliasFor(__js_deriveBits)
  }
  function deriveKey(algorithm: Union[AlgorithmIdentifier, EcdhKeyDeriveParams, HkdfParams, Pbkdf2Params], baseKey: CryptoKey, derivedKeyType: Union[AlgorithmIdentifier, AesDerivedKeyParams, HmacImportParams, HkdfParams, Pbkdf2Params], extractable: Bool, keyUsages: List[KeyUsage]): Promise[CryptoKey] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey)
    """
    aliasFor(__js_deriveKey)
  }
  function digest(algorithm: AlgorithmIdentifier, data: BufferSource): Promise[ArrayBuffer] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/digest)
    """
    aliasFor(__js_digest)
  }
  function encrypt(algorithm: Union[AlgorithmIdentifier, RsaOaepParams, AesCtrParams, AesCbcParams, AesGcmParams], key: CryptoKey, data: BufferSource): Promise[ArrayBuffer] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/encrypt)
    """
    aliasFor(__js_encrypt)
  }
  function exportKey(format: _SStringjwk, key: CryptoKey): Promise[JsonWebKey] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey)
    """
    aliasFor(__js_exportKey)
  }
  function exportKey(format: Any, key: CryptoKey): Promise[ArrayBuffer] { aliasFor(__js_exportKey) }
  function exportKey(format: KeyFormat, key: CryptoKey): Promise[Union[ArrayBuffer, JsonWebKey]] { aliasFor(__js_exportKey) }
  function generateKey(algorithm: _SStringEd25519, extractable: Bool, keyUsages: List[Union[_SStringsign, _SStringverify]]): Promise[CryptoKeyPair] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
    """
    aliasFor(__js_generateKey)
  }
  function generateKey(algorithm: Union[RsaHashedKeyGenParams, EcKeyGenParams], extractable: Bool, keyUsages: List[KeyUsage]): Promise[CryptoKeyPair] { aliasFor(__js_generateKey) }
  function generateKey(algorithm: Union[AesKeyGenParams, HmacKeyGenParams, Pbkdf2Params], extractable: Bool, keyUsages: List[KeyUsage]): Promise[CryptoKey] { aliasFor(__js_generateKey) }
  function generateKey(algorithm: AlgorithmIdentifier, extractable: Bool, keyUsages: List[KeyUsage]): Promise[Union[CryptoKeyPair, CryptoKey]] { aliasFor(__js_generateKey) }
  function importKey(format: _SStringjwk, keyData: JsonWebKey, algorithm: Union[AlgorithmIdentifier, RsaHashedImportParams, EcKeyImportParams, HmacImportParams, AesKeyAlgorithm], extractable: Bool, keyUsages: List[KeyUsage]): Promise[CryptoKey] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey)
    """
    aliasFor(__js_importKey)
  }
  function importKey(format: Any, keyData: BufferSource, algorithm: Union[AlgorithmIdentifier, RsaHashedImportParams, EcKeyImportParams, HmacImportParams, AesKeyAlgorithm], extractable: Bool, keyUsages: List[KeyUsage]): Promise[CryptoKey] { aliasFor(__js_importKey) }
  function sign(algorithm: Union[AlgorithmIdentifier, RsaPssParams, EcdsaParams], key: CryptoKey, data: BufferSource): Promise[ArrayBuffer] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/sign)
    """
    aliasFor(__js_sign)
  }
  function unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: Union[AlgorithmIdentifier, RsaOaepParams, AesCtrParams, AesCbcParams, AesGcmParams], unwrappedKeyAlgorithm: Union[AlgorithmIdentifier, RsaHashedImportParams, EcKeyImportParams, HmacImportParams, AesKeyAlgorithm], extractable: Bool, keyUsages: List[KeyUsage]): Promise[CryptoKey] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey)
    """
    aliasFor(__js_unwrapKey)
  }
  function verify(algorithm: Union[AlgorithmIdentifier, RsaPssParams, EcdsaParams], key: CryptoKey, signature: BufferSource, data: BufferSource): Promise[Bool] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/verify)
    """
    aliasFor(__js_verify)
  }
  function wrapKey(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: Union[AlgorithmIdentifier, RsaOaepParams, AesCtrParams, AesCbcParams, AesGcmParams]): Promise[ArrayBuffer] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/wrapKey)
    """
    aliasFor(__js_wrapKey)
  }
}
export interface Text extends CharacterData, Slottable {
  """
  The textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element's text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Text)
  """
  static {
    aliasFor(native "Text")
    var prototype: Text = aliasFor(__js_prototype)
    function new(data: String): Text { aliasFor(__op_new__) }
    function new(): Text { aliasFor(__op_new__) }
  }
  const wholeText: String """
  Returns the combined data of all direct Text node siblings.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Text/wholeText)
  """ = aliasFor(__js_wholeText)
  function splitText(offset: Number): Text {
    """
    Splits data at the given offset and returns the remainder as Text node.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Text/splitText)
    """
    aliasFor(__js_splitText)
  }
}
export interface TextDecoder extends TextDecoderCommon {
  """
  A decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc. A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder)
  """
  static {
    aliasFor(native "TextDecoder")
    var prototype: TextDecoder = aliasFor(__js_prototype)
    function new(label: String, options: TextDecoderOptions): TextDecoder { aliasFor(__op_new__) }
    function new(label: String): TextDecoder { aliasFor(__op_new__) }
    function new(): TextDecoder { aliasFor(__op_new__) }
  }
  function decode(input: AllowSharedBufferSource, options: TextDecodeOptions): String {
    """
    Returns the result of running encoding's decoder. The method can be invoked zero or more times with options's stream set to true, and then once without options's stream (or set to false), to process a fragmented input. If the invocation without options's stream (or set to false) has no input, it's clearest to omit both arguments.
       *
    ```
    var string = "", decoder = new TextDecoder(encoding), buffer;
    while(buffer = next_chunk()) {
      string += decoder.decode(buffer, {stream:true});
    }
    string += decoder.decode(); // end-of-queue
    ```
       *
    If the error mode is "fatal" and encoding's decoder returns error, throws a TypeError.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/decode)
    """
    aliasFor(__js_decode)
  }
  function decode(input: AllowSharedBufferSource): String { aliasFor(__js_decode) }
  function decode(): String { aliasFor(__js_decode) }
}
export interface TextDecoderCommon {
  const encoding: String """
  Returns encoding's name, lowercased.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/encoding)
  """ = aliasFor(__js_encoding)
  const fatal: Bool """
  Returns true if error mode is "fatal", otherwise false.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/fatal)
  """ = aliasFor(__js_fatal)
  const ignoreBOM: Bool """
  Returns the value of ignore BOM.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/ignoreBOM)
  """ = aliasFor(__js_ignoreBOM)
}
export interface TextDecoderStream extends GenericTransformStream, TextDecoderCommon {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoderStream)
  """
  static {
    aliasFor(native "TextDecoderStream")
    var prototype: TextDecoderStream = aliasFor(__js_prototype)
    function new(label: String, options: TextDecoderOptions): TextDecoderStream { aliasFor(__op_new__) }
    function new(label: String): TextDecoderStream { aliasFor(__op_new__) }
    function new(): TextDecoderStream { aliasFor(__op_new__) }
  }
  const readable: Any = aliasFor(__js_readable)
  const writable: Any = aliasFor(__js_writable)
}
export interface TextEncoder extends TextEncoderCommon {
  """
  TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder)
  """
  static {
    aliasFor(native "TextEncoder")
    var prototype: TextEncoder = aliasFor(__js_prototype)
    function new(): TextEncoder { aliasFor(__op_new__) }
  }
  function encode(input: String): Uint8Array {
    """
    Returns the result of running UTF-8's encoder.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encode)
    """
    aliasFor(__js_encode)
  }
  function encode(): Uint8Array { aliasFor(__js_encode) }
  function encodeInto(source: String, destination: Uint8Array): TextEncoderEncodeIntoResult {
    """
    Runs the UTF-8 encoder on source, stores the result of that operation into destination, and returns the progress made as an object wherein read is the number of converted code units of source and written is the number of bytes modified in destination.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encodeInto)
    """
    aliasFor(__js_encodeInto)
  }
}
export interface TextEncoderCommon {
  const encoding: String """
  Returns "utf-8".
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encoding)
  """ = aliasFor(__js_encoding)
}
export interface TextEncoderStream extends GenericTransformStream, TextEncoderCommon {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoderStream)
  """
  static {
    aliasFor(native "TextEncoderStream")
    var prototype: TextEncoderStream = aliasFor(__js_prototype)
    function new(): TextEncoderStream { aliasFor(__op_new__) }
  }
  const readable: Any = aliasFor(__js_readable)
  const writable: Any = aliasFor(__js_writable)
}
export interface TextMetrics {
  """
  The dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics)
  """
  static {
    aliasFor(native "TextMetrics")
    var prototype: TextMetrics = aliasFor(__js_prototype)
    function new(): TextMetrics { aliasFor(__op_new__) }
  }
  const actualBoundingBoxAscent: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxAscent)
  """ = aliasFor(__js_actualBoundingBoxAscent)
  const actualBoundingBoxDescent: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxDescent)
  """ = aliasFor(__js_actualBoundingBoxDescent)
  const actualBoundingBoxLeft: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxLeft)
  """ = aliasFor(__js_actualBoundingBoxLeft)
  const actualBoundingBoxRight: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxRight)
  """ = aliasFor(__js_actualBoundingBoxRight)
  const alphabeticBaseline: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/alphabeticBaseline)
  """ = aliasFor(__js_alphabeticBaseline)
  const emHeightAscent: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightAscent)
  """ = aliasFor(__js_emHeightAscent)
  const emHeightDescent: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightDescent)
  """ = aliasFor(__js_emHeightDescent)
  const fontBoundingBoxAscent: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxAscent)
  """ = aliasFor(__js_fontBoundingBoxAscent)
  const fontBoundingBoxDescent: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxDescent)
  """ = aliasFor(__js_fontBoundingBoxDescent)
  const hangingBaseline: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/hangingBaseline)
  """ = aliasFor(__js_hangingBaseline)
  const ideographicBaseline: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/ideographicBaseline)
  """ = aliasFor(__js_ideographicBaseline)
  const width: Number """
  Returns the measurement described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/width)
  """ = aliasFor(__js_width)
}
export interface TextTrackEventMap {
}
export interface TextTrack extends EventTarget {
  """
  This interface also inherits properties from EventTarget.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack)
  """
  static {
    aliasFor(native "TextTrack")
    var prototype: TextTrack = aliasFor(__js_prototype)
    function new(): TextTrack { aliasFor(__op_new__) }
  }
  const activeCues: Union[TextTrackCueList, Null] """
  Returns the text track cues from the text track list of cues that are currently active (i.e. that start before the current playback position and end after it), as a TextTrackCueList object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/activeCues)
  """ = aliasFor(__js_activeCues)
  const cues: Union[TextTrackCueList, Null] """
  Returns the text track list of cues, as a TextTrackCueList object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/cues)
  """ = aliasFor(__js_cues)
  const id: String """
  Returns the ID of the given track.
     *
  For in-band tracks, this is the ID that can be used with a fragment if the format supports media fragment syntax, and that can be used with the getTrackById() method.
     *
  For TextTrack objects corresponding to track elements, this is the ID of the track element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/id)
  """ = aliasFor(__js_id)
  const inBandMetadataTrackDispatchType: String """
  Returns the text track in-band metadata track dispatch type string.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/inBandMetadataTrackDispatchType)
  """ = aliasFor(__js_inBandMetadataTrackDispatchType)
  const kind: TextTrackKind """
  Returns the text track kind string.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/kind)
  """ = aliasFor(__js_kind)
  const label: String """
  Returns the text track label, if there is one, or the empty string otherwise (indicating that a custom label probably needs to be generated from the other attributes of the object if the object is exposed to the user).
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/label)
  """ = aliasFor(__js_label)
  const language: String """
  Returns the text track language string.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/language)
  """ = aliasFor(__js_language)
  var mode: TextTrackMode """
  Returns the text track mode, represented by a string from the following list:
     *
  Can be set, to change the mode.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/mode)
  """ = aliasFor(__js_mode)
  var oncuechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/cuechange_event)
  """ = aliasFor(__js_oncuechange)
  function addCue(cue: TextTrackCue): Any {
    """
    Adds the given cue to textTrack's text track list of cues.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/addCue)
    """
    aliasFor(__js_addCue)
  }
  function removeCue(cue: TextTrackCue): Any {
    """
    Removes the given cue from textTrack's text track list of cues.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/removeCue)
    """
    aliasFor(__js_removeCue)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface TextTrackCueEventMap {
}
export interface TextTrackCue extends EventTarget {
  """
  TextTrackCues represent a string of text that will be displayed for some duration of time on a TextTrack. This includes the start and end times that the cue will be displayed. A TextTrackCue cannot be used directly, instead one of the derived types (e.g. VTTCue) must be used.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue)
  """
  static {
    aliasFor(native "TextTrackCue")
    var prototype: TextTrackCue = aliasFor(__js_prototype)
    function new(): TextTrackCue { aliasFor(__op_new__) }
  }
  var endTime: Number """
  Returns the text track cue end time, in seconds.
     *
  Can be set.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/endTime)
  """ = aliasFor(__js_endTime)
  var id: String """
  Returns the text track cue identifier.
     *
  Can be set.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/id)
  """ = aliasFor(__js_id)
  var onenter: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/enter_event)
  """ = aliasFor(__js_onenter)
  var onexit: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/exit_event)
  """ = aliasFor(__js_onexit)
  var pauseOnExit: Bool """
  Returns true if the text track cue pause-on-exit flag is set, false otherwise.
     *
  Can be set.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/pauseOnExit)
  """ = aliasFor(__js_pauseOnExit)
  var startTime: Number """
  Returns the text track cue start time, in seconds.
     *
  Can be set.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/startTime)
  """ = aliasFor(__js_startTime)
  const track: Union[TextTrack, Null] """
  Returns the TextTrack object to which this text track cue belongs, if any, or null otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/track)
  """ = aliasFor(__js_track)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface TextTrackCueList {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList)
  """
  static {
    aliasFor(native "TextTrackCueList")
    var prototype: TextTrackCueList = aliasFor(__js_prototype)
    function new(): TextTrackCueList { aliasFor(__op_new__) }
  }
  const length: Number """
  Returns the number of cues in the list.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList/length)
  """ = aliasFor(__js_length)
  function getCueById(id: String): Union[TextTrackCue, Null] {
    """
    Returns the first text track cue (in text track cue order) with text track cue identifier id.
       *
    Returns null if none of the cues have the given identifier or if the argument is the empty string.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList/getCueById)
    """
    aliasFor(__js_getCueById)
  }
  function __getitem__(index: Number): TextTrackCue { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: TextTrackCue): TextTrackCue { aliasFor(__op_setitem__) }
}
export interface TextTrackListEventMap {
}
export interface TextTrackList extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList)
  """
  static {
    aliasFor(native "TextTrackList")
    var prototype: TextTrackList = aliasFor(__js_prototype)
    function new(): TextTrackList { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/length)
  """ = aliasFor(__js_length)
  var onaddtrack: Union[function(ev: TrackEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/addtrack_event)
  """ = aliasFor(__js_onaddtrack)
  var onchange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/change_event)
  """ = aliasFor(__js_onchange)
  var onremovetrack: Union[function(ev: TrackEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/removetrack_event)
  """ = aliasFor(__js_onremovetrack)
  function getTrackById(id: String): Union[TextTrack, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/getTrackById)
    """
    aliasFor(__js_getTrackById)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
  function __getitem__(index: Number): TextTrack { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: TextTrack): TextTrack { aliasFor(__op_setitem__) }
}
export interface TimeRanges {
  """
  Used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the <audio> and <video> elements.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges)
  """
  static {
    aliasFor(native "TimeRanges")
    var prototype: TimeRanges = aliasFor(__js_prototype)
    function new(): TimeRanges { aliasFor(__op_new__) }
  }
  const length: Number """
  Returns the number of ranges in the object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges/length)
  """ = aliasFor(__js_length)
  function end(index: Number): Number {
    """
    Returns the time for the end of the range with the given index.
       *
    Throws an "IndexSizeError" DOMException if the index is out of range.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges/end)
    """
    aliasFor(__js_end)
  }
  function start(index: Number): Number {
    """
    Returns the time for the start of the range with the given index.
       *
    Throws an "IndexSizeError" DOMException if the index is out of range.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges/start)
    """
    aliasFor(__js_start)
  }
}
export interface ToggleEvent extends Event {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent)
  """
  static {
    aliasFor(native "ToggleEvent")
    var prototype: ToggleEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: ToggleEventInit): ToggleEvent { aliasFor(__op_new__) }
    function new(type: String): ToggleEvent { aliasFor(__op_new__) }
  }
  const newState: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent/newState)
  """ = aliasFor(__js_newState)
  const oldState: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent/oldState)
  """ = aliasFor(__js_oldState)
}
export interface Touch {
  """
  A single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch)
  """
  static {
    aliasFor(native "Touch")
    var prototype: Touch = aliasFor(__js_prototype)
    function new(touchInitDict: TouchInit): Touch { aliasFor(__op_new__) }
  }
  const clientX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientX)
  """ = aliasFor(__js_clientX)
  const clientY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientY)
  """ = aliasFor(__js_clientY)
  const force: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/force)
  """ = aliasFor(__js_force)
  const identifier: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/identifier)
  """ = aliasFor(__js_identifier)
  const pageX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageX)
  """ = aliasFor(__js_pageX)
  const pageY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageY)
  """ = aliasFor(__js_pageY)
  const radiusX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusX)
  """ = aliasFor(__js_radiusX)
  const radiusY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusY)
  """ = aliasFor(__js_radiusY)
  const rotationAngle: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/rotationAngle)
  """ = aliasFor(__js_rotationAngle)
  const screenX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenX)
  """ = aliasFor(__js_screenX)
  const screenY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenY)
  """ = aliasFor(__js_screenY)
  const target: EventTarget """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/target)
  """ = aliasFor(__js_target)
}
export interface TouchEvent extends UIEvent {
  """
  An event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent)
  """
  static {
    aliasFor(native "TouchEvent")
    var prototype: TouchEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: TouchEventInit): TouchEvent { aliasFor(__op_new__) }
    function new(type: String): TouchEvent { aliasFor(__op_new__) }
  }
  const altKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/altKey)
  """ = aliasFor(__js_altKey)
  const changedTouches: TouchList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/changedTouches)
  """ = aliasFor(__js_changedTouches)
  const ctrlKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/ctrlKey)
  """ = aliasFor(__js_ctrlKey)
  const metaKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/metaKey)
  """ = aliasFor(__js_metaKey)
  const shiftKey: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/shiftKey)
  """ = aliasFor(__js_shiftKey)
  const targetTouches: TouchList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/targetTouches)
  """ = aliasFor(__js_targetTouches)
  const touches: TouchList """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/touches)
  """ = aliasFor(__js_touches)
}
export interface TouchList {
  """
  A list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding TouchList object would have one Touch object for each finger, for a total of three entries.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList)
  """
  static {
    aliasFor(native "TouchList")
    var prototype: TouchList = aliasFor(__js_prototype)
    function new(): TouchList { aliasFor(__op_new__) }
  }
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList/length)
  """ = aliasFor(__js_length)
  function item(index: Number): Union[Touch, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList/item)
    """
    aliasFor(__js_item)
  }
  function __getitem__(index: Number): Touch { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: Touch): Touch { aliasFor(__op_setitem__) }
}
export interface TrackEvent extends Event {
  """
  The TrackEvent interface, part of the HTML DOM specification, is used for events which represent changes to the set of available tracks on an HTML media element; these events are addtrack and removetrack.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TrackEvent)
  """
  static {
    aliasFor(native "TrackEvent")
    var prototype: TrackEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: TrackEventInit): TrackEvent { aliasFor(__op_new__) }
    function new(type: String): TrackEvent { aliasFor(__op_new__) }
  }
  const track: Union[TextTrack, Null] """
  Returns the track object (TextTrack, AudioTrack, or VideoTrack) to which the event relates.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TrackEvent/track)
  """ = aliasFor(__js_track)
}
export interface TransformStream {
  static {
    aliasFor(native "TransformStream")
    var prototype: TransformStream = aliasFor(__js_prototype)
  }
}
export interface TransformStreamDefaultController {
  static {
    aliasFor(native "TransformStreamDefaultController")
    var prototype: TransformStreamDefaultController = aliasFor(__js_prototype)
    function new(): TransformStreamDefaultController { aliasFor(__op_new__) }
  }
}
export interface TransitionEvent extends Event {
  """
  Events providing information related to transitions.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent)
  """
  static {
    aliasFor(native "TransitionEvent")
    var prototype: TransitionEvent = aliasFor(__js_prototype)
    function new(type: String, transitionEventInitDict: TransitionEventInit): TransitionEvent { aliasFor(__op_new__) }
    function new(type: String): TransitionEvent { aliasFor(__op_new__) }
  }
  const elapsedTime: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/elapsedTime)
  """ = aliasFor(__js_elapsedTime)
  const propertyName: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/propertyName)
  """ = aliasFor(__js_propertyName)
  const pseudoElement: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/pseudoElement)
  """ = aliasFor(__js_pseudoElement)
}
export interface TreeWalker {
  """
  The nodes of a document subtree and a position within them.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker)
  """
  static {
    aliasFor(native "TreeWalker")
    var prototype: TreeWalker = aliasFor(__js_prototype)
    function new(): TreeWalker { aliasFor(__op_new__) }
  }
  var currentNode: Node """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/currentNode)
  """ = aliasFor(__js_currentNode)
  const filter: Union[NodeFilter, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/filter)
  """ = aliasFor(__js_filter)
  const root: Node """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/root)
  """ = aliasFor(__js_root)
  const whatToShow: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/whatToShow)
  """ = aliasFor(__js_whatToShow)
  function firstChild(): Union[Node, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/firstChild)
    """
    aliasFor(__js_firstChild)
  }
  function lastChild(): Union[Node, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/lastChild)
    """
    aliasFor(__js_lastChild)
  }
  function nextNode(): Union[Node, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/nextNode)
    """
    aliasFor(__js_nextNode)
  }
  function nextSibling(): Union[Node, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/nextSibling)
    """
    aliasFor(__js_nextSibling)
  }
  function parentNode(): Union[Node, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/parentNode)
    """
    aliasFor(__js_parentNode)
  }
  function previousNode(): Union[Node, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/previousNode)
    """
    aliasFor(__js_previousNode)
  }
  function previousSibling(): Union[Node, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/previousSibling)
    """
    aliasFor(__js_previousSibling)
  }
}
export interface UIEvent extends Event {
  """
  Simple user interface events.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent)
  """
  static {
    aliasFor(native "UIEvent")
    var prototype: UIEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: UIEventInit): UIEvent { aliasFor(__op_new__) }
    function new(type: String): UIEvent { aliasFor(__op_new__) }
  }
  const detail: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/detail)
  """ = aliasFor(__js_detail)
  const view: Union[Window, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/view)
  """ = aliasFor(__js_view)
}
export interface URL {
  """
  The URL interface represents an object providing static methods used for creating object URLs.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)
  """
  static {
    aliasFor(native "URL")
    var prototype: URL = aliasFor(__js_prototype)
    function new(url: Union[String, URL], base: Union[String, URL]): URL { aliasFor(__op_new__) }
    function new(url: Union[String, URL]): URL { aliasFor(__op_new__) }
    function canParse(url: Union[String, URL], base: String): Bool {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/canParse_static)
      """
      aliasFor(__js_canParse)
    }
    function canParse(url: Union[String, URL]): Bool { aliasFor(__js_canParse) }
    function createObjectURL(obj: Union[Blob, MediaSource]): String {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/createObjectURL_static)
      """
      aliasFor(__js_createObjectURL)
    }
    function revokeObjectURL(url: String): Any {
      """
      [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/revokeObjectURL_static)
      """
      aliasFor(__js_revokeObjectURL)
    }
  }
  var hash: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hash)
  """ = aliasFor(__js_hash)
  var host: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/host)
  """ = aliasFor(__js_host)
  var hostname: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hostname)
  """ = aliasFor(__js_hostname)
  var href: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/href)
  """ = aliasFor(__js_href)
  function toString(): String { aliasFor(__js_toString) }
  const origin: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/origin)
  """ = aliasFor(__js_origin)
  var password: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/password)
  """ = aliasFor(__js_password)
  var pathname: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/pathname)
  """ = aliasFor(__js_pathname)
  var port: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/port)
  """ = aliasFor(__js_port)
  var protocol: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/protocol)
  """ = aliasFor(__js_protocol)
  var search: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/search)
  """ = aliasFor(__js_search)
  const searchParams: URLSearchParams """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/searchParams)
  """ = aliasFor(__js_searchParams)
  var username: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/username)
  """ = aliasFor(__js_username)
  function toJSON(): String {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface webkitURL {
  static {
    aliasFor(native "webkitURL")
  }
}
export interface URLSearchParams {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams)
  """
  static {
    aliasFor(native "URLSearchParams")
    var prototype: URLSearchParams = aliasFor(__js_prototype)
    function new(init: Any): URLSearchParams { aliasFor(__op_new__) }
    function new(): URLSearchParams { aliasFor(__op_new__) }
  }
  const size: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/size)
  """ = aliasFor(__js_size)
  function append(name: String, value: String): Any {
    """
    Appends a specified key/value pair as a new search parameter.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/append)
    """
    aliasFor(__js_append)
  }
  function delete(name: String, value: String): Any {
    """
    Deletes the given search parameter, and its associated value, from the list of all search parameters.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/delete)
    """
    aliasFor(__js_delete)
  }
  function delete(name: String): Any { aliasFor(__js_delete) }
  function get(name: String): Union[String, Null] {
    """
    Returns the first value associated to the given search parameter.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/get)
    """
    aliasFor(__js_get)
  }
  function getAll(name: String): List[String] {
    """
    Returns all the values association with a given search parameter.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/getAll)
    """
    aliasFor(__js_getAll)
  }
  function has(name: String, value: String): Bool {
    """
    Returns a Boolean indicating if such a search parameter exists.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/has)
    """
    aliasFor(__js_has)
  }
  function has(name: String): Bool { aliasFor(__js_has) }
  function set(name: String, value: String): Any {
    """
    Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/set)
    """
    aliasFor(__js_set)
  }
  function sort(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/sort)
    """
    aliasFor(__js_sort)
  }
  function toString(): String {
    """
    Returns a string containing a query string suitable for use in a URL. Does not include the question mark.
    """
    aliasFor(__js_toString)
  }
  function forEach(callbackfn: function(value: String, key: String, parent: URLSearchParams): Any, thisArg: Any): Any { aliasFor(__js_forEach) }
  function forEach(callbackfn: function(value: String, key: String, parent: URLSearchParams): Any): Any { aliasFor(__js_forEach) }
}
export interface UserActivation {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation)
  """
  static {
    aliasFor(native "UserActivation")
    var prototype: UserActivation = aliasFor(__js_prototype)
    function new(): UserActivation { aliasFor(__op_new__) }
  }
  const hasBeenActive: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation/hasBeenActive)
  """ = aliasFor(__js_hasBeenActive)
  const isActive: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation/hasBeenActive)
  """ = aliasFor(__js_isActive)
}
export interface VTTCue extends TextTrackCue {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue)
  """
  static {
    aliasFor(native "VTTCue")
    var prototype: VTTCue = aliasFor(__js_prototype)
    function new(startTime: Number, endTime: Number, text: String): VTTCue { aliasFor(__op_new__) }
  }
  var align: AlignSetting """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/align)
  """ = aliasFor(__js_align)
  var line: LineAndPositionSetting """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/line)
  """ = aliasFor(__js_line)
  var lineAlign: LineAlignSetting """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/lineAlign)
  """ = aliasFor(__js_lineAlign)
  var position: LineAndPositionSetting """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/position)
  """ = aliasFor(__js_position)
  var positionAlign: PositionAlignSetting """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/positionAlign)
  """ = aliasFor(__js_positionAlign)
  var region: Union[VTTRegion, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/region)
  """ = aliasFor(__js_region)
  var size: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/size)
  """ = aliasFor(__js_size)
  var snapToLines: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/snapToLines)
  """ = aliasFor(__js_snapToLines)
  var text: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/text)
  """ = aliasFor(__js_text)
  var vertical: DirectionSetting """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/vertical)
  """ = aliasFor(__js_vertical)
  function getCueAsHTML(): DocumentFragment {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/getCueAsHTML)
    """
    aliasFor(__js_getCueAsHTML)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface VTTRegion {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion)
  """
  static {
    aliasFor(native "VTTRegion")
    var prototype: VTTRegion = aliasFor(__js_prototype)
    function new(): VTTRegion { aliasFor(__op_new__) }
  }
  var id: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/id)
  """ = aliasFor(__js_id)
  var lines: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/lines)
  """ = aliasFor(__js_lines)
  var regionAnchorX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/regionAnchorX)
  """ = aliasFor(__js_regionAnchorX)
  var regionAnchorY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/regionAnchorY)
  """ = aliasFor(__js_regionAnchorY)
  var scroll: ScrollSetting """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/scroll)
  """ = aliasFor(__js_scroll)
  var viewportAnchorX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/viewportAnchorX)
  """ = aliasFor(__js_viewportAnchorX)
  var viewportAnchorY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/viewportAnchorY)
  """ = aliasFor(__js_viewportAnchorY)
  var width: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion/width)
  """ = aliasFor(__js_width)
}
export interface ValidityState {
  """
  The validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState)
  """
  static {
    aliasFor(native "ValidityState")
    var prototype: ValidityState = aliasFor(__js_prototype)
    function new(): ValidityState { aliasFor(__op_new__) }
  }
  const badInput: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/badInput)
  """ = aliasFor(__js_badInput)
  const customError: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/customError)
  """ = aliasFor(__js_customError)
  const patternMismatch: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/patternMismatch)
  """ = aliasFor(__js_patternMismatch)
  const rangeOverflow: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeOverflow)
  """ = aliasFor(__js_rangeOverflow)
  const rangeUnderflow: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeUnderflow)
  """ = aliasFor(__js_rangeUnderflow)
  const stepMismatch: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/stepMismatch)
  """ = aliasFor(__js_stepMismatch)
  const tooLong: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/tooLong)
  """ = aliasFor(__js_tooLong)
  const tooShort: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/tooShort)
  """ = aliasFor(__js_tooShort)
  const typeMismatch: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/typeMismatch)
  """ = aliasFor(__js_typeMismatch)
  const valid: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/valid)
  """ = aliasFor(__js_valid)
  const valueMissing: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/valueMissing)
  """ = aliasFor(__js_valueMissing)
}
export interface VideoColorSpace {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace)
  """
  static {
    aliasFor(native "VideoColorSpace")
    var prototype: VideoColorSpace = aliasFor(__js_prototype)
    function new(init: VideoColorSpaceInit): VideoColorSpace { aliasFor(__op_new__) }
    function new(): VideoColorSpace { aliasFor(__op_new__) }
  }
  const fullRange: Union[Bool, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/fullRange)
  """ = aliasFor(__js_fullRange)
  const matrix: Union[VideoMatrixCoefficients, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/matrix)
  """ = aliasFor(__js_matrix)
  const primaries: Union[VideoColorPrimaries, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/primaries)
  """ = aliasFor(__js_primaries)
  const transfer: Union[VideoTransferCharacteristics, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/transfer)
  """ = aliasFor(__js_transfer)
  function toJSON(): VideoColorSpaceInit {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/toJSON)
    """
    aliasFor(__js_toJSON)
  }
}
export interface VideoDecoderEventMap {
}
export interface VideoDecoder extends EventTarget {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder)
  """
  static {
    aliasFor(native "VideoDecoder")
    var prototype: VideoDecoder = aliasFor(__js_prototype)
    function new(init: VideoDecoderInit): VideoDecoder { aliasFor(__op_new__) }
    function isConfigSupported(config: VideoDecoderConfig): Promise[VideoDecoderSupport] { aliasFor(__js_isConfigSupported) }
  }
  const decodeQueueSize: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decodeQueueSize)
  """ = aliasFor(__js_decodeQueueSize)
  var ondequeue: Union[function(ev: Event): Any, Null] = aliasFor(__js_ondequeue)
  const state: CodecState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/state)
  """ = aliasFor(__js_state)
  function close(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/close)
    """
    aliasFor(__js_close)
  }
  function configure(config: VideoDecoderConfig): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/configure)
    """
    aliasFor(__js_configure)
  }
  function decode(chunk: EncodedVideoChunk): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decode)
    """
    aliasFor(__js_decode)
  }
  function flush(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/flush)
    """
    aliasFor(__js_flush)
  }
  function reset(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/reset)
    """
    aliasFor(__js_reset)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface VideoEncoderEventMap {
}
export interface VideoEncoder extends EventTarget {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder)
  """
  static {
    aliasFor(native "VideoEncoder")
    var prototype: VideoEncoder = aliasFor(__js_prototype)
    function new(init: VideoEncoderInit): VideoEncoder { aliasFor(__op_new__) }
    function isConfigSupported(config: VideoEncoderConfig): Promise[VideoEncoderSupport] { aliasFor(__js_isConfigSupported) }
  }
  const encodeQueueSize: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encodeQueueSize)
  """ = aliasFor(__js_encodeQueueSize)
  var ondequeue: Union[function(ev: Event): Any, Null] = aliasFor(__js_ondequeue)
  const state: CodecState """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/state)
  """ = aliasFor(__js_state)
  function close(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/close)
    """
    aliasFor(__js_close)
  }
  function configure(config: VideoEncoderConfig): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/configure)
    """
    aliasFor(__js_configure)
  }
  function encode(frame: VideoFrame, options: VideoEncoderEncodeOptions): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encode)
    """
    aliasFor(__js_encode)
  }
  function encode(frame: VideoFrame): Any { aliasFor(__js_encode) }
  function flush(): Promise[Any] { aliasFor(__js_flush) }
  function reset(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/reset)
    """
    aliasFor(__js_reset)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface VideoFrame {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame)
  """
  static {
    aliasFor(native "VideoFrame")
    var prototype: VideoFrame = aliasFor(__js_prototype)
    function new(image: CanvasImageSource, init: VideoFrameInit): VideoFrame { aliasFor(__op_new__) }
    function new(image: CanvasImageSource): VideoFrame { aliasFor(__op_new__) }
    function new(data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame { aliasFor(__op_new__) }
  }
  const codedHeight: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedHeight)
  """ = aliasFor(__js_codedHeight)
  const codedRect: Union[DOMRectReadOnly, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedRect)
  """ = aliasFor(__js_codedRect)
  const codedWidth: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedWidth)
  """ = aliasFor(__js_codedWidth)
  const colorSpace: VideoColorSpace """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/colorSpace)
  """ = aliasFor(__js_colorSpace)
  const displayHeight: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayHeight)
  """ = aliasFor(__js_displayHeight)
  const displayWidth: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayWidth)
  """ = aliasFor(__js_displayWidth)
  const duration: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/duration)
  """ = aliasFor(__js_duration)
  const format: Union[VideoPixelFormat, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/format)
  """ = aliasFor(__js_format)
  const timestamp: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/timestamp)
  """ = aliasFor(__js_timestamp)
  const visibleRect: Union[DOMRectReadOnly, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/visibleRect)
  """ = aliasFor(__js_visibleRect)
  function allocationSize(options: VideoFrameCopyToOptions): Number {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/allocationSize)
    """
    aliasFor(__js_allocationSize)
  }
  function allocationSize(): Number { aliasFor(__js_allocationSize) }
  function clone(): VideoFrame {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/clone)
    """
    aliasFor(__js_clone)
  }
  function close(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/close)
    """
    aliasFor(__js_close)
  }
  function copyTo(destination: AllowSharedBufferSource, options: VideoFrameCopyToOptions): Promise[List[PlaneLayout]] { aliasFor(__js_copyTo) }
  function copyTo(destination: AllowSharedBufferSource): Promise[List[PlaneLayout]] { aliasFor(__js_copyTo) }
}
export interface VideoPlaybackQuality {
  """
  Returned by the HTMLVideoElement.getVideoPlaybackQuality() method and contains metrics that can be used to determine the playback quality of a video.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality)
  """
  static {
    aliasFor(native "VideoPlaybackQuality")
    var prototype: VideoPlaybackQuality = aliasFor(__js_prototype)
    function new(): VideoPlaybackQuality { aliasFor(__op_new__) }
  }
  const creationTime: DOMHighResTimeStamp """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/creationTime)
  """ = aliasFor(__js_creationTime)
  const droppedVideoFrames: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/droppedVideoFrames)
  """ = aliasFor(__js_droppedVideoFrames)
  const totalVideoFrames: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/totalVideoFrames)
  """ = aliasFor(__js_totalVideoFrames)
}
export interface VisualViewportEventMap {
}
export interface VisualViewport extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport)
  """
  static {
    aliasFor(native "VisualViewport")
    var prototype: VisualViewport = aliasFor(__js_prototype)
    function new(): VisualViewport { aliasFor(__op_new__) }
  }
  const height: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/height)
  """ = aliasFor(__js_height)
  const offsetLeft: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetLeft)
  """ = aliasFor(__js_offsetLeft)
  const offsetTop: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetTop)
  """ = aliasFor(__js_offsetTop)
  var onresize: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/resize_event)
  """ = aliasFor(__js_onresize)
  var onscroll: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/scroll_event)
  """ = aliasFor(__js_onscroll)
  const pageLeft: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageLeft)
  """ = aliasFor(__js_pageLeft)
  const pageTop: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageTop)
  """ = aliasFor(__js_pageTop)
  const scale: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/scale)
  """ = aliasFor(__js_scale)
  const width: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/width)
  """ = aliasFor(__js_width)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface WEBGL_color_buffer_float {
  const RGBA32F_EXT: Number = aliasFor(__js_RGBA32F_EXT)
  const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT)
  const UNSIGNED_NORMALIZED_EXT: Number = aliasFor(__js_UNSIGNED_NORMALIZED_EXT)
}
export interface WEBGL_compressed_texture_astc {
  function getSupportedProfiles(): List[String] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc/getSupportedProfiles)
    """
    aliasFor(__js_getSupportedProfiles)
  }
  const COMPRESSED_RGBA_ASTC_4x4_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_4x4_KHR)
  const COMPRESSED_RGBA_ASTC_5x4_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_5x4_KHR)
  const COMPRESSED_RGBA_ASTC_5x5_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_5x5_KHR)
  const COMPRESSED_RGBA_ASTC_6x5_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_6x5_KHR)
  const COMPRESSED_RGBA_ASTC_6x6_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_6x6_KHR)
  const COMPRESSED_RGBA_ASTC_8x5_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_8x5_KHR)
  const COMPRESSED_RGBA_ASTC_8x6_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_8x6_KHR)
  const COMPRESSED_RGBA_ASTC_8x8_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_8x8_KHR)
  const COMPRESSED_RGBA_ASTC_10x5_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_10x5_KHR)
  const COMPRESSED_RGBA_ASTC_10x6_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_10x6_KHR)
  const COMPRESSED_RGBA_ASTC_10x8_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_10x8_KHR)
  const COMPRESSED_RGBA_ASTC_10x10_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_10x10_KHR)
  const COMPRESSED_RGBA_ASTC_12x10_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_12x10_KHR)
  const COMPRESSED_RGBA_ASTC_12x12_KHR: Number = aliasFor(__js_COMPRESSED_RGBA_ASTC_12x12_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR)
  const COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR)
}
export interface WEBGL_compressed_texture_etc {
  const COMPRESSED_R11_EAC: Number = aliasFor(__js_COMPRESSED_R11_EAC)
  const COMPRESSED_SIGNED_R11_EAC: Number = aliasFor(__js_COMPRESSED_SIGNED_R11_EAC)
  const COMPRESSED_RG11_EAC: Number = aliasFor(__js_COMPRESSED_RG11_EAC)
  const COMPRESSED_SIGNED_RG11_EAC: Number = aliasFor(__js_COMPRESSED_SIGNED_RG11_EAC)
  const COMPRESSED_RGB8_ETC2: Number = aliasFor(__js_COMPRESSED_RGB8_ETC2)
  const COMPRESSED_SRGB8_ETC2: Number = aliasFor(__js_COMPRESSED_SRGB8_ETC2)
  const COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: Number = aliasFor(__js_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2)
  const COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: Number = aliasFor(__js_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2)
  const COMPRESSED_RGBA8_ETC2_EAC: Number = aliasFor(__js_COMPRESSED_RGBA8_ETC2_EAC)
  const COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: Number = aliasFor(__js_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC)
}
export interface WEBGL_compressed_texture_etc1 {
  const COMPRESSED_RGB_ETC1_WEBGL: Number = aliasFor(__js_COMPRESSED_RGB_ETC1_WEBGL)
}
export interface WEBGL_compressed_texture_pvrtc {
  const COMPRESSED_RGB_PVRTC_4BPPV1_IMG: Number = aliasFor(__js_COMPRESSED_RGB_PVRTC_4BPPV1_IMG)
  const COMPRESSED_RGB_PVRTC_2BPPV1_IMG: Number = aliasFor(__js_COMPRESSED_RGB_PVRTC_2BPPV1_IMG)
  const COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: Number = aliasFor(__js_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG)
  const COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: Number = aliasFor(__js_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG)
}
export interface WEBGL_compressed_texture_s3tc {
  const COMPRESSED_RGB_S3TC_DXT1_EXT: Number = aliasFor(__js_COMPRESSED_RGB_S3TC_DXT1_EXT)
  const COMPRESSED_RGBA_S3TC_DXT1_EXT: Number = aliasFor(__js_COMPRESSED_RGBA_S3TC_DXT1_EXT)
  const COMPRESSED_RGBA_S3TC_DXT3_EXT: Number = aliasFor(__js_COMPRESSED_RGBA_S3TC_DXT3_EXT)
  const COMPRESSED_RGBA_S3TC_DXT5_EXT: Number = aliasFor(__js_COMPRESSED_RGBA_S3TC_DXT5_EXT)
}
export interface WEBGL_compressed_texture_s3tc_srgb {
  const COMPRESSED_SRGB_S3TC_DXT1_EXT: Number = aliasFor(__js_COMPRESSED_SRGB_S3TC_DXT1_EXT)
  const COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: Number = aliasFor(__js_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT)
  const COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: Number = aliasFor(__js_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT)
  const COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: Number = aliasFor(__js_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT)
}
export interface WEBGL_debug_renderer_info {
  const UNMASKED_VENDOR_WEBGL: Number = aliasFor(__js_UNMASKED_VENDOR_WEBGL)
  const UNMASKED_RENDERER_WEBGL: Number = aliasFor(__js_UNMASKED_RENDERER_WEBGL)
}
export interface WEBGL_debug_shaders {
  function getTranslatedShaderSource(shader: WebGLShader): String {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders/getTranslatedShaderSource)
    """
    aliasFor(__js_getTranslatedShaderSource)
  }
}
export interface WEBGL_depth_texture {
  const UNSIGNED_INT_24_8_WEBGL: Number = aliasFor(__js_UNSIGNED_INT_24_8_WEBGL)
}
export interface WEBGL_draw_buffers {
  function drawBuffersWEBGL(buffers: List[GLenum]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL)
    """
    aliasFor(__js_drawBuffersWEBGL)
  }
  const COLOR_ATTACHMENT0_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT0_WEBGL)
  const COLOR_ATTACHMENT1_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT1_WEBGL)
  const COLOR_ATTACHMENT2_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT2_WEBGL)
  const COLOR_ATTACHMENT3_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT3_WEBGL)
  const COLOR_ATTACHMENT4_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT4_WEBGL)
  const COLOR_ATTACHMENT5_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT5_WEBGL)
  const COLOR_ATTACHMENT6_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT6_WEBGL)
  const COLOR_ATTACHMENT7_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT7_WEBGL)
  const COLOR_ATTACHMENT8_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT8_WEBGL)
  const COLOR_ATTACHMENT9_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT9_WEBGL)
  const COLOR_ATTACHMENT10_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT10_WEBGL)
  const COLOR_ATTACHMENT11_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT11_WEBGL)
  const COLOR_ATTACHMENT12_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT12_WEBGL)
  const COLOR_ATTACHMENT13_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT13_WEBGL)
  const COLOR_ATTACHMENT14_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT14_WEBGL)
  const COLOR_ATTACHMENT15_WEBGL: Number = aliasFor(__js_COLOR_ATTACHMENT15_WEBGL)
  const DRAW_BUFFER0_WEBGL: Number = aliasFor(__js_DRAW_BUFFER0_WEBGL)
  const DRAW_BUFFER1_WEBGL: Number = aliasFor(__js_DRAW_BUFFER1_WEBGL)
  const DRAW_BUFFER2_WEBGL: Number = aliasFor(__js_DRAW_BUFFER2_WEBGL)
  const DRAW_BUFFER3_WEBGL: Number = aliasFor(__js_DRAW_BUFFER3_WEBGL)
  const DRAW_BUFFER4_WEBGL: Number = aliasFor(__js_DRAW_BUFFER4_WEBGL)
  const DRAW_BUFFER5_WEBGL: Number = aliasFor(__js_DRAW_BUFFER5_WEBGL)
  const DRAW_BUFFER6_WEBGL: Number = aliasFor(__js_DRAW_BUFFER6_WEBGL)
  const DRAW_BUFFER7_WEBGL: Number = aliasFor(__js_DRAW_BUFFER7_WEBGL)
  const DRAW_BUFFER8_WEBGL: Number = aliasFor(__js_DRAW_BUFFER8_WEBGL)
  const DRAW_BUFFER9_WEBGL: Number = aliasFor(__js_DRAW_BUFFER9_WEBGL)
  const DRAW_BUFFER10_WEBGL: Number = aliasFor(__js_DRAW_BUFFER10_WEBGL)
  const DRAW_BUFFER11_WEBGL: Number = aliasFor(__js_DRAW_BUFFER11_WEBGL)
  const DRAW_BUFFER12_WEBGL: Number = aliasFor(__js_DRAW_BUFFER12_WEBGL)
  const DRAW_BUFFER13_WEBGL: Number = aliasFor(__js_DRAW_BUFFER13_WEBGL)
  const DRAW_BUFFER14_WEBGL: Number = aliasFor(__js_DRAW_BUFFER14_WEBGL)
  const DRAW_BUFFER15_WEBGL: Number = aliasFor(__js_DRAW_BUFFER15_WEBGL)
  const MAX_COLOR_ATTACHMENTS_WEBGL: Number = aliasFor(__js_MAX_COLOR_ATTACHMENTS_WEBGL)
  const MAX_DRAW_BUFFERS_WEBGL: Number = aliasFor(__js_MAX_DRAW_BUFFERS_WEBGL)
}
export interface WEBGL_lose_context {
  function loseContext(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context/loseContext)
    """
    aliasFor(__js_loseContext)
  }
  function restoreContext(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context/restoreContext)
    """
    aliasFor(__js_restoreContext)
  }
}
export interface WEBGL_multi_draw {
  function multiDrawArraysInstancedWEBGL(mode: GLenum, firstsList: Union[Int32Array, List[GLint]], firstsOffset: Number, countsList: Union[Int32Array, List[GLsizei]], countsOffset: Number, instanceCountsList: Union[Int32Array, List[GLsizei]], instanceCountsOffset: Number, drawcount: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL)
    """
    aliasFor(__js_multiDrawArraysInstancedWEBGL)
  }
  function multiDrawArraysWEBGL(mode: GLenum, firstsList: Union[Int32Array, List[GLint]], firstsOffset: Number, countsList: Union[Int32Array, List[GLsizei]], countsOffset: Number, drawcount: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL)
    """
    aliasFor(__js_multiDrawArraysWEBGL)
  }
  function multiDrawElementsInstancedWEBGL(mode: GLenum, countsList: Union[Int32Array, List[GLsizei]], countsOffset: Number, type: GLenum, offsetsList: Union[Int32Array, List[GLsizei]], offsetsOffset: Number, instanceCountsList: Union[Int32Array, List[GLsizei]], instanceCountsOffset: Number, drawcount: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL)
    """
    aliasFor(__js_multiDrawElementsInstancedWEBGL)
  }
  function multiDrawElementsWEBGL(mode: GLenum, countsList: Union[Int32Array, List[GLsizei]], countsOffset: Number, type: GLenum, offsetsList: Union[Int32Array, List[GLsizei]], offsetsOffset: Number, drawcount: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL)
    """
    aliasFor(__js_multiDrawElementsWEBGL)
  }
}
export interface WakeLock {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLock)
  """
  static {
    aliasFor(native "WakeLock")
    var prototype: WakeLock = aliasFor(__js_prototype)
    function new(): WakeLock { aliasFor(__op_new__) }
  }
  function request(type: WakeLockType): Promise[WakeLockSentinel] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLock/request)
    """
    aliasFor(__js_request)
  }
  function request(): Promise[WakeLockSentinel] { aliasFor(__js_request) }
}
export interface WakeLockSentinelEventMap {
}
export interface WakeLockSentinel extends EventTarget {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel)
  """
  static {
    aliasFor(native "WakeLockSentinel")
    var prototype: WakeLockSentinel = aliasFor(__js_prototype)
    function new(): WakeLockSentinel { aliasFor(__op_new__) }
  }
  var onrelease: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/release_event)
  """ = aliasFor(__js_onrelease)
  const released: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/released)
  """ = aliasFor(__js_released)
  const type: WakeLockType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/type)
  """ = aliasFor(__js_type)
  function release(): Promise[Any] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/release)
    """
    aliasFor(__js_release)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface WaveShaperNode extends AudioNode {
  """
  A WaveShaperNode always has exactly one input and one output.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode)
  """
  static {
    aliasFor(native "WaveShaperNode")
    var prototype: WaveShaperNode = aliasFor(__js_prototype)
    function new(context: BaseAudioContext, options: WaveShaperOptions): WaveShaperNode { aliasFor(__op_new__) }
    function new(context: BaseAudioContext): WaveShaperNode { aliasFor(__op_new__) }
  }
  var curve: Union[Float32Array, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/curve)
  """ = aliasFor(__js_curve)
  var oversample: OverSampleType """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/oversample)
  """ = aliasFor(__js_oversample)
}
export interface WebGL2RenderingContext extends WebGL2RenderingContextBase, WebGL2RenderingContextOverloads, WebGLRenderingContextBase {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext)
  """
  static {
    aliasFor(native "WebGL2RenderingContext")
    var prototype: WebGL2RenderingContext = aliasFor(__js_prototype)
    function new(): WebGL2RenderingContext { aliasFor(__op_new__) }
    const READ_BUFFER: Number = aliasFor(__js_READ_BUFFER)
    const UNPACK_ROW_LENGTH: Number = aliasFor(__js_UNPACK_ROW_LENGTH)
    const UNPACK_SKIP_ROWS: Number = aliasFor(__js_UNPACK_SKIP_ROWS)
    const UNPACK_SKIP_PIXELS: Number = aliasFor(__js_UNPACK_SKIP_PIXELS)
    const PACK_ROW_LENGTH: Number = aliasFor(__js_PACK_ROW_LENGTH)
    const PACK_SKIP_ROWS: Number = aliasFor(__js_PACK_SKIP_ROWS)
    const PACK_SKIP_PIXELS: Number = aliasFor(__js_PACK_SKIP_PIXELS)
    const COLOR: Number = aliasFor(__js_COLOR)
    const DEPTH: Number = aliasFor(__js_DEPTH)
    const STENCIL: Number = aliasFor(__js_STENCIL)
    const RED: Number = aliasFor(__js_RED)
    const RGB8: Number = aliasFor(__js_RGB8)
    const RGB10_A2: Number = aliasFor(__js_RGB10_A2)
    const TEXTURE_BINDING_3D: Number = aliasFor(__js_TEXTURE_BINDING_3D)
    const UNPACK_SKIP_IMAGES: Number = aliasFor(__js_UNPACK_SKIP_IMAGES)
    const UNPACK_IMAGE_HEIGHT: Number = aliasFor(__js_UNPACK_IMAGE_HEIGHT)
    const TEXTURE_3D: Number = aliasFor(__js_TEXTURE_3D)
    const TEXTURE_WRAP_R: Number = aliasFor(__js_TEXTURE_WRAP_R)
    const MAX_3D_TEXTURE_SIZE: Number = aliasFor(__js_MAX_3D_TEXTURE_SIZE)
    const UNSIGNED_INT_2_10_10_10_REV: Number = aliasFor(__js_UNSIGNED_INT_2_10_10_10_REV)
    const MAX_ELEMENTS_VERTICES: Number = aliasFor(__js_MAX_ELEMENTS_VERTICES)
    const MAX_ELEMENTS_INDICES: Number = aliasFor(__js_MAX_ELEMENTS_INDICES)
    const TEXTURE_MIN_LOD: Number = aliasFor(__js_TEXTURE_MIN_LOD)
    const TEXTURE_MAX_LOD: Number = aliasFor(__js_TEXTURE_MAX_LOD)
    const TEXTURE_BASE_LEVEL: Number = aliasFor(__js_TEXTURE_BASE_LEVEL)
    const TEXTURE_MAX_LEVEL: Number = aliasFor(__js_TEXTURE_MAX_LEVEL)
    const MIN: Number = aliasFor(__js_MIN)
    const MAX: Number = aliasFor(__js_MAX)
    const DEPTH_COMPONENT24: Number = aliasFor(__js_DEPTH_COMPONENT24)
    const MAX_TEXTURE_LOD_BIAS: Number = aliasFor(__js_MAX_TEXTURE_LOD_BIAS)
    const TEXTURE_COMPARE_MODE: Number = aliasFor(__js_TEXTURE_COMPARE_MODE)
    const TEXTURE_COMPARE_FUNC: Number = aliasFor(__js_TEXTURE_COMPARE_FUNC)
    const CURRENT_QUERY: Number = aliasFor(__js_CURRENT_QUERY)
    const QUERY_RESULT: Number = aliasFor(__js_QUERY_RESULT)
    const QUERY_RESULT_AVAILABLE: Number = aliasFor(__js_QUERY_RESULT_AVAILABLE)
    const STREAM_READ: Number = aliasFor(__js_STREAM_READ)
    const STREAM_COPY: Number = aliasFor(__js_STREAM_COPY)
    const STATIC_READ: Number = aliasFor(__js_STATIC_READ)
    const STATIC_COPY: Number = aliasFor(__js_STATIC_COPY)
    const DYNAMIC_READ: Number = aliasFor(__js_DYNAMIC_READ)
    const DYNAMIC_COPY: Number = aliasFor(__js_DYNAMIC_COPY)
    const MAX_DRAW_BUFFERS: Number = aliasFor(__js_MAX_DRAW_BUFFERS)
    const DRAW_BUFFER0: Number = aliasFor(__js_DRAW_BUFFER0)
    const DRAW_BUFFER1: Number = aliasFor(__js_DRAW_BUFFER1)
    const DRAW_BUFFER2: Number = aliasFor(__js_DRAW_BUFFER2)
    const DRAW_BUFFER3: Number = aliasFor(__js_DRAW_BUFFER3)
    const DRAW_BUFFER4: Number = aliasFor(__js_DRAW_BUFFER4)
    const DRAW_BUFFER5: Number = aliasFor(__js_DRAW_BUFFER5)
    const DRAW_BUFFER6: Number = aliasFor(__js_DRAW_BUFFER6)
    const DRAW_BUFFER7: Number = aliasFor(__js_DRAW_BUFFER7)
    const DRAW_BUFFER8: Number = aliasFor(__js_DRAW_BUFFER8)
    const DRAW_BUFFER9: Number = aliasFor(__js_DRAW_BUFFER9)
    const DRAW_BUFFER10: Number = aliasFor(__js_DRAW_BUFFER10)
    const DRAW_BUFFER11: Number = aliasFor(__js_DRAW_BUFFER11)
    const DRAW_BUFFER12: Number = aliasFor(__js_DRAW_BUFFER12)
    const DRAW_BUFFER13: Number = aliasFor(__js_DRAW_BUFFER13)
    const DRAW_BUFFER14: Number = aliasFor(__js_DRAW_BUFFER14)
    const DRAW_BUFFER15: Number = aliasFor(__js_DRAW_BUFFER15)
    const MAX_FRAGMENT_UNIFORM_COMPONENTS: Number = aliasFor(__js_MAX_FRAGMENT_UNIFORM_COMPONENTS)
    const MAX_VERTEX_UNIFORM_COMPONENTS: Number = aliasFor(__js_MAX_VERTEX_UNIFORM_COMPONENTS)
    const SAMPLER_3D: Number = aliasFor(__js_SAMPLER_3D)
    const SAMPLER_2D_SHADOW: Number = aliasFor(__js_SAMPLER_2D_SHADOW)
    const FRAGMENT_SHADER_DERIVATIVE_HINT: Number = aliasFor(__js_FRAGMENT_SHADER_DERIVATIVE_HINT)
    const PIXEL_PACK_BUFFER: Number = aliasFor(__js_PIXEL_PACK_BUFFER)
    const PIXEL_UNPACK_BUFFER: Number = aliasFor(__js_PIXEL_UNPACK_BUFFER)
    const PIXEL_PACK_BUFFER_BINDING: Number = aliasFor(__js_PIXEL_PACK_BUFFER_BINDING)
    const PIXEL_UNPACK_BUFFER_BINDING: Number = aliasFor(__js_PIXEL_UNPACK_BUFFER_BINDING)
    const FLOAT_MAT2x3: Number = aliasFor(__js_FLOAT_MAT2x3)
    const FLOAT_MAT2x4: Number = aliasFor(__js_FLOAT_MAT2x4)
    const FLOAT_MAT3x2: Number = aliasFor(__js_FLOAT_MAT3x2)
    const FLOAT_MAT3x4: Number = aliasFor(__js_FLOAT_MAT3x4)
    const FLOAT_MAT4x2: Number = aliasFor(__js_FLOAT_MAT4x2)
    const FLOAT_MAT4x3: Number = aliasFor(__js_FLOAT_MAT4x3)
    const SRGB: Number = aliasFor(__js_SRGB)
    const SRGB8: Number = aliasFor(__js_SRGB8)
    const SRGB8_ALPHA8: Number = aliasFor(__js_SRGB8_ALPHA8)
    const COMPARE_REF_TO_TEXTURE: Number = aliasFor(__js_COMPARE_REF_TO_TEXTURE)
    const RGBA32F: Number = aliasFor(__js_RGBA32F)
    const RGB32F: Number = aliasFor(__js_RGB32F)
    const RGBA16F: Number = aliasFor(__js_RGBA16F)
    const RGB16F: Number = aliasFor(__js_RGB16F)
    const VERTEX_ATTRIB_ARRAY_INTEGER: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_INTEGER)
    const MAX_ARRAY_TEXTURE_LAYERS: Number = aliasFor(__js_MAX_ARRAY_TEXTURE_LAYERS)
    const MIN_PROGRAM_TEXEL_OFFSET: Number = aliasFor(__js_MIN_PROGRAM_TEXEL_OFFSET)
    const MAX_PROGRAM_TEXEL_OFFSET: Number = aliasFor(__js_MAX_PROGRAM_TEXEL_OFFSET)
    const MAX_VARYING_COMPONENTS: Number = aliasFor(__js_MAX_VARYING_COMPONENTS)
    const TEXTURE_2D_ARRAY: Number = aliasFor(__js_TEXTURE_2D_ARRAY)
    const TEXTURE_BINDING_2D_ARRAY: Number = aliasFor(__js_TEXTURE_BINDING_2D_ARRAY)
    const R11F_G11F_B10F: Number = aliasFor(__js_R11F_G11F_B10F)
    const UNSIGNED_INT_10F_11F_11F_REV: Number = aliasFor(__js_UNSIGNED_INT_10F_11F_11F_REV)
    const RGB9_E5: Number = aliasFor(__js_RGB9_E5)
    const UNSIGNED_INT_5_9_9_9_REV: Number = aliasFor(__js_UNSIGNED_INT_5_9_9_9_REV)
    const TRANSFORM_FEEDBACK_BUFFER_MODE: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_MODE)
    const MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: Number = aliasFor(__js_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS)
    const TRANSFORM_FEEDBACK_VARYINGS: Number = aliasFor(__js_TRANSFORM_FEEDBACK_VARYINGS)
    const TRANSFORM_FEEDBACK_BUFFER_START: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_START)
    const TRANSFORM_FEEDBACK_BUFFER_SIZE: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_SIZE)
    const TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: Number = aliasFor(__js_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN)
    const RASTERIZER_DISCARD: Number = aliasFor(__js_RASTERIZER_DISCARD)
    const MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: Number = aliasFor(__js_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS)
    const MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: Number = aliasFor(__js_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS)
    const INTERLEAVED_ATTRIBS: Number = aliasFor(__js_INTERLEAVED_ATTRIBS)
    const SEPARATE_ATTRIBS: Number = aliasFor(__js_SEPARATE_ATTRIBS)
    const TRANSFORM_FEEDBACK_BUFFER: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER)
    const TRANSFORM_FEEDBACK_BUFFER_BINDING: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_BINDING)
    const RGBA32UI: Number = aliasFor(__js_RGBA32UI)
    const RGB32UI: Number = aliasFor(__js_RGB32UI)
    const RGBA16UI: Number = aliasFor(__js_RGBA16UI)
    const RGB16UI: Number = aliasFor(__js_RGB16UI)
    const RGBA8UI: Number = aliasFor(__js_RGBA8UI)
    const RGB8UI: Number = aliasFor(__js_RGB8UI)
    const RGBA32I: Number = aliasFor(__js_RGBA32I)
    const RGB32I: Number = aliasFor(__js_RGB32I)
    const RGBA16I: Number = aliasFor(__js_RGBA16I)
    const RGB16I: Number = aliasFor(__js_RGB16I)
    const RGBA8I: Number = aliasFor(__js_RGBA8I)
    const RGB8I: Number = aliasFor(__js_RGB8I)
    const RED_INTEGER: Number = aliasFor(__js_RED_INTEGER)
    const RGB_INTEGER: Number = aliasFor(__js_RGB_INTEGER)
    const RGBA_INTEGER: Number = aliasFor(__js_RGBA_INTEGER)
    const SAMPLER_2D_ARRAY: Number = aliasFor(__js_SAMPLER_2D_ARRAY)
    const SAMPLER_2D_ARRAY_SHADOW: Number = aliasFor(__js_SAMPLER_2D_ARRAY_SHADOW)
    const SAMPLER_CUBE_SHADOW: Number = aliasFor(__js_SAMPLER_CUBE_SHADOW)
    const UNSIGNED_INT_VEC2: Number = aliasFor(__js_UNSIGNED_INT_VEC2)
    const UNSIGNED_INT_VEC3: Number = aliasFor(__js_UNSIGNED_INT_VEC3)
    const UNSIGNED_INT_VEC4: Number = aliasFor(__js_UNSIGNED_INT_VEC4)
    const INT_SAMPLER_2D: Number = aliasFor(__js_INT_SAMPLER_2D)
    const INT_SAMPLER_3D: Number = aliasFor(__js_INT_SAMPLER_3D)
    const INT_SAMPLER_CUBE: Number = aliasFor(__js_INT_SAMPLER_CUBE)
    const INT_SAMPLER_2D_ARRAY: Number = aliasFor(__js_INT_SAMPLER_2D_ARRAY)
    const UNSIGNED_INT_SAMPLER_2D: Number = aliasFor(__js_UNSIGNED_INT_SAMPLER_2D)
    const UNSIGNED_INT_SAMPLER_3D: Number = aliasFor(__js_UNSIGNED_INT_SAMPLER_3D)
    const UNSIGNED_INT_SAMPLER_CUBE: Number = aliasFor(__js_UNSIGNED_INT_SAMPLER_CUBE)
    const UNSIGNED_INT_SAMPLER_2D_ARRAY: Number = aliasFor(__js_UNSIGNED_INT_SAMPLER_2D_ARRAY)
    const DEPTH_COMPONENT32F: Number = aliasFor(__js_DEPTH_COMPONENT32F)
    const DEPTH32F_STENCIL8: Number = aliasFor(__js_DEPTH32F_STENCIL8)
    const FLOAT_32_UNSIGNED_INT_24_8_REV: Number = aliasFor(__js_FLOAT_32_UNSIGNED_INT_24_8_REV)
    const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)
    const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)
    const FRAMEBUFFER_ATTACHMENT_RED_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_RED_SIZE)
    const FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE)
    const FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE)
    const FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE)
    const FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE)
    const FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE)
    const FRAMEBUFFER_DEFAULT: Number = aliasFor(__js_FRAMEBUFFER_DEFAULT)
    const UNSIGNED_INT_24_8: Number = aliasFor(__js_UNSIGNED_INT_24_8)
    const DEPTH24_STENCIL8: Number = aliasFor(__js_DEPTH24_STENCIL8)
    const UNSIGNED_NORMALIZED: Number = aliasFor(__js_UNSIGNED_NORMALIZED)
    const DRAW_FRAMEBUFFER_BINDING: Number = aliasFor(__js_DRAW_FRAMEBUFFER_BINDING)
    const READ_FRAMEBUFFER: Number = aliasFor(__js_READ_FRAMEBUFFER)
    const DRAW_FRAMEBUFFER: Number = aliasFor(__js_DRAW_FRAMEBUFFER)
    const READ_FRAMEBUFFER_BINDING: Number = aliasFor(__js_READ_FRAMEBUFFER_BINDING)
    const RENDERBUFFER_SAMPLES: Number = aliasFor(__js_RENDERBUFFER_SAMPLES)
    const FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER)
    const MAX_COLOR_ATTACHMENTS: Number = aliasFor(__js_MAX_COLOR_ATTACHMENTS)
    const COLOR_ATTACHMENT1: Number = aliasFor(__js_COLOR_ATTACHMENT1)
    const COLOR_ATTACHMENT2: Number = aliasFor(__js_COLOR_ATTACHMENT2)
    const COLOR_ATTACHMENT3: Number = aliasFor(__js_COLOR_ATTACHMENT3)
    const COLOR_ATTACHMENT4: Number = aliasFor(__js_COLOR_ATTACHMENT4)
    const COLOR_ATTACHMENT5: Number = aliasFor(__js_COLOR_ATTACHMENT5)
    const COLOR_ATTACHMENT6: Number = aliasFor(__js_COLOR_ATTACHMENT6)
    const COLOR_ATTACHMENT7: Number = aliasFor(__js_COLOR_ATTACHMENT7)
    const COLOR_ATTACHMENT8: Number = aliasFor(__js_COLOR_ATTACHMENT8)
    const COLOR_ATTACHMENT9: Number = aliasFor(__js_COLOR_ATTACHMENT9)
    const COLOR_ATTACHMENT10: Number = aliasFor(__js_COLOR_ATTACHMENT10)
    const COLOR_ATTACHMENT11: Number = aliasFor(__js_COLOR_ATTACHMENT11)
    const COLOR_ATTACHMENT12: Number = aliasFor(__js_COLOR_ATTACHMENT12)
    const COLOR_ATTACHMENT13: Number = aliasFor(__js_COLOR_ATTACHMENT13)
    const COLOR_ATTACHMENT14: Number = aliasFor(__js_COLOR_ATTACHMENT14)
    const COLOR_ATTACHMENT15: Number = aliasFor(__js_COLOR_ATTACHMENT15)
    const FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE)
    const MAX_SAMPLES: Number = aliasFor(__js_MAX_SAMPLES)
    const HALF_FLOAT: Number = aliasFor(__js_HALF_FLOAT)
    const RG: Number = aliasFor(__js_RG)
    const RG_INTEGER: Number = aliasFor(__js_RG_INTEGER)
    const R8: Number = aliasFor(__js_R8)
    const RG8: Number = aliasFor(__js_RG8)
    const R16F: Number = aliasFor(__js_R16F)
    const R32F: Number = aliasFor(__js_R32F)
    const RG16F: Number = aliasFor(__js_RG16F)
    const RG32F: Number = aliasFor(__js_RG32F)
    const R8I: Number = aliasFor(__js_R8I)
    const R8UI: Number = aliasFor(__js_R8UI)
    const R16I: Number = aliasFor(__js_R16I)
    const R16UI: Number = aliasFor(__js_R16UI)
    const R32I: Number = aliasFor(__js_R32I)
    const R32UI: Number = aliasFor(__js_R32UI)
    const RG8I: Number = aliasFor(__js_RG8I)
    const RG8UI: Number = aliasFor(__js_RG8UI)
    const RG16I: Number = aliasFor(__js_RG16I)
    const RG16UI: Number = aliasFor(__js_RG16UI)
    const RG32I: Number = aliasFor(__js_RG32I)
    const RG32UI: Number = aliasFor(__js_RG32UI)
    const VERTEX_ARRAY_BINDING: Number = aliasFor(__js_VERTEX_ARRAY_BINDING)
    const R8_SNORM: Number = aliasFor(__js_R8_SNORM)
    const RG8_SNORM: Number = aliasFor(__js_RG8_SNORM)
    const RGB8_SNORM: Number = aliasFor(__js_RGB8_SNORM)
    const RGBA8_SNORM: Number = aliasFor(__js_RGBA8_SNORM)
    const SIGNED_NORMALIZED: Number = aliasFor(__js_SIGNED_NORMALIZED)
    const COPY_READ_BUFFER: Number = aliasFor(__js_COPY_READ_BUFFER)
    const COPY_WRITE_BUFFER: Number = aliasFor(__js_COPY_WRITE_BUFFER)
    const COPY_READ_BUFFER_BINDING: Number = aliasFor(__js_COPY_READ_BUFFER_BINDING)
    const COPY_WRITE_BUFFER_BINDING: Number = aliasFor(__js_COPY_WRITE_BUFFER_BINDING)
    const UNIFORM_BUFFER: Number = aliasFor(__js_UNIFORM_BUFFER)
    const UNIFORM_BUFFER_BINDING: Number = aliasFor(__js_UNIFORM_BUFFER_BINDING)
    const UNIFORM_BUFFER_START: Number = aliasFor(__js_UNIFORM_BUFFER_START)
    const UNIFORM_BUFFER_SIZE: Number = aliasFor(__js_UNIFORM_BUFFER_SIZE)
    const MAX_VERTEX_UNIFORM_BLOCKS: Number = aliasFor(__js_MAX_VERTEX_UNIFORM_BLOCKS)
    const MAX_FRAGMENT_UNIFORM_BLOCKS: Number = aliasFor(__js_MAX_FRAGMENT_UNIFORM_BLOCKS)
    const MAX_COMBINED_UNIFORM_BLOCKS: Number = aliasFor(__js_MAX_COMBINED_UNIFORM_BLOCKS)
    const MAX_UNIFORM_BUFFER_BINDINGS: Number = aliasFor(__js_MAX_UNIFORM_BUFFER_BINDINGS)
    const MAX_UNIFORM_BLOCK_SIZE: Number = aliasFor(__js_MAX_UNIFORM_BLOCK_SIZE)
    const MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: Number = aliasFor(__js_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS)
    const MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: Number = aliasFor(__js_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS)
    const UNIFORM_BUFFER_OFFSET_ALIGNMENT: Number = aliasFor(__js_UNIFORM_BUFFER_OFFSET_ALIGNMENT)
    const ACTIVE_UNIFORM_BLOCKS: Number = aliasFor(__js_ACTIVE_UNIFORM_BLOCKS)
    const UNIFORM_TYPE: Number = aliasFor(__js_UNIFORM_TYPE)
    const UNIFORM_SIZE: Number = aliasFor(__js_UNIFORM_SIZE)
    const UNIFORM_BLOCK_INDEX: Number = aliasFor(__js_UNIFORM_BLOCK_INDEX)
    const UNIFORM_OFFSET: Number = aliasFor(__js_UNIFORM_OFFSET)
    const UNIFORM_ARRAY_STRIDE: Number = aliasFor(__js_UNIFORM_ARRAY_STRIDE)
    const UNIFORM_MATRIX_STRIDE: Number = aliasFor(__js_UNIFORM_MATRIX_STRIDE)
    const UNIFORM_IS_ROW_MAJOR: Number = aliasFor(__js_UNIFORM_IS_ROW_MAJOR)
    const UNIFORM_BLOCK_BINDING: Number = aliasFor(__js_UNIFORM_BLOCK_BINDING)
    const UNIFORM_BLOCK_DATA_SIZE: Number = aliasFor(__js_UNIFORM_BLOCK_DATA_SIZE)
    const UNIFORM_BLOCK_ACTIVE_UNIFORMS: Number = aliasFor(__js_UNIFORM_BLOCK_ACTIVE_UNIFORMS)
    const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: Number = aliasFor(__js_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)
    const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: Number = aliasFor(__js_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER)
    const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: Number = aliasFor(__js_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER)
    const INVALID_INDEX: Number = aliasFor(__js_INVALID_INDEX)
    const MAX_VERTEX_OUTPUT_COMPONENTS: Number = aliasFor(__js_MAX_VERTEX_OUTPUT_COMPONENTS)
    const MAX_FRAGMENT_INPUT_COMPONENTS: Number = aliasFor(__js_MAX_FRAGMENT_INPUT_COMPONENTS)
    const MAX_SERVER_WAIT_TIMEOUT: Number = aliasFor(__js_MAX_SERVER_WAIT_TIMEOUT)
    const OBJECT_TYPE: Number = aliasFor(__js_OBJECT_TYPE)
    const SYNC_CONDITION: Number = aliasFor(__js_SYNC_CONDITION)
    const SYNC_STATUS: Number = aliasFor(__js_SYNC_STATUS)
    const SYNC_FLAGS: Number = aliasFor(__js_SYNC_FLAGS)
    const SYNC_FENCE: Number = aliasFor(__js_SYNC_FENCE)
    const SYNC_GPU_COMMANDS_COMPLETE: Number = aliasFor(__js_SYNC_GPU_COMMANDS_COMPLETE)
    const UNSIGNALED: Number = aliasFor(__js_UNSIGNALED)
    const SIGNALED: Number = aliasFor(__js_SIGNALED)
    const ALREADY_SIGNALED: Number = aliasFor(__js_ALREADY_SIGNALED)
    const TIMEOUT_EXPIRED: Number = aliasFor(__js_TIMEOUT_EXPIRED)
    const CONDITION_SATISFIED: Number = aliasFor(__js_CONDITION_SATISFIED)
    const WAIT_FAILED: Number = aliasFor(__js_WAIT_FAILED)
    const SYNC_FLUSH_COMMANDS_BIT: Number = aliasFor(__js_SYNC_FLUSH_COMMANDS_BIT)
    const VERTEX_ATTRIB_ARRAY_DIVISOR: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_DIVISOR)
    const ANY_SAMPLES_PASSED: Number = aliasFor(__js_ANY_SAMPLES_PASSED)
    const ANY_SAMPLES_PASSED_CONSERVATIVE: Number = aliasFor(__js_ANY_SAMPLES_PASSED_CONSERVATIVE)
    const SAMPLER_BINDING: Number = aliasFor(__js_SAMPLER_BINDING)
    const RGB10_A2UI: Number = aliasFor(__js_RGB10_A2UI)
    const INT_2_10_10_10_REV: Number = aliasFor(__js_INT_2_10_10_10_REV)
    const TRANSFORM_FEEDBACK: Number = aliasFor(__js_TRANSFORM_FEEDBACK)
    const TRANSFORM_FEEDBACK_PAUSED: Number = aliasFor(__js_TRANSFORM_FEEDBACK_PAUSED)
    const TRANSFORM_FEEDBACK_ACTIVE: Number = aliasFor(__js_TRANSFORM_FEEDBACK_ACTIVE)
    const TRANSFORM_FEEDBACK_BINDING: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BINDING)
    const TEXTURE_IMMUTABLE_FORMAT: Number = aliasFor(__js_TEXTURE_IMMUTABLE_FORMAT)
    const MAX_ELEMENT_INDEX: Number = aliasFor(__js_MAX_ELEMENT_INDEX)
    const TEXTURE_IMMUTABLE_LEVELS: Number = aliasFor(__js_TEXTURE_IMMUTABLE_LEVELS)
    const TIMEOUT_IGNORED: Number = aliasFor(__js_TIMEOUT_IGNORED)
    const MAX_CLIENT_WAIT_TIMEOUT_WEBGL: Number = aliasFor(__js_MAX_CLIENT_WAIT_TIMEOUT_WEBGL)
    const DEPTH_BUFFER_BIT: Number = aliasFor(__js_DEPTH_BUFFER_BIT)
    const STENCIL_BUFFER_BIT: Number = aliasFor(__js_STENCIL_BUFFER_BIT)
    const COLOR_BUFFER_BIT: Number = aliasFor(__js_COLOR_BUFFER_BIT)
    const POINTS: Number = aliasFor(__js_POINTS)
    const LINES: Number = aliasFor(__js_LINES)
    const LINE_LOOP: Number = aliasFor(__js_LINE_LOOP)
    const LINE_STRIP: Number = aliasFor(__js_LINE_STRIP)
    const TRIANGLES: Number = aliasFor(__js_TRIANGLES)
    const TRIANGLE_STRIP: Number = aliasFor(__js_TRIANGLE_STRIP)
    const TRIANGLE_FAN: Number = aliasFor(__js_TRIANGLE_FAN)
    const ZERO: Number = aliasFor(__js_ZERO)
    const ONE: Number = aliasFor(__js_ONE)
    const SRC_COLOR: Number = aliasFor(__js_SRC_COLOR)
    const ONE_MINUS_SRC_COLOR: Number = aliasFor(__js_ONE_MINUS_SRC_COLOR)
    const SRC_ALPHA: Number = aliasFor(__js_SRC_ALPHA)
    const ONE_MINUS_SRC_ALPHA: Number = aliasFor(__js_ONE_MINUS_SRC_ALPHA)
    const DST_ALPHA: Number = aliasFor(__js_DST_ALPHA)
    const ONE_MINUS_DST_ALPHA: Number = aliasFor(__js_ONE_MINUS_DST_ALPHA)
    const DST_COLOR: Number = aliasFor(__js_DST_COLOR)
    const ONE_MINUS_DST_COLOR: Number = aliasFor(__js_ONE_MINUS_DST_COLOR)
    const SRC_ALPHA_SATURATE: Number = aliasFor(__js_SRC_ALPHA_SATURATE)
    const FUNC_ADD: Number = aliasFor(__js_FUNC_ADD)
    const BLEND_EQUATION: Number = aliasFor(__js_BLEND_EQUATION)
    const BLEND_EQUATION_RGB: Number = aliasFor(__js_BLEND_EQUATION_RGB)
    const BLEND_EQUATION_ALPHA: Number = aliasFor(__js_BLEND_EQUATION_ALPHA)
    const FUNC_SUBTRACT: Number = aliasFor(__js_FUNC_SUBTRACT)
    const FUNC_REVERSE_SUBTRACT: Number = aliasFor(__js_FUNC_REVERSE_SUBTRACT)
    const BLEND_DST_RGB: Number = aliasFor(__js_BLEND_DST_RGB)
    const BLEND_SRC_RGB: Number = aliasFor(__js_BLEND_SRC_RGB)
    const BLEND_DST_ALPHA: Number = aliasFor(__js_BLEND_DST_ALPHA)
    const BLEND_SRC_ALPHA: Number = aliasFor(__js_BLEND_SRC_ALPHA)
    const CONSTANT_COLOR: Number = aliasFor(__js_CONSTANT_COLOR)
    const ONE_MINUS_CONSTANT_COLOR: Number = aliasFor(__js_ONE_MINUS_CONSTANT_COLOR)
    const CONSTANT_ALPHA: Number = aliasFor(__js_CONSTANT_ALPHA)
    const ONE_MINUS_CONSTANT_ALPHA: Number = aliasFor(__js_ONE_MINUS_CONSTANT_ALPHA)
    const BLEND_COLOR: Number = aliasFor(__js_BLEND_COLOR)
    const ARRAY_BUFFER: Number = aliasFor(__js_ARRAY_BUFFER)
    const ELEMENT_ARRAY_BUFFER: Number = aliasFor(__js_ELEMENT_ARRAY_BUFFER)
    const ARRAY_BUFFER_BINDING: Number = aliasFor(__js_ARRAY_BUFFER_BINDING)
    const ELEMENT_ARRAY_BUFFER_BINDING: Number = aliasFor(__js_ELEMENT_ARRAY_BUFFER_BINDING)
    const STREAM_DRAW: Number = aliasFor(__js_STREAM_DRAW)
    const STATIC_DRAW: Number = aliasFor(__js_STATIC_DRAW)
    const DYNAMIC_DRAW: Number = aliasFor(__js_DYNAMIC_DRAW)
    const BUFFER_SIZE: Number = aliasFor(__js_BUFFER_SIZE)
    const BUFFER_USAGE: Number = aliasFor(__js_BUFFER_USAGE)
    const CURRENT_VERTEX_ATTRIB: Number = aliasFor(__js_CURRENT_VERTEX_ATTRIB)
    const FRONT: Number = aliasFor(__js_FRONT)
    const BACK: Number = aliasFor(__js_BACK)
    const FRONT_AND_BACK: Number = aliasFor(__js_FRONT_AND_BACK)
    const CULL_FACE: Number = aliasFor(__js_CULL_FACE)
    const BLEND: Number = aliasFor(__js_BLEND)
    const DITHER: Number = aliasFor(__js_DITHER)
    const STENCIL_TEST: Number = aliasFor(__js_STENCIL_TEST)
    const DEPTH_TEST: Number = aliasFor(__js_DEPTH_TEST)
    const SCISSOR_TEST: Number = aliasFor(__js_SCISSOR_TEST)
    const POLYGON_OFFSET_FILL: Number = aliasFor(__js_POLYGON_OFFSET_FILL)
    const SAMPLE_ALPHA_TO_COVERAGE: Number = aliasFor(__js_SAMPLE_ALPHA_TO_COVERAGE)
    const SAMPLE_COVERAGE: Number = aliasFor(__js_SAMPLE_COVERAGE)
    const NO_ERROR: Number = aliasFor(__js_NO_ERROR)
    const INVALID_ENUM: Number = aliasFor(__js_INVALID_ENUM)
    const INVALID_VALUE: Number = aliasFor(__js_INVALID_VALUE)
    const INVALID_OPERATION: Number = aliasFor(__js_INVALID_OPERATION)
    const OUT_OF_MEMORY: Number = aliasFor(__js_OUT_OF_MEMORY)
    const CW: Number = aliasFor(__js_CW)
    const CCW: Number = aliasFor(__js_CCW)
    const LINE_WIDTH: Number = aliasFor(__js_LINE_WIDTH)
    const ALIASED_POINT_SIZE_RANGE: Number = aliasFor(__js_ALIASED_POINT_SIZE_RANGE)
    const ALIASED_LINE_WIDTH_RANGE: Number = aliasFor(__js_ALIASED_LINE_WIDTH_RANGE)
    const CULL_FACE_MODE: Number = aliasFor(__js_CULL_FACE_MODE)
    const FRONT_FACE: Number = aliasFor(__js_FRONT_FACE)
    const DEPTH_RANGE: Number = aliasFor(__js_DEPTH_RANGE)
    const DEPTH_WRITEMASK: Number = aliasFor(__js_DEPTH_WRITEMASK)
    const DEPTH_CLEAR_VALUE: Number = aliasFor(__js_DEPTH_CLEAR_VALUE)
    const DEPTH_FUNC: Number = aliasFor(__js_DEPTH_FUNC)
    const STENCIL_CLEAR_VALUE: Number = aliasFor(__js_STENCIL_CLEAR_VALUE)
    const STENCIL_FUNC: Number = aliasFor(__js_STENCIL_FUNC)
    const STENCIL_FAIL: Number = aliasFor(__js_STENCIL_FAIL)
    const STENCIL_PASS_DEPTH_FAIL: Number = aliasFor(__js_STENCIL_PASS_DEPTH_FAIL)
    const STENCIL_PASS_DEPTH_PASS: Number = aliasFor(__js_STENCIL_PASS_DEPTH_PASS)
    const STENCIL_REF: Number = aliasFor(__js_STENCIL_REF)
    const STENCIL_VALUE_MASK: Number = aliasFor(__js_STENCIL_VALUE_MASK)
    const STENCIL_WRITEMASK: Number = aliasFor(__js_STENCIL_WRITEMASK)
    const STENCIL_BACK_FUNC: Number = aliasFor(__js_STENCIL_BACK_FUNC)
    const STENCIL_BACK_FAIL: Number = aliasFor(__js_STENCIL_BACK_FAIL)
    const STENCIL_BACK_PASS_DEPTH_FAIL: Number = aliasFor(__js_STENCIL_BACK_PASS_DEPTH_FAIL)
    const STENCIL_BACK_PASS_DEPTH_PASS: Number = aliasFor(__js_STENCIL_BACK_PASS_DEPTH_PASS)
    const STENCIL_BACK_REF: Number = aliasFor(__js_STENCIL_BACK_REF)
    const STENCIL_BACK_VALUE_MASK: Number = aliasFor(__js_STENCIL_BACK_VALUE_MASK)
    const STENCIL_BACK_WRITEMASK: Number = aliasFor(__js_STENCIL_BACK_WRITEMASK)
    const VIEWPORT: Number = aliasFor(__js_VIEWPORT)
    const SCISSOR_BOX: Number = aliasFor(__js_SCISSOR_BOX)
    const COLOR_CLEAR_VALUE: Number = aliasFor(__js_COLOR_CLEAR_VALUE)
    const COLOR_WRITEMASK: Number = aliasFor(__js_COLOR_WRITEMASK)
    const UNPACK_ALIGNMENT: Number = aliasFor(__js_UNPACK_ALIGNMENT)
    const PACK_ALIGNMENT: Number = aliasFor(__js_PACK_ALIGNMENT)
    const MAX_TEXTURE_SIZE: Number = aliasFor(__js_MAX_TEXTURE_SIZE)
    const MAX_VIEWPORT_DIMS: Number = aliasFor(__js_MAX_VIEWPORT_DIMS)
    const SUBPIXEL_BITS: Number = aliasFor(__js_SUBPIXEL_BITS)
    const RED_BITS: Number = aliasFor(__js_RED_BITS)
    const GREEN_BITS: Number = aliasFor(__js_GREEN_BITS)
    const BLUE_BITS: Number = aliasFor(__js_BLUE_BITS)
    const ALPHA_BITS: Number = aliasFor(__js_ALPHA_BITS)
    const DEPTH_BITS: Number = aliasFor(__js_DEPTH_BITS)
    const STENCIL_BITS: Number = aliasFor(__js_STENCIL_BITS)
    const POLYGON_OFFSET_UNITS: Number = aliasFor(__js_POLYGON_OFFSET_UNITS)
    const POLYGON_OFFSET_FACTOR: Number = aliasFor(__js_POLYGON_OFFSET_FACTOR)
    const TEXTURE_BINDING_2D: Number = aliasFor(__js_TEXTURE_BINDING_2D)
    const SAMPLE_BUFFERS: Number = aliasFor(__js_SAMPLE_BUFFERS)
    const SAMPLES: Number = aliasFor(__js_SAMPLES)
    const SAMPLE_COVERAGE_VALUE: Number = aliasFor(__js_SAMPLE_COVERAGE_VALUE)
    const SAMPLE_COVERAGE_INVERT: Number = aliasFor(__js_SAMPLE_COVERAGE_INVERT)
    const COMPRESSED_TEXTURE_FORMATS: Number = aliasFor(__js_COMPRESSED_TEXTURE_FORMATS)
    const DONT_CARE: Number = aliasFor(__js_DONT_CARE)
    const FASTEST: Number = aliasFor(__js_FASTEST)
    const NICEST: Number = aliasFor(__js_NICEST)
    const GENERATE_MIPMAP_HINT: Number = aliasFor(__js_GENERATE_MIPMAP_HINT)
    const BYTE: Number = aliasFor(__js_BYTE)
    const UNSIGNED_BYTE: Number = aliasFor(__js_UNSIGNED_BYTE)
    const SHORT: Number = aliasFor(__js_SHORT)
    const UNSIGNED_SHORT: Number = aliasFor(__js_UNSIGNED_SHORT)
    const INT: Number = aliasFor(__js_INT)
    const UNSIGNED_INT: Number = aliasFor(__js_UNSIGNED_INT)
    const FLOAT: Number = aliasFor(__js_FLOAT)
    const DEPTH_COMPONENT: Number = aliasFor(__js_DEPTH_COMPONENT)
    const ALPHA: Number = aliasFor(__js_ALPHA)
    const RGB: Number = aliasFor(__js_RGB)
    const RGBA: Number = aliasFor(__js_RGBA)
    const LUMINANCE: Number = aliasFor(__js_LUMINANCE)
    const LUMINANCE_ALPHA: Number = aliasFor(__js_LUMINANCE_ALPHA)
    const UNSIGNED_SHORT_4_4_4_4: Number = aliasFor(__js_UNSIGNED_SHORT_4_4_4_4)
    const UNSIGNED_SHORT_5_5_5_1: Number = aliasFor(__js_UNSIGNED_SHORT_5_5_5_1)
    const UNSIGNED_SHORT_5_6_5: Number = aliasFor(__js_UNSIGNED_SHORT_5_6_5)
    const FRAGMENT_SHADER: Number = aliasFor(__js_FRAGMENT_SHADER)
    const VERTEX_SHADER: Number = aliasFor(__js_VERTEX_SHADER)
    const MAX_VERTEX_ATTRIBS: Number = aliasFor(__js_MAX_VERTEX_ATTRIBS)
    const MAX_VERTEX_UNIFORM_VECTORS: Number = aliasFor(__js_MAX_VERTEX_UNIFORM_VECTORS)
    const MAX_VARYING_VECTORS: Number = aliasFor(__js_MAX_VARYING_VECTORS)
    const MAX_COMBINED_TEXTURE_IMAGE_UNITS: Number = aliasFor(__js_MAX_COMBINED_TEXTURE_IMAGE_UNITS)
    const MAX_VERTEX_TEXTURE_IMAGE_UNITS: Number = aliasFor(__js_MAX_VERTEX_TEXTURE_IMAGE_UNITS)
    const MAX_TEXTURE_IMAGE_UNITS: Number = aliasFor(__js_MAX_TEXTURE_IMAGE_UNITS)
    const MAX_FRAGMENT_UNIFORM_VECTORS: Number = aliasFor(__js_MAX_FRAGMENT_UNIFORM_VECTORS)
    const SHADER_TYPE: Number = aliasFor(__js_SHADER_TYPE)
    const DELETE_STATUS: Number = aliasFor(__js_DELETE_STATUS)
    const LINK_STATUS: Number = aliasFor(__js_LINK_STATUS)
    const VALIDATE_STATUS: Number = aliasFor(__js_VALIDATE_STATUS)
    const ATTACHED_SHADERS: Number = aliasFor(__js_ATTACHED_SHADERS)
    const ACTIVE_UNIFORMS: Number = aliasFor(__js_ACTIVE_UNIFORMS)
    const ACTIVE_ATTRIBUTES: Number = aliasFor(__js_ACTIVE_ATTRIBUTES)
    const SHADING_LANGUAGE_VERSION: Number = aliasFor(__js_SHADING_LANGUAGE_VERSION)
    const CURRENT_PROGRAM: Number = aliasFor(__js_CURRENT_PROGRAM)
    const NEVER: Number = aliasFor(__js_NEVER)
    const LESS: Number = aliasFor(__js_LESS)
    const EQUAL: Number = aliasFor(__js_EQUAL)
    const LEQUAL: Number = aliasFor(__js_LEQUAL)
    const GREATER: Number = aliasFor(__js_GREATER)
    const NOTEQUAL: Number = aliasFor(__js_NOTEQUAL)
    const GEQUAL: Number = aliasFor(__js_GEQUAL)
    const ALWAYS: Number = aliasFor(__js_ALWAYS)
    const KEEP: Number = aliasFor(__js_KEEP)
    const REPLACE: Number = aliasFor(__js_REPLACE)
    const INCR: Number = aliasFor(__js_INCR)
    const DECR: Number = aliasFor(__js_DECR)
    const INVERT: Number = aliasFor(__js_INVERT)
    const INCR_WRAP: Number = aliasFor(__js_INCR_WRAP)
    const DECR_WRAP: Number = aliasFor(__js_DECR_WRAP)
    const VENDOR: Number = aliasFor(__js_VENDOR)
    const RENDERER: Number = aliasFor(__js_RENDERER)
    const VERSION: Number = aliasFor(__js_VERSION)
    const NEAREST: Number = aliasFor(__js_NEAREST)
    const LINEAR: Number = aliasFor(__js_LINEAR)
    const NEAREST_MIPMAP_NEAREST: Number = aliasFor(__js_NEAREST_MIPMAP_NEAREST)
    const LINEAR_MIPMAP_NEAREST: Number = aliasFor(__js_LINEAR_MIPMAP_NEAREST)
    const NEAREST_MIPMAP_LINEAR: Number = aliasFor(__js_NEAREST_MIPMAP_LINEAR)
    const LINEAR_MIPMAP_LINEAR: Number = aliasFor(__js_LINEAR_MIPMAP_LINEAR)
    const TEXTURE_MAG_FILTER: Number = aliasFor(__js_TEXTURE_MAG_FILTER)
    const TEXTURE_MIN_FILTER: Number = aliasFor(__js_TEXTURE_MIN_FILTER)
    const TEXTURE_WRAP_S: Number = aliasFor(__js_TEXTURE_WRAP_S)
    const TEXTURE_WRAP_T: Number = aliasFor(__js_TEXTURE_WRAP_T)
    const TEXTURE_2D: Number = aliasFor(__js_TEXTURE_2D)
    const TEXTURE: Number = aliasFor(__js_TEXTURE)
    const TEXTURE_CUBE_MAP: Number = aliasFor(__js_TEXTURE_CUBE_MAP)
    const TEXTURE_BINDING_CUBE_MAP: Number = aliasFor(__js_TEXTURE_BINDING_CUBE_MAP)
    const TEXTURE_CUBE_MAP_POSITIVE_X: Number = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_X)
    const TEXTURE_CUBE_MAP_NEGATIVE_X: Number = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_X)
    const TEXTURE_CUBE_MAP_POSITIVE_Y: Number = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_Y)
    const TEXTURE_CUBE_MAP_NEGATIVE_Y: Number = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_Y)
    const TEXTURE_CUBE_MAP_POSITIVE_Z: Number = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_Z)
    const TEXTURE_CUBE_MAP_NEGATIVE_Z: Number = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_Z)
    const MAX_CUBE_MAP_TEXTURE_SIZE: Number = aliasFor(__js_MAX_CUBE_MAP_TEXTURE_SIZE)
    const TEXTURE0: Number = aliasFor(__js_TEXTURE0)
    const TEXTURE1: Number = aliasFor(__js_TEXTURE1)
    const TEXTURE2: Number = aliasFor(__js_TEXTURE2)
    const TEXTURE3: Number = aliasFor(__js_TEXTURE3)
    const TEXTURE4: Number = aliasFor(__js_TEXTURE4)
    const TEXTURE5: Number = aliasFor(__js_TEXTURE5)
    const TEXTURE6: Number = aliasFor(__js_TEXTURE6)
    const TEXTURE7: Number = aliasFor(__js_TEXTURE7)
    const TEXTURE8: Number = aliasFor(__js_TEXTURE8)
    const TEXTURE9: Number = aliasFor(__js_TEXTURE9)
    const TEXTURE10: Number = aliasFor(__js_TEXTURE10)
    const TEXTURE11: Number = aliasFor(__js_TEXTURE11)
    const TEXTURE12: Number = aliasFor(__js_TEXTURE12)
    const TEXTURE13: Number = aliasFor(__js_TEXTURE13)
    const TEXTURE14: Number = aliasFor(__js_TEXTURE14)
    const TEXTURE15: Number = aliasFor(__js_TEXTURE15)
    const TEXTURE16: Number = aliasFor(__js_TEXTURE16)
    const TEXTURE17: Number = aliasFor(__js_TEXTURE17)
    const TEXTURE18: Number = aliasFor(__js_TEXTURE18)
    const TEXTURE19: Number = aliasFor(__js_TEXTURE19)
    const TEXTURE20: Number = aliasFor(__js_TEXTURE20)
    const TEXTURE21: Number = aliasFor(__js_TEXTURE21)
    const TEXTURE22: Number = aliasFor(__js_TEXTURE22)
    const TEXTURE23: Number = aliasFor(__js_TEXTURE23)
    const TEXTURE24: Number = aliasFor(__js_TEXTURE24)
    const TEXTURE25: Number = aliasFor(__js_TEXTURE25)
    const TEXTURE26: Number = aliasFor(__js_TEXTURE26)
    const TEXTURE27: Number = aliasFor(__js_TEXTURE27)
    const TEXTURE28: Number = aliasFor(__js_TEXTURE28)
    const TEXTURE29: Number = aliasFor(__js_TEXTURE29)
    const TEXTURE30: Number = aliasFor(__js_TEXTURE30)
    const TEXTURE31: Number = aliasFor(__js_TEXTURE31)
    const ACTIVE_TEXTURE: Number = aliasFor(__js_ACTIVE_TEXTURE)
    const REPEAT: Number = aliasFor(__js_REPEAT)
    const CLAMP_TO_EDGE: Number = aliasFor(__js_CLAMP_TO_EDGE)
    const MIRRORED_REPEAT: Number = aliasFor(__js_MIRRORED_REPEAT)
    const FLOAT_VEC2: Number = aliasFor(__js_FLOAT_VEC2)
    const FLOAT_VEC3: Number = aliasFor(__js_FLOAT_VEC3)
    const FLOAT_VEC4: Number = aliasFor(__js_FLOAT_VEC4)
    const INT_VEC2: Number = aliasFor(__js_INT_VEC2)
    const INT_VEC3: Number = aliasFor(__js_INT_VEC3)
    const INT_VEC4: Number = aliasFor(__js_INT_VEC4)
    const BOOL: Number = aliasFor(__js_BOOL)
    const BOOL_VEC2: Number = aliasFor(__js_BOOL_VEC2)
    const BOOL_VEC3: Number = aliasFor(__js_BOOL_VEC3)
    const BOOL_VEC4: Number = aliasFor(__js_BOOL_VEC4)
    const FLOAT_MAT2: Number = aliasFor(__js_FLOAT_MAT2)
    const FLOAT_MAT3: Number = aliasFor(__js_FLOAT_MAT3)
    const FLOAT_MAT4: Number = aliasFor(__js_FLOAT_MAT4)
    const SAMPLER_2D: Number = aliasFor(__js_SAMPLER_2D)
    const SAMPLER_CUBE: Number = aliasFor(__js_SAMPLER_CUBE)
    const VERTEX_ATTRIB_ARRAY_ENABLED: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_ENABLED)
    const VERTEX_ATTRIB_ARRAY_SIZE: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_SIZE)
    const VERTEX_ATTRIB_ARRAY_STRIDE: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_STRIDE)
    const VERTEX_ATTRIB_ARRAY_TYPE: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_TYPE)
    const VERTEX_ATTRIB_ARRAY_NORMALIZED: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_NORMALIZED)
    const VERTEX_ATTRIB_ARRAY_POINTER: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_POINTER)
    const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)
    const IMPLEMENTATION_COLOR_READ_TYPE: Number = aliasFor(__js_IMPLEMENTATION_COLOR_READ_TYPE)
    const IMPLEMENTATION_COLOR_READ_FORMAT: Number = aliasFor(__js_IMPLEMENTATION_COLOR_READ_FORMAT)
    const COMPILE_STATUS: Number = aliasFor(__js_COMPILE_STATUS)
    const LOW_FLOAT: Number = aliasFor(__js_LOW_FLOAT)
    const MEDIUM_FLOAT: Number = aliasFor(__js_MEDIUM_FLOAT)
    const HIGH_FLOAT: Number = aliasFor(__js_HIGH_FLOAT)
    const LOW_INT: Number = aliasFor(__js_LOW_INT)
    const MEDIUM_INT: Number = aliasFor(__js_MEDIUM_INT)
    const HIGH_INT: Number = aliasFor(__js_HIGH_INT)
    const FRAMEBUFFER: Number = aliasFor(__js_FRAMEBUFFER)
    const RENDERBUFFER: Number = aliasFor(__js_RENDERBUFFER)
    const RGBA4: Number = aliasFor(__js_RGBA4)
    const RGB5_A1: Number = aliasFor(__js_RGB5_A1)
    const RGBA8: Number = aliasFor(__js_RGBA8)
    const RGB565: Number = aliasFor(__js_RGB565)
    const DEPTH_COMPONENT16: Number = aliasFor(__js_DEPTH_COMPONENT16)
    const STENCIL_INDEX8: Number = aliasFor(__js_STENCIL_INDEX8)
    const DEPTH_STENCIL: Number = aliasFor(__js_DEPTH_STENCIL)
    const RENDERBUFFER_WIDTH: Number = aliasFor(__js_RENDERBUFFER_WIDTH)
    const RENDERBUFFER_HEIGHT: Number = aliasFor(__js_RENDERBUFFER_HEIGHT)
    const RENDERBUFFER_INTERNAL_FORMAT: Number = aliasFor(__js_RENDERBUFFER_INTERNAL_FORMAT)
    const RENDERBUFFER_RED_SIZE: Number = aliasFor(__js_RENDERBUFFER_RED_SIZE)
    const RENDERBUFFER_GREEN_SIZE: Number = aliasFor(__js_RENDERBUFFER_GREEN_SIZE)
    const RENDERBUFFER_BLUE_SIZE: Number = aliasFor(__js_RENDERBUFFER_BLUE_SIZE)
    const RENDERBUFFER_ALPHA_SIZE: Number = aliasFor(__js_RENDERBUFFER_ALPHA_SIZE)
    const RENDERBUFFER_DEPTH_SIZE: Number = aliasFor(__js_RENDERBUFFER_DEPTH_SIZE)
    const RENDERBUFFER_STENCIL_SIZE: Number = aliasFor(__js_RENDERBUFFER_STENCIL_SIZE)
    const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)
    const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)
    const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL)
    const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE)
    const COLOR_ATTACHMENT0: Number = aliasFor(__js_COLOR_ATTACHMENT0)
    const DEPTH_ATTACHMENT: Number = aliasFor(__js_DEPTH_ATTACHMENT)
    const STENCIL_ATTACHMENT: Number = aliasFor(__js_STENCIL_ATTACHMENT)
    const DEPTH_STENCIL_ATTACHMENT: Number = aliasFor(__js_DEPTH_STENCIL_ATTACHMENT)
    const NONE: Number = aliasFor(__js_NONE)
    const FRAMEBUFFER_COMPLETE: Number = aliasFor(__js_FRAMEBUFFER_COMPLETE)
    const FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)
    const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)
    const FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)
    const FRAMEBUFFER_UNSUPPORTED: Number = aliasFor(__js_FRAMEBUFFER_UNSUPPORTED)
    const FRAMEBUFFER_BINDING: Number = aliasFor(__js_FRAMEBUFFER_BINDING)
    const RENDERBUFFER_BINDING: Number = aliasFor(__js_RENDERBUFFER_BINDING)
    const MAX_RENDERBUFFER_SIZE: Number = aliasFor(__js_MAX_RENDERBUFFER_SIZE)
    const INVALID_FRAMEBUFFER_OPERATION: Number = aliasFor(__js_INVALID_FRAMEBUFFER_OPERATION)
    const UNPACK_FLIP_Y_WEBGL: Number = aliasFor(__js_UNPACK_FLIP_Y_WEBGL)
    const UNPACK_PREMULTIPLY_ALPHA_WEBGL: Number = aliasFor(__js_UNPACK_PREMULTIPLY_ALPHA_WEBGL)
    const CONTEXT_LOST_WEBGL: Number = aliasFor(__js_CONTEXT_LOST_WEBGL)
    const UNPACK_COLORSPACE_CONVERSION_WEBGL: Number = aliasFor(__js_UNPACK_COLORSPACE_CONVERSION_WEBGL)
    const BROWSER_DEFAULT_WEBGL: Number = aliasFor(__js_BROWSER_DEFAULT_WEBGL)
  }
}
export interface WebGL2RenderingContextBase {
  function beginQuery(target: GLenum, query: WebGLQuery): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/beginQuery)
    """
    aliasFor(__js_beginQuery)
  }
  function beginTransformFeedback(primitiveMode: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/beginTransformFeedback)
    """
    aliasFor(__js_beginTransformFeedback)
  }
  function bindBufferBase(target: GLenum, index: GLuint, buffer: Union[WebGLBuffer, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindBufferBase)
    """
    aliasFor(__js_bindBufferBase)
  }
  function bindBufferRange(target: GLenum, index: GLuint, buffer: Union[WebGLBuffer, Null], offset: GLintptr, size: GLsizeiptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindBufferRange)
    """
    aliasFor(__js_bindBufferRange)
  }
  function bindSampler(unit: GLuint, sampler: Union[WebGLSampler, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindSampler)
    """
    aliasFor(__js_bindSampler)
  }
  function bindTransformFeedback(target: GLenum, tf: Union[WebGLTransformFeedback, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindTransformFeedback)
    """
    aliasFor(__js_bindTransformFeedback)
  }
  function bindVertexArray(array: Union[WebGLVertexArrayObject, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindVertexArray)
    """
    aliasFor(__js_bindVertexArray)
  }
  function blitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/blitFramebuffer)
    """
    aliasFor(__js_blitFramebuffer)
  }
  function clearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
    """
    aliasFor(__js_clearBufferfi)
  }
  function clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Float32List, srcOffset: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
    """
    aliasFor(__js_clearBufferfv)
  }
  function clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Float32List): Any { aliasFor(__js_clearBufferfv) }
  function clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Int32List, srcOffset: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
    """
    aliasFor(__js_clearBufferiv)
  }
  function clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Int32List): Any { aliasFor(__js_clearBufferiv) }
  function clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Uint32List, srcOffset: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
    """
    aliasFor(__js_clearBufferuiv)
  }
  function clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Uint32List): Any { aliasFor(__js_clearBufferuiv) }
  function clientWaitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLuint64): GLenum {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clientWaitSync)
    """
    aliasFor(__js_clientWaitSync)
  }
  function compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D)
    """
    aliasFor(__js_compressedTexImage3D)
  }
  function compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset: Number, srcLengthOverride: GLuint): Any { aliasFor(__js_compressedTexImage3D) }
  function compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset: Number): Any { aliasFor(__js_compressedTexImage3D) }
  function compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView): Any { aliasFor(__js_compressedTexImage3D) }
  function compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D)
    """
    aliasFor(__js_compressedTexSubImage3D)
  }
  function compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset: Number, srcLengthOverride: GLuint): Any { aliasFor(__js_compressedTexSubImage3D) }
  function compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset: Number): Any { aliasFor(__js_compressedTexSubImage3D) }
  function compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, srcData: ArrayBufferView): Any { aliasFor(__js_compressedTexSubImage3D) }
  function copyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/copyBufferSubData)
    """
    aliasFor(__js_copyBufferSubData)
  }
  function copyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/copyTexSubImage3D)
    """
    aliasFor(__js_copyTexSubImage3D)
  }
  function createQuery(): Union[WebGLQuery, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createQuery)
    """
    aliasFor(__js_createQuery)
  }
  function createSampler(): Union[WebGLSampler, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createSampler)
    """
    aliasFor(__js_createSampler)
  }
  function createTransformFeedback(): Union[WebGLTransformFeedback, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createTransformFeedback)
    """
    aliasFor(__js_createTransformFeedback)
  }
  function createVertexArray(): Union[WebGLVertexArrayObject, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createVertexArray)
    """
    aliasFor(__js_createVertexArray)
  }
  function deleteQuery(query: Union[WebGLQuery, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteQuery)
    """
    aliasFor(__js_deleteQuery)
  }
  function deleteSampler(sampler: Union[WebGLSampler, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteSampler)
    """
    aliasFor(__js_deleteSampler)
  }
  function deleteSync(sync: Union[WebGLSync, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteSync)
    """
    aliasFor(__js_deleteSync)
  }
  function deleteTransformFeedback(tf: Union[WebGLTransformFeedback, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteTransformFeedback)
    """
    aliasFor(__js_deleteTransformFeedback)
  }
  function deleteVertexArray(vertexArray: Union[WebGLVertexArrayObject, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteVertexArray)
    """
    aliasFor(__js_deleteVertexArray)
  }
  function drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced)
    """
    aliasFor(__js_drawArraysInstanced)
  }
  function drawBuffers(buffers: List[GLenum]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawBuffers)
    """
    aliasFor(__js_drawBuffers)
  }
  function drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced)
    """
    aliasFor(__js_drawElementsInstanced)
  }
  function drawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, offset: GLintptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawRangeElements)
    """
    aliasFor(__js_drawRangeElements)
  }
  function endQuery(target: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/endQuery)
    """
    aliasFor(__js_endQuery)
  }
  function endTransformFeedback(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/endTransformFeedback)
    """
    aliasFor(__js_endTransformFeedback)
  }
  function fenceSync(condition: GLenum, flags: GLbitfield): Union[WebGLSync, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/fenceSync)
    """
    aliasFor(__js_fenceSync)
  }
  function framebufferTextureLayer(target: GLenum, attachment: GLenum, texture: Union[WebGLTexture, Null], level: GLint, layer: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/framebufferTextureLayer)
    """
    aliasFor(__js_framebufferTextureLayer)
  }
  function getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: GLuint): Union[String, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockName)
    """
    aliasFor(__js_getActiveUniformBlockName)
  }
  function getActiveUniformBlockParameter(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter)
    """
    aliasFor(__js_getActiveUniformBlockParameter)
  }
  function getActiveUniforms(program: WebGLProgram, uniformIndices: List[GLuint], pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniforms)
    """
    aliasFor(__js_getActiveUniforms)
  }
  function getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView, dstOffset: Number, length: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getBufferSubData)
    """
    aliasFor(__js_getBufferSubData)
  }
  function getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView, dstOffset: Number): Any { aliasFor(__js_getBufferSubData) }
  function getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView): Any { aliasFor(__js_getBufferSubData) }
  function getFragDataLocation(program: WebGLProgram, name: String): GLint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getFragDataLocation)
    """
    aliasFor(__js_getFragDataLocation)
  }
  function getIndexedParameter(target: GLenum, index: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getIndexedParameter)
    """
    aliasFor(__js_getIndexedParameter)
  }
  function getInternalformatParameter(target: GLenum, internalformat: GLenum, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getInternalformatParameter)
    """
    aliasFor(__js_getInternalformatParameter)
  }
  function getQuery(target: GLenum, pname: GLenum): Union[WebGLQuery, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getQuery)
    """
    aliasFor(__js_getQuery)
  }
  function getQueryParameter(query: WebGLQuery, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getQueryParameter)
    """
    aliasFor(__js_getQueryParameter)
  }
  function getSamplerParameter(sampler: WebGLSampler, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getSamplerParameter)
    """
    aliasFor(__js_getSamplerParameter)
  }
  function getSyncParameter(sync: WebGLSync, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getSyncParameter)
    """
    aliasFor(__js_getSyncParameter)
  }
  function getTransformFeedbackVarying(program: WebGLProgram, index: GLuint): Union[WebGLActiveInfo, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getTransformFeedbackVarying)
    """
    aliasFor(__js_getTransformFeedbackVarying)
  }
  function getUniformBlockIndex(program: WebGLProgram, uniformBlockName: String): GLuint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformBlockIndex)
    """
    aliasFor(__js_getUniformBlockIndex)
  }
  function getUniformIndices(program: WebGLProgram, uniformNames: List[String]): Union[List[GLuint], Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices)
    """
    aliasFor(__js_getUniformIndices)
  }
  function invalidateFramebuffer(target: GLenum, attachments: List[GLenum]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer)
    """
    aliasFor(__js_invalidateFramebuffer)
  }
  function invalidateSubFramebuffer(target: GLenum, attachments: List[GLenum], x: GLint, y: GLint, width: GLsizei, height: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer)
    """
    aliasFor(__js_invalidateSubFramebuffer)
  }
  function isQuery(query: Union[WebGLQuery, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isQuery)
    """
    aliasFor(__js_isQuery)
  }
  function isSampler(sampler: Union[WebGLSampler, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isSampler)
    """
    aliasFor(__js_isSampler)
  }
  function isSync(sync: Union[WebGLSync, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isSync)
    """
    aliasFor(__js_isSync)
  }
  function isTransformFeedback(tf: Union[WebGLTransformFeedback, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isTransformFeedback)
    """
    aliasFor(__js_isTransformFeedback)
  }
  function isVertexArray(vertexArray: Union[WebGLVertexArrayObject, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isVertexArray)
    """
    aliasFor(__js_isVertexArray)
  }
  function pauseTransformFeedback(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/pauseTransformFeedback)
    """
    aliasFor(__js_pauseTransformFeedback)
  }
  function readBuffer(src: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/readBuffer)
    """
    aliasFor(__js_readBuffer)
  }
  function renderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/renderbufferStorageMultisample)
    """
    aliasFor(__js_renderbufferStorageMultisample)
  }
  function resumeTransformFeedback(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/resumeTransformFeedback)
    """
    aliasFor(__js_resumeTransformFeedback)
  }
  function samplerParameterf(sampler: WebGLSampler, pname: GLenum, param: GLfloat): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/samplerParameter)
    """
    aliasFor(__js_samplerParameterf)
  }
  function samplerParameteri(sampler: WebGLSampler, pname: GLenum, param: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/samplerParameter)
    """
    aliasFor(__js_samplerParameteri)
  }
  function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D)
    """
    aliasFor(__js_texImage3D)
  }
  function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): Any { aliasFor(__js_texImage3D) }
  function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: Union[ArrayBufferView, Null]): Any { aliasFor(__js_texImage3D) }
  function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: Number): Any { aliasFor(__js_texImage3D) }
  function texStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texStorage2D)
    """
    aliasFor(__js_texStorage2D)
  }
  function texStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texStorage3D)
    """
    aliasFor(__js_texStorage3D)
  }
  function texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D)
    """
    aliasFor(__js_texSubImage3D)
  }
  function texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): Any { aliasFor(__js_texSubImage3D) }
  function texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, srcData: Union[ArrayBufferView, Null], srcOffset: Number): Any { aliasFor(__js_texSubImage3D) }
  function texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, srcData: Union[ArrayBufferView, Null]): Any { aliasFor(__js_texSubImage3D) }
  function transformFeedbackVaryings(program: WebGLProgram, varyings: List[String], bufferMode: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings)
    """
    aliasFor(__js_transformFeedbackVaryings)
  }
  function uniform1ui(location: Union[WebGLUniformLocation, Null], v0: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    """
    aliasFor(__js_uniform1ui)
  }
  function uniform1uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    """
    aliasFor(__js_uniform1uiv)
  }
  function uniform1uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List, srcOffset: Number): Any { aliasFor(__js_uniform1uiv) }
  function uniform1uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List): Any { aliasFor(__js_uniform1uiv) }
  function uniform2ui(location: Union[WebGLUniformLocation, Null], v0: GLuint, v1: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    """
    aliasFor(__js_uniform2ui)
  }
  function uniform2uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    """
    aliasFor(__js_uniform2uiv)
  }
  function uniform2uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List, srcOffset: Number): Any { aliasFor(__js_uniform2uiv) }
  function uniform2uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List): Any { aliasFor(__js_uniform2uiv) }
  function uniform3ui(location: Union[WebGLUniformLocation, Null], v0: GLuint, v1: GLuint, v2: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    """
    aliasFor(__js_uniform3ui)
  }
  function uniform3uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    """
    aliasFor(__js_uniform3uiv)
  }
  function uniform3uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List, srcOffset: Number): Any { aliasFor(__js_uniform3uiv) }
  function uniform3uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List): Any { aliasFor(__js_uniform3uiv) }
  function uniform4ui(location: Union[WebGLUniformLocation, Null], v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    """
    aliasFor(__js_uniform4ui)
  }
  function uniform4uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    """
    aliasFor(__js_uniform4uiv)
  }
  function uniform4uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List, srcOffset: Number): Any { aliasFor(__js_uniform4uiv) }
  function uniform4uiv(location: Union[WebGLUniformLocation, Null], data: Uint32List): Any { aliasFor(__js_uniform4uiv) }
  function uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformBlockBinding)
    """
    aliasFor(__js_uniformBlockBinding)
  }
  function uniformMatrix2x3fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix2x3fv)
  }
  function uniformMatrix2x3fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniformMatrix2x3fv) }
  function uniformMatrix2x3fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List): Any { aliasFor(__js_uniformMatrix2x3fv) }
  function uniformMatrix2x4fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix2x4fv)
  }
  function uniformMatrix2x4fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniformMatrix2x4fv) }
  function uniformMatrix2x4fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List): Any { aliasFor(__js_uniformMatrix2x4fv) }
  function uniformMatrix3x2fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix3x2fv)
  }
  function uniformMatrix3x2fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniformMatrix3x2fv) }
  function uniformMatrix3x2fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List): Any { aliasFor(__js_uniformMatrix3x2fv) }
  function uniformMatrix3x4fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix3x4fv)
  }
  function uniformMatrix3x4fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniformMatrix3x4fv) }
  function uniformMatrix3x4fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List): Any { aliasFor(__js_uniformMatrix3x4fv) }
  function uniformMatrix4x2fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix4x2fv)
  }
  function uniformMatrix4x2fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniformMatrix4x2fv) }
  function uniformMatrix4x2fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List): Any { aliasFor(__js_uniformMatrix4x2fv) }
  function uniformMatrix4x3fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix4x3fv)
  }
  function uniformMatrix4x3fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniformMatrix4x3fv) }
  function uniformMatrix4x3fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List): Any { aliasFor(__js_uniformMatrix4x3fv) }
  function vertexAttribDivisor(index: GLuint, divisor: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribDivisor)
    """
    aliasFor(__js_vertexAttribDivisor)
  }
  function vertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
    """
    aliasFor(__js_vertexAttribI4i)
  }
  function vertexAttribI4iv(index: GLuint, values: Int32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
    """
    aliasFor(__js_vertexAttribI4iv)
  }
  function vertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
    """
    aliasFor(__js_vertexAttribI4ui)
  }
  function vertexAttribI4uiv(index: GLuint, values: Uint32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
    """
    aliasFor(__js_vertexAttribI4uiv)
  }
  function vertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribIPointer)
    """
    aliasFor(__js_vertexAttribIPointer)
  }
  function waitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLint64): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/waitSync)
    """
    aliasFor(__js_waitSync)
  }
  const READ_BUFFER: Number = aliasFor(__js_READ_BUFFER)
  const UNPACK_ROW_LENGTH: Number = aliasFor(__js_UNPACK_ROW_LENGTH)
  const UNPACK_SKIP_ROWS: Number = aliasFor(__js_UNPACK_SKIP_ROWS)
  const UNPACK_SKIP_PIXELS: Number = aliasFor(__js_UNPACK_SKIP_PIXELS)
  const PACK_ROW_LENGTH: Number = aliasFor(__js_PACK_ROW_LENGTH)
  const PACK_SKIP_ROWS: Number = aliasFor(__js_PACK_SKIP_ROWS)
  const PACK_SKIP_PIXELS: Number = aliasFor(__js_PACK_SKIP_PIXELS)
  const COLOR: Number = aliasFor(__js_COLOR)
  const DEPTH: Number = aliasFor(__js_DEPTH)
  const STENCIL: Number = aliasFor(__js_STENCIL)
  const RED: Number = aliasFor(__js_RED)
  const RGB8: Number = aliasFor(__js_RGB8)
  const RGB10_A2: Number = aliasFor(__js_RGB10_A2)
  const TEXTURE_BINDING_3D: Number = aliasFor(__js_TEXTURE_BINDING_3D)
  const UNPACK_SKIP_IMAGES: Number = aliasFor(__js_UNPACK_SKIP_IMAGES)
  const UNPACK_IMAGE_HEIGHT: Number = aliasFor(__js_UNPACK_IMAGE_HEIGHT)
  const TEXTURE_3D: Number = aliasFor(__js_TEXTURE_3D)
  const TEXTURE_WRAP_R: Number = aliasFor(__js_TEXTURE_WRAP_R)
  const MAX_3D_TEXTURE_SIZE: Number = aliasFor(__js_MAX_3D_TEXTURE_SIZE)
  const UNSIGNED_INT_2_10_10_10_REV: Number = aliasFor(__js_UNSIGNED_INT_2_10_10_10_REV)
  const MAX_ELEMENTS_VERTICES: Number = aliasFor(__js_MAX_ELEMENTS_VERTICES)
  const MAX_ELEMENTS_INDICES: Number = aliasFor(__js_MAX_ELEMENTS_INDICES)
  const TEXTURE_MIN_LOD: Number = aliasFor(__js_TEXTURE_MIN_LOD)
  const TEXTURE_MAX_LOD: Number = aliasFor(__js_TEXTURE_MAX_LOD)
  const TEXTURE_BASE_LEVEL: Number = aliasFor(__js_TEXTURE_BASE_LEVEL)
  const TEXTURE_MAX_LEVEL: Number = aliasFor(__js_TEXTURE_MAX_LEVEL)
  const MIN: Number = aliasFor(__js_MIN)
  const MAX: Number = aliasFor(__js_MAX)
  const DEPTH_COMPONENT24: Number = aliasFor(__js_DEPTH_COMPONENT24)
  const MAX_TEXTURE_LOD_BIAS: Number = aliasFor(__js_MAX_TEXTURE_LOD_BIAS)
  const TEXTURE_COMPARE_MODE: Number = aliasFor(__js_TEXTURE_COMPARE_MODE)
  const TEXTURE_COMPARE_FUNC: Number = aliasFor(__js_TEXTURE_COMPARE_FUNC)
  const CURRENT_QUERY: Number = aliasFor(__js_CURRENT_QUERY)
  const QUERY_RESULT: Number = aliasFor(__js_QUERY_RESULT)
  const QUERY_RESULT_AVAILABLE: Number = aliasFor(__js_QUERY_RESULT_AVAILABLE)
  const STREAM_READ: Number = aliasFor(__js_STREAM_READ)
  const STREAM_COPY: Number = aliasFor(__js_STREAM_COPY)
  const STATIC_READ: Number = aliasFor(__js_STATIC_READ)
  const STATIC_COPY: Number = aliasFor(__js_STATIC_COPY)
  const DYNAMIC_READ: Number = aliasFor(__js_DYNAMIC_READ)
  const DYNAMIC_COPY: Number = aliasFor(__js_DYNAMIC_COPY)
  const MAX_DRAW_BUFFERS: Number = aliasFor(__js_MAX_DRAW_BUFFERS)
  const DRAW_BUFFER0: Number = aliasFor(__js_DRAW_BUFFER0)
  const DRAW_BUFFER1: Number = aliasFor(__js_DRAW_BUFFER1)
  const DRAW_BUFFER2: Number = aliasFor(__js_DRAW_BUFFER2)
  const DRAW_BUFFER3: Number = aliasFor(__js_DRAW_BUFFER3)
  const DRAW_BUFFER4: Number = aliasFor(__js_DRAW_BUFFER4)
  const DRAW_BUFFER5: Number = aliasFor(__js_DRAW_BUFFER5)
  const DRAW_BUFFER6: Number = aliasFor(__js_DRAW_BUFFER6)
  const DRAW_BUFFER7: Number = aliasFor(__js_DRAW_BUFFER7)
  const DRAW_BUFFER8: Number = aliasFor(__js_DRAW_BUFFER8)
  const DRAW_BUFFER9: Number = aliasFor(__js_DRAW_BUFFER9)
  const DRAW_BUFFER10: Number = aliasFor(__js_DRAW_BUFFER10)
  const DRAW_BUFFER11: Number = aliasFor(__js_DRAW_BUFFER11)
  const DRAW_BUFFER12: Number = aliasFor(__js_DRAW_BUFFER12)
  const DRAW_BUFFER13: Number = aliasFor(__js_DRAW_BUFFER13)
  const DRAW_BUFFER14: Number = aliasFor(__js_DRAW_BUFFER14)
  const DRAW_BUFFER15: Number = aliasFor(__js_DRAW_BUFFER15)
  const MAX_FRAGMENT_UNIFORM_COMPONENTS: Number = aliasFor(__js_MAX_FRAGMENT_UNIFORM_COMPONENTS)
  const MAX_VERTEX_UNIFORM_COMPONENTS: Number = aliasFor(__js_MAX_VERTEX_UNIFORM_COMPONENTS)
  const SAMPLER_3D: Number = aliasFor(__js_SAMPLER_3D)
  const SAMPLER_2D_SHADOW: Number = aliasFor(__js_SAMPLER_2D_SHADOW)
  const FRAGMENT_SHADER_DERIVATIVE_HINT: Number = aliasFor(__js_FRAGMENT_SHADER_DERIVATIVE_HINT)
  const PIXEL_PACK_BUFFER: Number = aliasFor(__js_PIXEL_PACK_BUFFER)
  const PIXEL_UNPACK_BUFFER: Number = aliasFor(__js_PIXEL_UNPACK_BUFFER)
  const PIXEL_PACK_BUFFER_BINDING: Number = aliasFor(__js_PIXEL_PACK_BUFFER_BINDING)
  const PIXEL_UNPACK_BUFFER_BINDING: Number = aliasFor(__js_PIXEL_UNPACK_BUFFER_BINDING)
  const FLOAT_MAT2x3: Number = aliasFor(__js_FLOAT_MAT2x3)
  const FLOAT_MAT2x4: Number = aliasFor(__js_FLOAT_MAT2x4)
  const FLOAT_MAT3x2: Number = aliasFor(__js_FLOAT_MAT3x2)
  const FLOAT_MAT3x4: Number = aliasFor(__js_FLOAT_MAT3x4)
  const FLOAT_MAT4x2: Number = aliasFor(__js_FLOAT_MAT4x2)
  const FLOAT_MAT4x3: Number = aliasFor(__js_FLOAT_MAT4x3)
  const SRGB: Number = aliasFor(__js_SRGB)
  const SRGB8: Number = aliasFor(__js_SRGB8)
  const SRGB8_ALPHA8: Number = aliasFor(__js_SRGB8_ALPHA8)
  const COMPARE_REF_TO_TEXTURE: Number = aliasFor(__js_COMPARE_REF_TO_TEXTURE)
  const RGBA32F: Number = aliasFor(__js_RGBA32F)
  const RGB32F: Number = aliasFor(__js_RGB32F)
  const RGBA16F: Number = aliasFor(__js_RGBA16F)
  const RGB16F: Number = aliasFor(__js_RGB16F)
  const VERTEX_ATTRIB_ARRAY_INTEGER: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_INTEGER)
  const MAX_ARRAY_TEXTURE_LAYERS: Number = aliasFor(__js_MAX_ARRAY_TEXTURE_LAYERS)
  const MIN_PROGRAM_TEXEL_OFFSET: Number = aliasFor(__js_MIN_PROGRAM_TEXEL_OFFSET)
  const MAX_PROGRAM_TEXEL_OFFSET: Number = aliasFor(__js_MAX_PROGRAM_TEXEL_OFFSET)
  const MAX_VARYING_COMPONENTS: Number = aliasFor(__js_MAX_VARYING_COMPONENTS)
  const TEXTURE_2D_ARRAY: Number = aliasFor(__js_TEXTURE_2D_ARRAY)
  const TEXTURE_BINDING_2D_ARRAY: Number = aliasFor(__js_TEXTURE_BINDING_2D_ARRAY)
  const R11F_G11F_B10F: Number = aliasFor(__js_R11F_G11F_B10F)
  const UNSIGNED_INT_10F_11F_11F_REV: Number = aliasFor(__js_UNSIGNED_INT_10F_11F_11F_REV)
  const RGB9_E5: Number = aliasFor(__js_RGB9_E5)
  const UNSIGNED_INT_5_9_9_9_REV: Number = aliasFor(__js_UNSIGNED_INT_5_9_9_9_REV)
  const TRANSFORM_FEEDBACK_BUFFER_MODE: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_MODE)
  const MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: Number = aliasFor(__js_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS)
  const TRANSFORM_FEEDBACK_VARYINGS: Number = aliasFor(__js_TRANSFORM_FEEDBACK_VARYINGS)
  const TRANSFORM_FEEDBACK_BUFFER_START: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_START)
  const TRANSFORM_FEEDBACK_BUFFER_SIZE: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_SIZE)
  const TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: Number = aliasFor(__js_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN)
  const RASTERIZER_DISCARD: Number = aliasFor(__js_RASTERIZER_DISCARD)
  const MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: Number = aliasFor(__js_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS)
  const MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: Number = aliasFor(__js_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS)
  const INTERLEAVED_ATTRIBS: Number = aliasFor(__js_INTERLEAVED_ATTRIBS)
  const SEPARATE_ATTRIBS: Number = aliasFor(__js_SEPARATE_ATTRIBS)
  const TRANSFORM_FEEDBACK_BUFFER: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER)
  const TRANSFORM_FEEDBACK_BUFFER_BINDING: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_BINDING)
  const RGBA32UI: Number = aliasFor(__js_RGBA32UI)
  const RGB32UI: Number = aliasFor(__js_RGB32UI)
  const RGBA16UI: Number = aliasFor(__js_RGBA16UI)
  const RGB16UI: Number = aliasFor(__js_RGB16UI)
  const RGBA8UI: Number = aliasFor(__js_RGBA8UI)
  const RGB8UI: Number = aliasFor(__js_RGB8UI)
  const RGBA32I: Number = aliasFor(__js_RGBA32I)
  const RGB32I: Number = aliasFor(__js_RGB32I)
  const RGBA16I: Number = aliasFor(__js_RGBA16I)
  const RGB16I: Number = aliasFor(__js_RGB16I)
  const RGBA8I: Number = aliasFor(__js_RGBA8I)
  const RGB8I: Number = aliasFor(__js_RGB8I)
  const RED_INTEGER: Number = aliasFor(__js_RED_INTEGER)
  const RGB_INTEGER: Number = aliasFor(__js_RGB_INTEGER)
  const RGBA_INTEGER: Number = aliasFor(__js_RGBA_INTEGER)
  const SAMPLER_2D_ARRAY: Number = aliasFor(__js_SAMPLER_2D_ARRAY)
  const SAMPLER_2D_ARRAY_SHADOW: Number = aliasFor(__js_SAMPLER_2D_ARRAY_SHADOW)
  const SAMPLER_CUBE_SHADOW: Number = aliasFor(__js_SAMPLER_CUBE_SHADOW)
  const UNSIGNED_INT_VEC2: Number = aliasFor(__js_UNSIGNED_INT_VEC2)
  const UNSIGNED_INT_VEC3: Number = aliasFor(__js_UNSIGNED_INT_VEC3)
  const UNSIGNED_INT_VEC4: Number = aliasFor(__js_UNSIGNED_INT_VEC4)
  const INT_SAMPLER_2D: Number = aliasFor(__js_INT_SAMPLER_2D)
  const INT_SAMPLER_3D: Number = aliasFor(__js_INT_SAMPLER_3D)
  const INT_SAMPLER_CUBE: Number = aliasFor(__js_INT_SAMPLER_CUBE)
  const INT_SAMPLER_2D_ARRAY: Number = aliasFor(__js_INT_SAMPLER_2D_ARRAY)
  const UNSIGNED_INT_SAMPLER_2D: Number = aliasFor(__js_UNSIGNED_INT_SAMPLER_2D)
  const UNSIGNED_INT_SAMPLER_3D: Number = aliasFor(__js_UNSIGNED_INT_SAMPLER_3D)
  const UNSIGNED_INT_SAMPLER_CUBE: Number = aliasFor(__js_UNSIGNED_INT_SAMPLER_CUBE)
  const UNSIGNED_INT_SAMPLER_2D_ARRAY: Number = aliasFor(__js_UNSIGNED_INT_SAMPLER_2D_ARRAY)
  const DEPTH_COMPONENT32F: Number = aliasFor(__js_DEPTH_COMPONENT32F)
  const DEPTH32F_STENCIL8: Number = aliasFor(__js_DEPTH32F_STENCIL8)
  const FLOAT_32_UNSIGNED_INT_24_8_REV: Number = aliasFor(__js_FLOAT_32_UNSIGNED_INT_24_8_REV)
  const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)
  const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)
  const FRAMEBUFFER_ATTACHMENT_RED_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_RED_SIZE)
  const FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE)
  const FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE)
  const FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE)
  const FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE)
  const FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE)
  const FRAMEBUFFER_DEFAULT: Number = aliasFor(__js_FRAMEBUFFER_DEFAULT)
  const UNSIGNED_INT_24_8: Number = aliasFor(__js_UNSIGNED_INT_24_8)
  const DEPTH24_STENCIL8: Number = aliasFor(__js_DEPTH24_STENCIL8)
  const UNSIGNED_NORMALIZED: Number = aliasFor(__js_UNSIGNED_NORMALIZED)
  const DRAW_FRAMEBUFFER_BINDING: Number = aliasFor(__js_DRAW_FRAMEBUFFER_BINDING)
  const READ_FRAMEBUFFER: Number = aliasFor(__js_READ_FRAMEBUFFER)
  const DRAW_FRAMEBUFFER: Number = aliasFor(__js_DRAW_FRAMEBUFFER)
  const READ_FRAMEBUFFER_BINDING: Number = aliasFor(__js_READ_FRAMEBUFFER_BINDING)
  const RENDERBUFFER_SAMPLES: Number = aliasFor(__js_RENDERBUFFER_SAMPLES)
  const FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER)
  const MAX_COLOR_ATTACHMENTS: Number = aliasFor(__js_MAX_COLOR_ATTACHMENTS)
  const COLOR_ATTACHMENT1: Number = aliasFor(__js_COLOR_ATTACHMENT1)
  const COLOR_ATTACHMENT2: Number = aliasFor(__js_COLOR_ATTACHMENT2)
  const COLOR_ATTACHMENT3: Number = aliasFor(__js_COLOR_ATTACHMENT3)
  const COLOR_ATTACHMENT4: Number = aliasFor(__js_COLOR_ATTACHMENT4)
  const COLOR_ATTACHMENT5: Number = aliasFor(__js_COLOR_ATTACHMENT5)
  const COLOR_ATTACHMENT6: Number = aliasFor(__js_COLOR_ATTACHMENT6)
  const COLOR_ATTACHMENT7: Number = aliasFor(__js_COLOR_ATTACHMENT7)
  const COLOR_ATTACHMENT8: Number = aliasFor(__js_COLOR_ATTACHMENT8)
  const COLOR_ATTACHMENT9: Number = aliasFor(__js_COLOR_ATTACHMENT9)
  const COLOR_ATTACHMENT10: Number = aliasFor(__js_COLOR_ATTACHMENT10)
  const COLOR_ATTACHMENT11: Number = aliasFor(__js_COLOR_ATTACHMENT11)
  const COLOR_ATTACHMENT12: Number = aliasFor(__js_COLOR_ATTACHMENT12)
  const COLOR_ATTACHMENT13: Number = aliasFor(__js_COLOR_ATTACHMENT13)
  const COLOR_ATTACHMENT14: Number = aliasFor(__js_COLOR_ATTACHMENT14)
  const COLOR_ATTACHMENT15: Number = aliasFor(__js_COLOR_ATTACHMENT15)
  const FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE)
  const MAX_SAMPLES: Number = aliasFor(__js_MAX_SAMPLES)
  const HALF_FLOAT: Number = aliasFor(__js_HALF_FLOAT)
  const RG: Number = aliasFor(__js_RG)
  const RG_INTEGER: Number = aliasFor(__js_RG_INTEGER)
  const R8: Number = aliasFor(__js_R8)
  const RG8: Number = aliasFor(__js_RG8)
  const R16F: Number = aliasFor(__js_R16F)
  const R32F: Number = aliasFor(__js_R32F)
  const RG16F: Number = aliasFor(__js_RG16F)
  const RG32F: Number = aliasFor(__js_RG32F)
  const R8I: Number = aliasFor(__js_R8I)
  const R8UI: Number = aliasFor(__js_R8UI)
  const R16I: Number = aliasFor(__js_R16I)
  const R16UI: Number = aliasFor(__js_R16UI)
  const R32I: Number = aliasFor(__js_R32I)
  const R32UI: Number = aliasFor(__js_R32UI)
  const RG8I: Number = aliasFor(__js_RG8I)
  const RG8UI: Number = aliasFor(__js_RG8UI)
  const RG16I: Number = aliasFor(__js_RG16I)
  const RG16UI: Number = aliasFor(__js_RG16UI)
  const RG32I: Number = aliasFor(__js_RG32I)
  const RG32UI: Number = aliasFor(__js_RG32UI)
  const VERTEX_ARRAY_BINDING: Number = aliasFor(__js_VERTEX_ARRAY_BINDING)
  const R8_SNORM: Number = aliasFor(__js_R8_SNORM)
  const RG8_SNORM: Number = aliasFor(__js_RG8_SNORM)
  const RGB8_SNORM: Number = aliasFor(__js_RGB8_SNORM)
  const RGBA8_SNORM: Number = aliasFor(__js_RGBA8_SNORM)
  const SIGNED_NORMALIZED: Number = aliasFor(__js_SIGNED_NORMALIZED)
  const COPY_READ_BUFFER: Number = aliasFor(__js_COPY_READ_BUFFER)
  const COPY_WRITE_BUFFER: Number = aliasFor(__js_COPY_WRITE_BUFFER)
  const COPY_READ_BUFFER_BINDING: Number = aliasFor(__js_COPY_READ_BUFFER_BINDING)
  const COPY_WRITE_BUFFER_BINDING: Number = aliasFor(__js_COPY_WRITE_BUFFER_BINDING)
  const UNIFORM_BUFFER: Number = aliasFor(__js_UNIFORM_BUFFER)
  const UNIFORM_BUFFER_BINDING: Number = aliasFor(__js_UNIFORM_BUFFER_BINDING)
  const UNIFORM_BUFFER_START: Number = aliasFor(__js_UNIFORM_BUFFER_START)
  const UNIFORM_BUFFER_SIZE: Number = aliasFor(__js_UNIFORM_BUFFER_SIZE)
  const MAX_VERTEX_UNIFORM_BLOCKS: Number = aliasFor(__js_MAX_VERTEX_UNIFORM_BLOCKS)
  const MAX_FRAGMENT_UNIFORM_BLOCKS: Number = aliasFor(__js_MAX_FRAGMENT_UNIFORM_BLOCKS)
  const MAX_COMBINED_UNIFORM_BLOCKS: Number = aliasFor(__js_MAX_COMBINED_UNIFORM_BLOCKS)
  const MAX_UNIFORM_BUFFER_BINDINGS: Number = aliasFor(__js_MAX_UNIFORM_BUFFER_BINDINGS)
  const MAX_UNIFORM_BLOCK_SIZE: Number = aliasFor(__js_MAX_UNIFORM_BLOCK_SIZE)
  const MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: Number = aliasFor(__js_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS)
  const MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: Number = aliasFor(__js_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS)
  const UNIFORM_BUFFER_OFFSET_ALIGNMENT: Number = aliasFor(__js_UNIFORM_BUFFER_OFFSET_ALIGNMENT)
  const ACTIVE_UNIFORM_BLOCKS: Number = aliasFor(__js_ACTIVE_UNIFORM_BLOCKS)
  const UNIFORM_TYPE: Number = aliasFor(__js_UNIFORM_TYPE)
  const UNIFORM_SIZE: Number = aliasFor(__js_UNIFORM_SIZE)
  const UNIFORM_BLOCK_INDEX: Number = aliasFor(__js_UNIFORM_BLOCK_INDEX)
  const UNIFORM_OFFSET: Number = aliasFor(__js_UNIFORM_OFFSET)
  const UNIFORM_ARRAY_STRIDE: Number = aliasFor(__js_UNIFORM_ARRAY_STRIDE)
  const UNIFORM_MATRIX_STRIDE: Number = aliasFor(__js_UNIFORM_MATRIX_STRIDE)
  const UNIFORM_IS_ROW_MAJOR: Number = aliasFor(__js_UNIFORM_IS_ROW_MAJOR)
  const UNIFORM_BLOCK_BINDING: Number = aliasFor(__js_UNIFORM_BLOCK_BINDING)
  const UNIFORM_BLOCK_DATA_SIZE: Number = aliasFor(__js_UNIFORM_BLOCK_DATA_SIZE)
  const UNIFORM_BLOCK_ACTIVE_UNIFORMS: Number = aliasFor(__js_UNIFORM_BLOCK_ACTIVE_UNIFORMS)
  const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: Number = aliasFor(__js_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)
  const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: Number = aliasFor(__js_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER)
  const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: Number = aliasFor(__js_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER)
  const INVALID_INDEX: Number = aliasFor(__js_INVALID_INDEX)
  const MAX_VERTEX_OUTPUT_COMPONENTS: Number = aliasFor(__js_MAX_VERTEX_OUTPUT_COMPONENTS)
  const MAX_FRAGMENT_INPUT_COMPONENTS: Number = aliasFor(__js_MAX_FRAGMENT_INPUT_COMPONENTS)
  const MAX_SERVER_WAIT_TIMEOUT: Number = aliasFor(__js_MAX_SERVER_WAIT_TIMEOUT)
  const OBJECT_TYPE: Number = aliasFor(__js_OBJECT_TYPE)
  const SYNC_CONDITION: Number = aliasFor(__js_SYNC_CONDITION)
  const SYNC_STATUS: Number = aliasFor(__js_SYNC_STATUS)
  const SYNC_FLAGS: Number = aliasFor(__js_SYNC_FLAGS)
  const SYNC_FENCE: Number = aliasFor(__js_SYNC_FENCE)
  const SYNC_GPU_COMMANDS_COMPLETE: Number = aliasFor(__js_SYNC_GPU_COMMANDS_COMPLETE)
  const UNSIGNALED: Number = aliasFor(__js_UNSIGNALED)
  const SIGNALED: Number = aliasFor(__js_SIGNALED)
  const ALREADY_SIGNALED: Number = aliasFor(__js_ALREADY_SIGNALED)
  const TIMEOUT_EXPIRED: Number = aliasFor(__js_TIMEOUT_EXPIRED)
  const CONDITION_SATISFIED: Number = aliasFor(__js_CONDITION_SATISFIED)
  const WAIT_FAILED: Number = aliasFor(__js_WAIT_FAILED)
  const SYNC_FLUSH_COMMANDS_BIT: Number = aliasFor(__js_SYNC_FLUSH_COMMANDS_BIT)
  const VERTEX_ATTRIB_ARRAY_DIVISOR: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_DIVISOR)
  const ANY_SAMPLES_PASSED: Number = aliasFor(__js_ANY_SAMPLES_PASSED)
  const ANY_SAMPLES_PASSED_CONSERVATIVE: Number = aliasFor(__js_ANY_SAMPLES_PASSED_CONSERVATIVE)
  const SAMPLER_BINDING: Number = aliasFor(__js_SAMPLER_BINDING)
  const RGB10_A2UI: Number = aliasFor(__js_RGB10_A2UI)
  const INT_2_10_10_10_REV: Number = aliasFor(__js_INT_2_10_10_10_REV)
  const TRANSFORM_FEEDBACK: Number = aliasFor(__js_TRANSFORM_FEEDBACK)
  const TRANSFORM_FEEDBACK_PAUSED: Number = aliasFor(__js_TRANSFORM_FEEDBACK_PAUSED)
  const TRANSFORM_FEEDBACK_ACTIVE: Number = aliasFor(__js_TRANSFORM_FEEDBACK_ACTIVE)
  const TRANSFORM_FEEDBACK_BINDING: Number = aliasFor(__js_TRANSFORM_FEEDBACK_BINDING)
  const TEXTURE_IMMUTABLE_FORMAT: Number = aliasFor(__js_TEXTURE_IMMUTABLE_FORMAT)
  const MAX_ELEMENT_INDEX: Number = aliasFor(__js_MAX_ELEMENT_INDEX)
  const TEXTURE_IMMUTABLE_LEVELS: Number = aliasFor(__js_TEXTURE_IMMUTABLE_LEVELS)
  const TIMEOUT_IGNORED: Number = aliasFor(__js_TIMEOUT_IGNORED)
  const MAX_CLIENT_WAIT_TIMEOUT_WEBGL: Number = aliasFor(__js_MAX_CLIENT_WAIT_TIMEOUT_WEBGL)
}
export interface WebGL2RenderingContextOverloads {
  function bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
    """
    aliasFor(__js_bufferData)
  }
  function bufferData(target: GLenum, srcData: Union[AllowSharedBufferSource, Null], usage: GLenum): Any { aliasFor(__js_bufferData) }
  function bufferData(target: GLenum, srcData: ArrayBufferView, usage: GLenum, srcOffset: Number, length: GLuint): Any { aliasFor(__js_bufferData) }
  function bufferData(target: GLenum, srcData: ArrayBufferView, usage: GLenum, srcOffset: Number): Any { aliasFor(__js_bufferData) }
  function bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: AllowSharedBufferSource): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData)
    """
    aliasFor(__js_bufferSubData)
  }
  function bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: ArrayBufferView, srcOffset: Number, length: GLuint): Any { aliasFor(__js_bufferSubData) }
  function bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: ArrayBufferView, srcOffset: Number): Any { aliasFor(__js_bufferSubData) }
  function compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)
    """
    aliasFor(__js_compressedTexImage2D)
  }
  function compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset: Number, srcLengthOverride: GLuint): Any { aliasFor(__js_compressedTexImage2D) }
  function compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset: Number): Any { aliasFor(__js_compressedTexImage2D) }
  function compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, srcData: ArrayBufferView): Any { aliasFor(__js_compressedTexImage2D) }
  function compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)
    """
    aliasFor(__js_compressedTexSubImage2D)
  }
  function compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset: Number, srcLengthOverride: GLuint): Any { aliasFor(__js_compressedTexSubImage2D) }
  function compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset: Number): Any { aliasFor(__js_compressedTexSubImage2D) }
  function compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, srcData: ArrayBufferView): Any { aliasFor(__js_compressedTexSubImage2D) }
  function readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: Union[ArrayBufferView, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
    """
    aliasFor(__js_readPixels)
  }
  function readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, offset: GLintptr): Any { aliasFor(__js_readPixels) }
  function readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView, dstOffset: Number): Any { aliasFor(__js_readPixels) }
  function texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: Union[ArrayBufferView, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
    """
    aliasFor(__js_texImage2D)
  }
  function texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): Any { aliasFor(__js_texImage2D) }
  function texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): Any { aliasFor(__js_texImage2D) }
  function texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): Any { aliasFor(__js_texImage2D) }
  function texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: Number): Any { aliasFor(__js_texImage2D) }
  function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: Union[ArrayBufferView, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
    """
    aliasFor(__js_texSubImage2D)
  }
  function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): Any { aliasFor(__js_texSubImage2D) }
  function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): Any { aliasFor(__js_texSubImage2D) }
  function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): Any { aliasFor(__js_texSubImage2D) }
  function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: Number): Any { aliasFor(__js_texSubImage2D) }
  function uniform1fv(location: Union[WebGLUniformLocation, Null], data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform1fv)
  }
  function uniform1fv(location: Union[WebGLUniformLocation, Null], data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniform1fv) }
  function uniform1fv(location: Union[WebGLUniformLocation, Null], data: Float32List): Any { aliasFor(__js_uniform1fv) }
  function uniform1iv(location: Union[WebGLUniformLocation, Null], data: Int32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform1iv)
  }
  function uniform1iv(location: Union[WebGLUniformLocation, Null], data: Int32List, srcOffset: Number): Any { aliasFor(__js_uniform1iv) }
  function uniform1iv(location: Union[WebGLUniformLocation, Null], data: Int32List): Any { aliasFor(__js_uniform1iv) }
  function uniform2fv(location: Union[WebGLUniformLocation, Null], data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform2fv)
  }
  function uniform2fv(location: Union[WebGLUniformLocation, Null], data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniform2fv) }
  function uniform2fv(location: Union[WebGLUniformLocation, Null], data: Float32List): Any { aliasFor(__js_uniform2fv) }
  function uniform2iv(location: Union[WebGLUniformLocation, Null], data: Int32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform2iv)
  }
  function uniform2iv(location: Union[WebGLUniformLocation, Null], data: Int32List, srcOffset: Number): Any { aliasFor(__js_uniform2iv) }
  function uniform2iv(location: Union[WebGLUniformLocation, Null], data: Int32List): Any { aliasFor(__js_uniform2iv) }
  function uniform3fv(location: Union[WebGLUniformLocation, Null], data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform3fv)
  }
  function uniform3fv(location: Union[WebGLUniformLocation, Null], data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniform3fv) }
  function uniform3fv(location: Union[WebGLUniformLocation, Null], data: Float32List): Any { aliasFor(__js_uniform3fv) }
  function uniform3iv(location: Union[WebGLUniformLocation, Null], data: Int32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform3iv)
  }
  function uniform3iv(location: Union[WebGLUniformLocation, Null], data: Int32List, srcOffset: Number): Any { aliasFor(__js_uniform3iv) }
  function uniform3iv(location: Union[WebGLUniformLocation, Null], data: Int32List): Any { aliasFor(__js_uniform3iv) }
  function uniform4fv(location: Union[WebGLUniformLocation, Null], data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform4fv)
  }
  function uniform4fv(location: Union[WebGLUniformLocation, Null], data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniform4fv) }
  function uniform4fv(location: Union[WebGLUniformLocation, Null], data: Float32List): Any { aliasFor(__js_uniform4fv) }
  function uniform4iv(location: Union[WebGLUniformLocation, Null], data: Int32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform4iv)
  }
  function uniform4iv(location: Union[WebGLUniformLocation, Null], data: Int32List, srcOffset: Number): Any { aliasFor(__js_uniform4iv) }
  function uniform4iv(location: Union[WebGLUniformLocation, Null], data: Int32List): Any { aliasFor(__js_uniform4iv) }
  function uniformMatrix2fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix2fv)
  }
  function uniformMatrix2fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniformMatrix2fv) }
  function uniformMatrix2fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List): Any { aliasFor(__js_uniformMatrix2fv) }
  function uniformMatrix3fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix3fv)
  }
  function uniformMatrix3fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniformMatrix3fv) }
  function uniformMatrix3fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List): Any { aliasFor(__js_uniformMatrix3fv) }
  function uniformMatrix4fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number, srcLength: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix4fv)
  }
  function uniformMatrix4fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List, srcOffset: Number): Any { aliasFor(__js_uniformMatrix4fv) }
  function uniformMatrix4fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, data: Float32List): Any { aliasFor(__js_uniformMatrix4fv) }
}
export interface WebGLActiveInfo {
  """
  Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo)
  """
  static {
    aliasFor(native "WebGLActiveInfo")
    var prototype: WebGLActiveInfo = aliasFor(__js_prototype)
    function new(): WebGLActiveInfo { aliasFor(__op_new__) }
  }
  const name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/name)
  """ = aliasFor(__js_name)
  const size: GLint """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/size)
  """ = aliasFor(__js_size)
  const type: GLenum """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/type)
  """ = aliasFor(__js_type)
}
export interface WebGLBuffer {
  """
  Part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLBuffer)
  """
  static {
    aliasFor(native "WebGLBuffer")
    var prototype: WebGLBuffer = aliasFor(__js_prototype)
    function new(): WebGLBuffer { aliasFor(__op_new__) }
  }
}
export interface WebGLContextEvent extends Event {
  """
  The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent)
  """
  static {
    aliasFor(native "WebGLContextEvent")
    var prototype: WebGLContextEvent = aliasFor(__js_prototype)
    function new(type: String, eventInit: WebGLContextEventInit): WebGLContextEvent { aliasFor(__op_new__) }
    function new(type: String): WebGLContextEvent { aliasFor(__op_new__) }
  }
  const statusMessage: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent/statusMessage)
  """ = aliasFor(__js_statusMessage)
}
export interface WebGLFramebuffer {
  """
  Part of the WebGL API and represents a collection of buffers that serve as a rendering destination.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLFramebuffer)
  """
  static {
    aliasFor(native "WebGLFramebuffer")
    var prototype: WebGLFramebuffer = aliasFor(__js_prototype)
    function new(): WebGLFramebuffer { aliasFor(__op_new__) }
  }
}
export interface WebGLProgram {
  """
  The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLProgram)
  """
  static {
    aliasFor(native "WebGLProgram")
    var prototype: WebGLProgram = aliasFor(__js_prototype)
    function new(): WebGLProgram { aliasFor(__op_new__) }
  }
}
export interface WebGLQuery {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLQuery)
  """
  static {
    aliasFor(native "WebGLQuery")
    var prototype: WebGLQuery = aliasFor(__js_prototype)
    function new(): WebGLQuery { aliasFor(__op_new__) }
  }
}
export interface WebGLRenderbuffer {
  """
  Part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderbuffer)
  """
  static {
    aliasFor(native "WebGLRenderbuffer")
    var prototype: WebGLRenderbuffer = aliasFor(__js_prototype)
    function new(): WebGLRenderbuffer { aliasFor(__op_new__) }
  }
}
export interface WebGLRenderingContext extends WebGLRenderingContextBase, WebGLRenderingContextOverloads {
  """
  Provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext)
  """
  static {
    aliasFor(native "WebGLRenderingContext")
    var prototype: WebGLRenderingContext = aliasFor(__js_prototype)
    function new(): WebGLRenderingContext { aliasFor(__op_new__) }
    const DEPTH_BUFFER_BIT: Number = aliasFor(__js_DEPTH_BUFFER_BIT)
    const STENCIL_BUFFER_BIT: Number = aliasFor(__js_STENCIL_BUFFER_BIT)
    const COLOR_BUFFER_BIT: Number = aliasFor(__js_COLOR_BUFFER_BIT)
    const POINTS: Number = aliasFor(__js_POINTS)
    const LINES: Number = aliasFor(__js_LINES)
    const LINE_LOOP: Number = aliasFor(__js_LINE_LOOP)
    const LINE_STRIP: Number = aliasFor(__js_LINE_STRIP)
    const TRIANGLES: Number = aliasFor(__js_TRIANGLES)
    const TRIANGLE_STRIP: Number = aliasFor(__js_TRIANGLE_STRIP)
    const TRIANGLE_FAN: Number = aliasFor(__js_TRIANGLE_FAN)
    const ZERO: Number = aliasFor(__js_ZERO)
    const ONE: Number = aliasFor(__js_ONE)
    const SRC_COLOR: Number = aliasFor(__js_SRC_COLOR)
    const ONE_MINUS_SRC_COLOR: Number = aliasFor(__js_ONE_MINUS_SRC_COLOR)
    const SRC_ALPHA: Number = aliasFor(__js_SRC_ALPHA)
    const ONE_MINUS_SRC_ALPHA: Number = aliasFor(__js_ONE_MINUS_SRC_ALPHA)
    const DST_ALPHA: Number = aliasFor(__js_DST_ALPHA)
    const ONE_MINUS_DST_ALPHA: Number = aliasFor(__js_ONE_MINUS_DST_ALPHA)
    const DST_COLOR: Number = aliasFor(__js_DST_COLOR)
    const ONE_MINUS_DST_COLOR: Number = aliasFor(__js_ONE_MINUS_DST_COLOR)
    const SRC_ALPHA_SATURATE: Number = aliasFor(__js_SRC_ALPHA_SATURATE)
    const FUNC_ADD: Number = aliasFor(__js_FUNC_ADD)
    const BLEND_EQUATION: Number = aliasFor(__js_BLEND_EQUATION)
    const BLEND_EQUATION_RGB: Number = aliasFor(__js_BLEND_EQUATION_RGB)
    const BLEND_EQUATION_ALPHA: Number = aliasFor(__js_BLEND_EQUATION_ALPHA)
    const FUNC_SUBTRACT: Number = aliasFor(__js_FUNC_SUBTRACT)
    const FUNC_REVERSE_SUBTRACT: Number = aliasFor(__js_FUNC_REVERSE_SUBTRACT)
    const BLEND_DST_RGB: Number = aliasFor(__js_BLEND_DST_RGB)
    const BLEND_SRC_RGB: Number = aliasFor(__js_BLEND_SRC_RGB)
    const BLEND_DST_ALPHA: Number = aliasFor(__js_BLEND_DST_ALPHA)
    const BLEND_SRC_ALPHA: Number = aliasFor(__js_BLEND_SRC_ALPHA)
    const CONSTANT_COLOR: Number = aliasFor(__js_CONSTANT_COLOR)
    const ONE_MINUS_CONSTANT_COLOR: Number = aliasFor(__js_ONE_MINUS_CONSTANT_COLOR)
    const CONSTANT_ALPHA: Number = aliasFor(__js_CONSTANT_ALPHA)
    const ONE_MINUS_CONSTANT_ALPHA: Number = aliasFor(__js_ONE_MINUS_CONSTANT_ALPHA)
    const BLEND_COLOR: Number = aliasFor(__js_BLEND_COLOR)
    const ARRAY_BUFFER: Number = aliasFor(__js_ARRAY_BUFFER)
    const ELEMENT_ARRAY_BUFFER: Number = aliasFor(__js_ELEMENT_ARRAY_BUFFER)
    const ARRAY_BUFFER_BINDING: Number = aliasFor(__js_ARRAY_BUFFER_BINDING)
    const ELEMENT_ARRAY_BUFFER_BINDING: Number = aliasFor(__js_ELEMENT_ARRAY_BUFFER_BINDING)
    const STREAM_DRAW: Number = aliasFor(__js_STREAM_DRAW)
    const STATIC_DRAW: Number = aliasFor(__js_STATIC_DRAW)
    const DYNAMIC_DRAW: Number = aliasFor(__js_DYNAMIC_DRAW)
    const BUFFER_SIZE: Number = aliasFor(__js_BUFFER_SIZE)
    const BUFFER_USAGE: Number = aliasFor(__js_BUFFER_USAGE)
    const CURRENT_VERTEX_ATTRIB: Number = aliasFor(__js_CURRENT_VERTEX_ATTRIB)
    const FRONT: Number = aliasFor(__js_FRONT)
    const BACK: Number = aliasFor(__js_BACK)
    const FRONT_AND_BACK: Number = aliasFor(__js_FRONT_AND_BACK)
    const CULL_FACE: Number = aliasFor(__js_CULL_FACE)
    const BLEND: Number = aliasFor(__js_BLEND)
    const DITHER: Number = aliasFor(__js_DITHER)
    const STENCIL_TEST: Number = aliasFor(__js_STENCIL_TEST)
    const DEPTH_TEST: Number = aliasFor(__js_DEPTH_TEST)
    const SCISSOR_TEST: Number = aliasFor(__js_SCISSOR_TEST)
    const POLYGON_OFFSET_FILL: Number = aliasFor(__js_POLYGON_OFFSET_FILL)
    const SAMPLE_ALPHA_TO_COVERAGE: Number = aliasFor(__js_SAMPLE_ALPHA_TO_COVERAGE)
    const SAMPLE_COVERAGE: Number = aliasFor(__js_SAMPLE_COVERAGE)
    const NO_ERROR: Number = aliasFor(__js_NO_ERROR)
    const INVALID_ENUM: Number = aliasFor(__js_INVALID_ENUM)
    const INVALID_VALUE: Number = aliasFor(__js_INVALID_VALUE)
    const INVALID_OPERATION: Number = aliasFor(__js_INVALID_OPERATION)
    const OUT_OF_MEMORY: Number = aliasFor(__js_OUT_OF_MEMORY)
    const CW: Number = aliasFor(__js_CW)
    const CCW: Number = aliasFor(__js_CCW)
    const LINE_WIDTH: Number = aliasFor(__js_LINE_WIDTH)
    const ALIASED_POINT_SIZE_RANGE: Number = aliasFor(__js_ALIASED_POINT_SIZE_RANGE)
    const ALIASED_LINE_WIDTH_RANGE: Number = aliasFor(__js_ALIASED_LINE_WIDTH_RANGE)
    const CULL_FACE_MODE: Number = aliasFor(__js_CULL_FACE_MODE)
    const FRONT_FACE: Number = aliasFor(__js_FRONT_FACE)
    const DEPTH_RANGE: Number = aliasFor(__js_DEPTH_RANGE)
    const DEPTH_WRITEMASK: Number = aliasFor(__js_DEPTH_WRITEMASK)
    const DEPTH_CLEAR_VALUE: Number = aliasFor(__js_DEPTH_CLEAR_VALUE)
    const DEPTH_FUNC: Number = aliasFor(__js_DEPTH_FUNC)
    const STENCIL_CLEAR_VALUE: Number = aliasFor(__js_STENCIL_CLEAR_VALUE)
    const STENCIL_FUNC: Number = aliasFor(__js_STENCIL_FUNC)
    const STENCIL_FAIL: Number = aliasFor(__js_STENCIL_FAIL)
    const STENCIL_PASS_DEPTH_FAIL: Number = aliasFor(__js_STENCIL_PASS_DEPTH_FAIL)
    const STENCIL_PASS_DEPTH_PASS: Number = aliasFor(__js_STENCIL_PASS_DEPTH_PASS)
    const STENCIL_REF: Number = aliasFor(__js_STENCIL_REF)
    const STENCIL_VALUE_MASK: Number = aliasFor(__js_STENCIL_VALUE_MASK)
    const STENCIL_WRITEMASK: Number = aliasFor(__js_STENCIL_WRITEMASK)
    const STENCIL_BACK_FUNC: Number = aliasFor(__js_STENCIL_BACK_FUNC)
    const STENCIL_BACK_FAIL: Number = aliasFor(__js_STENCIL_BACK_FAIL)
    const STENCIL_BACK_PASS_DEPTH_FAIL: Number = aliasFor(__js_STENCIL_BACK_PASS_DEPTH_FAIL)
    const STENCIL_BACK_PASS_DEPTH_PASS: Number = aliasFor(__js_STENCIL_BACK_PASS_DEPTH_PASS)
    const STENCIL_BACK_REF: Number = aliasFor(__js_STENCIL_BACK_REF)
    const STENCIL_BACK_VALUE_MASK: Number = aliasFor(__js_STENCIL_BACK_VALUE_MASK)
    const STENCIL_BACK_WRITEMASK: Number = aliasFor(__js_STENCIL_BACK_WRITEMASK)
    const VIEWPORT: Number = aliasFor(__js_VIEWPORT)
    const SCISSOR_BOX: Number = aliasFor(__js_SCISSOR_BOX)
    const COLOR_CLEAR_VALUE: Number = aliasFor(__js_COLOR_CLEAR_VALUE)
    const COLOR_WRITEMASK: Number = aliasFor(__js_COLOR_WRITEMASK)
    const UNPACK_ALIGNMENT: Number = aliasFor(__js_UNPACK_ALIGNMENT)
    const PACK_ALIGNMENT: Number = aliasFor(__js_PACK_ALIGNMENT)
    const MAX_TEXTURE_SIZE: Number = aliasFor(__js_MAX_TEXTURE_SIZE)
    const MAX_VIEWPORT_DIMS: Number = aliasFor(__js_MAX_VIEWPORT_DIMS)
    const SUBPIXEL_BITS: Number = aliasFor(__js_SUBPIXEL_BITS)
    const RED_BITS: Number = aliasFor(__js_RED_BITS)
    const GREEN_BITS: Number = aliasFor(__js_GREEN_BITS)
    const BLUE_BITS: Number = aliasFor(__js_BLUE_BITS)
    const ALPHA_BITS: Number = aliasFor(__js_ALPHA_BITS)
    const DEPTH_BITS: Number = aliasFor(__js_DEPTH_BITS)
    const STENCIL_BITS: Number = aliasFor(__js_STENCIL_BITS)
    const POLYGON_OFFSET_UNITS: Number = aliasFor(__js_POLYGON_OFFSET_UNITS)
    const POLYGON_OFFSET_FACTOR: Number = aliasFor(__js_POLYGON_OFFSET_FACTOR)
    const TEXTURE_BINDING_2D: Number = aliasFor(__js_TEXTURE_BINDING_2D)
    const SAMPLE_BUFFERS: Number = aliasFor(__js_SAMPLE_BUFFERS)
    const SAMPLES: Number = aliasFor(__js_SAMPLES)
    const SAMPLE_COVERAGE_VALUE: Number = aliasFor(__js_SAMPLE_COVERAGE_VALUE)
    const SAMPLE_COVERAGE_INVERT: Number = aliasFor(__js_SAMPLE_COVERAGE_INVERT)
    const COMPRESSED_TEXTURE_FORMATS: Number = aliasFor(__js_COMPRESSED_TEXTURE_FORMATS)
    const DONT_CARE: Number = aliasFor(__js_DONT_CARE)
    const FASTEST: Number = aliasFor(__js_FASTEST)
    const NICEST: Number = aliasFor(__js_NICEST)
    const GENERATE_MIPMAP_HINT: Number = aliasFor(__js_GENERATE_MIPMAP_HINT)
    const BYTE: Number = aliasFor(__js_BYTE)
    const UNSIGNED_BYTE: Number = aliasFor(__js_UNSIGNED_BYTE)
    const SHORT: Number = aliasFor(__js_SHORT)
    const UNSIGNED_SHORT: Number = aliasFor(__js_UNSIGNED_SHORT)
    const INT: Number = aliasFor(__js_INT)
    const UNSIGNED_INT: Number = aliasFor(__js_UNSIGNED_INT)
    const FLOAT: Number = aliasFor(__js_FLOAT)
    const DEPTH_COMPONENT: Number = aliasFor(__js_DEPTH_COMPONENT)
    const ALPHA: Number = aliasFor(__js_ALPHA)
    const RGB: Number = aliasFor(__js_RGB)
    const RGBA: Number = aliasFor(__js_RGBA)
    const LUMINANCE: Number = aliasFor(__js_LUMINANCE)
    const LUMINANCE_ALPHA: Number = aliasFor(__js_LUMINANCE_ALPHA)
    const UNSIGNED_SHORT_4_4_4_4: Number = aliasFor(__js_UNSIGNED_SHORT_4_4_4_4)
    const UNSIGNED_SHORT_5_5_5_1: Number = aliasFor(__js_UNSIGNED_SHORT_5_5_5_1)
    const UNSIGNED_SHORT_5_6_5: Number = aliasFor(__js_UNSIGNED_SHORT_5_6_5)
    const FRAGMENT_SHADER: Number = aliasFor(__js_FRAGMENT_SHADER)
    const VERTEX_SHADER: Number = aliasFor(__js_VERTEX_SHADER)
    const MAX_VERTEX_ATTRIBS: Number = aliasFor(__js_MAX_VERTEX_ATTRIBS)
    const MAX_VERTEX_UNIFORM_VECTORS: Number = aliasFor(__js_MAX_VERTEX_UNIFORM_VECTORS)
    const MAX_VARYING_VECTORS: Number = aliasFor(__js_MAX_VARYING_VECTORS)
    const MAX_COMBINED_TEXTURE_IMAGE_UNITS: Number = aliasFor(__js_MAX_COMBINED_TEXTURE_IMAGE_UNITS)
    const MAX_VERTEX_TEXTURE_IMAGE_UNITS: Number = aliasFor(__js_MAX_VERTEX_TEXTURE_IMAGE_UNITS)
    const MAX_TEXTURE_IMAGE_UNITS: Number = aliasFor(__js_MAX_TEXTURE_IMAGE_UNITS)
    const MAX_FRAGMENT_UNIFORM_VECTORS: Number = aliasFor(__js_MAX_FRAGMENT_UNIFORM_VECTORS)
    const SHADER_TYPE: Number = aliasFor(__js_SHADER_TYPE)
    const DELETE_STATUS: Number = aliasFor(__js_DELETE_STATUS)
    const LINK_STATUS: Number = aliasFor(__js_LINK_STATUS)
    const VALIDATE_STATUS: Number = aliasFor(__js_VALIDATE_STATUS)
    const ATTACHED_SHADERS: Number = aliasFor(__js_ATTACHED_SHADERS)
    const ACTIVE_UNIFORMS: Number = aliasFor(__js_ACTIVE_UNIFORMS)
    const ACTIVE_ATTRIBUTES: Number = aliasFor(__js_ACTIVE_ATTRIBUTES)
    const SHADING_LANGUAGE_VERSION: Number = aliasFor(__js_SHADING_LANGUAGE_VERSION)
    const CURRENT_PROGRAM: Number = aliasFor(__js_CURRENT_PROGRAM)
    const NEVER: Number = aliasFor(__js_NEVER)
    const LESS: Number = aliasFor(__js_LESS)
    const EQUAL: Number = aliasFor(__js_EQUAL)
    const LEQUAL: Number = aliasFor(__js_LEQUAL)
    const GREATER: Number = aliasFor(__js_GREATER)
    const NOTEQUAL: Number = aliasFor(__js_NOTEQUAL)
    const GEQUAL: Number = aliasFor(__js_GEQUAL)
    const ALWAYS: Number = aliasFor(__js_ALWAYS)
    const KEEP: Number = aliasFor(__js_KEEP)
    const REPLACE: Number = aliasFor(__js_REPLACE)
    const INCR: Number = aliasFor(__js_INCR)
    const DECR: Number = aliasFor(__js_DECR)
    const INVERT: Number = aliasFor(__js_INVERT)
    const INCR_WRAP: Number = aliasFor(__js_INCR_WRAP)
    const DECR_WRAP: Number = aliasFor(__js_DECR_WRAP)
    const VENDOR: Number = aliasFor(__js_VENDOR)
    const RENDERER: Number = aliasFor(__js_RENDERER)
    const VERSION: Number = aliasFor(__js_VERSION)
    const NEAREST: Number = aliasFor(__js_NEAREST)
    const LINEAR: Number = aliasFor(__js_LINEAR)
    const NEAREST_MIPMAP_NEAREST: Number = aliasFor(__js_NEAREST_MIPMAP_NEAREST)
    const LINEAR_MIPMAP_NEAREST: Number = aliasFor(__js_LINEAR_MIPMAP_NEAREST)
    const NEAREST_MIPMAP_LINEAR: Number = aliasFor(__js_NEAREST_MIPMAP_LINEAR)
    const LINEAR_MIPMAP_LINEAR: Number = aliasFor(__js_LINEAR_MIPMAP_LINEAR)
    const TEXTURE_MAG_FILTER: Number = aliasFor(__js_TEXTURE_MAG_FILTER)
    const TEXTURE_MIN_FILTER: Number = aliasFor(__js_TEXTURE_MIN_FILTER)
    const TEXTURE_WRAP_S: Number = aliasFor(__js_TEXTURE_WRAP_S)
    const TEXTURE_WRAP_T: Number = aliasFor(__js_TEXTURE_WRAP_T)
    const TEXTURE_2D: Number = aliasFor(__js_TEXTURE_2D)
    const TEXTURE: Number = aliasFor(__js_TEXTURE)
    const TEXTURE_CUBE_MAP: Number = aliasFor(__js_TEXTURE_CUBE_MAP)
    const TEXTURE_BINDING_CUBE_MAP: Number = aliasFor(__js_TEXTURE_BINDING_CUBE_MAP)
    const TEXTURE_CUBE_MAP_POSITIVE_X: Number = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_X)
    const TEXTURE_CUBE_MAP_NEGATIVE_X: Number = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_X)
    const TEXTURE_CUBE_MAP_POSITIVE_Y: Number = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_Y)
    const TEXTURE_CUBE_MAP_NEGATIVE_Y: Number = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_Y)
    const TEXTURE_CUBE_MAP_POSITIVE_Z: Number = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_Z)
    const TEXTURE_CUBE_MAP_NEGATIVE_Z: Number = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_Z)
    const MAX_CUBE_MAP_TEXTURE_SIZE: Number = aliasFor(__js_MAX_CUBE_MAP_TEXTURE_SIZE)
    const TEXTURE0: Number = aliasFor(__js_TEXTURE0)
    const TEXTURE1: Number = aliasFor(__js_TEXTURE1)
    const TEXTURE2: Number = aliasFor(__js_TEXTURE2)
    const TEXTURE3: Number = aliasFor(__js_TEXTURE3)
    const TEXTURE4: Number = aliasFor(__js_TEXTURE4)
    const TEXTURE5: Number = aliasFor(__js_TEXTURE5)
    const TEXTURE6: Number = aliasFor(__js_TEXTURE6)
    const TEXTURE7: Number = aliasFor(__js_TEXTURE7)
    const TEXTURE8: Number = aliasFor(__js_TEXTURE8)
    const TEXTURE9: Number = aliasFor(__js_TEXTURE9)
    const TEXTURE10: Number = aliasFor(__js_TEXTURE10)
    const TEXTURE11: Number = aliasFor(__js_TEXTURE11)
    const TEXTURE12: Number = aliasFor(__js_TEXTURE12)
    const TEXTURE13: Number = aliasFor(__js_TEXTURE13)
    const TEXTURE14: Number = aliasFor(__js_TEXTURE14)
    const TEXTURE15: Number = aliasFor(__js_TEXTURE15)
    const TEXTURE16: Number = aliasFor(__js_TEXTURE16)
    const TEXTURE17: Number = aliasFor(__js_TEXTURE17)
    const TEXTURE18: Number = aliasFor(__js_TEXTURE18)
    const TEXTURE19: Number = aliasFor(__js_TEXTURE19)
    const TEXTURE20: Number = aliasFor(__js_TEXTURE20)
    const TEXTURE21: Number = aliasFor(__js_TEXTURE21)
    const TEXTURE22: Number = aliasFor(__js_TEXTURE22)
    const TEXTURE23: Number = aliasFor(__js_TEXTURE23)
    const TEXTURE24: Number = aliasFor(__js_TEXTURE24)
    const TEXTURE25: Number = aliasFor(__js_TEXTURE25)
    const TEXTURE26: Number = aliasFor(__js_TEXTURE26)
    const TEXTURE27: Number = aliasFor(__js_TEXTURE27)
    const TEXTURE28: Number = aliasFor(__js_TEXTURE28)
    const TEXTURE29: Number = aliasFor(__js_TEXTURE29)
    const TEXTURE30: Number = aliasFor(__js_TEXTURE30)
    const TEXTURE31: Number = aliasFor(__js_TEXTURE31)
    const ACTIVE_TEXTURE: Number = aliasFor(__js_ACTIVE_TEXTURE)
    const REPEAT: Number = aliasFor(__js_REPEAT)
    const CLAMP_TO_EDGE: Number = aliasFor(__js_CLAMP_TO_EDGE)
    const MIRRORED_REPEAT: Number = aliasFor(__js_MIRRORED_REPEAT)
    const FLOAT_VEC2: Number = aliasFor(__js_FLOAT_VEC2)
    const FLOAT_VEC3: Number = aliasFor(__js_FLOAT_VEC3)
    const FLOAT_VEC4: Number = aliasFor(__js_FLOAT_VEC4)
    const INT_VEC2: Number = aliasFor(__js_INT_VEC2)
    const INT_VEC3: Number = aliasFor(__js_INT_VEC3)
    const INT_VEC4: Number = aliasFor(__js_INT_VEC4)
    const BOOL: Number = aliasFor(__js_BOOL)
    const BOOL_VEC2: Number = aliasFor(__js_BOOL_VEC2)
    const BOOL_VEC3: Number = aliasFor(__js_BOOL_VEC3)
    const BOOL_VEC4: Number = aliasFor(__js_BOOL_VEC4)
    const FLOAT_MAT2: Number = aliasFor(__js_FLOAT_MAT2)
    const FLOAT_MAT3: Number = aliasFor(__js_FLOAT_MAT3)
    const FLOAT_MAT4: Number = aliasFor(__js_FLOAT_MAT4)
    const SAMPLER_2D: Number = aliasFor(__js_SAMPLER_2D)
    const SAMPLER_CUBE: Number = aliasFor(__js_SAMPLER_CUBE)
    const VERTEX_ATTRIB_ARRAY_ENABLED: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_ENABLED)
    const VERTEX_ATTRIB_ARRAY_SIZE: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_SIZE)
    const VERTEX_ATTRIB_ARRAY_STRIDE: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_STRIDE)
    const VERTEX_ATTRIB_ARRAY_TYPE: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_TYPE)
    const VERTEX_ATTRIB_ARRAY_NORMALIZED: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_NORMALIZED)
    const VERTEX_ATTRIB_ARRAY_POINTER: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_POINTER)
    const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)
    const IMPLEMENTATION_COLOR_READ_TYPE: Number = aliasFor(__js_IMPLEMENTATION_COLOR_READ_TYPE)
    const IMPLEMENTATION_COLOR_READ_FORMAT: Number = aliasFor(__js_IMPLEMENTATION_COLOR_READ_FORMAT)
    const COMPILE_STATUS: Number = aliasFor(__js_COMPILE_STATUS)
    const LOW_FLOAT: Number = aliasFor(__js_LOW_FLOAT)
    const MEDIUM_FLOAT: Number = aliasFor(__js_MEDIUM_FLOAT)
    const HIGH_FLOAT: Number = aliasFor(__js_HIGH_FLOAT)
    const LOW_INT: Number = aliasFor(__js_LOW_INT)
    const MEDIUM_INT: Number = aliasFor(__js_MEDIUM_INT)
    const HIGH_INT: Number = aliasFor(__js_HIGH_INT)
    const FRAMEBUFFER: Number = aliasFor(__js_FRAMEBUFFER)
    const RENDERBUFFER: Number = aliasFor(__js_RENDERBUFFER)
    const RGBA4: Number = aliasFor(__js_RGBA4)
    const RGB5_A1: Number = aliasFor(__js_RGB5_A1)
    const RGBA8: Number = aliasFor(__js_RGBA8)
    const RGB565: Number = aliasFor(__js_RGB565)
    const DEPTH_COMPONENT16: Number = aliasFor(__js_DEPTH_COMPONENT16)
    const STENCIL_INDEX8: Number = aliasFor(__js_STENCIL_INDEX8)
    const DEPTH_STENCIL: Number = aliasFor(__js_DEPTH_STENCIL)
    const RENDERBUFFER_WIDTH: Number = aliasFor(__js_RENDERBUFFER_WIDTH)
    const RENDERBUFFER_HEIGHT: Number = aliasFor(__js_RENDERBUFFER_HEIGHT)
    const RENDERBUFFER_INTERNAL_FORMAT: Number = aliasFor(__js_RENDERBUFFER_INTERNAL_FORMAT)
    const RENDERBUFFER_RED_SIZE: Number = aliasFor(__js_RENDERBUFFER_RED_SIZE)
    const RENDERBUFFER_GREEN_SIZE: Number = aliasFor(__js_RENDERBUFFER_GREEN_SIZE)
    const RENDERBUFFER_BLUE_SIZE: Number = aliasFor(__js_RENDERBUFFER_BLUE_SIZE)
    const RENDERBUFFER_ALPHA_SIZE: Number = aliasFor(__js_RENDERBUFFER_ALPHA_SIZE)
    const RENDERBUFFER_DEPTH_SIZE: Number = aliasFor(__js_RENDERBUFFER_DEPTH_SIZE)
    const RENDERBUFFER_STENCIL_SIZE: Number = aliasFor(__js_RENDERBUFFER_STENCIL_SIZE)
    const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)
    const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)
    const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL)
    const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE)
    const COLOR_ATTACHMENT0: Number = aliasFor(__js_COLOR_ATTACHMENT0)
    const DEPTH_ATTACHMENT: Number = aliasFor(__js_DEPTH_ATTACHMENT)
    const STENCIL_ATTACHMENT: Number = aliasFor(__js_STENCIL_ATTACHMENT)
    const DEPTH_STENCIL_ATTACHMENT: Number = aliasFor(__js_DEPTH_STENCIL_ATTACHMENT)
    const NONE: Number = aliasFor(__js_NONE)
    const FRAMEBUFFER_COMPLETE: Number = aliasFor(__js_FRAMEBUFFER_COMPLETE)
    const FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)
    const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)
    const FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)
    const FRAMEBUFFER_UNSUPPORTED: Number = aliasFor(__js_FRAMEBUFFER_UNSUPPORTED)
    const FRAMEBUFFER_BINDING: Number = aliasFor(__js_FRAMEBUFFER_BINDING)
    const RENDERBUFFER_BINDING: Number = aliasFor(__js_RENDERBUFFER_BINDING)
    const MAX_RENDERBUFFER_SIZE: Number = aliasFor(__js_MAX_RENDERBUFFER_SIZE)
    const INVALID_FRAMEBUFFER_OPERATION: Number = aliasFor(__js_INVALID_FRAMEBUFFER_OPERATION)
    const UNPACK_FLIP_Y_WEBGL: Number = aliasFor(__js_UNPACK_FLIP_Y_WEBGL)
    const UNPACK_PREMULTIPLY_ALPHA_WEBGL: Number = aliasFor(__js_UNPACK_PREMULTIPLY_ALPHA_WEBGL)
    const CONTEXT_LOST_WEBGL: Number = aliasFor(__js_CONTEXT_LOST_WEBGL)
    const UNPACK_COLORSPACE_CONVERSION_WEBGL: Number = aliasFor(__js_UNPACK_COLORSPACE_CONVERSION_WEBGL)
    const BROWSER_DEFAULT_WEBGL: Number = aliasFor(__js_BROWSER_DEFAULT_WEBGL)
  }
}
export interface WebGLRenderingContextBase {
  const canvas: Union[HTMLCanvasElement, OffscreenCanvas] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/canvas)
  """ = aliasFor(__js_canvas)
  var drawingBufferColorSpace: PredefinedColorSpace = aliasFor(__js_drawingBufferColorSpace)
  const drawingBufferHeight: GLsizei """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferHeight)
  """ = aliasFor(__js_drawingBufferHeight)
  const drawingBufferWidth: GLsizei """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferWidth)
  """ = aliasFor(__js_drawingBufferWidth)
  function activeTexture(texture: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/activeTexture)
    """
    aliasFor(__js_activeTexture)
  }
  function attachShader(program: WebGLProgram, shader: WebGLShader): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/attachShader)
    """
    aliasFor(__js_attachShader)
  }
  function bindAttribLocation(program: WebGLProgram, index: GLuint, name: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindAttribLocation)
    """
    aliasFor(__js_bindAttribLocation)
  }
  function bindBuffer(target: GLenum, buffer: Union[WebGLBuffer, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindBuffer)
    """
    aliasFor(__js_bindBuffer)
  }
  function bindFramebuffer(target: GLenum, framebuffer: Union[WebGLFramebuffer, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindFramebuffer)
    """
    aliasFor(__js_bindFramebuffer)
  }
  function bindRenderbuffer(target: GLenum, renderbuffer: Union[WebGLRenderbuffer, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindRenderbuffer)
    """
    aliasFor(__js_bindRenderbuffer)
  }
  function bindTexture(target: GLenum, texture: Union[WebGLTexture, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindTexture)
    """
    aliasFor(__js_bindTexture)
  }
  function blendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendColor)
    """
    aliasFor(__js_blendColor)
  }
  function blendEquation(mode: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendEquation)
    """
    aliasFor(__js_blendEquation)
  }
  function blendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendEquationSeparate)
    """
    aliasFor(__js_blendEquationSeparate)
  }
  function blendFunc(sfactor: GLenum, dfactor: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendFunc)
    """
    aliasFor(__js_blendFunc)
  }
  function blendFuncSeparate(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendFuncSeparate)
    """
    aliasFor(__js_blendFuncSeparate)
  }
  function checkFramebufferStatus(target: GLenum): GLenum {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus)
    """
    aliasFor(__js_checkFramebufferStatus)
  }
  function clear(mask: GLbitfield): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clear)
    """
    aliasFor(__js_clear)
  }
  function clearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearColor)
    """
    aliasFor(__js_clearColor)
  }
  function clearDepth(depth: GLclampf): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearDepth)
    """
    aliasFor(__js_clearDepth)
  }
  function clearStencil(s: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearStencil)
    """
    aliasFor(__js_clearStencil)
  }
  function colorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/colorMask)
    """
    aliasFor(__js_colorMask)
  }
  function compileShader(shader: WebGLShader): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compileShader)
    """
    aliasFor(__js_compileShader)
  }
  function copyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/copyTexImage2D)
    """
    aliasFor(__js_copyTexImage2D)
  }
  function copyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/copyTexSubImage2D)
    """
    aliasFor(__js_copyTexSubImage2D)
  }
  function createBuffer(): Union[WebGLBuffer, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createBuffer)
    """
    aliasFor(__js_createBuffer)
  }
  function createFramebuffer(): Union[WebGLFramebuffer, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createFramebuffer)
    """
    aliasFor(__js_createFramebuffer)
  }
  function createProgram(): Union[WebGLProgram, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createProgram)
    """
    aliasFor(__js_createProgram)
  }
  function createRenderbuffer(): Union[WebGLRenderbuffer, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createRenderbuffer)
    """
    aliasFor(__js_createRenderbuffer)
  }
  function createShader(type: GLenum): Union[WebGLShader, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createShader)
    """
    aliasFor(__js_createShader)
  }
  function createTexture(): Union[WebGLTexture, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createTexture)
    """
    aliasFor(__js_createTexture)
  }
  function cullFace(mode: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/cullFace)
    """
    aliasFor(__js_cullFace)
  }
  function deleteBuffer(buffer: Union[WebGLBuffer, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteBuffer)
    """
    aliasFor(__js_deleteBuffer)
  }
  function deleteFramebuffer(framebuffer: Union[WebGLFramebuffer, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteFramebuffer)
    """
    aliasFor(__js_deleteFramebuffer)
  }
  function deleteProgram(program: Union[WebGLProgram, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteProgram)
    """
    aliasFor(__js_deleteProgram)
  }
  function deleteRenderbuffer(renderbuffer: Union[WebGLRenderbuffer, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteRenderbuffer)
    """
    aliasFor(__js_deleteRenderbuffer)
  }
  function deleteShader(shader: Union[WebGLShader, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteShader)
    """
    aliasFor(__js_deleteShader)
  }
  function deleteTexture(texture: Union[WebGLTexture, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteTexture)
    """
    aliasFor(__js_deleteTexture)
  }
  function depthFunc(func: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthFunc)
    """
    aliasFor(__js_depthFunc)
  }
  function depthMask(flag: GLboolean): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthMask)
    """
    aliasFor(__js_depthMask)
  }
  function depthRange(zNear: GLclampf, zFar: GLclampf): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthRange)
    """
    aliasFor(__js_depthRange)
  }
  function detachShader(program: WebGLProgram, shader: WebGLShader): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/detachShader)
    """
    aliasFor(__js_detachShader)
  }
  function disable(cap: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/disable)
    """
    aliasFor(__js_disable)
  }
  function disableVertexAttribArray(index: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/disableVertexAttribArray)
    """
    aliasFor(__js_disableVertexAttribArray)
  }
  function drawArrays(mode: GLenum, first: GLint, count: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawArrays)
    """
    aliasFor(__js_drawArrays)
  }
  function drawElements(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawElements)
    """
    aliasFor(__js_drawElements)
  }
  function enable(cap: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/enable)
    """
    aliasFor(__js_enable)
  }
  function enableVertexAttribArray(index: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/enableVertexAttribArray)
    """
    aliasFor(__js_enableVertexAttribArray)
  }
  function finish(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/finish)
    """
    aliasFor(__js_finish)
  }
  function flush(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/flush)
    """
    aliasFor(__js_flush)
  }
  function framebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: Union[WebGLRenderbuffer, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/framebufferRenderbuffer)
    """
    aliasFor(__js_framebufferRenderbuffer)
  }
  function framebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: Union[WebGLTexture, Null], level: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/framebufferTexture2D)
    """
    aliasFor(__js_framebufferTexture2D)
  }
  function frontFace(mode: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/frontFace)
    """
    aliasFor(__js_frontFace)
  }
  function generateMipmap(target: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/generateMipmap)
    """
    aliasFor(__js_generateMipmap)
  }
  function getActiveAttrib(program: WebGLProgram, index: GLuint): Union[WebGLActiveInfo, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getActiveAttrib)
    """
    aliasFor(__js_getActiveAttrib)
  }
  function getActiveUniform(program: WebGLProgram, index: GLuint): Union[WebGLActiveInfo, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getActiveUniform)
    """
    aliasFor(__js_getActiveUniform)
  }
  function getAttachedShaders(program: WebGLProgram): Union[List[WebGLShader], Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getAttachedShaders)
    """
    aliasFor(__js_getAttachedShaders)
  }
  function getAttribLocation(program: WebGLProgram, name: String): GLint {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getAttribLocation)
    """
    aliasFor(__js_getAttribLocation)
  }
  function getBufferParameter(target: GLenum, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getBufferParameter)
    """
    aliasFor(__js_getBufferParameter)
  }
  function getContextAttributes(): Union[WebGLContextAttributes, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getContextAttributes)
    """
    aliasFor(__js_getContextAttributes)
  }
  function getError(): GLenum {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getError)
    """
    aliasFor(__js_getError)
  }
  function getExtension(extensionName: _SStringANGLE_instanced_arrays): Union[ANGLE_instanced_arrays, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    """
    aliasFor(__js_getExtension)
  }
  function getExtension(extensionName: _SStringEXT_blend_minmax): Union[EXT_blend_minmax, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringEXT_color_buffer_float): Union[EXT_color_buffer_float, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringEXT_color_buffer_half_float): Union[EXT_color_buffer_half_float, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringEXT_float_blend): Union[EXT_float_blend, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringEXT_frag_depth): Union[EXT_frag_depth, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringEXT_sRGB): Union[EXT_sRGB, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringEXT_shader_texture_lod): Union[EXT_shader_texture_lod, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringEXT_texture_compression_bptc): Union[EXT_texture_compression_bptc, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringEXT_texture_compression_rgtc): Union[EXT_texture_compression_rgtc, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringEXT_texture_filter_anisotropic): Union[EXT_texture_filter_anisotropic, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringKHR_parallel_shader_compile): Union[KHR_parallel_shader_compile, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringOES_element_index_uint): Union[OES_element_index_uint, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringOES_fbo_render_mipmap): Union[OES_fbo_render_mipmap, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringOES_standard_derivatives): Union[OES_standard_derivatives, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringOES_texture_float): Union[OES_texture_float, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringOES_texture_float_linear): Union[OES_texture_float_linear, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringOES_texture_half_float): Union[OES_texture_half_float, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringOES_texture_half_float_linear): Union[OES_texture_half_float_linear, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringOES_vertex_array_object): Union[OES_vertex_array_object, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringOVR_multiview2): Union[OVR_multiview2, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_color_buffer_float): Union[WEBGL_color_buffer_float, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_compressed_texture_astc): Union[WEBGL_compressed_texture_astc, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_compressed_texture_etc): Union[WEBGL_compressed_texture_etc, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_compressed_texture_etc1): Union[WEBGL_compressed_texture_etc1, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_compressed_texture_pvrtc): Union[WEBGL_compressed_texture_pvrtc, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_compressed_texture_s3tc): Union[WEBGL_compressed_texture_s3tc, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_compressed_texture_s3tc_srgb): Union[WEBGL_compressed_texture_s3tc_srgb, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_debug_renderer_info): Union[WEBGL_debug_renderer_info, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_debug_shaders): Union[WEBGL_debug_shaders, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_depth_texture): Union[WEBGL_depth_texture, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_draw_buffers): Union[WEBGL_draw_buffers, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_lose_context): Union[WEBGL_lose_context, Null] { aliasFor(__js_getExtension) }
  function getExtension(extensionName: _SStringWEBGL_multi_draw): Union[WEBGL_multi_draw, Null] { aliasFor(__js_getExtension) }
  function getExtension(name: String): Any { aliasFor(__js_getExtension) }
  function getFramebufferAttachmentParameter(target: GLenum, attachment: GLenum, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getFramebufferAttachmentParameter)
    """
    aliasFor(__js_getFramebufferAttachmentParameter)
  }
  function getParameter(pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getParameter)
    """
    aliasFor(__js_getParameter)
  }
  function getProgramInfoLog(program: WebGLProgram): Union[String, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getProgramInfoLog)
    """
    aliasFor(__js_getProgramInfoLog)
  }
  function getProgramParameter(program: WebGLProgram, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getProgramParameter)
    """
    aliasFor(__js_getProgramParameter)
  }
  function getRenderbufferParameter(target: GLenum, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getRenderbufferParameter)
    """
    aliasFor(__js_getRenderbufferParameter)
  }
  function getShaderInfoLog(shader: WebGLShader): Union[String, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderInfoLog)
    """
    aliasFor(__js_getShaderInfoLog)
  }
  function getShaderParameter(shader: WebGLShader, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderParameter)
    """
    aliasFor(__js_getShaderParameter)
  }
  function getShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum): Union[WebGLShaderPrecisionFormat, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderPrecisionFormat)
    """
    aliasFor(__js_getShaderPrecisionFormat)
  }
  function getShaderSource(shader: WebGLShader): Union[String, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderSource)
    """
    aliasFor(__js_getShaderSource)
  }
  function getSupportedExtensions(): Union[List[String], Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getSupportedExtensions)
    """
    aliasFor(__js_getSupportedExtensions)
  }
  function getTexParameter(target: GLenum, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getTexParameter)
    """
    aliasFor(__js_getTexParameter)
  }
  function getUniform(program: WebGLProgram, location: WebGLUniformLocation): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getUniform)
    """
    aliasFor(__js_getUniform)
  }
  function getUniformLocation(program: WebGLProgram, name: String): Union[WebGLUniformLocation, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getUniformLocation)
    """
    aliasFor(__js_getUniformLocation)
  }
  function getVertexAttrib(index: GLuint, pname: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getVertexAttrib)
    """
    aliasFor(__js_getVertexAttrib)
  }
  function getVertexAttribOffset(index: GLuint, pname: GLenum): GLintptr {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getVertexAttribOffset)
    """
    aliasFor(__js_getVertexAttribOffset)
  }
  function hint(target: GLenum, mode: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/hint)
    """
    aliasFor(__js_hint)
  }
  function isBuffer(buffer: Union[WebGLBuffer, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isBuffer)
    """
    aliasFor(__js_isBuffer)
  }
  function isContextLost(): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isContextLost)
    """
    aliasFor(__js_isContextLost)
  }
  function isEnabled(cap: GLenum): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isEnabled)
    """
    aliasFor(__js_isEnabled)
  }
  function isFramebuffer(framebuffer: Union[WebGLFramebuffer, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isFramebuffer)
    """
    aliasFor(__js_isFramebuffer)
  }
  function isProgram(program: Union[WebGLProgram, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isProgram)
    """
    aliasFor(__js_isProgram)
  }
  function isRenderbuffer(renderbuffer: Union[WebGLRenderbuffer, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isRenderbuffer)
    """
    aliasFor(__js_isRenderbuffer)
  }
  function isShader(shader: Union[WebGLShader, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isShader)
    """
    aliasFor(__js_isShader)
  }
  function isTexture(texture: Union[WebGLTexture, Null]): GLboolean {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isTexture)
    """
    aliasFor(__js_isTexture)
  }
  function lineWidth(width: GLfloat): Any { aliasFor(__js_lineWidth) }
  function linkProgram(program: WebGLProgram): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/linkProgram)
    """
    aliasFor(__js_linkProgram)
  }
  function pixelStorei(pname: GLenum, param: Union[GLint, GLboolean]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/pixelStorei)
    """
    aliasFor(__js_pixelStorei)
  }
  function polygonOffset(factor: GLfloat, units: GLfloat): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/polygonOffset)
    """
    aliasFor(__js_polygonOffset)
  }
  function renderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/renderbufferStorage)
    """
    aliasFor(__js_renderbufferStorage)
  }
  function sampleCoverage(value: GLclampf, invert: GLboolean): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/sampleCoverage)
    """
    aliasFor(__js_sampleCoverage)
  }
  function scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/scissor)
    """
    aliasFor(__js_scissor)
  }
  function shaderSource(shader: WebGLShader, source: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/shaderSource)
    """
    aliasFor(__js_shaderSource)
  }
  function stencilFunc(func: GLenum, ref: GLint, mask: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilFunc)
    """
    aliasFor(__js_stencilFunc)
  }
  function stencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilFuncSeparate)
    """
    aliasFor(__js_stencilFuncSeparate)
  }
  function stencilMask(mask: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilMask)
    """
    aliasFor(__js_stencilMask)
  }
  function stencilMaskSeparate(face: GLenum, mask: GLuint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilMaskSeparate)
    """
    aliasFor(__js_stencilMaskSeparate)
  }
  function stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilOp)
    """
    aliasFor(__js_stencilOp)
  }
  function stencilOpSeparate(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilOpSeparate)
    """
    aliasFor(__js_stencilOpSeparate)
  }
  function texParameterf(target: GLenum, pname: GLenum, param: GLfloat): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texParameter)
    """
    aliasFor(__js_texParameterf)
  }
  function texParameteri(target: GLenum, pname: GLenum, param: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texParameter)
    """
    aliasFor(__js_texParameteri)
  }
  function uniform1f(location: Union[WebGLUniformLocation, Null], x: GLfloat): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform1f)
  }
  function uniform1i(location: Union[WebGLUniformLocation, Null], x: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform1i)
  }
  function uniform2f(location: Union[WebGLUniformLocation, Null], x: GLfloat, y: GLfloat): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform2f)
  }
  function uniform2i(location: Union[WebGLUniformLocation, Null], x: GLint, y: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform2i)
  }
  function uniform3f(location: Union[WebGLUniformLocation, Null], x: GLfloat, y: GLfloat, z: GLfloat): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform3f)
  }
  function uniform3i(location: Union[WebGLUniformLocation, Null], x: GLint, y: GLint, z: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform3i)
  }
  function uniform4f(location: Union[WebGLUniformLocation, Null], x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform4f)
  }
  function uniform4i(location: Union[WebGLUniformLocation, Null], x: GLint, y: GLint, z: GLint, w: GLint): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform4i)
  }
  function useProgram(program: Union[WebGLProgram, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/useProgram)
    """
    aliasFor(__js_useProgram)
  }
  function validateProgram(program: WebGLProgram): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/validateProgram)
    """
    aliasFor(__js_validateProgram)
  }
  function vertexAttrib1f(index: GLuint, x: GLfloat): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    """
    aliasFor(__js_vertexAttrib1f)
  }
  function vertexAttrib1fv(index: GLuint, values: Float32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    """
    aliasFor(__js_vertexAttrib1fv)
  }
  function vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    """
    aliasFor(__js_vertexAttrib2f)
  }
  function vertexAttrib2fv(index: GLuint, values: Float32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    """
    aliasFor(__js_vertexAttrib2fv)
  }
  function vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    """
    aliasFor(__js_vertexAttrib3f)
  }
  function vertexAttrib3fv(index: GLuint, values: Float32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    """
    aliasFor(__js_vertexAttrib3fv)
  }
  function vertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    """
    aliasFor(__js_vertexAttrib4f)
  }
  function vertexAttrib4fv(index: GLuint, values: Float32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    """
    aliasFor(__js_vertexAttrib4fv)
  }
  function vertexAttribPointer(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttribPointer)
    """
    aliasFor(__js_vertexAttribPointer)
  }
  function viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/viewport)
    """
    aliasFor(__js_viewport)
  }
  const DEPTH_BUFFER_BIT: Number = aliasFor(__js_DEPTH_BUFFER_BIT)
  const STENCIL_BUFFER_BIT: Number = aliasFor(__js_STENCIL_BUFFER_BIT)
  const COLOR_BUFFER_BIT: Number = aliasFor(__js_COLOR_BUFFER_BIT)
  const POINTS: Number = aliasFor(__js_POINTS)
  const LINES: Number = aliasFor(__js_LINES)
  const LINE_LOOP: Number = aliasFor(__js_LINE_LOOP)
  const LINE_STRIP: Number = aliasFor(__js_LINE_STRIP)
  const TRIANGLES: Number = aliasFor(__js_TRIANGLES)
  const TRIANGLE_STRIP: Number = aliasFor(__js_TRIANGLE_STRIP)
  const TRIANGLE_FAN: Number = aliasFor(__js_TRIANGLE_FAN)
  const ZERO: Number = aliasFor(__js_ZERO)
  const ONE: Number = aliasFor(__js_ONE)
  const SRC_COLOR: Number = aliasFor(__js_SRC_COLOR)
  const ONE_MINUS_SRC_COLOR: Number = aliasFor(__js_ONE_MINUS_SRC_COLOR)
  const SRC_ALPHA: Number = aliasFor(__js_SRC_ALPHA)
  const ONE_MINUS_SRC_ALPHA: Number = aliasFor(__js_ONE_MINUS_SRC_ALPHA)
  const DST_ALPHA: Number = aliasFor(__js_DST_ALPHA)
  const ONE_MINUS_DST_ALPHA: Number = aliasFor(__js_ONE_MINUS_DST_ALPHA)
  const DST_COLOR: Number = aliasFor(__js_DST_COLOR)
  const ONE_MINUS_DST_COLOR: Number = aliasFor(__js_ONE_MINUS_DST_COLOR)
  const SRC_ALPHA_SATURATE: Number = aliasFor(__js_SRC_ALPHA_SATURATE)
  const FUNC_ADD: Number = aliasFor(__js_FUNC_ADD)
  const BLEND_EQUATION: Number = aliasFor(__js_BLEND_EQUATION)
  const BLEND_EQUATION_RGB: Number = aliasFor(__js_BLEND_EQUATION_RGB)
  const BLEND_EQUATION_ALPHA: Number = aliasFor(__js_BLEND_EQUATION_ALPHA)
  const FUNC_SUBTRACT: Number = aliasFor(__js_FUNC_SUBTRACT)
  const FUNC_REVERSE_SUBTRACT: Number = aliasFor(__js_FUNC_REVERSE_SUBTRACT)
  const BLEND_DST_RGB: Number = aliasFor(__js_BLEND_DST_RGB)
  const BLEND_SRC_RGB: Number = aliasFor(__js_BLEND_SRC_RGB)
  const BLEND_DST_ALPHA: Number = aliasFor(__js_BLEND_DST_ALPHA)
  const BLEND_SRC_ALPHA: Number = aliasFor(__js_BLEND_SRC_ALPHA)
  const CONSTANT_COLOR: Number = aliasFor(__js_CONSTANT_COLOR)
  const ONE_MINUS_CONSTANT_COLOR: Number = aliasFor(__js_ONE_MINUS_CONSTANT_COLOR)
  const CONSTANT_ALPHA: Number = aliasFor(__js_CONSTANT_ALPHA)
  const ONE_MINUS_CONSTANT_ALPHA: Number = aliasFor(__js_ONE_MINUS_CONSTANT_ALPHA)
  const BLEND_COLOR: Number = aliasFor(__js_BLEND_COLOR)
  const ARRAY_BUFFER: Number = aliasFor(__js_ARRAY_BUFFER)
  const ELEMENT_ARRAY_BUFFER: Number = aliasFor(__js_ELEMENT_ARRAY_BUFFER)
  const ARRAY_BUFFER_BINDING: Number = aliasFor(__js_ARRAY_BUFFER_BINDING)
  const ELEMENT_ARRAY_BUFFER_BINDING: Number = aliasFor(__js_ELEMENT_ARRAY_BUFFER_BINDING)
  const STREAM_DRAW: Number = aliasFor(__js_STREAM_DRAW)
  const STATIC_DRAW: Number = aliasFor(__js_STATIC_DRAW)
  const DYNAMIC_DRAW: Number = aliasFor(__js_DYNAMIC_DRAW)
  const BUFFER_SIZE: Number = aliasFor(__js_BUFFER_SIZE)
  const BUFFER_USAGE: Number = aliasFor(__js_BUFFER_USAGE)
  const CURRENT_VERTEX_ATTRIB: Number = aliasFor(__js_CURRENT_VERTEX_ATTRIB)
  const FRONT: Number = aliasFor(__js_FRONT)
  const BACK: Number = aliasFor(__js_BACK)
  const FRONT_AND_BACK: Number = aliasFor(__js_FRONT_AND_BACK)
  const CULL_FACE: Number = aliasFor(__js_CULL_FACE)
  const BLEND: Number = aliasFor(__js_BLEND)
  const DITHER: Number = aliasFor(__js_DITHER)
  const STENCIL_TEST: Number = aliasFor(__js_STENCIL_TEST)
  const DEPTH_TEST: Number = aliasFor(__js_DEPTH_TEST)
  const SCISSOR_TEST: Number = aliasFor(__js_SCISSOR_TEST)
  const POLYGON_OFFSET_FILL: Number = aliasFor(__js_POLYGON_OFFSET_FILL)
  const SAMPLE_ALPHA_TO_COVERAGE: Number = aliasFor(__js_SAMPLE_ALPHA_TO_COVERAGE)
  const SAMPLE_COVERAGE: Number = aliasFor(__js_SAMPLE_COVERAGE)
  const NO_ERROR: Number = aliasFor(__js_NO_ERROR)
  const INVALID_ENUM: Number = aliasFor(__js_INVALID_ENUM)
  const INVALID_VALUE: Number = aliasFor(__js_INVALID_VALUE)
  const INVALID_OPERATION: Number = aliasFor(__js_INVALID_OPERATION)
  const OUT_OF_MEMORY: Number = aliasFor(__js_OUT_OF_MEMORY)
  const CW: Number = aliasFor(__js_CW)
  const CCW: Number = aliasFor(__js_CCW)
  const LINE_WIDTH: Number = aliasFor(__js_LINE_WIDTH)
  const ALIASED_POINT_SIZE_RANGE: Number = aliasFor(__js_ALIASED_POINT_SIZE_RANGE)
  const ALIASED_LINE_WIDTH_RANGE: Number = aliasFor(__js_ALIASED_LINE_WIDTH_RANGE)
  const CULL_FACE_MODE: Number = aliasFor(__js_CULL_FACE_MODE)
  const FRONT_FACE: Number = aliasFor(__js_FRONT_FACE)
  const DEPTH_RANGE: Number = aliasFor(__js_DEPTH_RANGE)
  const DEPTH_WRITEMASK: Number = aliasFor(__js_DEPTH_WRITEMASK)
  const DEPTH_CLEAR_VALUE: Number = aliasFor(__js_DEPTH_CLEAR_VALUE)
  const DEPTH_FUNC: Number = aliasFor(__js_DEPTH_FUNC)
  const STENCIL_CLEAR_VALUE: Number = aliasFor(__js_STENCIL_CLEAR_VALUE)
  const STENCIL_FUNC: Number = aliasFor(__js_STENCIL_FUNC)
  const STENCIL_FAIL: Number = aliasFor(__js_STENCIL_FAIL)
  const STENCIL_PASS_DEPTH_FAIL: Number = aliasFor(__js_STENCIL_PASS_DEPTH_FAIL)
  const STENCIL_PASS_DEPTH_PASS: Number = aliasFor(__js_STENCIL_PASS_DEPTH_PASS)
  const STENCIL_REF: Number = aliasFor(__js_STENCIL_REF)
  const STENCIL_VALUE_MASK: Number = aliasFor(__js_STENCIL_VALUE_MASK)
  const STENCIL_WRITEMASK: Number = aliasFor(__js_STENCIL_WRITEMASK)
  const STENCIL_BACK_FUNC: Number = aliasFor(__js_STENCIL_BACK_FUNC)
  const STENCIL_BACK_FAIL: Number = aliasFor(__js_STENCIL_BACK_FAIL)
  const STENCIL_BACK_PASS_DEPTH_FAIL: Number = aliasFor(__js_STENCIL_BACK_PASS_DEPTH_FAIL)
  const STENCIL_BACK_PASS_DEPTH_PASS: Number = aliasFor(__js_STENCIL_BACK_PASS_DEPTH_PASS)
  const STENCIL_BACK_REF: Number = aliasFor(__js_STENCIL_BACK_REF)
  const STENCIL_BACK_VALUE_MASK: Number = aliasFor(__js_STENCIL_BACK_VALUE_MASK)
  const STENCIL_BACK_WRITEMASK: Number = aliasFor(__js_STENCIL_BACK_WRITEMASK)
  const VIEWPORT: Number = aliasFor(__js_VIEWPORT)
  const SCISSOR_BOX: Number = aliasFor(__js_SCISSOR_BOX)
  const COLOR_CLEAR_VALUE: Number = aliasFor(__js_COLOR_CLEAR_VALUE)
  const COLOR_WRITEMASK: Number = aliasFor(__js_COLOR_WRITEMASK)
  const UNPACK_ALIGNMENT: Number = aliasFor(__js_UNPACK_ALIGNMENT)
  const PACK_ALIGNMENT: Number = aliasFor(__js_PACK_ALIGNMENT)
  const MAX_TEXTURE_SIZE: Number = aliasFor(__js_MAX_TEXTURE_SIZE)
  const MAX_VIEWPORT_DIMS: Number = aliasFor(__js_MAX_VIEWPORT_DIMS)
  const SUBPIXEL_BITS: Number = aliasFor(__js_SUBPIXEL_BITS)
  const RED_BITS: Number = aliasFor(__js_RED_BITS)
  const GREEN_BITS: Number = aliasFor(__js_GREEN_BITS)
  const BLUE_BITS: Number = aliasFor(__js_BLUE_BITS)
  const ALPHA_BITS: Number = aliasFor(__js_ALPHA_BITS)
  const DEPTH_BITS: Number = aliasFor(__js_DEPTH_BITS)
  const STENCIL_BITS: Number = aliasFor(__js_STENCIL_BITS)
  const POLYGON_OFFSET_UNITS: Number = aliasFor(__js_POLYGON_OFFSET_UNITS)
  const POLYGON_OFFSET_FACTOR: Number = aliasFor(__js_POLYGON_OFFSET_FACTOR)
  const TEXTURE_BINDING_2D: Number = aliasFor(__js_TEXTURE_BINDING_2D)
  const SAMPLE_BUFFERS: Number = aliasFor(__js_SAMPLE_BUFFERS)
  const SAMPLES: Number = aliasFor(__js_SAMPLES)
  const SAMPLE_COVERAGE_VALUE: Number = aliasFor(__js_SAMPLE_COVERAGE_VALUE)
  const SAMPLE_COVERAGE_INVERT: Number = aliasFor(__js_SAMPLE_COVERAGE_INVERT)
  const COMPRESSED_TEXTURE_FORMATS: Number = aliasFor(__js_COMPRESSED_TEXTURE_FORMATS)
  const DONT_CARE: Number = aliasFor(__js_DONT_CARE)
  const FASTEST: Number = aliasFor(__js_FASTEST)
  const NICEST: Number = aliasFor(__js_NICEST)
  const GENERATE_MIPMAP_HINT: Number = aliasFor(__js_GENERATE_MIPMAP_HINT)
  const BYTE: Number = aliasFor(__js_BYTE)
  const UNSIGNED_BYTE: Number = aliasFor(__js_UNSIGNED_BYTE)
  const SHORT: Number = aliasFor(__js_SHORT)
  const UNSIGNED_SHORT: Number = aliasFor(__js_UNSIGNED_SHORT)
  const INT: Number = aliasFor(__js_INT)
  const UNSIGNED_INT: Number = aliasFor(__js_UNSIGNED_INT)
  const FLOAT: Number = aliasFor(__js_FLOAT)
  const DEPTH_COMPONENT: Number = aliasFor(__js_DEPTH_COMPONENT)
  const ALPHA: Number = aliasFor(__js_ALPHA)
  const RGB: Number = aliasFor(__js_RGB)
  const RGBA: Number = aliasFor(__js_RGBA)
  const LUMINANCE: Number = aliasFor(__js_LUMINANCE)
  const LUMINANCE_ALPHA: Number = aliasFor(__js_LUMINANCE_ALPHA)
  const UNSIGNED_SHORT_4_4_4_4: Number = aliasFor(__js_UNSIGNED_SHORT_4_4_4_4)
  const UNSIGNED_SHORT_5_5_5_1: Number = aliasFor(__js_UNSIGNED_SHORT_5_5_5_1)
  const UNSIGNED_SHORT_5_6_5: Number = aliasFor(__js_UNSIGNED_SHORT_5_6_5)
  const FRAGMENT_SHADER: Number = aliasFor(__js_FRAGMENT_SHADER)
  const VERTEX_SHADER: Number = aliasFor(__js_VERTEX_SHADER)
  const MAX_VERTEX_ATTRIBS: Number = aliasFor(__js_MAX_VERTEX_ATTRIBS)
  const MAX_VERTEX_UNIFORM_VECTORS: Number = aliasFor(__js_MAX_VERTEX_UNIFORM_VECTORS)
  const MAX_VARYING_VECTORS: Number = aliasFor(__js_MAX_VARYING_VECTORS)
  const MAX_COMBINED_TEXTURE_IMAGE_UNITS: Number = aliasFor(__js_MAX_COMBINED_TEXTURE_IMAGE_UNITS)
  const MAX_VERTEX_TEXTURE_IMAGE_UNITS: Number = aliasFor(__js_MAX_VERTEX_TEXTURE_IMAGE_UNITS)
  const MAX_TEXTURE_IMAGE_UNITS: Number = aliasFor(__js_MAX_TEXTURE_IMAGE_UNITS)
  const MAX_FRAGMENT_UNIFORM_VECTORS: Number = aliasFor(__js_MAX_FRAGMENT_UNIFORM_VECTORS)
  const SHADER_TYPE: Number = aliasFor(__js_SHADER_TYPE)
  const DELETE_STATUS: Number = aliasFor(__js_DELETE_STATUS)
  const LINK_STATUS: Number = aliasFor(__js_LINK_STATUS)
  const VALIDATE_STATUS: Number = aliasFor(__js_VALIDATE_STATUS)
  const ATTACHED_SHADERS: Number = aliasFor(__js_ATTACHED_SHADERS)
  const ACTIVE_UNIFORMS: Number = aliasFor(__js_ACTIVE_UNIFORMS)
  const ACTIVE_ATTRIBUTES: Number = aliasFor(__js_ACTIVE_ATTRIBUTES)
  const SHADING_LANGUAGE_VERSION: Number = aliasFor(__js_SHADING_LANGUAGE_VERSION)
  const CURRENT_PROGRAM: Number = aliasFor(__js_CURRENT_PROGRAM)
  const NEVER: Number = aliasFor(__js_NEVER)
  const LESS: Number = aliasFor(__js_LESS)
  const EQUAL: Number = aliasFor(__js_EQUAL)
  const LEQUAL: Number = aliasFor(__js_LEQUAL)
  const GREATER: Number = aliasFor(__js_GREATER)
  const NOTEQUAL: Number = aliasFor(__js_NOTEQUAL)
  const GEQUAL: Number = aliasFor(__js_GEQUAL)
  const ALWAYS: Number = aliasFor(__js_ALWAYS)
  const KEEP: Number = aliasFor(__js_KEEP)
  const REPLACE: Number = aliasFor(__js_REPLACE)
  const INCR: Number = aliasFor(__js_INCR)
  const DECR: Number = aliasFor(__js_DECR)
  const INVERT: Number = aliasFor(__js_INVERT)
  const INCR_WRAP: Number = aliasFor(__js_INCR_WRAP)
  const DECR_WRAP: Number = aliasFor(__js_DECR_WRAP)
  const VENDOR: Number = aliasFor(__js_VENDOR)
  const RENDERER: Number = aliasFor(__js_RENDERER)
  const VERSION: Number = aliasFor(__js_VERSION)
  const NEAREST: Number = aliasFor(__js_NEAREST)
  const LINEAR: Number = aliasFor(__js_LINEAR)
  const NEAREST_MIPMAP_NEAREST: Number = aliasFor(__js_NEAREST_MIPMAP_NEAREST)
  const LINEAR_MIPMAP_NEAREST: Number = aliasFor(__js_LINEAR_MIPMAP_NEAREST)
  const NEAREST_MIPMAP_LINEAR: Number = aliasFor(__js_NEAREST_MIPMAP_LINEAR)
  const LINEAR_MIPMAP_LINEAR: Number = aliasFor(__js_LINEAR_MIPMAP_LINEAR)
  const TEXTURE_MAG_FILTER: Number = aliasFor(__js_TEXTURE_MAG_FILTER)
  const TEXTURE_MIN_FILTER: Number = aliasFor(__js_TEXTURE_MIN_FILTER)
  const TEXTURE_WRAP_S: Number = aliasFor(__js_TEXTURE_WRAP_S)
  const TEXTURE_WRAP_T: Number = aliasFor(__js_TEXTURE_WRAP_T)
  const TEXTURE_2D: Number = aliasFor(__js_TEXTURE_2D)
  const TEXTURE: Number = aliasFor(__js_TEXTURE)
  const TEXTURE_CUBE_MAP: Number = aliasFor(__js_TEXTURE_CUBE_MAP)
  const TEXTURE_BINDING_CUBE_MAP: Number = aliasFor(__js_TEXTURE_BINDING_CUBE_MAP)
  const TEXTURE_CUBE_MAP_POSITIVE_X: Number = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_X)
  const TEXTURE_CUBE_MAP_NEGATIVE_X: Number = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_X)
  const TEXTURE_CUBE_MAP_POSITIVE_Y: Number = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_Y)
  const TEXTURE_CUBE_MAP_NEGATIVE_Y: Number = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_Y)
  const TEXTURE_CUBE_MAP_POSITIVE_Z: Number = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_Z)
  const TEXTURE_CUBE_MAP_NEGATIVE_Z: Number = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_Z)
  const MAX_CUBE_MAP_TEXTURE_SIZE: Number = aliasFor(__js_MAX_CUBE_MAP_TEXTURE_SIZE)
  const TEXTURE0: Number = aliasFor(__js_TEXTURE0)
  const TEXTURE1: Number = aliasFor(__js_TEXTURE1)
  const TEXTURE2: Number = aliasFor(__js_TEXTURE2)
  const TEXTURE3: Number = aliasFor(__js_TEXTURE3)
  const TEXTURE4: Number = aliasFor(__js_TEXTURE4)
  const TEXTURE5: Number = aliasFor(__js_TEXTURE5)
  const TEXTURE6: Number = aliasFor(__js_TEXTURE6)
  const TEXTURE7: Number = aliasFor(__js_TEXTURE7)
  const TEXTURE8: Number = aliasFor(__js_TEXTURE8)
  const TEXTURE9: Number = aliasFor(__js_TEXTURE9)
  const TEXTURE10: Number = aliasFor(__js_TEXTURE10)
  const TEXTURE11: Number = aliasFor(__js_TEXTURE11)
  const TEXTURE12: Number = aliasFor(__js_TEXTURE12)
  const TEXTURE13: Number = aliasFor(__js_TEXTURE13)
  const TEXTURE14: Number = aliasFor(__js_TEXTURE14)
  const TEXTURE15: Number = aliasFor(__js_TEXTURE15)
  const TEXTURE16: Number = aliasFor(__js_TEXTURE16)
  const TEXTURE17: Number = aliasFor(__js_TEXTURE17)
  const TEXTURE18: Number = aliasFor(__js_TEXTURE18)
  const TEXTURE19: Number = aliasFor(__js_TEXTURE19)
  const TEXTURE20: Number = aliasFor(__js_TEXTURE20)
  const TEXTURE21: Number = aliasFor(__js_TEXTURE21)
  const TEXTURE22: Number = aliasFor(__js_TEXTURE22)
  const TEXTURE23: Number = aliasFor(__js_TEXTURE23)
  const TEXTURE24: Number = aliasFor(__js_TEXTURE24)
  const TEXTURE25: Number = aliasFor(__js_TEXTURE25)
  const TEXTURE26: Number = aliasFor(__js_TEXTURE26)
  const TEXTURE27: Number = aliasFor(__js_TEXTURE27)
  const TEXTURE28: Number = aliasFor(__js_TEXTURE28)
  const TEXTURE29: Number = aliasFor(__js_TEXTURE29)
  const TEXTURE30: Number = aliasFor(__js_TEXTURE30)
  const TEXTURE31: Number = aliasFor(__js_TEXTURE31)
  const ACTIVE_TEXTURE: Number = aliasFor(__js_ACTIVE_TEXTURE)
  const REPEAT: Number = aliasFor(__js_REPEAT)
  const CLAMP_TO_EDGE: Number = aliasFor(__js_CLAMP_TO_EDGE)
  const MIRRORED_REPEAT: Number = aliasFor(__js_MIRRORED_REPEAT)
  const FLOAT_VEC2: Number = aliasFor(__js_FLOAT_VEC2)
  const FLOAT_VEC3: Number = aliasFor(__js_FLOAT_VEC3)
  const FLOAT_VEC4: Number = aliasFor(__js_FLOAT_VEC4)
  const INT_VEC2: Number = aliasFor(__js_INT_VEC2)
  const INT_VEC3: Number = aliasFor(__js_INT_VEC3)
  const INT_VEC4: Number = aliasFor(__js_INT_VEC4)
  const BOOL: Number = aliasFor(__js_BOOL)
  const BOOL_VEC2: Number = aliasFor(__js_BOOL_VEC2)
  const BOOL_VEC3: Number = aliasFor(__js_BOOL_VEC3)
  const BOOL_VEC4: Number = aliasFor(__js_BOOL_VEC4)
  const FLOAT_MAT2: Number = aliasFor(__js_FLOAT_MAT2)
  const FLOAT_MAT3: Number = aliasFor(__js_FLOAT_MAT3)
  const FLOAT_MAT4: Number = aliasFor(__js_FLOAT_MAT4)
  const SAMPLER_2D: Number = aliasFor(__js_SAMPLER_2D)
  const SAMPLER_CUBE: Number = aliasFor(__js_SAMPLER_CUBE)
  const VERTEX_ATTRIB_ARRAY_ENABLED: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_ENABLED)
  const VERTEX_ATTRIB_ARRAY_SIZE: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_SIZE)
  const VERTEX_ATTRIB_ARRAY_STRIDE: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_STRIDE)
  const VERTEX_ATTRIB_ARRAY_TYPE: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_TYPE)
  const VERTEX_ATTRIB_ARRAY_NORMALIZED: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_NORMALIZED)
  const VERTEX_ATTRIB_ARRAY_POINTER: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_POINTER)
  const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Number = aliasFor(__js_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)
  const IMPLEMENTATION_COLOR_READ_TYPE: Number = aliasFor(__js_IMPLEMENTATION_COLOR_READ_TYPE)
  const IMPLEMENTATION_COLOR_READ_FORMAT: Number = aliasFor(__js_IMPLEMENTATION_COLOR_READ_FORMAT)
  const COMPILE_STATUS: Number = aliasFor(__js_COMPILE_STATUS)
  const LOW_FLOAT: Number = aliasFor(__js_LOW_FLOAT)
  const MEDIUM_FLOAT: Number = aliasFor(__js_MEDIUM_FLOAT)
  const HIGH_FLOAT: Number = aliasFor(__js_HIGH_FLOAT)
  const LOW_INT: Number = aliasFor(__js_LOW_INT)
  const MEDIUM_INT: Number = aliasFor(__js_MEDIUM_INT)
  const HIGH_INT: Number = aliasFor(__js_HIGH_INT)
  const FRAMEBUFFER: Number = aliasFor(__js_FRAMEBUFFER)
  const RENDERBUFFER: Number = aliasFor(__js_RENDERBUFFER)
  const RGBA4: Number = aliasFor(__js_RGBA4)
  const RGB5_A1: Number = aliasFor(__js_RGB5_A1)
  const RGBA8: Number = aliasFor(__js_RGBA8)
  const RGB565: Number = aliasFor(__js_RGB565)
  const DEPTH_COMPONENT16: Number = aliasFor(__js_DEPTH_COMPONENT16)
  const STENCIL_INDEX8: Number = aliasFor(__js_STENCIL_INDEX8)
  const DEPTH_STENCIL: Number = aliasFor(__js_DEPTH_STENCIL)
  const RENDERBUFFER_WIDTH: Number = aliasFor(__js_RENDERBUFFER_WIDTH)
  const RENDERBUFFER_HEIGHT: Number = aliasFor(__js_RENDERBUFFER_HEIGHT)
  const RENDERBUFFER_INTERNAL_FORMAT: Number = aliasFor(__js_RENDERBUFFER_INTERNAL_FORMAT)
  const RENDERBUFFER_RED_SIZE: Number = aliasFor(__js_RENDERBUFFER_RED_SIZE)
  const RENDERBUFFER_GREEN_SIZE: Number = aliasFor(__js_RENDERBUFFER_GREEN_SIZE)
  const RENDERBUFFER_BLUE_SIZE: Number = aliasFor(__js_RENDERBUFFER_BLUE_SIZE)
  const RENDERBUFFER_ALPHA_SIZE: Number = aliasFor(__js_RENDERBUFFER_ALPHA_SIZE)
  const RENDERBUFFER_DEPTH_SIZE: Number = aliasFor(__js_RENDERBUFFER_DEPTH_SIZE)
  const RENDERBUFFER_STENCIL_SIZE: Number = aliasFor(__js_RENDERBUFFER_STENCIL_SIZE)
  const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)
  const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)
  const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL)
  const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Number = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE)
  const COLOR_ATTACHMENT0: Number = aliasFor(__js_COLOR_ATTACHMENT0)
  const DEPTH_ATTACHMENT: Number = aliasFor(__js_DEPTH_ATTACHMENT)
  const STENCIL_ATTACHMENT: Number = aliasFor(__js_STENCIL_ATTACHMENT)
  const DEPTH_STENCIL_ATTACHMENT: Number = aliasFor(__js_DEPTH_STENCIL_ATTACHMENT)
  const NONE: Number = aliasFor(__js_NONE)
  const FRAMEBUFFER_COMPLETE: Number = aliasFor(__js_FRAMEBUFFER_COMPLETE)
  const FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)
  const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)
  const FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Number = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)
  const FRAMEBUFFER_UNSUPPORTED: Number = aliasFor(__js_FRAMEBUFFER_UNSUPPORTED)
  const FRAMEBUFFER_BINDING: Number = aliasFor(__js_FRAMEBUFFER_BINDING)
  const RENDERBUFFER_BINDING: Number = aliasFor(__js_RENDERBUFFER_BINDING)
  const MAX_RENDERBUFFER_SIZE: Number = aliasFor(__js_MAX_RENDERBUFFER_SIZE)
  const INVALID_FRAMEBUFFER_OPERATION: Number = aliasFor(__js_INVALID_FRAMEBUFFER_OPERATION)
  const UNPACK_FLIP_Y_WEBGL: Number = aliasFor(__js_UNPACK_FLIP_Y_WEBGL)
  const UNPACK_PREMULTIPLY_ALPHA_WEBGL: Number = aliasFor(__js_UNPACK_PREMULTIPLY_ALPHA_WEBGL)
  const CONTEXT_LOST_WEBGL: Number = aliasFor(__js_CONTEXT_LOST_WEBGL)
  const UNPACK_COLORSPACE_CONVERSION_WEBGL: Number = aliasFor(__js_UNPACK_COLORSPACE_CONVERSION_WEBGL)
  const BROWSER_DEFAULT_WEBGL: Number = aliasFor(__js_BROWSER_DEFAULT_WEBGL)
}
export interface WebGLRenderingContextOverloads {
  function bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
    """
    aliasFor(__js_bufferData)
  }
  function bufferData(target: GLenum, data: Union[AllowSharedBufferSource, Null], usage: GLenum): Any { aliasFor(__js_bufferData) }
  function bufferSubData(target: GLenum, offset: GLintptr, data: AllowSharedBufferSource): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData)
    """
    aliasFor(__js_bufferSubData)
  }
  function compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, data: ArrayBufferView): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)
    """
    aliasFor(__js_compressedTexImage2D)
  }
  function compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, data: ArrayBufferView): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)
    """
    aliasFor(__js_compressedTexSubImage2D)
  }
  function readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: Union[ArrayBufferView, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
    """
    aliasFor(__js_readPixels)
  }
  function texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: Union[ArrayBufferView, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
    """
    aliasFor(__js_texImage2D)
  }
  function texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): Any { aliasFor(__js_texImage2D) }
  function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: Union[ArrayBufferView, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
    """
    aliasFor(__js_texSubImage2D)
  }
  function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): Any { aliasFor(__js_texSubImage2D) }
  function uniform1fv(location: Union[WebGLUniformLocation, Null], v: Float32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform1fv)
  }
  function uniform1iv(location: Union[WebGLUniformLocation, Null], v: Int32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform1iv)
  }
  function uniform2fv(location: Union[WebGLUniformLocation, Null], v: Float32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform2fv)
  }
  function uniform2iv(location: Union[WebGLUniformLocation, Null], v: Int32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform2iv)
  }
  function uniform3fv(location: Union[WebGLUniformLocation, Null], v: Float32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform3fv)
  }
  function uniform3iv(location: Union[WebGLUniformLocation, Null], v: Int32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform3iv)
  }
  function uniform4fv(location: Union[WebGLUniformLocation, Null], v: Float32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform4fv)
  }
  function uniform4iv(location: Union[WebGLUniformLocation, Null], v: Int32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    """
    aliasFor(__js_uniform4iv)
  }
  function uniformMatrix2fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, value: Float32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix2fv)
  }
  function uniformMatrix3fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, value: Float32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix3fv)
  }
  function uniformMatrix4fv(location: Union[WebGLUniformLocation, Null], transpose: GLboolean, value: Float32List): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    """
    aliasFor(__js_uniformMatrix4fv)
  }
}
export interface WebGLSampler {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSampler)
  """
  static {
    aliasFor(native "WebGLSampler")
    var prototype: WebGLSampler = aliasFor(__js_prototype)
    function new(): WebGLSampler { aliasFor(__op_new__) }
  }
}
export interface WebGLShader {
  """
  The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShader)
  """
  static {
    aliasFor(native "WebGLShader")
    var prototype: WebGLShader = aliasFor(__js_prototype)
    function new(): WebGLShader { aliasFor(__op_new__) }
  }
}
export interface WebGLShaderPrecisionFormat {
  """
  Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat)
  """
  static {
    aliasFor(native "WebGLShaderPrecisionFormat")
    var prototype: WebGLShaderPrecisionFormat = aliasFor(__js_prototype)
    function new(): WebGLShaderPrecisionFormat { aliasFor(__op_new__) }
  }
  const precision: GLint """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/precision)
  """ = aliasFor(__js_precision)
  const rangeMax: GLint """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax)
  """ = aliasFor(__js_rangeMax)
  const rangeMin: GLint """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin)
  """ = aliasFor(__js_rangeMin)
}
export interface WebGLSync {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSync)
  """
  static {
    aliasFor(native "WebGLSync")
    var prototype: WebGLSync = aliasFor(__js_prototype)
    function new(): WebGLSync { aliasFor(__op_new__) }
  }
}
export interface WebGLTexture {
  """
  Part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTexture)
  """
  static {
    aliasFor(native "WebGLTexture")
    var prototype: WebGLTexture = aliasFor(__js_prototype)
    function new(): WebGLTexture { aliasFor(__op_new__) }
  }
}
export interface WebGLTransformFeedback {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTransformFeedback)
  """
  static {
    aliasFor(native "WebGLTransformFeedback")
    var prototype: WebGLTransformFeedback = aliasFor(__js_prototype)
    function new(): WebGLTransformFeedback { aliasFor(__op_new__) }
  }
}
export interface WebGLUniformLocation {
  """
  Part of the WebGL API and represents the location of a uniform variable in a shader program.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLUniformLocation)
  """
  static {
    aliasFor(native "WebGLUniformLocation")
    var prototype: WebGLUniformLocation = aliasFor(__js_prototype)
    function new(): WebGLUniformLocation { aliasFor(__op_new__) }
  }
}
export interface WebGLVertexArrayObject {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObject)
  """
  static {
    aliasFor(native "WebGLVertexArrayObject")
    var prototype: WebGLVertexArrayObject = aliasFor(__js_prototype)
    function new(): WebGLVertexArrayObject { aliasFor(__op_new__) }
  }
}
export interface WebGLVertexArrayObjectOES {
}
export interface WebSocketEventMap {
}
export interface WebSocket extends EventTarget {
  """
  Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket)
  """
  static {
    aliasFor(native "WebSocket")
    var prototype: WebSocket = aliasFor(__js_prototype)
    function new(url: Union[String, URL], protocols: Union[String, List[String]]): WebSocket { aliasFor(__op_new__) }
    function new(url: Union[String, URL]): WebSocket { aliasFor(__op_new__) }
    const CONNECTING: Number = aliasFor(__js_CONNECTING)
    const OPEN: Number = aliasFor(__js_OPEN)
    const CLOSING: Number = aliasFor(__js_CLOSING)
    const CLOSED: Number = aliasFor(__js_CLOSED)
  }
  var binaryType: BinaryType """
  Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:
     *
  Can be set, to change how binary data is returned. The default is "blob".
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType)
  """ = aliasFor(__js_binaryType)
  const bufferedAmount: Number """
  Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.
     *
  If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/bufferedAmount)
  """ = aliasFor(__js_bufferedAmount)
  const extensions: String """
  Returns the extensions selected by the server, if any.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/extensions)
  """ = aliasFor(__js_extensions)
  var onclose: Union[function(ev: CloseEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/close_event)
  """ = aliasFor(__js_onclose)
  var onerror: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/error_event)
  """ = aliasFor(__js_onerror)
  var onmessage: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/message_event)
  """ = aliasFor(__js_onmessage)
  var onopen: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/open_event)
  """ = aliasFor(__js_onopen)
  const protocol: String """
  Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/protocol)
  """ = aliasFor(__js_protocol)
  const readyState: Number """
  Returns the state of the WebSocket object's connection. It can have the values described below.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/readyState)
  """ = aliasFor(__js_readyState)
  const url: String """
  Returns the URL that was used to establish the WebSocket connection.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/url)
  """ = aliasFor(__js_url)
  function close(code: Number, reason: String): Any {
    """
    Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/close)
    """
    aliasFor(__js_close)
  }
  function close(code: Number): Any { aliasFor(__js_close) }
  function close(): Any { aliasFor(__js_close) }
  function send(data: Union[String, ArrayBuffer, Blob, ArrayBufferView]): Any {
    """
    Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/send)
    """
    aliasFor(__js_send)
  }
  const CONNECTING: Number = aliasFor(__js_CONNECTING)
  const OPEN: Number = aliasFor(__js_OPEN)
  const CLOSING: Number = aliasFor(__js_CLOSING)
  const CLOSED: Number = aliasFor(__js_CLOSED)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface WebTransport {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport)
  """
  static {
    aliasFor(native "WebTransport")
    var prototype: WebTransport = aliasFor(__js_prototype)
    function new(url: Union[String, URL], options: WebTransportOptions): WebTransport { aliasFor(__op_new__) }
    function new(url: Union[String, URL]): WebTransport { aliasFor(__op_new__) }
  }
  const closed: Promise[WebTransportCloseInfo] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/closed)
  """ = aliasFor(__js_closed)
  const datagrams: WebTransportDatagramDuplexStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/datagrams)
  """ = aliasFor(__js_datagrams)
  const incomingBidirectionalStreams: ReadableStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingBidirectionalStreams)
  """ = aliasFor(__js_incomingBidirectionalStreams)
  const incomingUnidirectionalStreams: ReadableStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingUnidirectionalStreams)
  """ = aliasFor(__js_incomingUnidirectionalStreams)
  const ready: Promise[Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/ready)
  """ = aliasFor(__js_ready)
  function close(closeInfo: WebTransportCloseInfo): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/close)
    """
    aliasFor(__js_close)
  }
  function close(): Any { aliasFor(__js_close) }
  function createBidirectionalStream(options: WebTransportSendStreamOptions): Promise[WebTransportBidirectionalStream] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/createBidirectionalStream)
    """
    aliasFor(__js_createBidirectionalStream)
  }
  function createBidirectionalStream(): Promise[WebTransportBidirectionalStream] { aliasFor(__js_createBidirectionalStream) }
  function createUnidirectionalStream(options: WebTransportSendStreamOptions): Promise[WritableStream] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/createUnidirectionalStream)
    """
    aliasFor(__js_createUnidirectionalStream)
  }
  function createUnidirectionalStream(): Promise[WritableStream] { aliasFor(__js_createUnidirectionalStream) }
}
export interface WebTransportBidirectionalStream {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream)
  """
  static {
    aliasFor(native "WebTransportBidirectionalStream")
    var prototype: WebTransportBidirectionalStream = aliasFor(__js_prototype)
    function new(): WebTransportBidirectionalStream { aliasFor(__op_new__) }
  }
  const readable: ReadableStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/readable)
  """ = aliasFor(__js_readable)
  const writable: WritableStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/writable)
  """ = aliasFor(__js_writable)
}
export interface WebTransportDatagramDuplexStream {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream)
  """
  static {
    aliasFor(native "WebTransportDatagramDuplexStream")
    var prototype: WebTransportDatagramDuplexStream = aliasFor(__js_prototype)
    function new(): WebTransportDatagramDuplexStream { aliasFor(__op_new__) }
  }
  var incomingHighWaterMark: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingHighWaterMark)
  """ = aliasFor(__js_incomingHighWaterMark)
  var incomingMaxAge: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingMaxAge)
  """ = aliasFor(__js_incomingMaxAge)
  const maxDatagramSize: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/maxDatagramSize)
  """ = aliasFor(__js_maxDatagramSize)
  var outgoingHighWaterMark: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingHighWaterMark)
  """ = aliasFor(__js_outgoingHighWaterMark)
  var outgoingMaxAge: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingMaxAge)
  """ = aliasFor(__js_outgoingMaxAge)
  const readable: ReadableStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/readable)
  """ = aliasFor(__js_readable)
  const writable: WritableStream """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/writable)
  """ = aliasFor(__js_writable)
}
export interface WebTransportError extends DOMException {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError)
  """
  static {
    aliasFor(native "WebTransportError")
    var prototype: WebTransportError = aliasFor(__js_prototype)
    function new(message: String, options: WebTransportErrorOptions): WebTransportError { aliasFor(__op_new__) }
    function new(message: String): WebTransportError { aliasFor(__op_new__) }
    function new(): WebTransportError { aliasFor(__op_new__) }
  }
  const source: WebTransportErrorSource """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/source)
  """ = aliasFor(__js_source)
  const streamErrorCode: Union[Number, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/streamErrorCode)
  """ = aliasFor(__js_streamErrorCode)
}
export interface WheelEvent extends MouseEvent {
  """
  Events that occur due to the user moving a mouse wheel or similar input device.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent)
  """
  static {
    aliasFor(native "WheelEvent")
    var prototype: WheelEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: WheelEventInit): WheelEvent { aliasFor(__op_new__) }
    function new(type: String): WheelEvent { aliasFor(__op_new__) }
    const DOM_DELTA_PIXEL: Number = aliasFor(__js_DOM_DELTA_PIXEL)
    const DOM_DELTA_LINE: Number = aliasFor(__js_DOM_DELTA_LINE)
    const DOM_DELTA_PAGE: Number = aliasFor(__js_DOM_DELTA_PAGE)
  }
  const deltaMode: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaMode)
  """ = aliasFor(__js_deltaMode)
  const deltaX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaX)
  """ = aliasFor(__js_deltaX)
  const deltaY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaY)
  """ = aliasFor(__js_deltaY)
  const deltaZ: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaZ)
  """ = aliasFor(__js_deltaZ)
  const DOM_DELTA_PIXEL: Number = aliasFor(__js_DOM_DELTA_PIXEL)
  const DOM_DELTA_LINE: Number = aliasFor(__js_DOM_DELTA_LINE)
  const DOM_DELTA_PAGE: Number = aliasFor(__js_DOM_DELTA_PAGE)
}
export interface WindowEventMap extends GlobalEventHandlersEventMap, WindowEventHandlersEventMap {
}
export interface Window extends EventTarget, AnimationFrameProvider, GlobalEventHandlers, WindowEventHandlers, WindowLocalStorage, WindowOrWorkerGlobalScope, WindowSessionStorage {
  """
  A window containing a DOM document; the document property points to the DOM document loaded in that window.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window)
  """
  static {
    aliasFor(native "Window")
    var prototype: Window = aliasFor(__js_prototype)
    function new(): Window { aliasFor(__op_new__) }
  }
  const closed: Bool """
  Returns true if the window has been closed, false otherwise.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/closed)
  """ = aliasFor(__js_closed)
  const customElements: CustomElementRegistry """
  Defines a new custom element, mapping the given name to the given constructor as an autonomous custom element.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/customElements)
  """ = aliasFor(__js_customElements)
  const devicePixelRatio: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicePixelRatio)
  """ = aliasFor(__js_devicePixelRatio)
  const document: Document """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document)
  """ = aliasFor(__js_document)
  const frameElement: Union[Element, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frameElement)
  """ = aliasFor(__js_frameElement)
  const frames: WindowProxy """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frames)
  """ = aliasFor(__js_frames)
  const history: History """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/history)
  """ = aliasFor(__js_history)
  const innerHeight: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerHeight)
  """ = aliasFor(__js_innerHeight)
  const innerWidth: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerWidth)
  """ = aliasFor(__js_innerWidth)
  const length: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/length)
  """ = aliasFor(__js_length)
  const locationbar: BarProp """
  Returns true if the location bar is visible; otherwise, returns false.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/locationbar)
  """ = aliasFor(__js_locationbar)
  const menubar: BarProp """
  Returns true if the menu bar is visible; otherwise, returns false.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/menubar)
  """ = aliasFor(__js_menubar)
  var name: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/name)
  """ = aliasFor(__js_name)
  const navigator: Navigator """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)
  """ = aliasFor(__js_navigator)
  var ondevicemotion: Union[function(ev: DeviceMotionEvent): Any, Null] """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)
  """ = aliasFor(__js_ondevicemotion)
  var ondeviceorientation: Union[function(ev: DeviceOrientationEvent): Any, Null] """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)
  """ = aliasFor(__js_ondeviceorientation)
  var ondeviceorientationabsolute: Union[function(ev: DeviceOrientationEvent): Any, Null] """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientationabsolute_event)
  """ = aliasFor(__js_ondeviceorientationabsolute)
  var opener: Any """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/opener)
  """ = aliasFor(__js_opener)
  const outerHeight: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerHeight)
  """ = aliasFor(__js_outerHeight)
  const outerWidth: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerWidth)
  """ = aliasFor(__js_outerWidth)
  const parent: WindowProxy """
  Refers to either the parent WindowProxy, or itself.
     *
  It can rarely be null e.g. for contentWindow of an iframe that is already removed from the parent.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/parent)
  """ = aliasFor(__js_parent)
  const personalbar: BarProp """
  Returns true if the personal bar is visible; otherwise, returns false.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/personalbar)
  """ = aliasFor(__js_personalbar)
  const screen: Screen """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screen)
  """ = aliasFor(__js_screen)
  const screenLeft: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenLeft)
  """ = aliasFor(__js_screenLeft)
  const screenTop: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenTop)
  """ = aliasFor(__js_screenTop)
  const screenX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenX)
  """ = aliasFor(__js_screenX)
  const screenY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenY)
  """ = aliasFor(__js_screenY)
  const scrollX: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)
  """ = aliasFor(__js_scrollX)
  const scrollY: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)
  """ = aliasFor(__js_scrollY)
  const scrollbars: BarProp """
  Returns true if the scrollbars are visible; otherwise, returns false.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollbars)
  """ = aliasFor(__js_scrollbars)
  const self: Window """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/self)
  """ = aliasFor(__js_self)
  const speechSynthesis: SpeechSynthesis """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/speechSynthesis)
  """ = aliasFor(__js_speechSynthesis)
  const statusbar: BarProp """
  Returns true if the status bar is visible; otherwise, returns false.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/statusbar)
  """ = aliasFor(__js_statusbar)
  const toolbar: BarProp """
  Returns true if the toolbar is visible; otherwise, returns false.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/toolbar)
  """ = aliasFor(__js_toolbar)
  const top: Union[WindowProxy, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/top)
  """ = aliasFor(__js_top)
  const visualViewport: Union[VisualViewport, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/visualViewport)
  """ = aliasFor(__js_visualViewport)
  const window: Window """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/window)
  """ = aliasFor(__js_window)
  function alert(message: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/alert)
    """
    aliasFor(__js_alert)
  }
  function alert(): Any { aliasFor(__js_alert) }
  function blur(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/blur)
    """
    aliasFor(__js_blur)
  }
  function cancelIdleCallback(handle: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/cancelIdleCallback)
    """
    aliasFor(__js_cancelIdleCallback)
  }
  function close(): Any {
    """
    Closes the window.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/close)
    """
    aliasFor(__js_close)
  }
  function confirm(message: String): Bool {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/confirm)
    """
    aliasFor(__js_confirm)
  }
  function confirm(): Bool { aliasFor(__js_confirm) }
  function focus(): Any {
    """
    Moves the focus to the window's browsing context, if any.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/focus)
    """
    aliasFor(__js_focus)
  }
  function getComputedStyle(elt: Element, pseudoElt: Union[String, Null]): CSSStyleDeclaration {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/getComputedStyle)
    """
    aliasFor(__js_getComputedStyle)
  }
  function getComputedStyle(elt: Element): CSSStyleDeclaration { aliasFor(__js_getComputedStyle) }
  function getSelection(): Union[Selection, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/getSelection)
    """
    aliasFor(__js_getSelection)
  }
  function matchMedia(query: String): MediaQueryList {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/matchMedia)
    """
    aliasFor(__js_matchMedia)
  }
  function moveBy(x: Number, y: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveBy)
    """
    aliasFor(__js_moveBy)
  }
  function moveTo(x: Number, y: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveTo)
    """
    aliasFor(__js_moveTo)
  }
  function open(url: Union[String, URL], target: String, features: String): Union[WindowProxy, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/open)
    """
    aliasFor(__js_open)
  }
  function open(url: Union[String, URL], target: String): Union[WindowProxy, Null] { aliasFor(__js_open) }
  function open(url: Union[String, URL]): Union[WindowProxy, Null] { aliasFor(__js_open) }
  function open(): Union[WindowProxy, Null] { aliasFor(__js_open) }
  function postMessage(message: Any, targetOrigin: String, transfer: List[Transferable]): Any {
    """
    Posts a message to the given window. Messages can be structured objects, e.g. nested objects and arrays, can contain JavaScript values (strings, numbers, Date objects, etc), and can contain certain data objects such as File Blob, FileList, and ArrayBuffer objects.
       *
    Objects listed in the transfer member of options are transferred, not just cloned, meaning that they are no longer usable on the sending side.
       *
    A target origin can be specified using the targetOrigin member of options. If not provided, it defaults to "/". This default restricts the message to same-origin targets only.
       *
    If the origin of the target window doesn't match the given target origin, the message is discarded, to avoid information leakage. To send the message to the target regardless of origin, set the target origin to "*".
       *
    Throws a "DataCloneError" DOMException if transfer array contains duplicate objects or if message could not be cloned.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/postMessage)
    """
    aliasFor(__js_postMessage)
  }
  function postMessage(message: Any, targetOrigin: String): Any { aliasFor(__js_postMessage) }
  function postMessage(message: Any, options: WindowPostMessageOptions): Any { aliasFor(__js_postMessage) }
  function postMessage(message: Any): Any { aliasFor(__js_postMessage) }
  function print(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/print)
    """
    aliasFor(__js_print)
  }
  function prompt(message: String, _default: String): Union[String, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/prompt)
    """
    aliasFor(__js_prompt)
  }
  function prompt(message: String): Union[String, Null] { aliasFor(__js_prompt) }
  function prompt(): Union[String, Null] { aliasFor(__js_prompt) }
  function requestIdleCallback(callback: IdleRequestCallback, options: IdleRequestOptions): Number {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback)
    """
    aliasFor(__js_requestIdleCallback)
  }
  function requestIdleCallback(callback: IdleRequestCallback): Number { aliasFor(__js_requestIdleCallback) }
  function resizeBy(x: Number, y: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeBy)
    """
    aliasFor(__js_resizeBy)
  }
  function resizeTo(width: Number, height: Number): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeTo)
    """
    aliasFor(__js_resizeTo)
  }
  function scroll(options: ScrollToOptions): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scroll)
    """
    aliasFor(__js_scroll)
  }
  function scroll(): Any { aliasFor(__js_scroll) }
  function scroll(x: Number, y: Number): Any { aliasFor(__js_scroll) }
  function scrollBy(options: ScrollToOptions): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollBy)
    """
    aliasFor(__js_scrollBy)
  }
  function scrollBy(): Any { aliasFor(__js_scrollBy) }
  function scrollBy(x: Number, y: Number): Any { aliasFor(__js_scrollBy) }
  function scrollTo(options: ScrollToOptions): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollTo)
    """
    aliasFor(__js_scrollTo)
  }
  function scrollTo(): Any { aliasFor(__js_scrollTo) }
  function scrollTo(x: Number, y: Number): Any { aliasFor(__js_scrollTo) }
  function stop(): Any {
    """
    Cancels the document load.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/stop)
    """
    aliasFor(__js_stop)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
  function __getitem__(index: Number): Window { aliasFor(__op_getitem__) }
  function __setitem__(index: Number, value: Window): Window { aliasFor(__op_setitem__) }
}
export interface WindowEventHandlersEventMap {
}
export interface WindowEventHandlers {
  var onafterprint: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event)
  """ = aliasFor(__js_onafterprint)
  var onbeforeprint: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event)
  """ = aliasFor(__js_onbeforeprint)
  var onbeforeunload: Union[function(ev: BeforeUnloadEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event)
  """ = aliasFor(__js_onbeforeunload)
  var ongamepadconnected: Union[function(ev: GamepadEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event)
  """ = aliasFor(__js_ongamepadconnected)
  var ongamepaddisconnected: Union[function(ev: GamepadEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event)
  """ = aliasFor(__js_ongamepaddisconnected)
  var onhashchange: Union[function(ev: HashChangeEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event)
  """ = aliasFor(__js_onhashchange)
  var onlanguagechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event)
  """ = aliasFor(__js_onlanguagechange)
  var onmessage: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/message_event)
  """ = aliasFor(__js_onmessage)
  var onmessageerror: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event)
  """ = aliasFor(__js_onmessageerror)
  var onoffline: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/offline_event)
  """ = aliasFor(__js_onoffline)
  var ononline: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/online_event)
  """ = aliasFor(__js_ononline)
  var onpagehide: Union[function(ev: PageTransitionEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event)
  """ = aliasFor(__js_onpagehide)
  var onpageshow: Union[function(ev: PageTransitionEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event)
  """ = aliasFor(__js_onpageshow)
  var onpopstate: Union[function(ev: PopStateEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/popstate_event)
  """ = aliasFor(__js_onpopstate)
  var onrejectionhandled: Union[function(ev: PromiseRejectionEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event)
  """ = aliasFor(__js_onrejectionhandled)
  var onstorage: Union[function(ev: StorageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/storage_event)
  """ = aliasFor(__js_onstorage)
  var onunhandledrejection: Union[function(ev: PromiseRejectionEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event)
  """ = aliasFor(__js_onunhandledrejection)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface WindowLocalStorage {
  const localStorage: Storage """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/localStorage)
  """ = aliasFor(__js_localStorage)
}
export interface WindowOrWorkerGlobalScope {
  const caches: CacheStorage """
  Available only in secure contexts.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/caches)
  """ = aliasFor(__js_caches)
  const crossOriginIsolated: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/crossOriginIsolated)
  """ = aliasFor(__js_crossOriginIsolated)
  const crypto: Crypto """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/crypto_property)
  """ = aliasFor(__js_crypto)
  const indexedDB: IDBFactory """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/indexedDB)
  """ = aliasFor(__js_indexedDB)
  const isSecureContext: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/isSecureContext)
  """ = aliasFor(__js_isSecureContext)
  const origin: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/origin)
  """ = aliasFor(__js_origin)
  const performance: Performance """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/performance_property)
  """ = aliasFor(__js_performance)
  function atob(data: String): String {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/atob)
    """
    aliasFor(__js_atob)
  }
  function btoa(data: String): String {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/btoa)
    """
    aliasFor(__js_btoa)
  }
  function clearInterval(id: Union[Number, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/clearInterval)
    """
    aliasFor(__js_clearInterval)
  }
  function clearTimeout(id: Union[Number, Null]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/clearTimeout)
    """
    aliasFor(__js_clearTimeout)
  }
  function createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions): Promise[ImageBitmap] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap)
    """
    aliasFor(__js_createImageBitmap)
  }
  function createImageBitmap(image: ImageBitmapSource): Promise[ImageBitmap] { aliasFor(__js_createImageBitmap) }
  function createImageBitmap(image: ImageBitmapSource, sx: Number, sy: Number, sw: Number, sh: Number, options: ImageBitmapOptions): Promise[ImageBitmap] { aliasFor(__js_createImageBitmap) }
  function createImageBitmap(image: ImageBitmapSource, sx: Number, sy: Number, sw: Number, sh: Number): Promise[ImageBitmap] { aliasFor(__js_createImageBitmap) }
  function fetch(input: Union[RequestInfo, URL], init: RequestInit): Promise[Response] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/fetch)
    """
    aliasFor(__js_fetch)
  }
  function fetch(input: Union[RequestInfo, URL]): Promise[Response] { aliasFor(__js_fetch) }
  function queueMicrotask(callback: VoidFunction): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/queueMicrotask)
    """
    aliasFor(__js_queueMicrotask)
  }
  function reportError(e: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/reportError)
    """
    aliasFor(__js_reportError)
  }
  function setInterval(handler: TimerHandler, timeout: Number, arguments: Any, arguments: Any, arguments: Any): Number {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/setInterval)
    """
    aliasFor(__js_setInterval)
  }
  function setInterval(handler: TimerHandler, timeout: Number, arguments: Any, arguments: Any): Number { aliasFor(__js_setInterval) }
  function setInterval(handler: TimerHandler, timeout: Number, arguments: Any): Number { aliasFor(__js_setInterval) }
  function setInterval(handler: TimerHandler, timeout: Number): Number { aliasFor(__js_setInterval) }
  function setInterval(handler: TimerHandler): Number { aliasFor(__js_setInterval) }
  function setTimeout(handler: TimerHandler, timeout: Number, arguments: Any, arguments: Any, arguments: Any): Number {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/setTimeout)
    """
    aliasFor(__js_setTimeout)
  }
  function setTimeout(handler: TimerHandler, timeout: Number, arguments: Any, arguments: Any): Number { aliasFor(__js_setTimeout) }
  function setTimeout(handler: TimerHandler, timeout: Number, arguments: Any): Number { aliasFor(__js_setTimeout) }
  function setTimeout(handler: TimerHandler, timeout: Number): Number { aliasFor(__js_setTimeout) }
  function setTimeout(handler: TimerHandler): Number { aliasFor(__js_setTimeout) }
}
export interface WindowSessionStorage {
  const sessionStorage: Storage """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/sessionStorage)
  """ = aliasFor(__js_sessionStorage)
}
export interface WorkerEventMap extends AbstractWorkerEventMap {
}
export interface Worker extends EventTarget, AbstractWorker {
  """
  This Web Workers API interface represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker)
  """
  static {
    aliasFor(native "Worker")
    var prototype: Worker = aliasFor(__js_prototype)
    function new(scriptURL: Union[String, URL], options: WorkerOptions): Worker { aliasFor(__op_new__) }
    function new(scriptURL: Union[String, URL]): Worker { aliasFor(__op_new__) }
  }
  var onmessage: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/message_event)
  """ = aliasFor(__js_onmessage)
  var onmessageerror: Union[function(ev: MessageEvent): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/messageerror_event)
  """ = aliasFor(__js_onmessageerror)
  function postMessage(message: Any, transfer: List[Transferable]): Any {
    """
    Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/postMessage)
    """
    aliasFor(__js_postMessage)
  }
  function postMessage(message: Any, options: StructuredSerializeOptions): Any { aliasFor(__js_postMessage) }
  function postMessage(message: Any): Any { aliasFor(__js_postMessage) }
  function terminate(): Any {
    """
    Aborts worker's associated global environment.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/terminate)
    """
    aliasFor(__js_terminate)
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface Worklet {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worklet)
  """
  static {
    aliasFor(native "Worklet")
    var prototype: Worklet = aliasFor(__js_prototype)
    function new(): Worklet { aliasFor(__op_new__) }
  }
  function addModule(moduleURL: Union[String, URL], options: WorkletOptions): Promise[Any] {
    """
    Loads and executes the module script given by moduleURL into all of worklet's global scopes. It can also create additional global scopes as part of this process, depending on the worklet type. The returned promise will fulfill once the script has been successfully loaded and run in all global scopes.
       *
    The credentials option can be set to a credentials mode to modify the script-fetching process. It defaults to "same-origin".
       *
    Any failures in fetching the script or its dependencies will cause the returned promise to be rejected with an "AbortError" DOMException. Any errors in parsing the script or its dependencies will cause the returned promise to be rejected with the exception generated during parsing.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worklet/addModule)
    """
    aliasFor(__js_addModule)
  }
  function addModule(moduleURL: Union[String, URL]): Promise[Any] { aliasFor(__js_addModule) }
}
export interface WritableStream {
  static {
    aliasFor(native "WritableStream")
    var prototype: WritableStream = aliasFor(__js_prototype)
  }
}
export interface WritableStreamDefaultController {
  """
  This Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController)
  """
  static {
    aliasFor(native "WritableStreamDefaultController")
    var prototype: WritableStreamDefaultController = aliasFor(__js_prototype)
    function new(): WritableStreamDefaultController { aliasFor(__op_new__) }
  }
  const signal: AbortSignal """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/signal)
  """ = aliasFor(__js_signal)
  function error(e: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/error)
    """
    aliasFor(__js_error)
  }
  function error(): Any { aliasFor(__js_error) }
}
export interface WritableStreamDefaultWriter {
  static {
    aliasFor(native "WritableStreamDefaultWriter")
    var prototype: WritableStreamDefaultWriter = aliasFor(__js_prototype)
  }
}
export interface XMLDocument extends Document {
  """
  An XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLDocument)
  """
  static {
    aliasFor(native "XMLDocument")
    var prototype: XMLDocument = aliasFor(__js_prototype)
    function new(): XMLDocument { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface XMLHttpRequestEventMap extends XMLHttpRequestEventTargetEventMap {
}
export interface XMLHttpRequest extends XMLHttpRequestEventTarget {
  """
  Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest)
  """
  static {
    aliasFor(native "XMLHttpRequest")
    var prototype: XMLHttpRequest = aliasFor(__js_prototype)
    function new(): XMLHttpRequest { aliasFor(__op_new__) }
    const UNSENT: Number = aliasFor(__js_UNSENT)
    const OPENED: Number = aliasFor(__js_OPENED)
    const HEADERS_RECEIVED: Number = aliasFor(__js_HEADERS_RECEIVED)
    const LOADING: Number = aliasFor(__js_LOADING)
    const DONE: Number = aliasFor(__js_DONE)
  }
  var onreadystatechange: Union[function(ev: Event): Any, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readystatechange_event)
  """ = aliasFor(__js_onreadystatechange)
  const readyState: Number """
  Returns client's state.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readyState)
  """ = aliasFor(__js_readyState)
  const response: Any """
  Returns the response body.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/response)
  """ = aliasFor(__js_response)
  const responseText: String """
  Returns response as text.
     *
  Throws an "InvalidStateError" DOMException if responseType is not the empty string or "text".
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseText)
  """ = aliasFor(__js_responseText)
  var responseType: XMLHttpRequestResponseType """
  Returns the response type.
     *
  Can be set to change the response type. Values are: the empty string (default), "arraybuffer", "blob", "document", "json", and "text".
     *
  When set: setting to "document" is ignored if current global object is not a Window object.
     *
  When set: throws an "InvalidStateError" DOMException if state is loading or done.
     *
  When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseType)
  """ = aliasFor(__js_responseType)
  const responseURL: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseURL)
  """ = aliasFor(__js_responseURL)
  const responseXML: Union[Document, Null] """
  Returns the response as document.
     *
  Throws an "InvalidStateError" DOMException if responseType is not the empty string or "document".
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseXML)
  """ = aliasFor(__js_responseXML)
  const status: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/status)
  """ = aliasFor(__js_status)
  const statusText: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/statusText)
  """ = aliasFor(__js_statusText)
  var timeout: Number """
  Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the request has not yet completed, and this's synchronous flag is unset, a timeout event will then be dispatched, or a "TimeoutError" DOMException will be thrown otherwise (for the send() method).
     *
  When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/timeout)
  """ = aliasFor(__js_timeout)
  const upload: XMLHttpRequestUpload """
  Returns the associated XMLHttpRequestUpload object. It can be used to gather transmission information when data is transferred to a server.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/upload)
  """ = aliasFor(__js_upload)
  var withCredentials: Bool """
  True when credentials are to be included in a cross-origin request. False when they are to be excluded in a cross-origin request and when cookies are to be ignored in its response. Initially false.
     *
  When set: throws an "InvalidStateError" DOMException if state is not unsent or opened, or if the send() flag is set.
     *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/withCredentials)
  """ = aliasFor(__js_withCredentials)
  function abort(): Any {
    """
    Cancels any network activity.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/abort)
    """
    aliasFor(__js_abort)
  }
  function getAllResponseHeaders(): String {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/getAllResponseHeaders)
    """
    aliasFor(__js_getAllResponseHeaders)
  }
  function getResponseHeader(name: String): Union[String, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/getResponseHeader)
    """
    aliasFor(__js_getResponseHeader)
  }
  function open(method: String, url: Union[String, URL]): Any {
    """
    Sets the request method, request URL, and synchronous flag.
       *
    Throws a "SyntaxError" DOMException if either method is not a valid method or url cannot be parsed.
       *
    Throws a "SecurityError" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.
       *
    Throws an "InvalidAccessError" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/open)
    """
    aliasFor(__js_open)
  }
  function open(method: String, url: Union[String, URL], async: Bool, username: Union[String, Null], password: Union[String, Null]): Any { aliasFor(__js_open) }
  function open(method: String, url: Union[String, URL], async: Bool, username: Union[String, Null]): Any { aliasFor(__js_open) }
  function open(method: String, url: Union[String, URL], async: Bool): Any { aliasFor(__js_open) }
  function overrideMimeType(mime: String): Any {
    """
    Acts as if the `Content-Type` header value for a response is mime. (It does not change the header.)
       *
    Throws an "InvalidStateError" DOMException if state is loading or done.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/overrideMimeType)
    """
    aliasFor(__js_overrideMimeType)
  }
  function send(body: Union[Document, XMLHttpRequestBodyInit, Null]): Any {
    """
    Initiates the request. The body argument provides the request body, if any, and is ignored if the request method is GET or HEAD.
       *
    Throws an "InvalidStateError" DOMException if either state is not opened or the send() flag is set.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/send)
    """
    aliasFor(__js_send)
  }
  function send(): Any { aliasFor(__js_send) }
  function setRequestHeader(name: String, value: String): Any {
    """
    Combines a header in author request headers.
       *
    Throws an "InvalidStateError" DOMException if either state is not opened or the send() flag is set.
       *
    Throws a "SyntaxError" DOMException if name is not a header name or if value is not a header value.
       *
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/setRequestHeader)
    """
    aliasFor(__js_setRequestHeader)
  }
  const UNSENT: Number = aliasFor(__js_UNSENT)
  const OPENED: Number = aliasFor(__js_OPENED)
  const HEADERS_RECEIVED: Number = aliasFor(__js_HEADERS_RECEIVED)
  const LOADING: Number = aliasFor(__js_LOADING)
  const DONE: Number = aliasFor(__js_DONE)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface XMLHttpRequestEventTargetEventMap {
}
export interface XMLHttpRequestEventTarget extends EventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestEventTarget)
  """
  static {
    aliasFor(native "XMLHttpRequestEventTarget")
    var prototype: XMLHttpRequestEventTarget = aliasFor(__js_prototype)
    function new(): XMLHttpRequestEventTarget { aliasFor(__op_new__) }
  }
  var onabort: Union[function(ev: ProgressEvent): Any, Null] = aliasFor(__js_onabort)
  var onerror: Union[function(ev: ProgressEvent): Any, Null] = aliasFor(__js_onerror)
  var onload: Union[function(ev: ProgressEvent): Any, Null] = aliasFor(__js_onload)
  var onloadend: Union[function(ev: ProgressEvent): Any, Null] = aliasFor(__js_onloadend)
  var onloadstart: Union[function(ev: ProgressEvent): Any, Null] = aliasFor(__js_onloadstart)
  var onprogress: Union[function(ev: ProgressEvent): Any, Null] = aliasFor(__js_onprogress)
  var ontimeout: Union[function(ev: ProgressEvent): Any, Null] = aliasFor(__js_ontimeout)
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface XMLHttpRequestUpload extends XMLHttpRequestEventTarget {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestUpload)
  """
  static {
    aliasFor(native "XMLHttpRequestUpload")
    var prototype: XMLHttpRequestUpload = aliasFor(__js_prototype)
    function new(): XMLHttpRequestUpload { aliasFor(__op_new__) }
  }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, AddEventListenerOptions]): Any { aliasFor(__js_addEventListener) }
  function addEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_addEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject, options: Union[Bool, EventListenerOptions]): Any { aliasFor(__js_removeEventListener) }
  function removeEventListener(type: String, listener: EventListenerOrEventListenerObject): Any { aliasFor(__js_removeEventListener) }
}
export interface XMLSerializer {
  """
  Provides the serializeToString() method to construct an XML string representing a DOM tree.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLSerializer)
  """
  static {
    aliasFor(native "XMLSerializer")
    var prototype: XMLSerializer = aliasFor(__js_prototype)
    function new(): XMLSerializer { aliasFor(__op_new__) }
  }
  function serializeToString(root: Node): String {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLSerializer/serializeToString)
    """
    aliasFor(__js_serializeToString)
  }
}
export interface XPathEvaluator extends XPathEvaluatorBase {
  """
  The XPathEvaluator interface allows to compile and evaluate XPath expressions.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathEvaluator)
  """
  static {
    aliasFor(native "XPathEvaluator")
    var prototype: XPathEvaluator = aliasFor(__js_prototype)
    function new(): XPathEvaluator { aliasFor(__op_new__) }
  }
}
export interface XPathEvaluatorBase {
  function createExpression(expression: String, resolver: Union[XPathNSResolver, Null]): XPathExpression {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createExpression)
    """
    aliasFor(__js_createExpression)
  }
  function createExpression(expression: String): XPathExpression { aliasFor(__js_createExpression) }
  function createNSResolver(nodeResolver: Node): Node {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createNSResolver)
    """
    aliasFor(__js_createNSResolver)
  }
  function evaluate(expression: String, contextNode: Node, resolver: Union[XPathNSResolver, Null], type: Number, result: Union[XPathResult, Null]): XPathResult {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/evaluate)
    """
    aliasFor(__js_evaluate)
  }
  function evaluate(expression: String, contextNode: Node, resolver: Union[XPathNSResolver, Null], type: Number): XPathResult { aliasFor(__js_evaluate) }
  function evaluate(expression: String, contextNode: Node, resolver: Union[XPathNSResolver, Null]): XPathResult { aliasFor(__js_evaluate) }
  function evaluate(expression: String, contextNode: Node): XPathResult { aliasFor(__js_evaluate) }
}
export interface XPathExpression {
  """
  This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information its DOM tree.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathExpression)
  """
  static {
    aliasFor(native "XPathExpression")
    var prototype: XPathExpression = aliasFor(__js_prototype)
    function new(): XPathExpression { aliasFor(__op_new__) }
  }
  function evaluate(contextNode: Node, type: Number, result: Union[XPathResult, Null]): XPathResult {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathExpression/evaluate)
    """
    aliasFor(__js_evaluate)
  }
  function evaluate(contextNode: Node, type: Number): XPathResult { aliasFor(__js_evaluate) }
  function evaluate(contextNode: Node): XPathResult { aliasFor(__js_evaluate) }
}
export interface XPathResult {
  """
  The results generated by evaluating an XPath expression within the context of a given node.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult)
  """
  static {
    aliasFor(native "XPathResult")
    var prototype: XPathResult = aliasFor(__js_prototype)
    function new(): XPathResult { aliasFor(__op_new__) }
    const ANY_TYPE: Number = aliasFor(__js_ANY_TYPE)
    const NUMBER_TYPE: Number = aliasFor(__js_NUMBER_TYPE)
    const STRING_TYPE: Number = aliasFor(__js_STRING_TYPE)
    const BOOLEAN_TYPE: Number = aliasFor(__js_BOOLEAN_TYPE)
    const UNORDERED_NODE_ITERATOR_TYPE: Number = aliasFor(__js_UNORDERED_NODE_ITERATOR_TYPE)
    const ORDERED_NODE_ITERATOR_TYPE: Number = aliasFor(__js_ORDERED_NODE_ITERATOR_TYPE)
    const UNORDERED_NODE_SNAPSHOT_TYPE: Number = aliasFor(__js_UNORDERED_NODE_SNAPSHOT_TYPE)
    const ORDERED_NODE_SNAPSHOT_TYPE: Number = aliasFor(__js_ORDERED_NODE_SNAPSHOT_TYPE)
    const ANY_UNORDERED_NODE_TYPE: Number = aliasFor(__js_ANY_UNORDERED_NODE_TYPE)
    const FIRST_ORDERED_NODE_TYPE: Number = aliasFor(__js_FIRST_ORDERED_NODE_TYPE)
  }
  const booleanValue: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/booleanValue)
  """ = aliasFor(__js_booleanValue)
  const invalidIteratorState: Bool """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/invalidIteratorState)
  """ = aliasFor(__js_invalidIteratorState)
  const numberValue: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/numberValue)
  """ = aliasFor(__js_numberValue)
  const resultType: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/resultType)
  """ = aliasFor(__js_resultType)
  const singleNodeValue: Union[Node, Null] """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/singleNodeValue)
  """ = aliasFor(__js_singleNodeValue)
  const snapshotLength: Number """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/snapshotLength)
  """ = aliasFor(__js_snapshotLength)
  const stringValue: String """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/stringValue)
  """ = aliasFor(__js_stringValue)
  function iterateNext(): Union[Node, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/iterateNext)
    """
    aliasFor(__js_iterateNext)
  }
  function snapshotItem(index: Number): Union[Node, Null] {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/snapshotItem)
    """
    aliasFor(__js_snapshotItem)
  }
  const ANY_TYPE: Number = aliasFor(__js_ANY_TYPE)
  const NUMBER_TYPE: Number = aliasFor(__js_NUMBER_TYPE)
  const STRING_TYPE: Number = aliasFor(__js_STRING_TYPE)
  const BOOLEAN_TYPE: Number = aliasFor(__js_BOOLEAN_TYPE)
  const UNORDERED_NODE_ITERATOR_TYPE: Number = aliasFor(__js_UNORDERED_NODE_ITERATOR_TYPE)
  const ORDERED_NODE_ITERATOR_TYPE: Number = aliasFor(__js_ORDERED_NODE_ITERATOR_TYPE)
  const UNORDERED_NODE_SNAPSHOT_TYPE: Number = aliasFor(__js_UNORDERED_NODE_SNAPSHOT_TYPE)
  const ORDERED_NODE_SNAPSHOT_TYPE: Number = aliasFor(__js_ORDERED_NODE_SNAPSHOT_TYPE)
  const ANY_UNORDERED_NODE_TYPE: Number = aliasFor(__js_ANY_UNORDERED_NODE_TYPE)
  const FIRST_ORDERED_NODE_TYPE: Number = aliasFor(__js_FIRST_ORDERED_NODE_TYPE)
}
export interface XSLTProcessor {
  """
  An XSLTProcessor applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output. It has methods to load the XSLT stylesheet, to manipulate <xsl:param> parameter values, and to apply the transformation to documents.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor)
  """
  static {
    aliasFor(native "XSLTProcessor")
    var prototype: XSLTProcessor = aliasFor(__js_prototype)
    function new(): XSLTProcessor { aliasFor(__op_new__) }
  }
  function clearParameters(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/clearParameters)
    """
    aliasFor(__js_clearParameters)
  }
  function getParameter(namespaceURI: Union[String, Null], localName: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/getParameter)
    """
    aliasFor(__js_getParameter)
  }
  function importStylesheet(style: Node): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/importStylesheet)
    """
    aliasFor(__js_importStylesheet)
  }
  function removeParameter(namespaceURI: Union[String, Null], localName: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/removeParameter)
    """
    aliasFor(__js_removeParameter)
  }
  function reset(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/reset)
    """
    aliasFor(__js_reset)
  }
  function setParameter(namespaceURI: Union[String, Null], localName: String, value: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/setParameter)
    """
    aliasFor(__js_setParameter)
  }
  function transformToDocument(source: Node): Document {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/transformToDocument)
    """
    aliasFor(__js_transformToDocument)
  }
  function transformToFragment(source: Node, output: Document): DocumentFragment {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/transformToFragment)
    """
    aliasFor(__js_transformToFragment)
  }
}
export interface Console {
  function assert(condition: Bool, data: Any, data: Any, data: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/assert_static)
    """
    aliasFor(__js_assert)
  }
  function assert(condition: Bool, data: Any, data: Any): Any { aliasFor(__js_assert) }
  function assert(condition: Bool, data: Any): Any { aliasFor(__js_assert) }
  function assert(condition: Bool): Any { aliasFor(__js_assert) }
  function assert(): Any { aliasFor(__js_assert) }
  function clear(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/clear_static)
    """
    aliasFor(__js_clear)
  }
  function count(label: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/count_static)
    """
    aliasFor(__js_count)
  }
  function count(): Any { aliasFor(__js_count) }
  function countReset(label: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/countReset_static)
    """
    aliasFor(__js_countReset)
  }
  function countReset(): Any { aliasFor(__js_countReset) }
  function debug(data: Any, data: Any, data: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/debug_static)
    """
    aliasFor(__js_debug)
  }
  function debug(data: Any, data: Any): Any { aliasFor(__js_debug) }
  function debug(data: Any): Any { aliasFor(__js_debug) }
  function debug(): Any { aliasFor(__js_debug) }
  function dir(item: Any, options: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/dir_static)
    """
    aliasFor(__js_dir)
  }
  function dir(item: Any): Any { aliasFor(__js_dir) }
  function dir(): Any { aliasFor(__js_dir) }
  function dirxml(data: Any, data: Any, data: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/dirxml_static)
    """
    aliasFor(__js_dirxml)
  }
  function dirxml(data: Any, data: Any): Any { aliasFor(__js_dirxml) }
  function dirxml(data: Any): Any { aliasFor(__js_dirxml) }
  function dirxml(): Any { aliasFor(__js_dirxml) }
  function error(data: Any, data: Any, data: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/error_static)
    """
    aliasFor(__js_error)
  }
  function error(data: Any, data: Any): Any { aliasFor(__js_error) }
  function error(data: Any): Any { aliasFor(__js_error) }
  function error(): Any { aliasFor(__js_error) }
  function group(data: Any, data: Any, data: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/group_static)
    """
    aliasFor(__js_group)
  }
  function group(data: Any, data: Any): Any { aliasFor(__js_group) }
  function group(data: Any): Any { aliasFor(__js_group) }
  function group(): Any { aliasFor(__js_group) }
  function groupCollapsed(data: Any, data: Any, data: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/groupCollapsed_static)
    """
    aliasFor(__js_groupCollapsed)
  }
  function groupCollapsed(data: Any, data: Any): Any { aliasFor(__js_groupCollapsed) }
  function groupCollapsed(data: Any): Any { aliasFor(__js_groupCollapsed) }
  function groupCollapsed(): Any { aliasFor(__js_groupCollapsed) }
  function groupEnd(): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/groupEnd_static)
    """
    aliasFor(__js_groupEnd)
  }
  function info(data: Any, data: Any, data: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/info_static)
    """
    aliasFor(__js_info)
  }
  function info(data: Any, data: Any): Any { aliasFor(__js_info) }
  function info(data: Any): Any { aliasFor(__js_info) }
  function info(): Any { aliasFor(__js_info) }
  function log(data: Any, data: Any, data: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)
    """
    aliasFor(__js_log)
  }
  function log(data: Any, data: Any): Any { aliasFor(__js_log) }
  function log(data: Any): Any { aliasFor(__js_log) }
  function log(): Any { aliasFor(__js_log) }
  function table(tabularData: Any, properties: List[String]): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/table_static)
    """
    aliasFor(__js_table)
  }
  function table(tabularData: Any): Any { aliasFor(__js_table) }
  function table(): Any { aliasFor(__js_table) }
  function time(label: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/time_static)
    """
    aliasFor(__js_time)
  }
  function time(): Any { aliasFor(__js_time) }
  function timeEnd(label: String): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/timeEnd_static)
    """
    aliasFor(__js_timeEnd)
  }
  function timeEnd(): Any { aliasFor(__js_timeEnd) }
  function timeLog(label: String, data: Any, data: Any, data: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/timeLog_static)
    """
    aliasFor(__js_timeLog)
  }
  function timeLog(label: String, data: Any, data: Any): Any { aliasFor(__js_timeLog) }
  function timeLog(label: String, data: Any): Any { aliasFor(__js_timeLog) }
  function timeLog(label: String): Any { aliasFor(__js_timeLog) }
  function timeLog(): Any { aliasFor(__js_timeLog) }
  function timeStamp(label: String): Any { aliasFor(__js_timeStamp) }
  function timeStamp(): Any { aliasFor(__js_timeStamp) }
  function trace(data: Any, data: Any, data: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/trace_static)
    """
    aliasFor(__js_trace)
  }
  function trace(data: Any, data: Any): Any { aliasFor(__js_trace) }
  function trace(data: Any): Any { aliasFor(__js_trace) }
  function trace(): Any { aliasFor(__js_trace) }
  function warn(data: Any, data: Any, data: Any): Any {
    """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/warn_static)
    """
    aliasFor(__js_warn)
  }
  function warn(data: Any, data: Any): Any { aliasFor(__js_warn) }
  function warn(data: Any): Any { aliasFor(__js_warn) }
  function warn(): Any { aliasFor(__js_warn) }
}
export var console = native "console" as Console
export interface BlobCallback {
  function __call__(blob: Union[Blob, Null]): Any { aliasFor(__call__) }
}
export interface CustomElementConstructor {
  function new(params: Any, params: Any, params: Any): HTMLElement { aliasFor(__op_new__) }
  function new(params: Any, params: Any): HTMLElement { aliasFor(__op_new__) }
  function new(params: Any): HTMLElement { aliasFor(__op_new__) }
  function new(): HTMLElement { aliasFor(__op_new__) }
}
export interface DecodeErrorCallback {
  function __call__(error: DOMException): Any { aliasFor(__call__) }
}
export interface DecodeSuccessCallback {
  function __call__(decodedData: AudioBuffer): Any { aliasFor(__call__) }
}
export interface EncodedVideoChunkOutputCallback {
  function __call__(chunk: EncodedVideoChunk, metadata: EncodedVideoChunkMetadata): Any { aliasFor(__call__) }
  function __call__(chunk: EncodedVideoChunk): Any { aliasFor(__call__) }
}
export interface ErrorCallback {
  function __call__(err: DOMException): Any { aliasFor(__call__) }
}
export interface FileCallback {
  function __call__(file: File): Any { aliasFor(__call__) }
}
export interface FileSystemEntriesCallback {
  function __call__(entries: List[FileSystemEntry]): Any { aliasFor(__call__) }
}
export interface FileSystemEntryCallback {
  function __call__(entry: FileSystemEntry): Any { aliasFor(__call__) }
}
export interface FrameRequestCallback {
  function __call__(time: DOMHighResTimeStamp): Any { aliasFor(__call__) }
}
export interface FunctionStringCallback {
  function __call__(data: String): Any { aliasFor(__call__) }
}
export interface IdleRequestCallback {
  function __call__(deadline: IdleDeadline): Any { aliasFor(__call__) }
}
export interface IntersectionObserverCallback {
  function __call__(entries: List[IntersectionObserverEntry], observer: IntersectionObserver): Any { aliasFor(__call__) }
}
export interface LockGrantedCallback {
  function __call__(lock: Union[Lock, Null]): Any { aliasFor(__call__) }
}
export interface MediaSessionActionHandler {
  function __call__(details: MediaSessionActionDetails): Any { aliasFor(__call__) }
}
export interface MutationCallback {
  function __call__(mutations: List[MutationRecord], observer: MutationObserver): Any { aliasFor(__call__) }
}
export interface NotificationPermissionCallback {
  function __call__(permission: NotificationPermission): Any { aliasFor(__call__) }
}
export interface OnBeforeUnloadEventHandlerNonNull {
  function __call__(event: Event): Union[String, Null] { aliasFor(__call__) }
}
export interface OnErrorEventHandlerNonNull {
  function __call__(event: Union[Event, String], source: String, lineno: Number, colno: Number, error: Error): Any { aliasFor(__call__) }
  function __call__(event: Union[Event, String], source: String, lineno: Number, colno: Number): Any { aliasFor(__call__) }
  function __call__(event: Union[Event, String], source: String, lineno: Number): Any { aliasFor(__call__) }
  function __call__(event: Union[Event, String], source: String): Any { aliasFor(__call__) }
  function __call__(event: Union[Event, String]): Any { aliasFor(__call__) }
}
export interface PerformanceObserverCallback {
  function __call__(entries: PerformanceObserverEntryList, observer: PerformanceObserver): Any { aliasFor(__call__) }
}
export interface PositionCallback {
  function __call__(position: GeolocationPosition): Any { aliasFor(__call__) }
}
export interface PositionErrorCallback {
  function __call__(positionError: GeolocationPositionError): Any { aliasFor(__call__) }
}
export interface RTCPeerConnectionErrorCallback {
  function __call__(error: DOMException): Any { aliasFor(__call__) }
}
export interface RTCSessionDescriptionCallback {
  function __call__(description: RTCSessionDescriptionInit): Any { aliasFor(__call__) }
}
export interface RemotePlaybackAvailabilityCallback {
  function __call__(available: Bool): Any { aliasFor(__call__) }
}
export interface ReportingObserverCallback {
  function __call__(reports: List[Report], observer: ReportingObserver): Any { aliasFor(__call__) }
}
export interface ResizeObserverCallback {
  function __call__(entries: List[ResizeObserverEntry], observer: ResizeObserver): Any { aliasFor(__call__) }
}
export interface UnderlyingSinkAbortCallback {
  function __call__(reason: Any): Any { aliasFor(__call__) }
  function __call__(): Any { aliasFor(__call__) }
}
export interface UnderlyingSinkCloseCallback {
  function __call__(): Any { aliasFor(__call__) }
}
export interface UnderlyingSinkStartCallback {
  function __call__(controller: WritableStreamDefaultController): Any { aliasFor(__call__) }
}
export interface UnderlyingSourceCancelCallback {
  function __call__(reason: Any): Any { aliasFor(__call__) }
  function __call__(): Any { aliasFor(__call__) }
}
export interface VideoFrameOutputCallback {
  function __call__(output: VideoFrame): Any { aliasFor(__call__) }
}
export interface VideoFrameRequestCallback {
  function __call__(now: DOMHighResTimeStamp, metadata: VideoFrameCallbackMetadata): Any { aliasFor(__call__) }
}
export interface VoidFunction {
  function __call__(): Any { aliasFor(__call__) }
}
export interface WebCodecsErrorCallback {
  function __call__(error: DOMException): Any { aliasFor(__call__) }
}
export interface HTMLElementTagNameMap {
}
export interface HTMLElementDeprecatedTagNameMap {
}
export interface SVGElementTagNameMap {
}
export interface MathMLElementTagNameMap {
}
export interface Audio {
  static {
    aliasFor(native "Audio")
    function new(src: String): HTMLAudioElement { aliasFor(__op_new__) }
    function new(): HTMLAudioElement { aliasFor(__op_new__) }
  }
}
export interface Image {
  static {
    aliasFor(native "Image")
    function new(width: Number, height: Number): HTMLImageElement { aliasFor(__op_new__) }
    function new(width: Number): HTMLImageElement { aliasFor(__op_new__) }
    function new(): HTMLImageElement { aliasFor(__op_new__) }
  }
}
export interface Option {
  static {
    aliasFor(native "Option")
    function new(text: String, value: String, defaultSelected: Bool, selected: Bool): HTMLOptionElement { aliasFor(__op_new__) }
    function new(text: String, value: String, defaultSelected: Bool): HTMLOptionElement { aliasFor(__op_new__) }
    function new(text: String, value: String): HTMLOptionElement { aliasFor(__op_new__) }
    function new(text: String): HTMLOptionElement { aliasFor(__op_new__) }
    function new(): HTMLOptionElement { aliasFor(__op_new__) }
  }
}
export var clientInformation """
@deprecated This is a legacy alias of `navigator`.
*
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)
""" = native "clientInformation" as Navigator
export var customElements """
Defines a new custom element, mapping the given name to the given constructor as an autonomous custom element.
*
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/customElements)
""" = native "customElements" as CustomElementRegistry
export var document """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document)
""" = native "document" as Document
export interface event {
  """
  @deprecated
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/event)
  """
  static {
    aliasFor(native "event")
  }
}
export var external """
@deprecated
*
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/external)
""" = native "external" as External
export interface frameElement {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frameElement)
  """
  static {
    aliasFor(native "frameElement")
  }
}
export var history """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/history)
""" = native "history" as History
export var location """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/location)
""" = native "location" as Location
export var locationbar """
Returns true if the location bar is visible; otherwise, returns false.
*
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/locationbar)
""" = native "locationbar" as BarProp
export var menubar """
Returns true if the menu bar is visible; otherwise, returns false.
*
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/menubar)
""" = native "menubar" as BarProp
export var navigator """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)
""" = native "navigator" as Navigator
export interface ondevicemotion {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)
  """
  static {
    aliasFor(native "ondevicemotion")
  }
}
export interface ondeviceorientation {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)
  """
  static {
    aliasFor(native "ondeviceorientation")
  }
}
export interface ondeviceorientationabsolute {
  """
  Available only in secure contexts.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientationabsolute_event)
  """
  static {
    aliasFor(native "ondeviceorientationabsolute")
  }
}
export interface onorientationchange {
  """
  @deprecated
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/orientationchange_event)
  """
  static {
    aliasFor(native "onorientationchange")
  }
}
export var personalbar """
Returns true if the personal bar is visible; otherwise, returns false.
*
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/personalbar)
""" = native "personalbar" as BarProp
export var screen """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screen)
""" = native "screen" as Screen
export var scrollbars """
Returns true if the scrollbars are visible; otherwise, returns false.
*
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollbars)
""" = native "scrollbars" as BarProp
export var self """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/self)
""" = native "self" as Window
export var speechSynthesis """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/speechSynthesis)
""" = native "speechSynthesis" as SpeechSynthesis
export var statusbar """
Returns true if the status bar is visible; otherwise, returns false.
*
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/statusbar)
""" = native "statusbar" as BarProp
export var toolbar """
Returns true if the toolbar is visible; otherwise, returns false.
*
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/toolbar)
""" = native "toolbar" as BarProp
export interface top {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/top)
  """
  static {
    aliasFor(native "top")
  }
}
export interface visualViewport {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/visualViewport)
  """
  static {
    aliasFor(native "visualViewport")
  }
}
export var window """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/window)
""" = native "window" as Window
export interface onabort {
  """
  Fires when the user aborts the download.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
  """
  static {
    aliasFor(native "onabort")
  }
}
export interface onanimationcancel {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event)
  """
  static {
    aliasFor(native "onanimationcancel")
  }
}
export interface onanimationend {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
  """
  static {
    aliasFor(native "onanimationend")
  }
}
export interface onanimationiteration {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
  """
  static {
    aliasFor(native "onanimationiteration")
  }
}
export interface onanimationstart {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
  """
  static {
    aliasFor(native "onanimationstart")
  }
}
export interface onauxclick {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event)
  """
  static {
    aliasFor(native "onauxclick")
  }
}
export interface onbeforeinput {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event)
  """
  static {
    aliasFor(native "onbeforeinput")
  }
}
export interface onbeforetoggle {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event)
  """
  static {
    aliasFor(native "onbeforetoggle")
  }
}
export interface onblur {
  """
  Fires when the object loses the input focus.
  @param ev The focus event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
  """
  static {
    aliasFor(native "onblur")
  }
}
export interface oncancel {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event)
  """
  static {
    aliasFor(native "oncancel")
  }
}
export interface oncanplay {
  """
  Occurs when playback is possible, but would require further buffering.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
  """
  static {
    aliasFor(native "oncanplay")
  }
}
export interface oncanplaythrough {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event)
  """
  static {
    aliasFor(native "oncanplaythrough")
  }
}
export interface onchange {
  """
  Fires when the contents of the object or selection have changed.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
  """
  static {
    aliasFor(native "onchange")
  }
}
export interface onclick {
  """
  Fires when the user clicks the left mouse button on the object
  @param ev The mouse event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)
  """
  static {
    aliasFor(native "onclick")
  }
}
export interface onclose {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event)
  """
  static {
    aliasFor(native "onclose")
  }
}
export interface oncontextmenu {
  """
  Fires when the user clicks the right mouse button in the client area, opening the context menu.
  @param ev The mouse event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
  """
  static {
    aliasFor(native "oncontextmenu")
  }
}
export interface oncopy {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event)
  """
  static {
    aliasFor(native "oncopy")
  }
}
export interface oncuechange {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event)
  """
  static {
    aliasFor(native "oncuechange")
  }
}
export interface oncut {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event)
  """
  static {
    aliasFor(native "oncut")
  }
}
export interface ondblclick {
  """
  Fires when the user double-clicks the object.
  @param ev The mouse event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
  """
  static {
    aliasFor(native "ondblclick")
  }
}
export interface ondrag {
  """
  Fires on the source object continuously during a drag operation.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
  """
  static {
    aliasFor(native "ondrag")
  }
}
export interface ondragend {
  """
  Fires on the source object when the user releases the mouse at the close of a drag operation.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
  """
  static {
    aliasFor(native "ondragend")
  }
}
export interface ondragenter {
  """
  Fires on the target element when the user drags the object to a valid drop target.
  @param ev The drag event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
  """
  static {
    aliasFor(native "ondragenter")
  }
}
export interface ondragleave {
  """
  Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
  @param ev The drag event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
  """
  static {
    aliasFor(native "ondragleave")
  }
}
export interface ondragover {
  """
  Fires on the target element continuously while the user drags the object over a valid drop target.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
  """
  static {
    aliasFor(native "ondragover")
  }
}
export interface ondragstart {
  """
  Fires on the source object when the user starts to drag a text selection or selected object.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
  """
  static {
    aliasFor(native "ondragstart")
  }
}
export interface ondrop {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event)
  """
  static {
    aliasFor(native "ondrop")
  }
}
export interface ondurationchange {
  """
  Occurs when the duration attribute is updated.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
  """
  static {
    aliasFor(native "ondurationchange")
  }
}
export interface onemptied {
  """
  Occurs when the media element is reset to its initial state.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
  """
  static {
    aliasFor(native "onemptied")
  }
}
export interface onended {
  """
  Occurs when the end of playback is reached.
  @param ev The event
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
  """
  static {
    aliasFor(native "onended")
  }
}
export interface onfocus {
  """
  Fires when the object receives focus.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
  """
  static {
    aliasFor(native "onfocus")
  }
}
export interface onformdata {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event)
  """
  static {
    aliasFor(native "onformdata")
  }
}
export interface ongotpointercapture {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event)
  """
  static {
    aliasFor(native "ongotpointercapture")
  }
}
export interface oninput {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/input_event)
  """
  static {
    aliasFor(native "oninput")
  }
}
export interface oninvalid {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event)
  """
  static {
    aliasFor(native "oninvalid")
  }
}
export interface onkeydown {
  """
  Fires when the user presses a key.
  @param ev The keyboard event
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
  """
  static {
    aliasFor(native "onkeydown")
  }
}
export interface onkeypress {
  """
  Fires when the user presses an alphanumeric key.
  @param ev The event.
  @deprecated
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)
  """
  static {
    aliasFor(native "onkeypress")
  }
}
export interface onkeyup {
  """
  Fires when the user releases a key.
  @param ev The keyboard event
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
  """
  static {
    aliasFor(native "onkeyup")
  }
}
export interface onload {
  """
  Fires immediately after the browser loads the object.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/load_event)
  """
  static {
    aliasFor(native "onload")
  }
}
export interface onloadeddata {
  """
  Occurs when media data is loaded at the current playback position.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
  """
  static {
    aliasFor(native "onloadeddata")
  }
}
export interface onloadedmetadata {
  """
  Occurs when the duration and dimensions of the media have been determined.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
  """
  static {
    aliasFor(native "onloadedmetadata")
  }
}
export interface onloadstart {
  """
  Occurs when Internet Explorer begins looking for media data.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
  """
  static {
    aliasFor(native "onloadstart")
  }
}
export interface onlostpointercapture {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/lostpointercapture_event)
  """
  static {
    aliasFor(native "onlostpointercapture")
  }
}
export interface onmousedown {
  """
  Fires when the user clicks the object with either mouse button.
  @param ev The mouse event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
  """
  static {
    aliasFor(native "onmousedown")
  }
}
export interface onmouseenter {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event)
  """
  static {
    aliasFor(native "onmouseenter")
  }
}
export interface onmouseleave {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event)
  """
  static {
    aliasFor(native "onmouseleave")
  }
}
export interface onmousemove {
  """
  Fires when the user moves the mouse over the object.
  @param ev The mouse event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
  """
  static {
    aliasFor(native "onmousemove")
  }
}
export interface onmouseout {
  """
  Fires when the user moves the mouse pointer outside the boundaries of the object.
  @param ev The mouse event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
  """
  static {
    aliasFor(native "onmouseout")
  }
}
export interface onmouseover {
  """
  Fires when the user moves the mouse pointer into the object.
  @param ev The mouse event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
  """
  static {
    aliasFor(native "onmouseover")
  }
}
export interface onmouseup {
  """
  Fires when the user releases a mouse button while the mouse is over the object.
  @param ev The mouse event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
  """
  static {
    aliasFor(native "onmouseup")
  }
}
export interface onpaste {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event)
  """
  static {
    aliasFor(native "onpaste")
  }
}
export interface onpause {
  """
  Occurs when playback is paused.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
  """
  static {
    aliasFor(native "onpause")
  }
}
export interface onplay {
  """
  Occurs when the play method is requested.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
  """
  static {
    aliasFor(native "onplay")
  }
}
export interface onplaying {
  """
  Occurs when the audio or video has started playing.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
  """
  static {
    aliasFor(native "onplaying")
  }
}
export interface onpointercancel {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event)
  """
  static {
    aliasFor(native "onpointercancel")
  }
}
export interface onpointerdown {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event)
  """
  static {
    aliasFor(native "onpointerdown")
  }
}
export interface onpointerenter {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event)
  """
  static {
    aliasFor(native "onpointerenter")
  }
}
export interface onpointerleave {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event)
  """
  static {
    aliasFor(native "onpointerleave")
  }
}
export interface onpointermove {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event)
  """
  static {
    aliasFor(native "onpointermove")
  }
}
export interface onpointerout {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event)
  """
  static {
    aliasFor(native "onpointerout")
  }
}
export interface onpointerover {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event)
  """
  static {
    aliasFor(native "onpointerover")
  }
}
export interface onpointerup {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event)
  """
  static {
    aliasFor(native "onpointerup")
  }
}
export interface onprogress {
  """
  Occurs to indicate progress while downloading media data.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
  """
  static {
    aliasFor(native "onprogress")
  }
}
export interface onratechange {
  """
  Occurs when the playback rate is increased or decreased.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
  """
  static {
    aliasFor(native "onratechange")
  }
}
export interface onreset {
  """
  Fires when the user resets a form.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
  """
  static {
    aliasFor(native "onreset")
  }
}
export interface onresize {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event)
  """
  static {
    aliasFor(native "onresize")
  }
}
export interface onscroll {
  """
  Fires when the user repositions the scroll box in the scroll bar on the object.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
  """
  static {
    aliasFor(native "onscroll")
  }
}
export interface onscrollend {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event)
  """
  static {
    aliasFor(native "onscrollend")
  }
}
export interface onsecuritypolicyviolation {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event)
  """
  static {
    aliasFor(native "onsecuritypolicyviolation")
  }
}
export interface onseeked {
  """
  Occurs when the seek operation ends.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
  """
  static {
    aliasFor(native "onseeked")
  }
}
export interface onseeking {
  """
  Occurs when the current playback position is moved.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
  """
  static {
    aliasFor(native "onseeking")
  }
}
export interface onselect {
  """
  Fires when the current selection changes.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
  """
  static {
    aliasFor(native "onselect")
  }
}
export interface onselectionchange {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event)
  """
  static {
    aliasFor(native "onselectionchange")
  }
}
export interface onselectstart {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event)
  """
  static {
    aliasFor(native "onselectstart")
  }
}
export interface onslotchange {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event)
  """
  static {
    aliasFor(native "onslotchange")
  }
}
export interface onstalled {
  """
  Occurs when the download has stopped.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
  """
  static {
    aliasFor(native "onstalled")
  }
}
export interface onsubmit {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event)
  """
  static {
    aliasFor(native "onsubmit")
  }
}
export interface onsuspend {
  """
  Occurs if the load operation has been intentionally halted.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
  """
  static {
    aliasFor(native "onsuspend")
  }
}
export interface ontimeupdate {
  """
  Occurs to indicate the current playback position.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
  """
  static {
    aliasFor(native "ontimeupdate")
  }
}
export interface ontoggle {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/toggle_event)
  """
  static {
    aliasFor(native "ontoggle")
  }
}
export interface ontouchcancel {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event)
  """
  static {
    aliasFor(native "ontouchcancel")
  }
}
export interface ontouchend {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchend_event)
  """
  static {
    aliasFor(native "ontouchend")
  }
}
export interface ontouchmove {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event)
  """
  static {
    aliasFor(native "ontouchmove")
  }
}
export interface ontouchstart {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event)
  """
  static {
    aliasFor(native "ontouchstart")
  }
}
export interface ontransitioncancel {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event)
  """
  static {
    aliasFor(native "ontransitioncancel")
  }
}
export interface ontransitionend {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
  """
  static {
    aliasFor(native "ontransitionend")
  }
}
export interface ontransitionrun {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event)
  """
  static {
    aliasFor(native "ontransitionrun")
  }
}
export interface ontransitionstart {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event)
  """
  static {
    aliasFor(native "ontransitionstart")
  }
}
export interface onvolumechange {
  """
  Occurs when the volume is changed, or playback is muted or unmuted.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
  """
  static {
    aliasFor(native "onvolumechange")
  }
}
export interface onwaiting {
  """
  Occurs when playback stops because the next frame of a video resource is not available.
  @param ev The event.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
  """
  static {
    aliasFor(native "onwaiting")
  }
}
export interface onwebkitanimationend {
  """
  @deprecated This is a legacy alias of `onanimationend`.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
  """
  static {
    aliasFor(native "onwebkitanimationend")
  }
}
export interface onwebkitanimationiteration {
  """
  @deprecated This is a legacy alias of `onanimationiteration`.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
  """
  static {
    aliasFor(native "onwebkitanimationiteration")
  }
}
export interface onwebkitanimationstart {
  """
  @deprecated This is a legacy alias of `onanimationstart`.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
  """
  static {
    aliasFor(native "onwebkitanimationstart")
  }
}
export interface onwebkittransitionend {
  """
  @deprecated This is a legacy alias of `ontransitionend`.
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
  """
  static {
    aliasFor(native "onwebkittransitionend")
  }
}
export interface onwheel {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event)
  """
  static {
    aliasFor(native "onwheel")
  }
}
export interface onafterprint {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event)
  """
  static {
    aliasFor(native "onafterprint")
  }
}
export interface onbeforeprint {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event)
  """
  static {
    aliasFor(native "onbeforeprint")
  }
}
export interface onbeforeunload {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event)
  """
  static {
    aliasFor(native "onbeforeunload")
  }
}
export interface ongamepadconnected {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event)
  """
  static {
    aliasFor(native "ongamepadconnected")
  }
}
export interface ongamepaddisconnected {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event)
  """
  static {
    aliasFor(native "ongamepaddisconnected")
  }
}
export interface onhashchange {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event)
  """
  static {
    aliasFor(native "onhashchange")
  }
}
export interface onlanguagechange {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event)
  """
  static {
    aliasFor(native "onlanguagechange")
  }
}
export interface onmessage {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/message_event)
  """
  static {
    aliasFor(native "onmessage")
  }
}
export interface onmessageerror {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event)
  """
  static {
    aliasFor(native "onmessageerror")
  }
}
export interface onoffline {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/offline_event)
  """
  static {
    aliasFor(native "onoffline")
  }
}
export interface ononline {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/online_event)
  """
  static {
    aliasFor(native "ononline")
  }
}
export interface onpagehide {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event)
  """
  static {
    aliasFor(native "onpagehide")
  }
}
export interface onpageshow {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event)
  """
  static {
    aliasFor(native "onpageshow")
  }
}
export interface onpopstate {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/popstate_event)
  """
  static {
    aliasFor(native "onpopstate")
  }
}
export interface onrejectionhandled {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event)
  """
  static {
    aliasFor(native "onrejectionhandled")
  }
}
export interface onstorage {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/storage_event)
  """
  static {
    aliasFor(native "onstorage")
  }
}
export interface onunhandledrejection {
  """
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event)
  """
  static {
    aliasFor(native "onunhandledrejection")
  }
}
export interface onunload {
  """
  @deprecated
  *
  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unload_event)
  """
  static {
    aliasFor(native "onunload")
  }
}
export var localStorage """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/localStorage)
""" = native "localStorage" as Storage
export var caches """
Available only in secure contexts.
*
[MDN Reference](https://developer.mozilla.org/docs/Web/API/caches)
""" = native "caches" as CacheStorage
export var crypto """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/crypto_property)
""" = native "crypto" as Crypto
export var indexedDB """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/indexedDB)
""" = native "indexedDB" as IDBFactory
export var performance """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/performance_property)
""" = native "performance" as Performance
export var sessionStorage """
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/sessionStorage)
""" = native "sessionStorage" as Storage
typedef NodeFilter = Any
typedef XPathNSResolver = Any
typedef SVGMatrix = DOMMatrix
typedef WebKitCSSMatrix = DOMMatrix
typedef SVGPoint = DOMPoint
typedef SVGRect = DOMRect
typedef webkitURL = URL
typedef ElementTagNameMap = HTMLElementTagNameMap
typedef AlgorithmIdentifier = Union[Algorithm, String]
typedef AllowSharedBufferSource = Union[ArrayBuffer, ArrayBufferView]
typedef AutoFill = Union[AutoFillBase, String]
typedef AutoFillField = Union[AutoFillNormalField, String]
typedef AutoFillSection = String
typedef BigInteger = Uint8Array
typedef BinaryData = Union[ArrayBuffer, ArrayBufferView]
typedef BlobPart = Union[BufferSource, Blob, String]
typedef BodyInit = Union[ReadableStream, XMLHttpRequestBodyInit]
typedef BufferSource = Union[ArrayBufferView, ArrayBuffer]
typedef COSEAlgorithmIdentifier = Number
typedef CSSKeywordish = Union[String, CSSKeywordValue]
typedef CSSNumberish = Union[Number, CSSNumericValue]
typedef CSSPerspectiveValue = Union[CSSNumericValue, CSSKeywordish]
typedef CSSUnparsedSegment = Union[String, CSSVariableReferenceValue]
typedef CanvasImageSource = Union[HTMLOrSVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, OffscreenCanvas, VideoFrame]
typedef ClipboardItemData = Promise[Union[String, Blob]]
typedef ClipboardItems = List[ClipboardItem]
typedef ConstrainBoolean = Union[Bool, ConstrainBooleanParameters]
typedef ConstrainDOMString = Union[String, List[String], ConstrainDOMStringParameters]
typedef ConstrainDouble = Union[Number, ConstrainDoubleRange]
typedef ConstrainULong = Union[Number, ConstrainULongRange]
typedef DOMHighResTimeStamp = Number
typedef EpochTimeStamp = Number
typedef EventListenerOrEventListenerObject = Union[EventListener, EventListenerObject]
typedef FileSystemWriteChunkType = Union[BufferSource, Blob, String, WriteParams]
typedef Float32List = Union[Float32Array, List[GLfloat]]
typedef FormDataEntryValue = Union[File, String]
typedef GLbitfield = Number
typedef GLboolean = Bool
typedef GLclampf = Number
typedef GLenum = Number
typedef GLfloat = Number
typedef GLint = Number
typedef GLint64 = Number
typedef GLintptr = Number
typedef GLsizei = Number
typedef GLsizeiptr = Number
typedef GLuint = Number
typedef GLuint64 = Number
typedef HTMLOrSVGImageElement = Union[HTMLImageElement, SVGImageElement]
typedef HTMLOrSVGScriptElement = Union[HTMLScriptElement, SVGScriptElement]
typedef HashAlgorithmIdentifier = AlgorithmIdentifier
typedef HeadersInit = Any
typedef ImageBitmapSource = Union[CanvasImageSource, Blob, ImageData]
typedef Int32List = Union[Int32Array, List[GLint]]
typedef LineAndPositionSetting = Union[Number, AutoKeyword]
typedef MediaProvider = Union[MediaStream, MediaSource, Blob]
typedef MessageEventSource = Union[WindowProxy, MessagePort, ServiceWorker]
typedef NamedCurve = String
typedef OffscreenRenderingContext = Union[OffscreenCanvasRenderingContext2D, ImageBitmapRenderingContext, WebGLRenderingContext, WebGL2RenderingContext]
typedef OnBeforeUnloadEventHandler = Union[OnBeforeUnloadEventHandlerNonNull, Null]
typedef OnErrorEventHandler = Union[OnErrorEventHandlerNonNull, Null]
typedef PerformanceEntryList = List[PerformanceEntry]
typedef RTCRtpTransform = RTCRtpScriptTransform
typedef RenderingContext = Union[CanvasRenderingContext2D, ImageBitmapRenderingContext, WebGLRenderingContext, WebGL2RenderingContext]
typedef ReportList = List[Report]
typedef RequestInfo = Union[Request, String]
typedef TexImageSource = Union[ImageBitmap, ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement, OffscreenCanvas, VideoFrame]
typedef TimerHandler = Any
typedef Transferable = Union[OffscreenCanvas, ImageBitmap, MessagePort, ReadableStream, WritableStream, TransformStream, VideoFrame, ArrayBuffer]
typedef Uint32List = Union[Uint32Array, List[GLuint]]
typedef VibratePattern = Union[Number, List[Number]]
typedef WindowProxy = Window
typedef XMLHttpRequestBodyInit = Union[Blob, BufferSource, FormData, URLSearchParams, String]
typedef AutoFillCredentialField = _SStringwebauthn
typedef AutoKeyword = _SStringauto
typedef GamepadHapticActuatorType = _SStringvibration
typedef GamepadHapticEffectType = _XString133
typedef PublicKeyCredentialType = _XString134
typedef RTCRtcpMuxPolicy = _SStringrequire
typedef ReadableStreamReaderMode = _SStringbyob
typedef ReadableStreamType = _SStringbytes
typedef WakeLockType = _SStringscreen
enum _SStringbytes { const value = "bytes" }
enum _SStringnone { const value = "none" }
enum _SStringcopy { const value = "copy" }
enum _SStringlink { const value = "link" }
enum _SStringmove { const value = "move" }
enum _SStringcopyLink { const value = "copyLink" }
enum _SStringcopyMove { const value = "copyMove" }
enum _SStringlinkMove { const value = "linkMove" }
enum _SStringall { const value = "all" }
enum _SStringuninitialized { const value = "uninitialized" }
enum _XString10 { const value = "http://www.w3.org/1999/xhtml" }
enum _XString11 { const value = "http://www.w3.org/2000/svg" }
enum _XString12 { const value = "http://www.w3.org/1998/Math/MathML" }
enum _SStringAnimationEvent { const value = "AnimationEvent" }
enum _SStringAnimationPlaybackEvent { const value = "AnimationPlaybackEvent" }
enum _SStringAudioProcessingEvent { const value = "AudioProcessingEvent" }
enum _SStringBeforeUnloadEvent { const value = "BeforeUnloadEvent" }
enum _SStringBlobEvent { const value = "BlobEvent" }
enum _SStringClipboardEvent { const value = "ClipboardEvent" }
enum _SStringCloseEvent { const value = "CloseEvent" }
enum _SStringCompositionEvent { const value = "CompositionEvent" }
enum _SStringCustomEvent { const value = "CustomEvent" }
enum _SStringDeviceMotionEvent { const value = "DeviceMotionEvent" }
enum _SStringDeviceOrientationEvent { const value = "DeviceOrientationEvent" }
enum _SStringDragEvent { const value = "DragEvent" }
enum _SStringErrorEvent { const value = "ErrorEvent" }
enum _SStringEvent { const value = "Event" }
enum _SStringEvents { const value = "Events" }
enum _SStringFocusEvent { const value = "FocusEvent" }
enum _SStringFontFaceSetLoadEvent { const value = "FontFaceSetLoadEvent" }
enum _SStringFormDataEvent { const value = "FormDataEvent" }
enum _SStringGamepadEvent { const value = "GamepadEvent" }
enum _SStringHashChangeEvent { const value = "HashChangeEvent" }
enum _SStringIDBVersionChangeEvent { const value = "IDBVersionChangeEvent" }
enum _SStringInputEvent { const value = "InputEvent" }
enum _SStringKeyboardEvent { const value = "KeyboardEvent" }
enum _SStringMIDIConnectionEvent { const value = "MIDIConnectionEvent" }
enum _SStringMIDIMessageEvent { const value = "MIDIMessageEvent" }
enum _SStringMediaEncryptedEvent { const value = "MediaEncryptedEvent" }
enum _SStringMediaKeyMessageEvent { const value = "MediaKeyMessageEvent" }
enum _SStringMediaQueryListEvent { const value = "MediaQueryListEvent" }
enum _SStringMediaStreamTrackEvent { const value = "MediaStreamTrackEvent" }
enum _SStringMessageEvent { const value = "MessageEvent" }
enum _SStringMouseEvent { const value = "MouseEvent" }
enum _SStringMouseEvents { const value = "MouseEvents" }
enum _SStringMutationEvent { const value = "MutationEvent" }
enum _SStringMutationEvents { const value = "MutationEvents" }
enum _SStringOfflineAudioCompletionEvent { const value = "OfflineAudioCompletionEvent" }
enum _SStringPageTransitionEvent { const value = "PageTransitionEvent" }
enum _SStringPaymentMethodChangeEvent { const value = "PaymentMethodChangeEvent" }
enum _SStringPaymentRequestUpdateEvent { const value = "PaymentRequestUpdateEvent" }
enum _SStringPictureInPictureEvent { const value = "PictureInPictureEvent" }
enum _SStringPointerEvent { const value = "PointerEvent" }
enum _SStringPopStateEvent { const value = "PopStateEvent" }
enum _SStringProgressEvent { const value = "ProgressEvent" }
enum _SStringPromiseRejectionEvent { const value = "PromiseRejectionEvent" }
enum _SStringRTCDTMFToneChangeEvent { const value = "RTCDTMFToneChangeEvent" }
enum _SStringRTCDataChannelEvent { const value = "RTCDataChannelEvent" }
enum _SStringRTCErrorEvent { const value = "RTCErrorEvent" }
enum _SStringRTCPeerConnectionIceErrorEvent { const value = "RTCPeerConnectionIceErrorEvent" }
enum _SStringRTCPeerConnectionIceEvent { const value = "RTCPeerConnectionIceEvent" }
enum _SStringRTCTrackEvent { const value = "RTCTrackEvent" }
enum _SStringSecurityPolicyViolationEvent { const value = "SecurityPolicyViolationEvent" }
enum _SStringSpeechSynthesisErrorEvent { const value = "SpeechSynthesisErrorEvent" }
enum _SStringSpeechSynthesisEvent { const value = "SpeechSynthesisEvent" }
enum _SStringStorageEvent { const value = "StorageEvent" }
enum _SStringSubmitEvent { const value = "SubmitEvent" }
enum _SStringToggleEvent { const value = "ToggleEvent" }
enum _SStringTouchEvent { const value = "TouchEvent" }
enum _SStringTrackEvent { const value = "TrackEvent" }
enum _SStringTransitionEvent { const value = "TransitionEvent" }
enum _SStringUIEvent { const value = "UIEvent" }
enum _SStringUIEvents { const value = "UIEvents" }
enum _SStringWebGLContextEvent { const value = "WebGLContextEvent" }
enum _SStringWheelEvent { const value = "WheelEvent" }
enum _SStringdirectory { const value = "directory" }
enum _SStringfile { const value = "file" }
enum _SStringsubmit { const value = "submit" }
enum _SStringreset { const value = "reset" }
enum _SStringbutton { const value = "button" }
enum _SString2d { const value = "2d" }
enum _SStringbitmaprenderer { const value = "bitmaprenderer" }
enum _SStringwebgl { const value = "webgl" }
enum _SStringwebgl2 { const value = "webgl2" }
enum _SStringasync { const value = "async" }
enum _SStringsync { const value = "sync" }
enum _SStringauto { const value = "auto" }
enum _SStringeager { const value = "eager" }
enum _SStringlazy { const value = "lazy" }
enum _SStringforward { const value = "forward" }
enum _SStringbackward { const value = "backward" }
enum _SStringmetadata { const value = "metadata" }
enum _XString92 { const value = "" }
enum _SStringjwk { const value = "jwk" }
enum _SStringEd25519 { const value = "Ed25519" }
enum _SStringsign { const value = "sign" }
enum _SStringverify { const value = "verify" }
enum _SStringANGLE_instanced_arrays { const value = "ANGLE_instanced_arrays" }
enum _SStringEXT_blend_minmax { const value = "EXT_blend_minmax" }
enum _SStringEXT_color_buffer_float { const value = "EXT_color_buffer_float" }
enum _SStringEXT_color_buffer_half_float { const value = "EXT_color_buffer_half_float" }
enum _SStringEXT_float_blend { const value = "EXT_float_blend" }
enum _SStringEXT_frag_depth { const value = "EXT_frag_depth" }
enum _SStringEXT_sRGB { const value = "EXT_sRGB" }
enum _SStringEXT_shader_texture_lod { const value = "EXT_shader_texture_lod" }
enum _SStringEXT_texture_compression_bptc { const value = "EXT_texture_compression_bptc" }
enum _SStringEXT_texture_compression_rgtc { const value = "EXT_texture_compression_rgtc" }
enum _SStringEXT_texture_filter_anisotropic { const value = "EXT_texture_filter_anisotropic" }
enum _SStringKHR_parallel_shader_compile { const value = "KHR_parallel_shader_compile" }
enum _SStringOES_element_index_uint { const value = "OES_element_index_uint" }
enum _SStringOES_fbo_render_mipmap { const value = "OES_fbo_render_mipmap" }
enum _SStringOES_standard_derivatives { const value = "OES_standard_derivatives" }
enum _SStringOES_texture_float { const value = "OES_texture_float" }
enum _SStringOES_texture_float_linear { const value = "OES_texture_float_linear" }
enum _SStringOES_texture_half_float { const value = "OES_texture_half_float" }
enum _SStringOES_texture_half_float_linear { const value = "OES_texture_half_float_linear" }
enum _SStringOES_vertex_array_object { const value = "OES_vertex_array_object" }
enum _SStringOVR_multiview2 { const value = "OVR_multiview2" }
enum _SStringWEBGL_color_buffer_float { const value = "WEBGL_color_buffer_float" }
enum _SStringWEBGL_compressed_texture_astc { const value = "WEBGL_compressed_texture_astc" }
enum _SStringWEBGL_compressed_texture_etc { const value = "WEBGL_compressed_texture_etc" }
enum _SStringWEBGL_compressed_texture_etc1 { const value = "WEBGL_compressed_texture_etc1" }
enum _SStringWEBGL_compressed_texture_pvrtc { const value = "WEBGL_compressed_texture_pvrtc" }
enum _SStringWEBGL_compressed_texture_s3tc { const value = "WEBGL_compressed_texture_s3tc" }
enum _SStringWEBGL_compressed_texture_s3tc_srgb { const value = "WEBGL_compressed_texture_s3tc_srgb" }
enum _SStringWEBGL_debug_renderer_info { const value = "WEBGL_debug_renderer_info" }
enum _SStringWEBGL_debug_shaders { const value = "WEBGL_debug_shaders" }
enum _SStringWEBGL_depth_texture { const value = "WEBGL_depth_texture" }
enum _SStringWEBGL_draw_buffers { const value = "WEBGL_draw_buffers" }
enum _SStringWEBGL_lose_context { const value = "WEBGL_lose_context" }
enum _SStringWEBGL_multi_draw { const value = "WEBGL_multi_draw" }
enum _SStringwebauthn { const value = "webauthn" }
enum _SStringvibration { const value = "vibration" }
enum _XString133 { const value = "dual-rumble" }
enum _XString134 { const value = "public-key" }
enum _SStringrequire { const value = "require" }
enum _SStringbyob { const value = "byob" }
enum _SStringscreen { const value = "screen" }

interface QueuingStrategySize {
  function __call__(value: Any): Number
}

interface QueuingStrategy {
  var highWaterMark: Number?;
  var size: QueuingStrategySize?;
}

# The autogenerated definition is recursive, but YAL cannot handle recursive typedefs
# typedef IDBValidKey = Union[Number, String, Date, BufferSource, List[IDBValidKey]]
typedef IDBValidKey = Union[Number, String, Date, BufferSource,
  List[Union[Number, String, Date, BufferSource]]]

export interface ProgressEvent extends Event {
  static {
    aliasFor(native "ProgressEvent")
    var prototype: ProgressEvent = aliasFor(__js_prototype)
    function new(type: String, eventInitDict: ProgressEventInit): ProgressEvent { aliasFor(__op_new__) }
    function new(type: String): ProgressEvent { aliasFor(__op_new__) }
  }
  const lengthComputable: Bool """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/lengthComputable)
  """ = aliasFor(__js_lengthComputable);
  const loaded: Number """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/loaded)
  """ = aliasFor(__js_loaded);
  const target: Any = aliasFor(__js_target);
  const total: Number """
    [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/total)
  """ = aliasFor(__js_total);
}

export interface IDBRequest extends EventTarget {
  static {
    aliasFor(native "IDBRequest")
    var prototype: IDBRequest = aliasFor(__js_prototype)
    function new(): IDBRequest { aliasFor(__op_new__) }
  }

  # TODO
}

const __target = 'html'

