from 'js/type/float32array' import Float32Array

typedef GLboolean = Bool
typedef GLenum = Number
typedef GLsizei = Number
typedef GLuint = Number
typedef GLint = Number
typedef GLintptr = Number
typedef GLbitfield = Number
typedef GLclampf = Number
typedef GLfloat = Number
typedef DOMString = String
typedef Float32List = Float32Array

enum PredefinedColorSpace {
  const srgb = "srgb"
  const displayP3 = "display-p3"
}

export interface WebGLProgram {
  const __marker_WebGLProgram: Any
}

export interface WebGLShader {
  const __marker_WebGLShader: Any
}

export interface WebGLBuffer {
  const __marker_WebGLBuffer: Any
}

export interface WebGLFramebuffer {
  const __marker_WebGLFramebuffer: Any
}

export interface WebGLRenderbuffer {
  const __marker_WebGLRenderbuffer: Any
}

export interface WebGLTexture {
  const __marker_WebGLTexture: Any
}

export interface WebGLActiveInfo {
  const __marker_WebGLActiveInfo: Any
}

export interface WebGLShaderPrecisionFormat {
  const __marker_WebGLShaderPrecisionFormat: Any
}

export interface WebGLUniformLocation {
  const __marker_WebGLUniformLocation: Any
}

export interface WebGLRenderingContextBase {
  """From https://registry.khronos.org/webgl/specs/latest/1.0/"""

  # ClearBufferMask
  const DEPTH_BUFFER_BIT: GLenum               = aliasFor(__js_DEPTH_BUFFER_BIT)
  const STENCIL_BUFFER_BIT: GLenum             = aliasFor(__js_STENCIL_BUFFER_BIT)
  const COLOR_BUFFER_BIT: GLenum               = aliasFor(__js_COLOR_BUFFER_BIT)

  # BeginMode
  const POINTS: GLenum                         = aliasFor(__js_POINTS)
  const LINES: GLenum                          = aliasFor(__js_LINES)
  const LINE_LOOP: GLenum                      = aliasFor(__js_LINE_LOOP)
  const LINE_STRIP: GLenum                     = aliasFor(__js_LINE_STRIP)
  const TRIANGLES: GLenum                      = aliasFor(__js_TRIANGLES)
  const TRIANGLE_STRIP: GLenum                 = aliasFor(__js_TRIANGLE_STRIP)
  const TRIANGLE_FAN: GLenum                   = aliasFor(__js_TRIANGLE_FAN)

  # AlphaFunction (not supported in ES20)
  #      NEVER
  #      LESS
  #      EQUAL
  #      LEQUAL
  #      GREATER
  #      NOTEQUAL
  #      GEQUAL
  #      ALWAYS

  # BlendingFactorDest
  const ZERO: GLenum                           = aliasFor(__js_ZERO)
  const ONE: GLenum                            = aliasFor(__js_ONE)
  const SRC_COLOR: GLenum                      = aliasFor(__js_SRC_COLOR)
  const ONE_MINUS_SRC_COLOR: GLenum            = aliasFor(__js_ONE_MINUS_SRC_COLOR)
  const SRC_ALPHA: GLenum                      = aliasFor(__js_SRC_ALPHA)
  const ONE_MINUS_SRC_ALPHA: GLenum            = aliasFor(__js_ONE_MINUS_SRC_ALPHA)
  const DST_ALPHA: GLenum                      = aliasFor(__js_DST_ALPHA)
  const ONE_MINUS_DST_ALPHA: GLenum            = aliasFor(__js_ONE_MINUS_DST_ALPHA)

  # BlendingFactorSrc
  #      ZERO
  #      ONE
  const DST_COLOR: GLenum                      = aliasFor(__js_DST_COLOR)
  const ONE_MINUS_DST_COLOR: GLenum            = aliasFor(__js_ONE_MINUS_DST_COLOR)
  const SRC_ALPHA_SATURATE: GLenum             = aliasFor(__js_SRC_ALPHA_SATURATE)
  #      SRC_ALPHA
  #      ONE_MINUS_SRC_ALPHA
  #      DST_ALPHA
  #      ONE_MINUS_DST_ALPHA

  # BlendEquationSeparate
  const FUNC_ADD: GLenum                       = aliasFor(__js_FUNC_ADD)
  const BLEND_EQUATION: GLenum                 = aliasFor(__js_BLEND_EQUATION)
  const BLEND_EQUATION_RGB: GLenum             = aliasFor(__js_BLEND_EQUATION_RGB)
  const BLEND_EQUATION_ALPHA: GLenum           = aliasFor(__js_BLEND_EQUATION_ALPHA)

  # BlendSubtract
  const FUNC_SUBTRACT: GLenum                  = aliasFor(__js_FUNC_SUBTRACT)
  const FUNC_REVERSE_SUBTRACT: GLenum          = aliasFor(__js_FUNC_REVERSE_SUBTRACT)

  # Separate Blend Functions
  const BLEND_DST_RGB: GLenum                  = aliasFor(__js_BLEND_DST_RGB)
  const BLEND_SRC_RGB: GLenum                  = aliasFor(__js_BLEND_SRC_RGB)
  const BLEND_DST_ALPHA: GLenum                = aliasFor(__js_BLEND_DST_ALPHA)
  const BLEND_SRC_ALPHA: GLenum                = aliasFor(__js_BLEND_SRC_ALPHA)
  const CONSTANT_COLOR: GLenum                 = aliasFor(__js_CONSTANT_COLOR)
  const ONE_MINUS_CONSTANT_COLOR: GLenum       = aliasFor(__js_ONE_MINUS_CONSTANT_COLOR)
  const CONSTANT_ALPHA: GLenum                 = aliasFor(__js_CONSTANT_ALPHA)
  const ONE_MINUS_CONSTANT_ALPHA: GLenum       = aliasFor(__js_ONE_MINUS_CONSTANT_ALPHA)
  const BLEND_COLOR: GLenum                    = aliasFor(__js_BLEND_COLOR)

  # Buffer Objects
  const ARRAY_BUFFER: GLenum                   = aliasFor(__js_ARRAY_BUFFER)
  const ELEMENT_ARRAY_BUFFER: GLenum           = aliasFor(__js_ELEMENT_ARRAY_BUFFER)
  const ARRAY_BUFFER_BINDING: GLenum           = aliasFor(__js_ARRAY_BUFFER_BINDING)
  const ELEMENT_ARRAY_BUFFER_BINDING: GLenum   = aliasFor(__js_ELEMENT_ARRAY_BUFFER_BINDING)

  const STREAM_DRAW: GLenum                    = aliasFor(__js_STREAM_DRAW)
  const STATIC_DRAW: GLenum                    = aliasFor(__js_STATIC_DRAW)
  const DYNAMIC_DRAW: GLenum                   = aliasFor(__js_DYNAMIC_DRAW)

  const BUFFER_SIZE: GLenum                    = aliasFor(__js_BUFFER_SIZE)
  const BUFFER_USAGE: GLenum                   = aliasFor(__js_BUFFER_USAGE)

  const CURRENT_VERTEX_ATTRIB: GLenum          = aliasFor(__js_CURRENT_VERTEX_ATTRIB)

  # CullFaceMode
  const FRONT: GLenum                          = aliasFor(__js_FRONT)
  const BACK: GLenum                           = aliasFor(__js_BACK)
  const FRONT_AND_BACK: GLenum                 = aliasFor(__js_FRONT_AND_BACK)

  # DepthFunction
  #      NEVER
  #      LESS
  #      EQUAL
  #      LEQUAL
  #      GREATER
  #      NOTEQUAL
  #      GEQUAL
  #      ALWAYS

  # EnableCap
  # TEXTURE_2D
  const CULL_FACE: GLenum                      = aliasFor(__js_CULL_FACE)
  const BLEND: GLenum                          = aliasFor(__js_BLEND)
  const DITHER: GLenum                         = aliasFor(__js_DITHER)
  const STENCIL_TEST: GLenum                   = aliasFor(__js_STENCIL_TEST)
  const DEPTH_TEST: GLenum                     = aliasFor(__js_DEPTH_TEST)
  const SCISSOR_TEST: GLenum                   = aliasFor(__js_SCISSOR_TEST)
  const POLYGON_OFFSET_FILL: GLenum            = aliasFor(__js_POLYGON_OFFSET_FILL)
  const SAMPLE_ALPHA_TO_COVERAGE: GLenum       = aliasFor(__js_SAMPLE_ALPHA_TO_COVERAGE)
  const SAMPLE_COVERAGE: GLenum                = aliasFor(__js_SAMPLE_COVERAGE)

  # ErrorCode
  const NO_ERROR: GLenum                       = aliasFor(__js_NO_ERROR)
  const INVALID_ENUM: GLenum                   = aliasFor(__js_INVALID_ENUM)
  const INVALID_VALUE: GLenum                  = aliasFor(__js_INVALID_VALUE)
  const INVALID_OPERATION: GLenum              = aliasFor(__js_INVALID_OPERATION)
  const OUT_OF_MEMORY: GLenum                  = aliasFor(__js_OUT_OF_MEMORY)

  # FrontFaceDirection
  const CW: GLenum                             = aliasFor(__js_CW)
  const CCW: GLenum                            = aliasFor(__js_CCW)

  # GetPName
  const LINE_WIDTH: GLenum                     = aliasFor(__js_LINE_WIDTH)
  const ALIASED_POINT_SIZE_RANGE: GLenum       = aliasFor(__js_ALIASED_POINT_SIZE_RANGE)
  const ALIASED_LINE_WIDTH_RANGE: GLenum       = aliasFor(__js_ALIASED_LINE_WIDTH_RANGE)
  const CULL_FACE_MODE: GLenum                 = aliasFor(__js_CULL_FACE_MODE)
  const FRONT_FACE: GLenum                     = aliasFor(__js_FRONT_FACE)
  const DEPTH_RANGE: GLenum                    = aliasFor(__js_DEPTH_RANGE)
  const DEPTH_WRITEMASK: GLenum                = aliasFor(__js_DEPTH_WRITEMASK)
  const DEPTH_CLEAR_VALUE: GLenum              = aliasFor(__js_DEPTH_CLEAR_VALUE)
  const DEPTH_FUNC: GLenum                     = aliasFor(__js_DEPTH_FUNC)
  const STENCIL_CLEAR_VALUE: GLenum            = aliasFor(__js_STENCIL_CLEAR_VALUE)
  const STENCIL_FUNC: GLenum                   = aliasFor(__js_STENCIL_FUNC)
  const STENCIL_FAIL: GLenum                   = aliasFor(__js_STENCIL_FAIL)
  const STENCIL_PASS_DEPTH_FAIL: GLenum        = aliasFor(__js_STENCIL_PASS_DEPTH_FAIL)
  const STENCIL_PASS_DEPTH_PASS: GLenum        = aliasFor(__js_STENCIL_PASS_DEPTH_PASS)
  const STENCIL_REF: GLenum                    = aliasFor(__js_STENCIL_REF)
  const STENCIL_VALUE_MASK: GLenum             = aliasFor(__js_STENCIL_VALUE_MASK)
  const STENCIL_WRITEMASK: GLenum              = aliasFor(__js_STENCIL_WRITEMASK)
  const STENCIL_BACK_FUNC: GLenum              = aliasFor(__js_STENCIL_BACK_FUNC)
  const STENCIL_BACK_FAIL: GLenum              = aliasFor(__js_STENCIL_BACK_FAIL)
  const STENCIL_BACK_PASS_DEPTH_FAIL: GLenum   = aliasFor(__js_STENCIL_BACK_PASS_DEPTH_FAIL)
  const STENCIL_BACK_PASS_DEPTH_PASS: GLenum   = aliasFor(__js_STENCIL_BACK_PASS_DEPTH_PASS)
  const STENCIL_BACK_REF: GLenum               = aliasFor(__js_STENCIL_BACK_REF)
  const STENCIL_BACK_VALUE_MASK: GLenum        = aliasFor(__js_STENCIL_BACK_VALUE_MASK)
  const STENCIL_BACK_WRITEMASK: GLenum         = aliasFor(__js_STENCIL_BACK_WRITEMASK)
  const VIEWPORT: GLenum                       = aliasFor(__js_VIEWPORT)
  const SCISSOR_BOX: GLenum                    = aliasFor(__js_SCISSOR_BOX)
  #      SCISSOR_TEST
  const COLOR_CLEAR_VALUE: GLenum              = aliasFor(__js_COLOR_CLEAR_VALUE)
  const COLOR_WRITEMASK: GLenum                = aliasFor(__js_COLOR_WRITEMASK)
  const UNPACK_ALIGNMENT: GLenum               = aliasFor(__js_UNPACK_ALIGNMENT)
  const PACK_ALIGNMENT: GLenum                 = aliasFor(__js_PACK_ALIGNMENT)
  const MAX_TEXTURE_SIZE: GLenum               = aliasFor(__js_MAX_TEXTURE_SIZE)
  const MAX_VIEWPORT_DIMS: GLenum              = aliasFor(__js_MAX_VIEWPORT_DIMS)
  const SUBPIXEL_BITS: GLenum                  = aliasFor(__js_SUBPIXEL_BITS)
  const RED_BITS: GLenum                       = aliasFor(__js_RED_BITS)
  const GREEN_BITS: GLenum                     = aliasFor(__js_GREEN_BITS)
  const BLUE_BITS: GLenum                      = aliasFor(__js_BLUE_BITS)
  const ALPHA_BITS: GLenum                     = aliasFor(__js_ALPHA_BITS)
  const DEPTH_BITS: GLenum                     = aliasFor(__js_DEPTH_BITS)
  const STENCIL_BITS: GLenum                   = aliasFor(__js_STENCIL_BITS)
  const POLYGON_OFFSET_UNITS: GLenum           = aliasFor(__js_POLYGON_OFFSET_UNITS)
  #      POLYGON_OFFSET_FILL
  const POLYGON_OFFSET_FACTOR: GLenum          = aliasFor(__js_POLYGON_OFFSET_FACTOR)
  const TEXTURE_BINDING_2D: GLenum             = aliasFor(__js_TEXTURE_BINDING_2D)
  const SAMPLE_BUFFERS: GLenum                 = aliasFor(__js_SAMPLE_BUFFERS)
  const SAMPLES: GLenum                        = aliasFor(__js_SAMPLES)
  const SAMPLE_COVERAGE_VALUE: GLenum          = aliasFor(__js_SAMPLE_COVERAGE_VALUE)
  const SAMPLE_COVERAGE_INVERT: GLenum         = aliasFor(__js_SAMPLE_COVERAGE_INVERT)

  # GetTextureParameter
  #      TEXTURE_MAG_FILTER
  #      TEXTURE_MIN_FILTER
  #      TEXTURE_WRAP_S
  #      TEXTURE_WRAP_T

  const COMPRESSED_TEXTURE_FORMATS: GLenum     = aliasFor(__js_COMPRESSED_TEXTURE_FORMATS)

  # HintMode
  const DONT_CARE: GLenum                      = aliasFor(__js_DONT_CARE)
  const FASTEST: GLenum                        = aliasFor(__js_FASTEST)
  const NICEST: GLenum                         = aliasFor(__js_NICEST)

  # HintTarget
  const GENERATE_MIPMAP_HINT: GLenum            = aliasFor(__js_GENERATE_MIPMAP_HINT)

  # DataType
  const BYTE: GLenum                           = aliasFor(__js_BYTE)
  const UNSIGNED_BYTE: GLenum                  = aliasFor(__js_UNSIGNED_BYTE)
  const SHORT: GLenum                          = aliasFor(__js_SHORT)
  const UNSIGNED_SHORT: GLenum                 = aliasFor(__js_UNSIGNED_SHORT)
  const INT: GLenum                            = aliasFor(__js_INT)
  const UNSIGNED_INT: GLenum                   = aliasFor(__js_UNSIGNED_INT)
  const FLOAT: GLenum                          = aliasFor(__js_FLOAT)

  # PixelFormat
  const DEPTH_COMPONENT: GLenum                = aliasFor(__js_DEPTH_COMPONENT)
  const ALPHA: GLenum                          = aliasFor(__js_ALPHA)
  const RGB: GLenum                            = aliasFor(__js_RGB)
  const RGBA: GLenum                           = aliasFor(__js_RGBA)
  const LUMINANCE: GLenum                      = aliasFor(__js_LUMINANCE)
  const LUMINANCE_ALPHA: GLenum                = aliasFor(__js_LUMINANCE_ALPHA)

  # PixelType
  #      UNSIGNED_BYTE
  const UNSIGNED_SHORT_4_4_4_4: GLenum         = aliasFor(__js_UNSIGNED_SHORT_4_4_4_4)
  const UNSIGNED_SHORT_5_5_5_1: GLenum         = aliasFor(__js_UNSIGNED_SHORT_5_5_5_1)
  const UNSIGNED_SHORT_5_6_5: GLenum           = aliasFor(__js_UNSIGNED_SHORT_5_6_5)

  # Shaders
  const FRAGMENT_SHADER: GLenum                  = aliasFor(__js_FRAGMENT_SHADER)
  const VERTEX_SHADER: GLenum                    = aliasFor(__js_VERTEX_SHADER)
  const MAX_VERTEX_ATTRIBS: GLenum               = aliasFor(__js_MAX_VERTEX_ATTRIBS)
  const MAX_VERTEX_UNIFORM_VECTORS: GLenum       = aliasFor(__js_MAX_VERTEX_UNIFORM_VECTORS)
  const MAX_VARYING_VECTORS: GLenum              = aliasFor(__js_MAX_VARYING_VECTORS)
  const MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum = aliasFor(__js_MAX_COMBINED_TEXTURE_IMAGE_UNITS)
  const MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum   = aliasFor(__js_MAX_VERTEX_TEXTURE_IMAGE_UNITS)
  const MAX_TEXTURE_IMAGE_UNITS: GLenum          = aliasFor(__js_MAX_TEXTURE_IMAGE_UNITS)
  const MAX_FRAGMENT_UNIFORM_VECTORS: GLenum     = aliasFor(__js_MAX_FRAGMENT_UNIFORM_VECTORS)
  const SHADER_TYPE: GLenum                      = aliasFor(__js_SHADER_TYPE)
  const DELETE_STATUS: GLenum                    = aliasFor(__js_DELETE_STATUS)
  const LINK_STATUS: GLenum                      = aliasFor(__js_LINK_STATUS)
  const VALIDATE_STATUS: GLenum                  = aliasFor(__js_VALIDATE_STATUS)
  const ATTACHED_SHADERS: GLenum                 = aliasFor(__js_ATTACHED_SHADERS)
  const ACTIVE_UNIFORMS: GLenum                  = aliasFor(__js_ACTIVE_UNIFORMS)
  const ACTIVE_ATTRIBUTES: GLenum                = aliasFor(__js_ACTIVE_ATTRIBUTES)
  const SHADING_LANGUAGE_VERSION: GLenum         = aliasFor(__js_SHADING_LANGUAGE_VERSION)
  const CURRENT_PROGRAM: GLenum                  = aliasFor(__js_CURRENT_PROGRAM)

  # StencilFunction
  const NEVER: GLenum                          = aliasFor(__js_NEVER)
  const LESS: GLenum                           = aliasFor(__js_LESS)
  const EQUAL: GLenum                          = aliasFor(__js_EQUAL)
  const LEQUAL: GLenum                         = aliasFor(__js_LEQUAL)
  const GREATER: GLenum                        = aliasFor(__js_GREATER)
  const NOTEQUAL: GLenum                       = aliasFor(__js_NOTEQUAL)
  const GEQUAL: GLenum                         = aliasFor(__js_GEQUAL)
  const ALWAYS: GLenum                         = aliasFor(__js_ALWAYS)

  # StencilOp
  #      ZERO
  const KEEP: GLenum                           = aliasFor(__js_KEEP)
  const REPLACE: GLenum                        = aliasFor(__js_REPLACE)
  const INCR: GLenum                           = aliasFor(__js_INCR)
  const DECR: GLenum                           = aliasFor(__js_DECR)
  const INVERT: GLenum                         = aliasFor(__js_INVERT)
  const INCR_WRAP: GLenum                      = aliasFor(__js_INCR_WRAP)
  const DECR_WRAP: GLenum                      = aliasFor(__js_DECR_WRAP)

  # StringName
  const VENDOR: GLenum                         = aliasFor(__js_VENDOR)
  const RENDERER: GLenum                       = aliasFor(__js_RENDERER)
  const VERSION: GLenum                        = aliasFor(__js_VERSION)

  # TextureMagFilter
  const NEAREST: GLenum                        = aliasFor(__js_NEAREST)
  const LINEAR: GLenum                         = aliasFor(__js_LINEAR)

  # TextureMinFilter
  #      NEAREST
  #      LINEAR
  const NEAREST_MIPMAP_NEAREST: GLenum         = aliasFor(__js_NEAREST_MIPMAP_NEAREST)
  const LINEAR_MIPMAP_NEAREST: GLenum          = aliasFor(__js_LINEAR_MIPMAP_NEAREST)
  const NEAREST_MIPMAP_LINEAR: GLenum          = aliasFor(__js_NEAREST_MIPMAP_LINEAR)
  const LINEAR_MIPMAP_LINEAR: GLenum           = aliasFor(__js_LINEAR_MIPMAP_LINEAR)

  # TextureParameterName
  const TEXTURE_MAG_FILTER: GLenum             = aliasFor(__js_TEXTURE_MAG_FILTER)
  const TEXTURE_MIN_FILTER: GLenum             = aliasFor(__js_TEXTURE_MIN_FILTER)
  const TEXTURE_WRAP_S: GLenum                 = aliasFor(__js_TEXTURE_WRAP_S)
  const TEXTURE_WRAP_T: GLenum                 = aliasFor(__js_TEXTURE_WRAP_T)

  # TextureTarget
  const TEXTURE_2D: GLenum                     = aliasFor(__js_TEXTURE_2D)
  const TEXTURE: GLenum                        = aliasFor(__js_TEXTURE)

  const TEXTURE_CUBE_MAP: GLenum               = aliasFor(__js_TEXTURE_CUBE_MAP)
  const TEXTURE_BINDING_CUBE_MAP: GLenum       = aliasFor(__js_TEXTURE_BINDING_CUBE_MAP)
  const TEXTURE_CUBE_MAP_POSITIVE_X: GLenum    = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_X)
  const TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum    = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_X)
  const TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum    = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_Y)
  const TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum    = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_Y)
  const TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum    = aliasFor(__js_TEXTURE_CUBE_MAP_POSITIVE_Z)
  const TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum    = aliasFor(__js_TEXTURE_CUBE_MAP_NEGATIVE_Z)
  const MAX_CUBE_MAP_TEXTURE_SIZE: GLenum      = aliasFor(__js_MAX_CUBE_MAP_TEXTURE_SIZE)

  # TextureUnit
  const TEXTURE0: GLenum                       = aliasFor(__js_TEXTURE0)
  const TEXTURE1: GLenum                       = aliasFor(__js_TEXTURE1)
  const TEXTURE2: GLenum                       = aliasFor(__js_TEXTURE2)
  const TEXTURE3: GLenum                       = aliasFor(__js_TEXTURE3)
  const TEXTURE4: GLenum                       = aliasFor(__js_TEXTURE4)
  const TEXTURE5: GLenum                       = aliasFor(__js_TEXTURE5)
  const TEXTURE6: GLenum                       = aliasFor(__js_TEXTURE6)
  const TEXTURE7: GLenum                       = aliasFor(__js_TEXTURE7)
  const TEXTURE8: GLenum                       = aliasFor(__js_TEXTURE8)
  const TEXTURE9: GLenum                       = aliasFor(__js_TEXTURE9)
  const TEXTURE10: GLenum                      = aliasFor(__js_TEXTURE10)
  const TEXTURE11: GLenum                      = aliasFor(__js_TEXTURE11)
  const TEXTURE12: GLenum                      = aliasFor(__js_TEXTURE12)
  const TEXTURE13: GLenum                      = aliasFor(__js_TEXTURE13)
  const TEXTURE14: GLenum                      = aliasFor(__js_TEXTURE14)
  const TEXTURE15: GLenum                      = aliasFor(__js_TEXTURE15)
  const TEXTURE16: GLenum                      = aliasFor(__js_TEXTURE16)
  const TEXTURE17: GLenum                      = aliasFor(__js_TEXTURE17)
  const TEXTURE18: GLenum                      = aliasFor(__js_TEXTURE18)
  const TEXTURE19: GLenum                      = aliasFor(__js_TEXTURE19)
  const TEXTURE20: GLenum                      = aliasFor(__js_TEXTURE20)
  const TEXTURE21: GLenum                      = aliasFor(__js_TEXTURE21)
  const TEXTURE22: GLenum                      = aliasFor(__js_TEXTURE22)
  const TEXTURE23: GLenum                      = aliasFor(__js_TEXTURE23)
  const TEXTURE24: GLenum                      = aliasFor(__js_TEXTURE24)
  const TEXTURE25: GLenum                      = aliasFor(__js_TEXTURE25)
  const TEXTURE26: GLenum                      = aliasFor(__js_TEXTURE26)
  const TEXTURE27: GLenum                      = aliasFor(__js_TEXTURE27)
  const TEXTURE28: GLenum                      = aliasFor(__js_TEXTURE28)
  const TEXTURE29: GLenum                      = aliasFor(__js_TEXTURE29)
  const TEXTURE30: GLenum                      = aliasFor(__js_TEXTURE30)
  const TEXTURE31: GLenum                      = aliasFor(__js_TEXTURE31)
  const ACTIVE_TEXTURE: GLenum                 = aliasFor(__js_ACTIVE_TEXTURE)

  # TextureWrapMode
  const REPEAT: GLenum                         = aliasFor(__js_REPEAT)
  const CLAMP_TO_EDGE: GLenum                  = aliasFor(__js_CLAMP_TO_EDGE)
  const MIRRORED_REPEAT: GLenum                = aliasFor(__js_MIRRORED_REPEAT)

  # Uniform Types
  const FLOAT_VEC2: GLenum                     = aliasFor(__js_FLOAT_VEC2)
  const FLOAT_VEC3: GLenum                     = aliasFor(__js_FLOAT_VEC3)
  const FLOAT_VEC4: GLenum                     = aliasFor(__js_FLOAT_VEC4)
  const INT_VEC2: GLenum                       = aliasFor(__js_INT_VEC2)
  const INT_VEC3: GLenum                       = aliasFor(__js_INT_VEC3)
  const INT_VEC4: GLenum                       = aliasFor(__js_INT_VEC4)
  const BOOL: GLenum                           = aliasFor(__js_BOOL)
  const BOOL_VEC2: GLenum                      = aliasFor(__js_BOOL_VEC2)
  const BOOL_VEC3: GLenum                      = aliasFor(__js_BOOL_VEC3)
  const BOOL_VEC4: GLenum                      = aliasFor(__js_BOOL_VEC4)
  const FLOAT_MAT2: GLenum                     = aliasFor(__js_FLOAT_MAT2)
  const FLOAT_MAT3: GLenum                     = aliasFor(__js_FLOAT_MAT3)
  const FLOAT_MAT4: GLenum                     = aliasFor(__js_FLOAT_MAT4)
  const SAMPLER_2D: GLenum                     = aliasFor(__js_SAMPLER_2D)
  const SAMPLER_CUBE: GLenum                   = aliasFor(__js_SAMPLER_CUBE)

  # Vertex Arrays
  const VERTEX_ATTRIB_ARRAY_ENABLED: GLenum        = aliasFor(__js_VERTEX_ATTRIB_ARRAY_ENABLED)
  const VERTEX_ATTRIB_ARRAY_SIZE: GLenum           = aliasFor(__js_VERTEX_ATTRIB_ARRAY_SIZE)
  const VERTEX_ATTRIB_ARRAY_STRIDE: GLenum         = aliasFor(__js_VERTEX_ATTRIB_ARRAY_STRIDE)
  const VERTEX_ATTRIB_ARRAY_TYPE: GLenum           = aliasFor(__js_VERTEX_ATTRIB_ARRAY_TYPE)
  const VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum     = aliasFor(__js_VERTEX_ATTRIB_ARRAY_NORMALIZED)
  const VERTEX_ATTRIB_ARRAY_POINTER: GLenum        = aliasFor(__js_VERTEX_ATTRIB_ARRAY_POINTER)
  const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum = aliasFor(__js_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)

  # Read Format
  const IMPLEMENTATION_COLOR_READ_TYPE: GLenum   = aliasFor(__js_IMPLEMENTATION_COLOR_READ_TYPE)
  const IMPLEMENTATION_COLOR_READ_FORMAT: GLenum = aliasFor(__js_IMPLEMENTATION_COLOR_READ_FORMAT)

  # Shader Source
  const COMPILE_STATUS: GLenum                 = aliasFor(__js_COMPILE_STATUS)

  # Shader Precision-Specified Types
  const LOW_FLOAT: GLenum                      = aliasFor(__js_LOW_FLOAT)
  const MEDIUM_FLOAT: GLenum                   = aliasFor(__js_MEDIUM_FLOAT)
  const HIGH_FLOAT: GLenum                     = aliasFor(__js_HIGH_FLOAT)
  const LOW_INT: GLenum                        = aliasFor(__js_LOW_INT)
  const MEDIUM_INT: GLenum                     = aliasFor(__js_MEDIUM_INT)
  const HIGH_INT: GLenum                       = aliasFor(__js_HIGH_INT)

  # Framebuffer Object.
  const FRAMEBUFFER: GLenum                    = aliasFor(__js_FRAMEBUFFER)
  const RENDERBUFFER: GLenum                   = aliasFor(__js_RENDERBUFFER)

  const RGBA4: GLenum                          = aliasFor(__js_RGBA4)
  const RGB5_A1: GLenum                        = aliasFor(__js_RGB5_A1)
  const RGBA8: GLenum                          = aliasFor(__js_RGBA8)
  const RGB565: GLenum                         = aliasFor(__js_RGB565)
  const DEPTH_COMPONENT16: GLenum              = aliasFor(__js_DEPTH_COMPONENT16)
  const STENCIL_INDEX8: GLenum                 = aliasFor(__js_STENCIL_INDEX8)
  const DEPTH_STENCIL: GLenum                  = aliasFor(__js_DEPTH_STENCIL)

  const RENDERBUFFER_WIDTH: GLenum             = aliasFor(__js_RENDERBUFFER_WIDTH)
  const RENDERBUFFER_HEIGHT: GLenum            = aliasFor(__js_RENDERBUFFER_HEIGHT)
  const RENDERBUFFER_INTERNAL_FORMAT: GLenum   = aliasFor(__js_RENDERBUFFER_INTERNAL_FORMAT)
  const RENDERBUFFER_RED_SIZE: GLenum          = aliasFor(__js_RENDERBUFFER_RED_SIZE)
  const RENDERBUFFER_GREEN_SIZE: GLenum        = aliasFor(__js_RENDERBUFFER_GREEN_SIZE)
  const RENDERBUFFER_BLUE_SIZE: GLenum         = aliasFor(__js_RENDERBUFFER_BLUE_SIZE)
  const RENDERBUFFER_ALPHA_SIZE: GLenum        = aliasFor(__js_RENDERBUFFER_ALPHA_SIZE)
  const RENDERBUFFER_DEPTH_SIZE: GLenum        = aliasFor(__js_RENDERBUFFER_DEPTH_SIZE)
  const RENDERBUFFER_STENCIL_SIZE: GLenum      = aliasFor(__js_RENDERBUFFER_STENCIL_SIZE)

  const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum           = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)
  const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum           = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)
  const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum         = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL)
  const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE)

  const COLOR_ATTACHMENT0: GLenum              = aliasFor(__js_COLOR_ATTACHMENT0)
  const DEPTH_ATTACHMENT: GLenum               = aliasFor(__js_DEPTH_ATTACHMENT)
  const STENCIL_ATTACHMENT: GLenum             = aliasFor(__js_STENCIL_ATTACHMENT)
  const DEPTH_STENCIL_ATTACHMENT: GLenum       = aliasFor(__js_DEPTH_STENCIL_ATTACHMENT)

  const NONE: GLenum                           = aliasFor(__js_NONE)

  const FRAMEBUFFER_COMPLETE: GLenum                      = aliasFor(__js_FRAMEBUFFER_COMPLETE)
  const FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum         = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)
  const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)
  const FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum         = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)
  const FRAMEBUFFER_UNSUPPORTED: GLenum                   = aliasFor(__js_FRAMEBUFFER_UNSUPPORTED)

  const FRAMEBUFFER_BINDING: GLenum            = aliasFor(__js_FRAMEBUFFER_BINDING)
  const RENDERBUFFER_BINDING: GLenum           = aliasFor(__js_RENDERBUFFER_BINDING)
  const MAX_RENDERBUFFER_SIZE: GLenum          = aliasFor(__js_MAX_RENDERBUFFER_SIZE)

  const INVALID_FRAMEBUFFER_OPERATION: GLenum  = aliasFor(__js_INVALID_FRAMEBUFFER_OPERATION)

  # WebGL-specific enums
  const UNPACK_FLIP_Y_WEBGL: GLenum            = aliasFor(__js_UNPACK_FLIP_Y_WEBGL)
  const UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum = aliasFor(__js_UNPACK_PREMULTIPLY_ALPHA_WEBGL)
  const CONTEXT_LOST_WEBGL: GLenum             = aliasFor(__js_CONTEXT_LOST_WEBGL)
  const UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum = aliasFor(__js_UNPACK_COLORSPACE_CONVERSION_WEBGL)
  const BROWSER_DEFAULT_WEBGL: GLenum          = aliasFor(__js_BROWSER_DEFAULT_WEBGL)

  # readonly attribute (HTMLCanvasElement or OffscreenCanvas) canvas;
  const drawingBufferWidth: GLsizei = aliasFor(__js_drawingBufferWidth)
  const drawingBufferHeight: GLsizei = aliasFor(__js_drawingBufferHeight)
  const drawingBufferFormat: GLenum = aliasFor(__js_drawingBufferFormat)

  # Upon context creation, drawingBufferColorSpace and unpackColorSpace both
  # default to the value "srgb".
  var drawingBufferColorSpace: PredefinedColorSpace = aliasFor(__js_drawingBufferColorSpace)
  var unpackColorSpace: PredefinedColorSpace = aliasFor(__js_unpackColorSpace)

  # [WebGLHandlesContextLoss] WebGLContextAttributes? getContextAttributes();
  function isContextLost(): Bool { aliasFor(__js_isContextLost) }

  # sequence<DOMString>? getSupportedExtensions();
  # object? getExtension(DOMString name);

  function drawingBufferStorage(sizedFormat: GLenum, width: Number, height: Number) { aliasFor(__js_drawingBufferStorage) }

  function activeTexture(texture: GLenum) { aliasFor(__js_activeTexture) }
  function attachShader(program: WebGLProgram, shader: WebGLShader) { aliasFor(__js_attachShader) }
  function bindAttribLocation(program: WebGLProgram, index: GLuint, name: DOMString) { aliasFor(__js_bindAttribLocation) }
  function bindBuffer(target: GLenum, buffer: WebGLBuffer?) { aliasFor(__js_bindBuffer) }
  function bindFramebuffer(target: GLenum, framebuffer: WebGLFramebuffer?) { aliasFor(__js_bindFramebuffer) }
  function bindRenderbuffer(target: GLenum, renderbuffer: WebGLRenderbuffer?) { aliasFor(__js_bindRenderbuffer) }
  function bindTexture(target: GLenum, texture: WebGLTexture?) { aliasFor(__js_bindTexture) }
  function blendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) { aliasFor(__js_blendColor) }
  function blendEquation(mode: GLenum) { aliasFor(__js_blendEquation) }
  function blendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) { aliasFor(__js_blendEquationSeparate) }
  function blendFunc(sfactor: GLenum, dfactor: GLenum) { aliasFor(__js_blendFunc) }
  function blendFuncSeparate(srcRGB: GLenum, dstRGB: GLenum,
                             srcAlpha: GLenum, dstAlpha: GLenum) { aliasFor(__js_blendFuncSeparate) }

  function checkFramebufferStatus(target: GLenum): GLenum { aliasFor(__js_checkFramebufferStatus) }
  function clear(mask: GLbitfield) {
    """
    The WebGLRenderingContext.clear() method of the WebGL API clears buffers
    to preset values.

    The preset values can be set by clearColor(), clearDepth() or clearStencil().

    The scissor box, dithering, and buffer writemasks can affect the clear() method.

    * Parameters
      * `mask`
        A GLbitfield bitwise OR mask that indicates the buffers to be cleared.
        Possible values are:
        * gl.COLOR_BUFFER_BIT
        * gl.DEPTH_BUFFER_BIT
        * gl.STENCIL_BUFFER_BIT
    """
    aliasFor(__js_clear)
  }
  function clearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) {
    """
    Specifies the color values used when clearing color buffers.
    """
    aliasFor(__js_clearColor)
  }
  function clearDepth(depth: GLclampf) { aliasFor(__js_clearDepth) }
  function clearStencil(s: GLint) { aliasFor(__js_clearStencil) }
  function colorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) { aliasFor(__js_colorMask) }
  function compileShader(shader: WebGLShader) { aliasFor(__js_compileShader) }

  function copyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum,
                           x: GLint, y: GLint, width: GLsizei, height: GLsizei,
                           border: GLint) { aliasFor(__js_copyTexImage2D) }
  function copyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint,
                              x: GLint, y: GLint, width: GLsizei, height: GLsizei) { aliasFor(__js_copyTexSubImage2D) }

  function createBuffer(): WebGLBuffer? { aliasFor(__js_createBuffer) }
  function createFramebuffer(): WebGLFramebuffer? { aliasFor(__js_createFramebuffer) }
  function createProgram(): WebGLProgram? { aliasFor(__js_createProgram) }
  function createRenderbuffer(): WebGLRenderbuffer? { aliasFor(__js_createRenderbuffer) }
  function createShader(type: GLenum): WebGLShader? { aliasFor(__js_createShader) }
  function createTexture(): WebGLTexture? { aliasFor(__js_createTexture) }

  function cullFace(mode: GLenum) { aliasFor(__js_cullFace) }

  function deleteBuffer(buffer: WebGLBuffer?) { aliasFor(__js_deleteBuffer) }
  function deleteFramebuffer(framebuffer: WebGLFramebuffer?) { aliasFor(__js_deleteFramebuffer) }
  function deleteProgram(program: WebGLProgram?) { aliasFor(__js_deleteProgram) }
  function deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?) { aliasFor(__js_deleteRenderbuffer) }
  function deleteShader(shader: WebGLShader?) { aliasFor(__js_deleteShader) }
  function deleteTexture(texture: WebGLTexture?) { aliasFor(__js_deleteTexture) }

  function depthFunc(func: GLenum) { aliasFor(__js_depthFunc) }
  function depthMask(flag: GLboolean) { aliasFor(__js_depthMask) }
  function depthRange(zNear: GLclampf, zFar: GLclampf) { aliasFor(__js_depthRange) }
  function detachShader(program: WebGLProgram, shader: WebGLShader) { aliasFor(__js_detachShader) }
  function disable(cap: GLenum) { aliasFor(__js_disable) }
  function disableVertexAttribArray(index: GLuint) { aliasFor(__js_disableVertexAttribArray) }
  function drawArrays(mode: GLenum, first: GLint, count: GLsizei) { aliasFor(__js_drawArrays) }
  function drawElements(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr) { aliasFor(__js_drawElements) }

  function enable(cap: GLenum) { aliasFor(__js_enable) }
  function enableVertexAttribArray(index: GLuint) { aliasFor(__js_enableVertexAttribArray) }
  function finish() { aliasFor(__js_finish) }
  function flush() { aliasFor(__js_flush) }
  function framebufferRenderbuffer(target: GLenum, attachment: GLenum,
                                    renderbuffertarget: GLenum,
                                    renderbuffer: WebGLRenderbuffer?) { aliasFor(__js_framebufferRenderbuffer) }
  function framebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum,
                                 texture: WebGLTexture?, level: GLint) { aliasFor(__js_framebufferTexture2D) }
  function frontFace(mode: GLenum) { aliasFor(__js_frontFace) }

  function generateMipmap(target: GLenum) { aliasFor(__js_generateMipmap) }

  function getActiveAttrib(program: WebGLProgram, index: GLuint): WebGLActiveInfo? { aliasFor(__js_getActiveAttrib) }
  function getActiveUniform(program: WebGLProgram, index: GLuint): WebGLActiveInfo? { aliasFor(__js_getActiveUniform) }
  function getAttachedShaders(program: WebGLProgram): List[WebGLShader]? { aliasFor(__js_getAttachedShaders) }

  function getAttribLocation(program: WebGLProgram, name: DOMString): GLint { aliasFor(__js_getAttribLocation) }

  function getBufferParameter(target: GLenum, pname: GLenum) { aliasFor(__js_getBufferParameter) }
  function getParameter(pname: GLenum) { aliasFor(__js_getParameter) }

  function getError(): GLenum { aliasFor(__js_getError) }

  function getFramebufferAttachmentParameter(target: GLenum, attachment: GLenum,
                                        pname: GLenum) { aliasFor(__js_getFramebufferAttachmentParameter) }
  function getProgramParameter(program: WebGLProgram, pname: GLenum) { aliasFor(__js_getProgramParameter) }
  function getProgramInfoLog(program: WebGLProgram): DOMString? { aliasFor(__js_getProgramInfoLog) }
  function getRenderbufferParameter(target: GLenum, pname: GLenum) { aliasFor(__js_getRenderbufferParameter) }
  function getShaderParameter(shader: WebGLShader, pname: GLenum) { aliasFor(__js_getShaderParameter) }
  function getShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum): WebGLShaderPrecisionFormat? { aliasFor(__js_getShaderPrecisionFormat) }
  function getShaderInfoLog(shader: WebGLShader): DOMString? { aliasFor(__js_getShaderInfoLog) }

  function getShaderSource(shader: WebGLShader): DOMString? { aliasFor(__js_getShaderSource) }

  function getTexParameter(target: GLenum, pname: GLenum) { aliasFor(__js_getTexParameter) }

  function getUniform(program: WebGLProgram, location: WebGLUniformLocation) { aliasFor(__js_getUniform) }

  function getUniformLocation(program: WebGLProgram, name: DOMString): WebGLUniformLocation? { aliasFor(__js_getUniformLocation) }

  function getVertexAttrib(index: GLuint, pname: GLenum) { aliasFor(__js_getVertexAttrib) }

  function getVertexAttribOffset(index: GLuint, pname: GLenum): GLintptr { aliasFor(__js_getVertexAttribOffset) }

  function hint(target: GLenum, mode: GLenum) { aliasFor(__js_hint) }
  function isBuffer(buffer: WebGLBuffer?): GLboolean { aliasFor(__js_isBuffer) }
  function isEnabled(cap: GLenum): GLboolean { aliasFor(__js_isEnabled) }
  function isFramebuffer(framebuffer: WebGLFramebuffer?): GLboolean { aliasFor(__js_isFramebuffer) }
  function isProgram(program: WebGLProgram?): GLboolean { aliasFor(__js_isProgram) }
  function isRenderbuffer(renderbuffer: WebGLRenderbuffer?): GLboolean { aliasFor(__js_isRenderbuffer) }
  function isShader(shader: WebGLShader?): GLboolean { aliasFor(__js_isShader) }
  function isTexture(texture: WebGLTexture?): GLboolean { aliasFor(__js_isTexture) }
  function lineWidth(width: GLfloat) { aliasFor(__js_lineWidth) }
  function linkProgram(program: WebGLProgram) { aliasFor(__js_linkProgram) }
  function pixelStorei(pname: GLenum, param: GLint) { aliasFor(__js_pixelStorei) }
  function polygonOffset(factor: GLfloat, units: GLfloat) { aliasFor(__js_polygonOffset) }

  function renderbufferStorage(target: GLenum, internalformat: GLenum,
                                width: GLsizei, height: GLsizei) { aliasFor(__js_renderbufferStorage) }
  function sampleCoverage(value: GLclampf, invert: GLboolean) { aliasFor(__js_sampleCoverage) }
  function scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) { aliasFor(__js_scissor) }

  function shaderSource(shader: WebGLShader, source: DOMString) { aliasFor(__js_shaderSource) }

  function stencilFunc(func: GLenum, ref: GLint, mask: GLuint) { aliasFor(__js_stencilFunc) }
  function stencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint) { aliasFor(__js_stencilFuncSeparate) }
  function stencilMask(mask: GLuint) { aliasFor(__js_stencilMask) }
  function stencilMaskSeparate(face: GLenum, mask: GLuint) { aliasFor(__js_stencilMaskSeparate) }
  function stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) { aliasFor(__js_stencilOp) }
  function stencilOpSeparate(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum) { aliasFor(__js_stencilOpSeparate) }

  function texParameterf(target: GLenum, pname: GLenum, param: GLfloat) { aliasFor(__js_texParameterf) }
  function texParameteri(target: GLenum, pname: GLenum, param: GLint) { aliasFor(__js_texParameteri) }

  function uniform1f(location: WebGLUniformLocation?, x: GLfloat) { aliasFor(__js_uniform1f) }
  function uniform2f(location: WebGLUniformLocation?, x: GLfloat, y: GLfloat) { aliasFor(__js_uniform2f) }
  function uniform3f(location: WebGLUniformLocation?, x: GLfloat, y: GLfloat, z: GLfloat) { aliasFor(__js_uniform3f) }
  function uniform4f(location: WebGLUniformLocation?, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) { aliasFor(__js_uniform4f) }

  function uniform1i(location: WebGLUniformLocation?, x: GLint) { aliasFor(__js_uniform1i) }
  function uniform2i(location: WebGLUniformLocation?, x: GLint, y: GLint) { aliasFor(__js_uniform2i) }
  function uniform3i(location: WebGLUniformLocation?, x: GLint, y: GLint, z: GLint) { aliasFor(__js_uniform3i) }
  function uniform4i(location: WebGLUniformLocation?, x: GLint, y: GLint, z: GLint, w: GLint) { aliasFor(__js_uniform4i) }

  function useProgram(program: WebGLProgram?) { aliasFor(__js_useProgram) }
  function validateProgram(program: WebGLProgram) { aliasFor(__js_validateProgram) }

  function vertexAttrib1f(index: GLuint, x: GLfloat) { aliasFor(__js_vertexAttrib1f) }
  function vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) { aliasFor(__js_vertexAttrib2f) }
  function vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) { aliasFor(__js_vertexAttrib3f) }
  function vertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) { aliasFor(__js_vertexAttrib4f) }

  function vertexAttrib1fv(index: GLuint, values: Float32List) { aliasFor(__js_vertexAttrib1fv) }
  function vertexAttrib2fv(index: GLuint, values: Float32List) { aliasFor(__js_vertexAttrib2fv) }
  function vertexAttrib3fv(index: GLuint, values: Float32List) { aliasFor(__js_vertexAttrib3fv) }
  function vertexAttrib4fv(index: GLuint, values: Float32List) { aliasFor(__js_vertexAttrib4fv) }

  function vertexAttribPointer(index: GLuint, size: GLint, type: GLenum,
                                normalized: GLboolean, stride: GLsizei, offset: GLintptr) { aliasFor(__js_vertexAttribPointer) }

  function viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) { aliasFor(__js_viewport) }
}
