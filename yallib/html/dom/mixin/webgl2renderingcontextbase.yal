from './webglrenderingcontextbase' import WebGLBuffer
from './webglrenderingcontextbase' import WebGLProgram
from './webglrenderingcontextbase' import WebGLTexture
from './webglrenderingcontextbase' import WebGLUniformLocation
from 'js/type/arraybufferview' import ArrayBufferView
from 'js/type/dataview' import DataView
from 'js/type/float32array' import Float32Array
from 'js/type/int32array' import Int32Array
from 'js/type/typedarray' import TypedArray
from 'js/type/uint32array' import Uint32Array

typedef GLboolean = Bool
typedef GLenum = Number
typedef GLint64 = Number
typedef GLuint64 = Number
typedef GLsizei = Number
typedef GLuint = Number
typedef GLint = Number
typedef GLintptr = Number
typedef GLsizeiptr = Number
typedef GLbitfield = Number
typedef GLclampf = Number
typedef GLfloat = Number
typedef DOMString = String
typedef Float32List = Float32Array
typedef Uint32List = Uint32Array
typedef Int32List = Int32Array
typedef TexImageSource = TypedArray | DataView

export interface WebGLQuery {
  static {}
}

export interface WebGLSampler {
  static {}
}

export interface WebGLSync {
  static {}
}

export interface WebGLTransformFeedback {
  static {}
}

export interface WebGLActiveInfo {
  static {}
}

export interface WebGLVertexArrayObject {
  static {}
}

export interface WebGL2RenderingContextBase {
  """From https://registry.khronos.org/webgl/specs/latest/2.0/"""

  const READ_BUFFER: GLenum                                    = aliasFor(__js_READ_BUFFER)
  const UNPACK_ROW_LENGTH: GLenum                              = aliasFor(__js_UNPACK_ROW_LENGTH)
  const UNPACK_SKIP_ROWS: GLenum                               = aliasFor(__js_UNPACK_SKIP_ROWS)
  const UNPACK_SKIP_PIXELS: GLenum                             = aliasFor(__js_UNPACK_SKIP_PIXELS)
  const PACK_ROW_LENGTH: GLenum                                = aliasFor(__js_PACK_ROW_LENGTH)
  const PACK_SKIP_ROWS: GLenum                                 = aliasFor(__js_PACK_SKIP_ROWS)
  const PACK_SKIP_PIXELS: GLenum                               = aliasFor(__js_PACK_SKIP_PIXELS)
  const COLOR: GLenum                                          = aliasFor(__js_COLOR)
  const DEPTH: GLenum                                          = aliasFor(__js_DEPTH)
  const STENCIL: GLenum                                        = aliasFor(__js_STENCIL)
  const RED: GLenum                                            = aliasFor(__js_RED)
  const RGB8: GLenum                                           = aliasFor(__js_RGB8)
  const RGB10_A2: GLenum                                       = aliasFor(__js_RGB10_A2)
  const TEXTURE_BINDING_3D: GLenum                             = aliasFor(__js_TEXTURE_BINDING_3D)
  const UNPACK_SKIP_IMAGES: GLenum                             = aliasFor(__js_UNPACK_SKIP_IMAGES)
  const UNPACK_IMAGE_HEIGHT: GLenum                            = aliasFor(__js_UNPACK_IMAGE_HEIGHT)
  const TEXTURE_3D: GLenum                                     = aliasFor(__js_TEXTURE_3D)
  const TEXTURE_WRAP_R: GLenum                                 = aliasFor(__js_TEXTURE_WRAP_R)
  const MAX_3D_TEXTURE_SIZE: GLenum                            = aliasFor(__js_MAX_3D_TEXTURE_SIZE)
  const UNSIGNED_INT_2_10_10_10_REV: GLenum                    = aliasFor(__js_UNSIGNED_INT_2_10_10_10_REV)
  const MAX_ELEMENTS_VERTICES: GLenum                          = aliasFor(__js_MAX_ELEMENTS_VERTICES)
  const MAX_ELEMENTS_INDICES: GLenum                           = aliasFor(__js_MAX_ELEMENTS_INDICES)
  const TEXTURE_MIN_LOD: GLenum                                = aliasFor(__js_TEXTURE_MIN_LOD)
  const TEXTURE_MAX_LOD: GLenum                                = aliasFor(__js_TEXTURE_MAX_LOD)
  const TEXTURE_BASE_LEVEL: GLenum                             = aliasFor(__js_TEXTURE_BASE_LEVEL)
  const TEXTURE_MAX_LEVEL: GLenum                              = aliasFor(__js_TEXTURE_MAX_LEVEL)
  const MIN: GLenum                                            = aliasFor(__js_MIN)
  const MAX: GLenum                                            = aliasFor(__js_MAX)
  const DEPTH_COMPONENT24: GLenum                              = aliasFor(__js_DEPTH_COMPONENT24)
  const MAX_TEXTURE_LOD_BIAS: GLenum                           = aliasFor(__js_MAX_TEXTURE_LOD_BIAS)
  const TEXTURE_COMPARE_MODE: GLenum                           = aliasFor(__js_TEXTURE_COMPARE_MODE)
  const TEXTURE_COMPARE_FUNC: GLenum                           = aliasFor(__js_TEXTURE_COMPARE_FUNC)
  const CURRENT_QUERY: GLenum                                  = aliasFor(__js_CURRENT_QUERY)
  const QUERY_RESULT: GLenum                                   = aliasFor(__js_QUERY_RESULT)
  const QUERY_RESULT_AVAILABLE: GLenum                         = aliasFor(__js_QUERY_RESULT_AVAILABLE)
  const STREAM_READ: GLenum                                    = aliasFor(__js_STREAM_READ)
  const STREAM_COPY: GLenum                                    = aliasFor(__js_STREAM_COPY)
  const STATIC_READ: GLenum                                    = aliasFor(__js_STATIC_READ)
  const STATIC_COPY: GLenum                                    = aliasFor(__js_STATIC_COPY)
  const DYNAMIC_READ: GLenum                                   = aliasFor(__js_DYNAMIC_READ)
  const DYNAMIC_COPY: GLenum                                   = aliasFor(__js_DYNAMIC_COPY)
  const MAX_DRAW_BUFFERS: GLenum                               = aliasFor(__js_MAX_DRAW_BUFFERS)
  const DRAW_BUFFER0: GLenum                                   = aliasFor(__js_DRAW_BUFFER0)
  const DRAW_BUFFER1: GLenum                                   = aliasFor(__js_DRAW_BUFFER1)
  const DRAW_BUFFER2: GLenum                                   = aliasFor(__js_DRAW_BUFFER2)
  const DRAW_BUFFER3: GLenum                                   = aliasFor(__js_DRAW_BUFFER3)
  const DRAW_BUFFER4: GLenum                                   = aliasFor(__js_DRAW_BUFFER4)
  const DRAW_BUFFER5: GLenum                                   = aliasFor(__js_DRAW_BUFFER5)
  const DRAW_BUFFER6: GLenum                                   = aliasFor(__js_DRAW_BUFFER6)
  const DRAW_BUFFER7: GLenum                                   = aliasFor(__js_DRAW_BUFFER7)
  const DRAW_BUFFER8: GLenum                                   = aliasFor(__js_DRAW_BUFFER8)
  const DRAW_BUFFER9: GLenum                                   = aliasFor(__js_DRAW_BUFFER9)
  const DRAW_BUFFER10: GLenum                                  = aliasFor(__js_DRAW_BUFFER10)
  const DRAW_BUFFER11: GLenum                                  = aliasFor(__js_DRAW_BUFFER11)
  const DRAW_BUFFER12: GLenum                                  = aliasFor(__js_DRAW_BUFFER12)
  const DRAW_BUFFER13: GLenum                                  = aliasFor(__js_DRAW_BUFFER13)
  const DRAW_BUFFER14: GLenum                                  = aliasFor(__js_DRAW_BUFFER14)
  const DRAW_BUFFER15: GLenum                                  = aliasFor(__js_DRAW_BUFFER15)
  const MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum                = aliasFor(__js_MAX_FRAGMENT_UNIFORM_COMPONENTS)
  const MAX_VERTEX_UNIFORM_COMPONENTS: GLenum                  = aliasFor(__js_MAX_VERTEX_UNIFORM_COMPONENTS)
  const SAMPLER_3D: GLenum                                     = aliasFor(__js_SAMPLER_3D)
  const SAMPLER_2D_SHADOW: GLenum                              = aliasFor(__js_SAMPLER_2D_SHADOW)
  const FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum                = aliasFor(__js_FRAGMENT_SHADER_DERIVATIVE_HINT)
  const PIXEL_PACK_BUFFER: GLenum                              = aliasFor(__js_PIXEL_PACK_BUFFER)
  const PIXEL_UNPACK_BUFFER: GLenum                            = aliasFor(__js_PIXEL_UNPACK_BUFFER)
  const PIXEL_PACK_BUFFER_BINDING: GLenum                      = aliasFor(__js_PIXEL_PACK_BUFFER_BINDING)
  const PIXEL_UNPACK_BUFFER_BINDING: GLenum                    = aliasFor(__js_PIXEL_UNPACK_BUFFER_BINDING)
  const FLOAT_MAT2x3: GLenum                                   = aliasFor(__js_FLOAT_MAT2x3)
  const FLOAT_MAT2x4: GLenum                                   = aliasFor(__js_FLOAT_MAT2x4)
  const FLOAT_MAT3x2: GLenum                                   = aliasFor(__js_FLOAT_MAT3x2)
  const FLOAT_MAT3x4: GLenum                                   = aliasFor(__js_FLOAT_MAT3x4)
  const FLOAT_MAT4x2: GLenum                                   = aliasFor(__js_FLOAT_MAT4x2)
  const FLOAT_MAT4x3: GLenum                                   = aliasFor(__js_FLOAT_MAT4x3)
  const SRGB: GLenum                                           = aliasFor(__js_SRGB)
  const SRGB8: GLenum                                          = aliasFor(__js_SRGB8)
  const SRGB8_ALPHA8: GLenum                                   = aliasFor(__js_SRGB8_ALPHA8)
  const COMPARE_REF_TO_TEXTURE: GLenum                         = aliasFor(__js_COMPARE_REF_TO_TEXTURE)
  const RGBA32F: GLenum                                        = aliasFor(__js_RGBA32F)
  const RGB32F: GLenum                                         = aliasFor(__js_RGB32F)
  const RGBA16F: GLenum                                        = aliasFor(__js_RGBA16F)
  const RGB16F: GLenum                                         = aliasFor(__js_RGB16F)
  const VERTEX_ATTRIB_ARRAY_INTEGER: GLenum                    = aliasFor(__js_VERTEX_ATTRIB_ARRAY_INTEGER)
  const MAX_ARRAY_TEXTURE_LAYERS: GLenum                       = aliasFor(__js_MAX_ARRAY_TEXTURE_LAYERS)
  const MIN_PROGRAM_TEXEL_OFFSET: GLenum                       = aliasFor(__js_MIN_PROGRAM_TEXEL_OFFSET)
  const MAX_PROGRAM_TEXEL_OFFSET: GLenum                       = aliasFor(__js_MAX_PROGRAM_TEXEL_OFFSET)
  const MAX_VARYING_COMPONENTS: GLenum                         = aliasFor(__js_MAX_VARYING_COMPONENTS)
  const TEXTURE_2D_ARRAY: GLenum                               = aliasFor(__js_TEXTURE_2D_ARRAY)
  const TEXTURE_BINDING_2D_ARRAY: GLenum                       = aliasFor(__js_TEXTURE_BINDING_2D_ARRAY)
  const R11F_G11F_B10F: GLenum                                 = aliasFor(__js_R11F_G11F_B10F)
  const UNSIGNED_INT_10F_11F_11F_REV: GLenum                   = aliasFor(__js_UNSIGNED_INT_10F_11F_11F_REV)
  const RGB9_E5: GLenum                                        = aliasFor(__js_RGB9_E5)
  const UNSIGNED_INT_5_9_9_9_REV: GLenum                       = aliasFor(__js_UNSIGNED_INT_5_9_9_9_REV)
  const TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum                 = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_MODE)
  const MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum     = aliasFor(__js_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS)
  const TRANSFORM_FEEDBACK_VARYINGS: GLenum                    = aliasFor(__js_TRANSFORM_FEEDBACK_VARYINGS)
  const TRANSFORM_FEEDBACK_BUFFER_START: GLenum                = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_START)
  const TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum                 = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_SIZE)
  const TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum          = aliasFor(__js_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN)
  const RASTERIZER_DISCARD: GLenum                             = aliasFor(__js_RASTERIZER_DISCARD)
  const MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum  = aliasFor(__js_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS)
  const MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum        = aliasFor(__js_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS)
  const INTERLEAVED_ATTRIBS: GLenum                            = aliasFor(__js_INTERLEAVED_ATTRIBS)
  const SEPARATE_ATTRIBS: GLenum                               = aliasFor(__js_SEPARATE_ATTRIBS)
  const TRANSFORM_FEEDBACK_BUFFER: GLenum                      = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER)
  const TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum              = aliasFor(__js_TRANSFORM_FEEDBACK_BUFFER_BINDING)
  const RGBA32UI: GLenum                                       = aliasFor(__js_RGBA32UI)
  const RGB32UI: GLenum                                        = aliasFor(__js_RGB32UI)
  const RGBA16UI: GLenum                                       = aliasFor(__js_RGBA16UI)
  const RGB16UI: GLenum                                        = aliasFor(__js_RGB16UI)
  const RGBA8UI: GLenum                                        = aliasFor(__js_RGBA8UI)
  const RGB8UI: GLenum                                         = aliasFor(__js_RGB8UI)
  const RGBA32I: GLenum                                        = aliasFor(__js_RGBA32I)
  const RGB32I: GLenum                                         = aliasFor(__js_RGB32I)
  const RGBA16I: GLenum                                        = aliasFor(__js_RGBA16I)
  const RGB16I: GLenum                                         = aliasFor(__js_RGB16I)
  const RGBA8I: GLenum                                         = aliasFor(__js_RGBA8I)
  const RGB8I: GLenum                                          = aliasFor(__js_RGB8I)
  const RED_INTEGER: GLenum                                    = aliasFor(__js_RED_INTEGER)
  const RGB_INTEGER: GLenum                                    = aliasFor(__js_RGB_INTEGER)
  const RGBA_INTEGER: GLenum                                   = aliasFor(__js_RGBA_INTEGER)
  const SAMPLER_2D_ARRAY: GLenum                               = aliasFor(__js_SAMPLER_2D_ARRAY)
  const SAMPLER_2D_ARRAY_SHADOW: GLenum                        = aliasFor(__js_SAMPLER_2D_ARRAY_SHADOW)
  const SAMPLER_CUBE_SHADOW: GLenum                            = aliasFor(__js_SAMPLER_CUBE_SHADOW)
  const UNSIGNED_INT_VEC2: GLenum                              = aliasFor(__js_UNSIGNED_INT_VEC2)
  const UNSIGNED_INT_VEC3: GLenum                              = aliasFor(__js_UNSIGNED_INT_VEC3)
  const UNSIGNED_INT_VEC4: GLenum                              = aliasFor(__js_UNSIGNED_INT_VEC4)
  const INT_SAMPLER_2D: GLenum                                 = aliasFor(__js_INT_SAMPLER_2D)
  const INT_SAMPLER_3D: GLenum                                 = aliasFor(__js_INT_SAMPLER_3D)
  const INT_SAMPLER_CUBE: GLenum                               = aliasFor(__js_INT_SAMPLER_CUBE)
  const INT_SAMPLER_2D_ARRAY: GLenum                           = aliasFor(__js_INT_SAMPLER_2D_ARRAY)
  const UNSIGNED_INT_SAMPLER_2D: GLenum                        = aliasFor(__js_UNSIGNED_INT_SAMPLER_2D)
  const UNSIGNED_INT_SAMPLER_3D: GLenum                        = aliasFor(__js_UNSIGNED_INT_SAMPLER_3D)
  const UNSIGNED_INT_SAMPLER_CUBE: GLenum                      = aliasFor(__js_UNSIGNED_INT_SAMPLER_CUBE)
  const UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum                  = aliasFor(__js_UNSIGNED_INT_SAMPLER_2D_ARRAY)
  const DEPTH_COMPONENT32F: GLenum                             = aliasFor(__js_DEPTH_COMPONENT32F)
  const DEPTH32F_STENCIL8: GLenum                              = aliasFor(__js_DEPTH32F_STENCIL8)
  const FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum                 = aliasFor(__js_FLOAT_32_UNSIGNED_INT_24_8_REV)
  const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum          = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)
  const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum          = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)
  const FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum                = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_RED_SIZE)
  const FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum              = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE)
  const FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum               = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE)
  const FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum              = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE)
  const FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum              = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE)
  const FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum            = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE)
  const FRAMEBUFFER_DEFAULT: GLenum                            = aliasFor(__js_FRAMEBUFFER_DEFAULT)
  const UNSIGNED_INT_24_8: GLenum                              = aliasFor(__js_UNSIGNED_INT_24_8)
  const DEPTH24_STENCIL8: GLenum                               = aliasFor(__js_DEPTH24_STENCIL8)
  const UNSIGNED_NORMALIZED: GLenum                            = aliasFor(__js_UNSIGNED_NORMALIZED)
  const DRAW_FRAMEBUFFER_BINDING: GLenum                       = aliasFor(__js_DRAW_FRAMEBUFFER_BINDING)
  const READ_FRAMEBUFFER: GLenum                               = aliasFor(__js_READ_FRAMEBUFFER)
  const DRAW_FRAMEBUFFER: GLenum                               = aliasFor(__js_DRAW_FRAMEBUFFER)
  const READ_FRAMEBUFFER_BINDING: GLenum                       = aliasFor(__js_READ_FRAMEBUFFER_BINDING)
  const RENDERBUFFER_SAMPLES: GLenum                           = aliasFor(__js_RENDERBUFFER_SAMPLES)
  const FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum           = aliasFor(__js_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER)
  const MAX_COLOR_ATTACHMENTS: GLenum                          = aliasFor(__js_MAX_COLOR_ATTACHMENTS)
  const COLOR_ATTACHMENT1: GLenum                              = aliasFor(__js_COLOR_ATTACHMENT1)
  const COLOR_ATTACHMENT2: GLenum                              = aliasFor(__js_COLOR_ATTACHMENT2)
  const COLOR_ATTACHMENT3: GLenum                              = aliasFor(__js_COLOR_ATTACHMENT3)
  const COLOR_ATTACHMENT4: GLenum                              = aliasFor(__js_COLOR_ATTACHMENT4)
  const COLOR_ATTACHMENT5: GLenum                              = aliasFor(__js_COLOR_ATTACHMENT5)
  const COLOR_ATTACHMENT6: GLenum                              = aliasFor(__js_COLOR_ATTACHMENT6)
  const COLOR_ATTACHMENT7: GLenum                              = aliasFor(__js_COLOR_ATTACHMENT7)
  const COLOR_ATTACHMENT8: GLenum                              = aliasFor(__js_COLOR_ATTACHMENT8)
  const COLOR_ATTACHMENT9: GLenum                              = aliasFor(__js_COLOR_ATTACHMENT9)
  const COLOR_ATTACHMENT10: GLenum                             = aliasFor(__js_COLOR_ATTACHMENT10)
  const COLOR_ATTACHMENT11: GLenum                             = aliasFor(__js_COLOR_ATTACHMENT11)
  const COLOR_ATTACHMENT12: GLenum                             = aliasFor(__js_COLOR_ATTACHMENT12)
  const COLOR_ATTACHMENT13: GLenum                             = aliasFor(__js_COLOR_ATTACHMENT13)
  const COLOR_ATTACHMENT14: GLenum                             = aliasFor(__js_COLOR_ATTACHMENT14)
  const COLOR_ATTACHMENT15: GLenum                             = aliasFor(__js_COLOR_ATTACHMENT15)
  const FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum             = aliasFor(__js_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE)
  const MAX_SAMPLES: GLenum                                    = aliasFor(__js_MAX_SAMPLES)
  const HALF_FLOAT: GLenum                                     = aliasFor(__js_HALF_FLOAT)
  const RG: GLenum                                             = aliasFor(__js_RG)
  const RG_INTEGER: GLenum                                     = aliasFor(__js_RG_INTEGER)
  const R8: GLenum                                             = aliasFor(__js_R8)
  const RG8: GLenum                                            = aliasFor(__js_RG8)
  const R16F: GLenum                                           = aliasFor(__js_R16F)
  const R32F: GLenum                                           = aliasFor(__js_R32F)
  const RG16F: GLenum                                          = aliasFor(__js_RG16F)
  const RG32F: GLenum                                          = aliasFor(__js_RG32F)
  const R8I: GLenum                                            = aliasFor(__js_R8I)
  const R8UI: GLenum                                           = aliasFor(__js_R8UI)
  const R16I: GLenum                                           = aliasFor(__js_R16I)
  const R16UI: GLenum                                          = aliasFor(__js_R16UI)
  const R32I: GLenum                                           = aliasFor(__js_R32I)
  const R32UI: GLenum                                          = aliasFor(__js_R32UI)
  const RG8I: GLenum                                           = aliasFor(__js_RG8I)
  const RG8UI: GLenum                                          = aliasFor(__js_RG8UI)
  const RG16I: GLenum                                          = aliasFor(__js_RG16I)
  const RG16UI: GLenum                                         = aliasFor(__js_RG16UI)
  const RG32I: GLenum                                          = aliasFor(__js_RG32I)
  const RG32UI: GLenum                                         = aliasFor(__js_RG32UI)
  const VERTEX_ARRAY_BINDING: GLenum                           = aliasFor(__js_VERTEX_ARRAY_BINDING)
  const R8_SNORM: GLenum                                       = aliasFor(__js_R8_SNORM)
  const RG8_SNORM: GLenum                                      = aliasFor(__js_RG8_SNORM)
  const RGB8_SNORM: GLenum                                     = aliasFor(__js_RGB8_SNORM)
  const RGBA8_SNORM: GLenum                                    = aliasFor(__js_RGBA8_SNORM)
  const SIGNED_NORMALIZED: GLenum                              = aliasFor(__js_SIGNED_NORMALIZED)
  const COPY_READ_BUFFER: GLenum                               = aliasFor(__js_COPY_READ_BUFFER)
  const COPY_WRITE_BUFFER: GLenum                              = aliasFor(__js_COPY_WRITE_BUFFER)
  const COPY_READ_BUFFER_BINDING: GLenum                       = aliasFor(__js_COPY_READ_BUFFER_BINDING)
  const COPY_WRITE_BUFFER_BINDING: GLenum                      = aliasFor(__js_COPY_WRITE_BUFFER_BINDING)
  const UNIFORM_BUFFER: GLenum                                 = aliasFor(__js_UNIFORM_BUFFER)
  const UNIFORM_BUFFER_BINDING: GLenum                         = aliasFor(__js_UNIFORM_BUFFER_BINDING)
  const UNIFORM_BUFFER_START: GLenum                           = aliasFor(__js_UNIFORM_BUFFER_START)
  const UNIFORM_BUFFER_SIZE: GLenum                            = aliasFor(__js_UNIFORM_BUFFER_SIZE)
  const MAX_VERTEX_UNIFORM_BLOCKS: GLenum                      = aliasFor(__js_MAX_VERTEX_UNIFORM_BLOCKS)
  const MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum                    = aliasFor(__js_MAX_FRAGMENT_UNIFORM_BLOCKS)
  const MAX_COMBINED_UNIFORM_BLOCKS: GLenum                    = aliasFor(__js_MAX_COMBINED_UNIFORM_BLOCKS)
  const MAX_UNIFORM_BUFFER_BINDINGS: GLenum                    = aliasFor(__js_MAX_UNIFORM_BUFFER_BINDINGS)
  const MAX_UNIFORM_BLOCK_SIZE: GLenum                         = aliasFor(__js_MAX_UNIFORM_BLOCK_SIZE)
  const MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum         = aliasFor(__js_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS)
  const MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum       = aliasFor(__js_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS)
  const UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum                = aliasFor(__js_UNIFORM_BUFFER_OFFSET_ALIGNMENT)
  const ACTIVE_UNIFORM_BLOCKS: GLenum                          = aliasFor(__js_ACTIVE_UNIFORM_BLOCKS)
  const UNIFORM_TYPE: GLenum                                   = aliasFor(__js_UNIFORM_TYPE)
  const UNIFORM_SIZE: GLenum                                   = aliasFor(__js_UNIFORM_SIZE)
  const UNIFORM_BLOCK_INDEX: GLenum                            = aliasFor(__js_UNIFORM_BLOCK_INDEX)
  const UNIFORM_OFFSET: GLenum                                 = aliasFor(__js_UNIFORM_OFFSET)
  const UNIFORM_ARRAY_STRIDE: GLenum                           = aliasFor(__js_UNIFORM_ARRAY_STRIDE)
  const UNIFORM_MATRIX_STRIDE: GLenum                          = aliasFor(__js_UNIFORM_MATRIX_STRIDE)
  const UNIFORM_IS_ROW_MAJOR: GLenum                           = aliasFor(__js_UNIFORM_IS_ROW_MAJOR)
  const UNIFORM_BLOCK_BINDING: GLenum                          = aliasFor(__js_UNIFORM_BLOCK_BINDING)
  const UNIFORM_BLOCK_DATA_SIZE: GLenum                        = aliasFor(__js_UNIFORM_BLOCK_DATA_SIZE)
  const UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum                  = aliasFor(__js_UNIFORM_BLOCK_ACTIVE_UNIFORMS)
  const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum           = aliasFor(__js_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)
  const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum      = aliasFor(__js_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER)
  const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum    = aliasFor(__js_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER)
  const INVALID_INDEX: GLenum                                  = aliasFor(__js_INVALID_INDEX)
  const MAX_VERTEX_OUTPUT_COMPONENTS: GLenum                   = aliasFor(__js_MAX_VERTEX_OUTPUT_COMPONENTS)
  const MAX_FRAGMENT_INPUT_COMPONENTS: GLenum                  = aliasFor(__js_MAX_FRAGMENT_INPUT_COMPONENTS)
  const MAX_SERVER_WAIT_TIMEOUT: GLenum                        = aliasFor(__js_MAX_SERVER_WAIT_TIMEOUT)
  const OBJECT_TYPE: GLenum                                    = aliasFor(__js_OBJECT_TYPE)
  const SYNC_CONDITION: GLenum                                 = aliasFor(__js_SYNC_CONDITION)
  const SYNC_STATUS: GLenum                                    = aliasFor(__js_SYNC_STATUS)
  const SYNC_FLAGS: GLenum                                     = aliasFor(__js_SYNC_FLAGS)
  const SYNC_FENCE: GLenum                                     = aliasFor(__js_SYNC_FENCE)
  const SYNC_GPU_COMMANDS_COMPLETE: GLenum                     = aliasFor(__js_SYNC_GPU_COMMANDS_COMPLETE)
  const UNSIGNALED: GLenum                                     = aliasFor(__js_UNSIGNALED)
  const SIGNALED: GLenum                                       = aliasFor(__js_SIGNALED)
  const ALREADY_SIGNALED: GLenum                               = aliasFor(__js_ALREADY_SIGNALED)
  const TIMEOUT_EXPIRED: GLenum                                = aliasFor(__js_TIMEOUT_EXPIRED)
  const CONDITION_SATISFIED: GLenum                            = aliasFor(__js_CONDITION_SATISFIED)
  const WAIT_FAILED: GLenum                                    = aliasFor(__js_WAIT_FAILED)
  const SYNC_FLUSH_COMMANDS_BIT: GLenum                        = aliasFor(__js_SYNC_FLUSH_COMMANDS_BIT)
  const VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum                    = aliasFor(__js_VERTEX_ATTRIB_ARRAY_DIVISOR)
  const ANY_SAMPLES_PASSED: GLenum                             = aliasFor(__js_ANY_SAMPLES_PASSED)
  const ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum                = aliasFor(__js_ANY_SAMPLES_PASSED_CONSERVATIVE)
  const SAMPLER_BINDING: GLenum                                = aliasFor(__js_SAMPLER_BINDING)
  const RGB10_A2UI: GLenum                                     = aliasFor(__js_RGB10_A2UI)
  const INT_2_10_10_10_REV: GLenum                             = aliasFor(__js_INT_2_10_10_10_REV)
  const TRANSFORM_FEEDBACK: GLenum                             = aliasFor(__js_TRANSFORM_FEEDBACK)
  const TRANSFORM_FEEDBACK_PAUSED: GLenum                      = aliasFor(__js_TRANSFORM_FEEDBACK_PAUSED)
  const TRANSFORM_FEEDBACK_ACTIVE: GLenum                      = aliasFor(__js_TRANSFORM_FEEDBACK_ACTIVE)
  const TRANSFORM_FEEDBACK_BINDING: GLenum                     = aliasFor(__js_TRANSFORM_FEEDBACK_BINDING)
  const TEXTURE_IMMUTABLE_FORMAT: GLenum                       = aliasFor(__js_TEXTURE_IMMUTABLE_FORMAT)
  const MAX_ELEMENT_INDEX: GLenum                              = aliasFor(__js_MAX_ELEMENT_INDEX)
  const TEXTURE_IMMUTABLE_LEVELS: GLenum                       = aliasFor(__js_TEXTURE_IMMUTABLE_LEVELS)

  const TIMEOUT_IGNORED: GLint64                              = aliasFor(__js_TIMEOUT_IGNORED);

  # WebGL-specific enums
  const MAX_CLIENT_WAIT_TIMEOUT_WEBGL: GLenum                  = aliasFor(__js_MAX_CLIENT_WAIT_TIMEOUT_WEBGL)

  # Buffer objects
  function copyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr,
                              writeOffset: GLintptr, size: GLsizeiptr) { aliasFor(__js_copyBufferSubData) }
  # MapBufferRange, in particular its read-only and write-only modes,
  # can not be exposed safely to JavaScript. GetBufferSubData
  # replaces it for the purpose of fetching data back from the GPU.
  function getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView,
                             dstOffset: Number = 0, length: GLuint = 0) { aliasFor(__js_getBufferSubData) }

  # Framebuffer objects
  function blitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint,
                            dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) { aliasFor(__js_blitFramebuffer) }
  function framebufferTextureLayer(target: GLenum, attachment: GLenum, texture: WebGLTexture?, level: GLint,
                                    layer: GLint) { aliasFor(__js_framebufferTextureLayer) }
  function invalidateFramebuffer(target: GLenum, attachments: List[GLenum]) { aliasFor(__js_invalidateFramebuffer) }
  function invalidateSubFramebuffer(target: GLenum, attachments: List[GLenum],
                                     x: GLint, y: GLint, width: GLsizei, height: GLsizei) { aliasFor(__js_invalidateSubFramebuffer) }
  function readBuffer(src: GLenum) { aliasFor(__js_readBuffer) }

  # Renderbuffer objects
  function getInternalformatParameter(target: GLenum, internalformat: GLenum, pname: GLenum) { aliasFor(__js_getInternalformatParameter) }
  function renderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum,
                                           width: GLsizei, height: GLsizei) { aliasFor(__js_renderbufferStorageMultisample) }

  # Texture objects
  function texStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei,
                         height: GLsizei) { aliasFor(__js_texStorage2D) }
  function texStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei,
                         height: GLsizei, depth: GLsizei) { aliasFor(__js_texStorage3D) }

  function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei,
                       depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr) { aliasFor(__js_texImage3D) }
  function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei,
                       depth: GLsizei, border: GLint, format: GLenum, type: GLenum,
                       source: TexImageSource) { aliasFor(__js_texImage3D) }
  function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei,
                       depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView?) { aliasFor(__js_texImage3D) }
  function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei,
                       depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView,
                       srcOffset: Number) { aliasFor(__js_texImage3D) }

  function texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint,
                          width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum,
                          pboOffset: GLintptr) { aliasFor(__js_texSubImage3D) }
  function texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint,
                          width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum,
                          source: TexImageSource) { aliasFor(__js_texSubImage3D) }
  function texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint,
                          width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum,
                          srcData: ArrayBufferView?, srcOffset: Number = 0) { aliasFor(__js_texSubImage3D) }

  function copyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint,
                              x: GLint, y: GLint, width: GLsizei, height: GLsizei) { aliasFor(__js_copyTexSubImage3D) }

  function compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei,
                                 height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr) { aliasFor(__js_compressedTexImage3D) }
  function compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei,
                                 height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView,
                                 srcOffset: Number = 0, srcLengthOverride: GLuint = 0) { aliasFor(__js_compressedTexImage3D) }

  function compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint,
                                    zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei,
                                    format: GLenum, imageSize: GLsizei, offset: GLintptr) { aliasFor(__js_compressedTexSubImage3D) }
  function compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint,
                                    zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei,
                                    format: GLenum, srcData: ArrayBufferView,
                                    srcOffset: Number = 0,
                                    srcLengthOverride: GLuint = 0) { aliasFor(__js_compressedTexSubImage3D) }

  # Programs and shaders
  function getFragDataLocation(program: WebGLProgram, name: DOMString): GLint { aliasFor(__js_getFragDataLocation) }

  # Uniforms
  function uniform1ui(location: WebGLUniformLocation?, v0: GLuint) { aliasFor(__js_uniform1ui) }
  function uniform2ui(location: WebGLUniformLocation?, v0: GLuint, v1: GLuint) { aliasFor(__js_uniform2ui) }
  function uniform3ui(location: WebGLUniformLocation?, v0: GLuint, v1: GLuint, v2: GLuint) { aliasFor(__js_uniform3ui) }
  function uniform4ui(location: WebGLUniformLocation?, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) { aliasFor(__js_uniform4ui) }

  function uniform1uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: Number = 0,
                        srcLength: GLuint = 0) { aliasFor(__js_uniform1uiv) }
  function uniform2uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: Number = 0,
                        srcLength: GLuint = 0) { aliasFor(__js_uniform2uiv) }
  function uniform3uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: Number = 0,
                        srcLength: GLuint = 0) { aliasFor(__js_uniform3uiv) }
  function uniform4uiv(location: WebGLUniformLocation?, data: Uint32List, srcOffset: Number = 0,
                        srcLength: GLuint = 0) { aliasFor(__js_uniform4uiv) }
  function uniformMatrix3x2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List,
                               srcOffset: Number = 0, srcLength: GLuint = 0) { aliasFor(__js_uniformMatrix3x2fv) }
  function uniformMatrix4x2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List,
                               srcOffset: Number = 0, srcLength: GLuint = 0) { aliasFor(__js_uniformMatrix4x2fv) }

  function uniformMatrix2x3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List,
                               srcOffset: Number = 0, srcLength: GLuint = 0) { aliasFor(__js_uniformMatrix2x3fv) }
  function uniformMatrix4x3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List,
                               srcOffset: Number = 0, srcLength: GLuint = 0) { aliasFor(__js_uniformMatrix4x3fv) }

  function uniformMatrix2x4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List,
                               srcOffset: Number = 0, srcLength: GLuint = 0) { aliasFor(__js_uniformMatrix2x4fv) }
  function uniformMatrix3x4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Float32List,
                               srcOffset: Number = 0, srcLength: GLuint = 0) { aliasFor(__js_uniformMatrix3x4fv) }

  # Vertex attribs
  function vertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) { aliasFor(__js_vertexAttribI4i) }
  function vertexAttribI4iv(index: GLuint, values: Int32List) { aliasFor(__js_vertexAttribI4iv) }
  function vertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) { aliasFor(__js_vertexAttribI4ui) }
  function vertexAttribI4uiv(index: GLuint, values: Uint32List) { aliasFor(__js_vertexAttribI4uiv) }
  function vertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr) { aliasFor(__js_vertexAttribIPointer) }

  # Writing to the drawing buffer
  function vertexAttribDivisor(index: GLuint, divisor: GLuint) { aliasFor(__js_vertexAttribDivisor) }
  function drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei) { aliasFor(__js_drawArraysInstanced) }
  function drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei) { aliasFor(__js_drawElementsInstanced) }
  function drawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, offset: GLintptr) { aliasFor(__js_drawRangeElements) }

  # Multiple Render Targets
  function drawBuffers(buffers: List[GLenum]) { aliasFor(__js_drawBuffers) }

  function clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Float32List,
                          srcOffset: Number = 0) { aliasFor(__js_clearBufferfv) }
  function clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Int32List,
                          srcOffset: Number = 0) { aliasFor(__js_clearBufferiv) }
  function clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Uint32List,
                           srcOffset: Number = 0) { aliasFor(__js_clearBufferuiv) }

  function clearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) { aliasFor(__js_clearBufferfi) }

  # Query Objects
  function createQuery(): WebGLQuery? { aliasFor(__js_createQuery) }
  function deleteQuery(query: WebGLQuery?) { aliasFor(__js_deleteQuery) }
  function isQuery(query: WebGLQuery?): GLboolean { aliasFor(__js_isQuery) }
  function beginQuery(target: GLenum, query: WebGLQuery) { aliasFor(__js_beginQuery) }
  function endQuery(target: GLenum) { aliasFor(__js_endQuery) }
  function getQuery(target: GLenum, pname: GLenum): WebGLQuery? { aliasFor(__js_getQuery) }
  function getQueryParameter(query: WebGLQuery, pname: GLenum) { aliasFor(__js_getQueryParameter) }

  # Sampler Objects
  function createSampler(): WebGLSampler? { aliasFor(__js_createSampler) }
  function deleteSampler(sampler: WebGLSampler?) { aliasFor(__js_deleteSampler) }
  function isSampler(sampler: WebGLSampler?): GLboolean { aliasFor(__js_isSampler) }
  function bindSampler(unit: GLuint, sampler: WebGLSampler?) { aliasFor(__js_bindSampler) }
  function samplerParameteri(sampler: WebGLSampler, pname: GLenum, param: GLint) { aliasFor(__js_samplerParameteri) }
  function samplerParameterf(sampler: WebGLSampler, pname: GLenum, param: GLfloat) { aliasFor(__js_samplerParameterf) }
  function getSamplerParameter(sampler: WebGLSampler, pname: GLenum) { aliasFor(__js_getSamplerParameter) }

  # Sync objects
  function fenceSync(condition: GLenum, flags: GLbitfield): WebGLSync? { aliasFor(__js_fenceSync) }
  function isSync(sync: WebGLSync?): GLboolean { aliasFor(__js_isSync) }
  function deleteSync(sync: WebGLSync?) { aliasFor(__js_deleteSync) }
  function clientWaitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLuint64): GLenum { aliasFor(__js_clientWaitSync) }
  function waitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLint64) { aliasFor(__js_waitSync) }
  function getSyncParameter(sync: WebGLSync, pname: GLenum) { aliasFor(__js_getSyncParameter) }

  # Transform Feedback
  function createTransformFeedback(): WebGLTransformFeedback? { aliasFor(__js_createTransformFeedback) }
  function deleteTransformFeedback(tf: WebGLTransformFeedback?) { aliasFor(__js_deleteTransformFeedback) }
  function isTransformFeedback(tf: WebGLTransformFeedback?): GLboolean { aliasFor(__js_isTransformFeedback) }
  function bindTransformFeedback(target: GLenum, tf: WebGLTransformFeedback?) { aliasFor(__js_bindTransformFeedback) }
  function beginTransformFeedback(primitiveMode: GLenum) { aliasFor(__js_beginTransformFeedback) }
  function endTransformFeedback() { aliasFor(__js_endTransformFeedback) }
  function transformFeedbackVaryings(program: WebGLProgram, varyings: List[DOMString], bufferMode: GLenum) { aliasFor(__js_transformFeedbackVaryings) }
  function getTransformFeedbackVarying(program: WebGLProgram, index: GLuint): WebGLActiveInfo? { aliasFor(__js_getTransformFeedbackVarying) }
  function pauseTransformFeedback() { aliasFor(__js_pauseTransformFeedback) }
  function resumeTransformFeedback() { aliasFor(__js_resumeTransformFeedback) }

  # Uniform Buffer Objects and Transform Feedback Buffers
  function bindBufferBase(target: GLenum, index: GLuint, buffer: WebGLBuffer?) { aliasFor(__js_bindBufferBase) }
  function bindBufferRange(target: GLenum, index: GLuint, buffer: WebGLBuffer?, offset: GLintptr, size: GLsizeiptr) { aliasFor(__js_bindBufferRange) }
  function getIndexedParameter(target: GLenum, index: GLuint) { aliasFor(__js_getIndexedParameter) }
  function getUniformIndices(program: WebGLProgram, uniformNames: List[DOMString]): List[GLuint]? { aliasFor(__js_getUniformIndices) }
  function getActiveUniforms(program: WebGLProgram, uniformIndices: List[GLuint], pname: GLenum) { aliasFor(__js_getActiveUniforms) }
  function getUniformBlockIndex(program: WebGLProgram, uniformBlockName: DOMString): GLuint { aliasFor(__js_getUniformBlockIndex) }
  function getActiveUniformBlockParameter(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum) { aliasFor(__js_getActiveUniformBlockParameter) }
  function getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: GLuint): DOMString? { aliasFor(__js_getActiveUniformBlockName) }
  function uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) { aliasFor(__js_uniformBlockBinding) }

  # Vertex Array Objects
  function createVertexArray(): WebGLVertexArrayObject? { aliasFor(__js_createVertexArray) }
  function deleteVertexArray(vertexArray: WebGLVertexArrayObject?) { aliasFor(__js_deleteVertexArray) }
  function isVertexArray(vertexArray: WebGLVertexArrayObject?): GLboolean { aliasFor(__js_isVertexArray) }
  function bindVertexArray(array: WebGLVertexArrayObject?) { aliasFor(__js_bindVertexArray) }
}
