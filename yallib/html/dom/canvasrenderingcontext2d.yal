from './mixin/drawimagesource' import DrawImageSource
from './textmetrics' import TextMetrics

enum TextAlign {
  const left = "left"
  const right = "right"
  const center = "center"
  const start "default" = "start"
  const end = "end"
}

enum TextBaseline {
  const top = "top"
  const hanging = "hanging"
  const middle = "middle"
  const alphabetic "default" = "alphabetic"
  const ideographic = "ideographic"
  const bottom = "bottom"
}

enum TextDirection {
  const ltr "left-to-right" = "ltr"
  const rtl "right-to-left" = "rtl"
  const inherit """
    The text direction is inherited from the <canvas> element or the Document as appropriate.
    Default value.
    """ = "inherit"
}

enum FontKerning {
  const auto "default" = "auto"
  const normal = "normal"
  const none = "none"
}

enum FontStretch {
  const ultraCondensed = "ultra-condensed"
  const extraCondensed = "extra-condensed"
  const condensed = "condensed"
  const semiCondensed = "semi-condensed"
  const normal "default" = "normal"
  const semiExpanded = "semi-expanded"
  const expanded = "expanded"
  const extraExpanded = "extra-expanded"
  const ultraExpanded = "ultra-expanded"
}

enum FontVariantCaps {
  const normal "default" = "normal"
  const smallCaps = "small-caps"
  const allSmallCaps = "all-small-caps"
  const petiteCaps = "petite-caps"
  const allPetiteCaps = "all-petite-caps"
  const unicase = "unicase"
  const tilingCaps = "tiling-caps"
}

enum TextRendering {
  const auto = "auto"
  const optimizeSpeed = "optimizeSpeed"
  const optimizeLegibility = "optimizeLegibility"
  const geometricPrecision = "geometricPrecision"
}

export interface CanvasRenderingContext2D {
  """
  https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D

  The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering
  context for the drawing surface of a <canvas> element. It is used for drawing shapes,
  text, images, and other objects.

  The interface's properties and methods are described in the reference section of this page.
  The Canvas tutorial has more explanation, examples, and resources, as well.

  For OffscreenCanvas, there is an equivalent interface that provides the rendering context.
  The offscreen rendering context inherits most of the same properties and methods as the
  CanvasRenderingContext2D and is described in more detail in the
  OffscreenCanvasRenderingContext2D reference page.
  """
  const __marker_CanvasRenderingContext2D: Any

  """
  #################################################################################################
  Drawing Rectangles
  #################################################################################################
  """

  function clearRect(x: Number, y: Number, width: Number, height: Number) {
    """
    https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect

    The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API erases the pixels in
    a rectangular area by setting them to transparent black.
    """
    aliasFor(__js_clearRect)
  }

  function fillRect(x: Number, y: Number, width: Number, height: Number) {
    """
    https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect

    The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a rectangle that
    is filled according to the current fillStyle.

    This method draws directly to the canvas without modifying the current path, so any
    subsequent fill() or stroke() calls will have no effect on it.
    """
    aliasFor(__js_fillRect)
  }

  function strokeRect(x: Number, y: Number, width: Number, height: Number) {
    """
    https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect

    The CanvasRenderingContext2D.strokeRect() method of the Canvas 2D API draws a rectangle
    that is stroked (outlined) according to the current strokeStyle and other context settings.

    This method draws directly to the canvas without modifying the current path, so any subsequent
    fill() or stroke() calls will have no effect on it.
    """
    aliasFor(__js_strokeRect)
  }

  """
  #################################################################################################
  Drawing text
  #################################################################################################
  """

  function fillText(text: String, x: Number, y: Number) {
    "Draws (fills) a given text at the given (x, y) position."
    aliasFor(__js_fillText)
  }

  function fillTextMaxWidth(text: String, x: Number, y: Number, maxWidth: Number) {
    "Like fillText, but can specify maxWidth"
    aliasFor(__js_fillText)
  }

  function strokeText(text: String, x: Number, y: Number) {
    "Draws (strokes) a given text at the given (x, y) position."
    aliasFor(__js_strokeText)
  }

  function strokeTextMaxWidth(text: String, x: Number, y: Number, maxWidth: Number) {
    "Like strokeText, but can specify maxWidth"
    aliasFor(__js_strokeText)
  }

  function measureText(text: String): TextMetrics {
    "Returns a TextMetrics object."
    aliasFor(__js_measureText)
  }

  """
  #################################################################################################
  Line styles
  #################################################################################################
  """

  var lineWidth: Number """
    Width of lines. Default 1.0.
    """ = aliasFor(__js_lineWidth)

  var lineCap: Number """
    Type of endings on the end of lines. Possible values: butt (default), round, square.
    """ = aliasFor(__js_lineCap)

  var lineJoin: Number """
    Defines the type of corners where two lines meet. Possible values: round, bevel, miter (default).
    """ = aliasFor(__js_lineJoin)

  var miterLimit: Number """
    Miter limit ratio. Default 10.
    """ = aliasFor(__js_miterLimit)

  function getLineDash(): List[Number] {
    "Returns the current line dash pattern array containing an even number of non-negative numbers."
    aliasFor(__js_getLineDash)
  }

  function setLineDash(segments: List[Number]) {
    "Sets the current line dash pattern."
    aliasFor(__js_setLineDash)
  }

  var lineDashOffset: Number """
    Specifies where to start a dash array on a line.
    """= aliasFor(__js_lineDashOffset)

  """
  #################################################################################################
  Text styles
  #################################################################################################
  """

  var font: String """
    https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font

    The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current
    text style to use when drawing text. This string uses the same syntax as the CSS font
    specifier.
    """= aliasFor(__js_font)

  var textAlign: TextAlign """
    Text alignment setting. Possible values: start (default), end, left, right, center.
    """ = aliasFor(__js_textAlign)

  var textBaseline: TextBaseline """
    Baseline alignment setting. Possible values: top, hanging, middle, alphabetic (default),
    ideographic, bottom.
    """ = aliasFor(__js_textBaseline)

  var direction: TextDirection """
    Directionality. Possible values: ltr, rtl, inherit (default).
    """ = aliasFor(__js_direction)

  var letterSpacing: String """
    Letter spacing. Default: 0px.
    """ = aliasFor(__js_letterSpacing)

  var fontKerning: FontKerning """
    Font kerning. Possible values: auto (default), normal, none.
    """ = aliasFor(__js_fontKerning)

  var fontStretch: FontStretch """
    Font stretch. Possible values: ultra-condensed, extra-condensed, condensed, semi-condensed,
    normal (default), semi-expanded, expanded, extra-expanded, ultra-expanded.
    """ = aliasFor(__js_fontStretch)

  var fontVariantCaps: FontVariantCaps """
    Font variant caps. Possible values: normal (default), small-caps, all-small-caps, petite-caps,
    all-petite-caps, unicase, titling-caps.
    """ = aliasFor(__js_fontVariantCaps)

  var textRendering: TextRendering """
    Text rendering. Possible values: auto (default), optimizeSpeed, optimizeLegibility,
    geometricPrecision.
    """ = aliasFor(__js_textRendering)

  var wordSpacing: String """
    Word spacing. Default value: 0px
    """ = aliasFor(__js_wordSpacing)

  """
  #################################################################################################
  Fill and stroke styles
  #################################################################################################
  """

  var fillStyle: String """
    https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle

    Color or style to use inside shapes. Default #000 (black).
    """ = aliasFor(__js_fillStyle)

  var fillStyle: String """
    https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle

    Color or style to use for the lines around shapes. Default #000 (black).
    """ = aliasFor(__js_fillStyle)

  """
  #################################################################################################
  Drawing images
  #################################################################################################
  """

  function drawImage(image: DrawImageSource, dx: Number, dy: Number) {
    """
    https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage

    The CanvasRenderingContext2D.drawImage() method of the Canvas 2D API provides different ways to
    draw an image onto the canvas.
    """
    aliasFor(__js_drawImage)
  }

  function drawImage(image: DrawImageSource, dx: Number, dy: Number, dWidth: Number, dHeight: Number) {
    """
    https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage

    The CanvasRenderingContext2D.drawImage() method of the Canvas 2D API provides different ways to
    draw an image onto the canvas.
    """
    aliasFor(__js_drawImage)
  }

  function drawImage(
      image: DrawImageSource,
      sx: Number, sy: Number, sWidth: Number, sHeight: Number,
      dx: Number, dy: Number, dWidth: Number, dHeight: Number) {
    """
    https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage

    The CanvasRenderingContext2D.drawImage() method of the Canvas 2D API provides different ways to
    draw an image onto the canvas.
    """
    aliasFor(__js_drawImage)
  }
}
