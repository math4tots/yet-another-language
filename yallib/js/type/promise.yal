

export interface Promise {
  static {
    aliasFor(native constexpr "Promise")
    function new[T](handler: Function[Function[T, Null], Function[Any, Null], Any]): Promise[T] {
      aliasFor(__op_new__)
    }
    function all[T](promises: Iterable[Promise[T]]): Promise[List[T]] {
      """
      Takes an iterable of promises as input and returns a single Promise.
      This returned promise fulfills when all of the input's promises fulfill
      (including when an empty iterable is passed), with an array of the fulfillment
      values. It rejects when any of the input's promises reject, with this first
      rejection reason.

      ================

      Arguably, it might be more precise to have a tuple of promises and return
      a promise of a tuple - but getting the types just right might be a bit tricky
      given the type system as it currently is.
      """
      aliasFor(__js_all)
    }
    function any[T](promises: Iterable[Promise[T]]): Promise[T] {
      """
      Takes an iterable of promises as input and returns a single Promise.
      This returned promise fulfills when any of the input's promises fulfill,
      with this first fulfillment value. It rejects when all of the input's promises
      reject (including when an empty iterable is passed), with an AggregateError
      containing an array of rejection reasons.
      """
      aliasFor(__js_any)
    }
    function resolve[T](result: T): Promise[T] {
      """
      Returns a Promise object that is resolved with the given value.
      If the value is a thenable (i.e. has a then method), the returned promise
      will "follow" that thenable, adopting its eventual state; otherwise, the returned
      promise will be fulfilled with the value.
      """
      aliasFor(__js_resolve)
    }
    function reject[T](reason: Any): Promise[T] {
      """
      Returns a new Promise object that is rejected with the given reason.
      """
      aliasFor(__js_reject)
    }
  }
}
