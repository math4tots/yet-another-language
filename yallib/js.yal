"""
AUTOGENERATED FROM lib.es5.d.ts
WITH dom-gen/run.mjs
"""
export as js
export interface Object {
  """
  Provides functionality common to all JavaScript objects.
  """
  static {
    aliasFor(native constexpr "Object")
    function __call__(): Any {
      aliasFor(__call__)
    }
    function __call__(value: Any): Any {
      aliasFor(__call__)
    }
    const prototype: Object """
    A reference to the prototype for a class of objects.
    """ = aliasFor(__js_prototype)
    function getPrototypeOf(o: Any): Any {
      """
      Returns the prototype of an object.
      
      @param o The object that references the prototype.
      """
      aliasFor(__js_getPrototypeOf)
    }
    function getOwnPropertyDescriptor(o: Any, p: PropertyKey): Union[PropertyDescriptor, Null] {
      """
      Gets the own property descriptor of the specified object.
      
      An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.
      
      @param o Object that contains the property.
      
      @param p Name of the property.
      """
      aliasFor(__js_getOwnPropertyDescriptor)
    }
    function getOwnPropertyNames(o: Any): List[String] {
      """
      Returns the names of the own properties of an object. The own properties of an object are those that are defined directly
      
      on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.
      
      @param o Object that contains the own properties.
      """
      aliasFor(__js_getOwnPropertyNames)
    }
    function create(o: Union[Any, Null]): Any {
      """
      Creates an object that has the specified prototype or that has null prototype.
      
      @param o Object to use as a prototype. May be null.
      """
      aliasFor(__js_create)
    }
    function create(o: Union[Any, Null], properties: PropertyDescriptorMap): Any {
      """
      Creates an object that has the specified prototype, and that optionally contains specified properties.
      
      @param o Object to use as a prototype. May be null
      
      @param properties JavaScript object that contains one or more property descriptors.
      """
      aliasFor(__js_create)
    }
    function isSealed(o: Any): Bool {
      """
      Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.
      
      @param o Object to test.
      """
      aliasFor(__js_isSealed)
    }
    function isFrozen(o: Any): Bool {
      """
      Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.
      
      @param o Object to test.
      """
      aliasFor(__js_isFrozen)
    }
    function isExtensible(o: Any): Bool {
      """
      Returns a value that indicates whether new properties can be added to an object.
      
      @param o Object to test.
      """
      aliasFor(__js_isExtensible)
    }
    function keys(o: Any): List[String] {
      """
      Returns the names of the enumerable string properties and methods of an object.
      
      @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
      """
      aliasFor(__js_keys)
    }
  }
  var constructor: Function """
  The initial value of Object.prototype.constructor is the standard built-in Object constructor.
  """ = aliasFor(__js_constructor)
  function toString(): String {
    """
    Returns a string representation of an object.
    """
    aliasFor(__js_toString)
  }
  function toLocaleString(): String {
    """
    Returns a date converted to a string using the current locale.
    """
    aliasFor(__js_toLocaleString)
  }
  function valueOf(): Object {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
  function hasOwnProperty(v: PropertyKey): Bool {
    """
    Determines whether an object has a property with the specified name.
    
    @param v A property name.
    """
    aliasFor(__js_hasOwnProperty)
  }
  function isPrototypeOf(v: Object): Bool {
    """
    Determines whether an object exists in another object's prototype chain.
    
    @param v Another object whose prototype chain is to be checked.
    """
    aliasFor(__js_isPrototypeOf)
  }
  function propertyIsEnumerable(v: PropertyKey): Bool {
    """
    Determines whether a specified property is enumerable.
    
    @param v A property name.
    """
    aliasFor(__js_propertyIsEnumerable)
  }
}
export interface Function {
  """
  Creates a new function.
  """
  static {
    aliasFor(native constexpr "Function")
    const prototype: Function = aliasFor(__js_prototype)
  }
  function toString(): String {
    """
    Returns a string representation of a function.
    """
    aliasFor(__js_toString)
  }
  var prototype: Any = aliasFor(__js_prototype)
  const length: Number = aliasFor(__js_length)
  var arguments: Any = aliasFor(__js_arguments)
  var caller: Function = aliasFor(__js_caller)
}
export interface String {
  """
  Allows manipulation and formatting of text strings and determination and location of substrings within strings.
  """
  static {
    aliasFor(native constexpr "String")
    const prototype: String = aliasFor(__js_prototype)
  }
  function toString(): String {
    """
    Returns a string representation of a string.
    """
    aliasFor(__js_toString)
  }
  function charAt(pos: Number): String {
    """
    Returns the character at the specified index.
    
    @param pos The zero-based index of the desired character.
    """
    aliasFor(__js_charAt)
  }
  function charCodeAt(index: Number): Number {
    """
    Returns the Unicode value of the character at the specified location.
    
    @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.
    """
    aliasFor(__js_charCodeAt)
  }
  function localeCompare(that: String): Number {
    """
    Determines whether two strings are equivalent in the current locale.
    
    @param that String to compare to target string
    """
    aliasFor(__js_localeCompare)
  }
  function match(regexp: Union[String, RegExp]): Union[RegExpMatchArray, Null] {
    """
    Matches a string with a regular expression, and returns an array containing the results of that search.
    
    @param regexp A variable name or string literal containing the regular expression pattern and flags.
    """
    aliasFor(__js_match)
  }
  function replace(searchValue: Union[String, RegExp], replaceValue: String): String {
    """
    Replaces text in a string, using a regular expression or search string.
    
    @param searchValue A string or regular expression to search for.
    
    @param replaceValue A string containing the text to replace. When the {@linkcode searchValue} is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of {@linkcode searchValue} is replaced.
    """
    aliasFor(__js_replace)
  }
  function replace(searchValue: Union[String, RegExp], replacer: function(substring: String, args: List[Any]): String): String {
    """
    Replaces text in a string, using a regular expression or search string.
    
    @param searchValue A string to search for.
    
    @param replacer A function that returns the replacement text.
    """
    aliasFor(__js_replace)
  }
  function search(regexp: Union[String, RegExp]): Number {
    """
    Finds the first substring match in a regular expression search.
    
    @param regexp The regular expression pattern and applicable flags.
    """
    aliasFor(__js_search)
  }
  function toLowerCase(): String {
    """
    Converts all the alphabetic characters in a string to lowercase.
    """
    aliasFor(__js_toLowerCase)
  }
  function toUpperCase(): String {
    """
    Converts all the alphabetic characters in a string to uppercase.
    """
    aliasFor(__js_toUpperCase)
  }
  function trim(): String {
    """
    Removes the leading and trailing white space and line terminator characters from a string.
    """
    aliasFor(__js_trim)
  }
  const length: Number """
  Returns the length of a String object.
  """ = aliasFor(__js_length)
  function valueOf(): String {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}
export interface Boolean {
  static {
    aliasFor(native constexpr "Boolean")
    const prototype: Boolean = aliasFor(__js_prototype)
  }
  function valueOf(): Bool {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}
export interface Number {
  """
  An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers.
  """
  static {
    aliasFor(native constexpr "Number")
    const prototype: Number = aliasFor(__js_prototype)
    const MAX_VALUE: Number """
    The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308.
    """ = aliasFor(__js_MAX_VALUE)
    const MIN_VALUE: Number """
    The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324.
    """ = aliasFor(__js_MIN_VALUE)
    const NaN: Number """
    A value that is not a number.
    
    In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.
    """ = aliasFor(__js_NaN)
    const NEGATIVE_INFINITY: Number """
    A value that is less than the largest negative number that can be represented in JavaScript.
    
    JavaScript displays NEGATIVE_INFINITY values as -infinity.
    """ = aliasFor(__js_NEGATIVE_INFINITY)
    const POSITIVE_INFINITY: Number """
    A value greater than the largest number that can be represented in JavaScript.
    
    JavaScript displays POSITIVE_INFINITY values as infinity.
    """ = aliasFor(__js_POSITIVE_INFINITY)
  }
  function valueOf(): Number {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}
export interface Math {
  """
  An intrinsic object that provides basic mathematics functionality and constants.
  """
  static {
    aliasFor(native constexpr "Math")
    const E: Number """
    The mathematical constant e. This is Euler's number, the base of natural logarithms.
    """ = aliasFor(__js_E)
    const LN10: Number """
    The natural logarithm of 10.
    """ = aliasFor(__js_LN10)
    const LN2: Number """
    The natural logarithm of 2.
    """ = aliasFor(__js_LN2)
    const LOG2E: Number """
    The base-2 logarithm of e.
    """ = aliasFor(__js_LOG2E)
    const LOG10E: Number """
    The base-10 logarithm of e.
    """ = aliasFor(__js_LOG10E)
    const PI: Number """
    Pi. This is the ratio of the circumference of a circle to its diameter.
    """ = aliasFor(__js_PI)
    const SQRT1_2: Number """
    The square root of 0.5, or, equivalently, one divided by the square root of 2.
    """ = aliasFor(__js_SQRT1_2)
    const SQRT2: Number """
    The square root of 2.
    """ = aliasFor(__js_SQRT2)
    function abs(x: Number): Number {
      """
      Returns the absolute value of a number (the value without regard to whether it is positive or negative).
      
      For example, the absolute value of -5 is the same as the absolute value of 5.
      
      @param x A numeric expression for which the absolute value is needed.
      """
      aliasFor(__js_abs)
    }
    function acos(x: Number): Number {
      """
      Returns the arc cosine (or inverse cosine) of a number.
      
      @param x A numeric expression.
      """
      aliasFor(__js_acos)
    }
    function asin(x: Number): Number {
      """
      Returns the arcsine of a number.
      
      @param x A numeric expression.
      """
      aliasFor(__js_asin)
    }
    function atan(x: Number): Number {
      """
      Returns the arctangent of a number.
      
      @param x A numeric expression for which the arctangent is needed.
      """
      aliasFor(__js_atan)
    }
    function atan2(y: Number, x: Number): Number {
      """
      Returns the angle (in radians) from the X axis to a point.
      
      @param y A numeric expression representing the cartesian y-coordinate.
      
      @param x A numeric expression representing the cartesian x-coordinate.
      """
      aliasFor(__js_atan2)
    }
    function ceil(x: Number): Number {
      """
      Returns the smallest integer greater than or equal to its numeric argument.
      
      @param x A numeric expression.
      """
      aliasFor(__js_ceil)
    }
    function cos(x: Number): Number {
      """
      Returns the cosine of a number.
      
      @param x A numeric expression that contains an angle measured in radians.
      """
      aliasFor(__js_cos)
    }
    function exp(x: Number): Number {
      """
      Returns e (the base of natural logarithms) raised to a power.
      
      @param x A numeric expression representing the power of e.
      """
      aliasFor(__js_exp)
    }
    function floor(x: Number): Number {
      """
      Returns the greatest integer less than or equal to its numeric argument.
      
      @param x A numeric expression.
      """
      aliasFor(__js_floor)
    }
    function log(x: Number): Number {
      """
      Returns the natural logarithm (base e) of a number.
      
      @param x A numeric expression.
      """
      aliasFor(__js_log)
    }
    function pow(x: Number, y: Number): Number {
      """
      Returns the value of a base expression taken to a specified power.
      
      @param x The base value of the expression.
      
      @param y The exponent value of the expression.
      """
      aliasFor(__js_pow)
    }
    function random(): Number {
      """
      Returns a pseudorandom number between 0 and 1.
      """
      aliasFor(__js_random)
    }
    function round(x: Number): Number {
      """
      Returns a supplied numeric expression rounded to the nearest integer.
      
      @param x The value to be rounded to the nearest integer.
      """
      aliasFor(__js_round)
    }
    function sin(x: Number): Number {
      """
      Returns the sine of a number.
      
      @param x A numeric expression that contains an angle measured in radians.
      """
      aliasFor(__js_sin)
    }
    function sqrt(x: Number): Number {
      """
      Returns the square root of a number.
      
      @param x A numeric expression.
      """
      aliasFor(__js_sqrt)
    }
    function tan(x: Number): Number {
      """
      Returns the tangent of a number.
      
      @param x A numeric expression that contains an angle measured in radians.
      """
      aliasFor(__js_tan)
    }
  }
}
export interface Date {
  """
  Enables basic storage and retrieval of dates and times.
  """
  static {
    aliasFor(native constexpr "Date")
    function new(): Date {
      aliasFor(__op_new__)
    }
    function new(value: Union[Number, String]): Date {
      aliasFor(__op_new__)
    }
    function __call__(): String {
      aliasFor(__call__)
    }
    const prototype: Date = aliasFor(__js_prototype)
    function parse(s: String): Number {
      """
      Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.
      
      @param s A date string
      """
      aliasFor(__js_parse)
    }
    function now(): Number {
      """
      Returns the number of milliseconds elapsed since midnight, January 1, 1970 Universal Coordinated Time (UTC).
      """
      aliasFor(__js_now)
    }
  }
  function toString(): String {
    """
    Returns a string representation of a date. The format of the string depends on the locale.
    """
    aliasFor(__js_toString)
  }
  function toDateString(): String {
    """
    Returns a date as a string value.
    """
    aliasFor(__js_toDateString)
  }
  function toTimeString(): String {
    """
    Returns a time as a string value.
    """
    aliasFor(__js_toTimeString)
  }
  function toLocaleString(): String {
    """
    Returns a value as a string value appropriate to the host environment's current locale.
    """
    aliasFor(__js_toLocaleString)
  }
  function toLocaleDateString(): String {
    """
    Returns a date as a string value appropriate to the host environment's current locale.
    """
    aliasFor(__js_toLocaleDateString)
  }
  function toLocaleTimeString(): String {
    """
    Returns a time as a string value appropriate to the host environment's current locale.
    """
    aliasFor(__js_toLocaleTimeString)
  }
  function valueOf(): Number {
    """
    Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.
    """
    aliasFor(__js_valueOf)
  }
  function getTime(): Number {
    """
    Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.
    """
    aliasFor(__js_getTime)
  }
  function getFullYear(): Number {
    """
    Gets the year, using local time.
    """
    aliasFor(__js_getFullYear)
  }
  function getUTCFullYear(): Number {
    """
    Gets the year using Universal Coordinated Time (UTC).
    """
    aliasFor(__js_getUTCFullYear)
  }
  function getMonth(): Number {
    """
    Gets the month, using local time.
    """
    aliasFor(__js_getMonth)
  }
  function getUTCMonth(): Number {
    """
    Gets the month of a Date object using Universal Coordinated Time (UTC).
    """
    aliasFor(__js_getUTCMonth)
  }
  function getDate(): Number {
    """
    Gets the day-of-the-month, using local time.
    """
    aliasFor(__js_getDate)
  }
  function getUTCDate(): Number {
    """
    Gets the day-of-the-month, using Universal Coordinated Time (UTC).
    """
    aliasFor(__js_getUTCDate)
  }
  function getDay(): Number {
    """
    Gets the day of the week, using local time.
    """
    aliasFor(__js_getDay)
  }
  function getUTCDay(): Number {
    """
    Gets the day of the week using Universal Coordinated Time (UTC).
    """
    aliasFor(__js_getUTCDay)
  }
  function getHours(): Number {
    """
    Gets the hours in a date, using local time.
    """
    aliasFor(__js_getHours)
  }
  function getUTCHours(): Number {
    """
    Gets the hours value in a Date object using Universal Coordinated Time (UTC).
    """
    aliasFor(__js_getUTCHours)
  }
  function getMinutes(): Number {
    """
    Gets the minutes of a Date object, using local time.
    """
    aliasFor(__js_getMinutes)
  }
  function getUTCMinutes(): Number {
    """
    Gets the minutes of a Date object using Universal Coordinated Time (UTC).
    """
    aliasFor(__js_getUTCMinutes)
  }
  function getSeconds(): Number {
    """
    Gets the seconds of a Date object, using local time.
    """
    aliasFor(__js_getSeconds)
  }
  function getUTCSeconds(): Number {
    """
    Gets the seconds of a Date object using Universal Coordinated Time (UTC).
    """
    aliasFor(__js_getUTCSeconds)
  }
  function getMilliseconds(): Number {
    """
    Gets the milliseconds of a Date, using local time.
    """
    aliasFor(__js_getMilliseconds)
  }
  function getUTCMilliseconds(): Number {
    """
    Gets the milliseconds of a Date object using Universal Coordinated Time (UTC).
    """
    aliasFor(__js_getUTCMilliseconds)
  }
  function getTimezoneOffset(): Number {
    """
    Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC).
    """
    aliasFor(__js_getTimezoneOffset)
  }
  function setTime(time: Number): Number {
    """
    Sets the date and time value in the Date object.
    
    @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.
    """
    aliasFor(__js_setTime)
  }
  function setMilliseconds(ms: Number): Number {
    """
    Sets the milliseconds value in the Date object using local time.
    
    @param ms A numeric value equal to the millisecond value.
    """
    aliasFor(__js_setMilliseconds)
  }
  function setUTCMilliseconds(ms: Number): Number {
    """
    Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).
    
    @param ms A numeric value equal to the millisecond value.
    """
    aliasFor(__js_setUTCMilliseconds)
  }
  function setDate(date: Number): Number {
    """
    Sets the numeric day-of-the-month value of the Date object using local time.
    
    @param date A numeric value equal to the day of the month.
    """
    aliasFor(__js_setDate)
  }
  function setUTCDate(date: Number): Number {
    """
    Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).
    
    @param date A numeric value equal to the day of the month.
    """
    aliasFor(__js_setUTCDate)
  }
  function toUTCString(): String {
    """
    Returns a date converted to a string using Universal Coordinated Time (UTC).
    """
    aliasFor(__js_toUTCString)
  }
  function toISOString(): String {
    """
    Returns a date as a string value in ISO format.
    """
    aliasFor(__js_toISOString)
  }
}
export interface RegExp {
  static {
    aliasFor(native constexpr "RegExp")
    function new(pattern: Union[RegExp, String]): RegExp {
      aliasFor(__op_new__)
    }
    function __call__(pattern: Union[RegExp, String]): RegExp {
      aliasFor(__call__)
    }
  }
  function exec(string: String): Union[RegExpExecArray, Null] {
    """
    Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.
    
    @param string The String object or string literal on which to perform the search.
    """
    aliasFor(__js_exec)
  }
  function test(string: String): Bool {
    """
    Returns a Boolean value that indicates whether or not a pattern exists in a searched string.
    
    @param string String on which to perform the search.
    """
    aliasFor(__js_test)
  }
  const source: String """
  Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal.
  """ = aliasFor(__js_source)
  const global: Bool """
  Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only.
  """ = aliasFor(__js_global)
  const ignoreCase: Bool """
  Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only.
  """ = aliasFor(__js_ignoreCase)
  const multiline: Bool """
  Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only.
  """ = aliasFor(__js_multiline)
  var lastIndex: Number = aliasFor(__js_lastIndex)
}
export interface Error {
  static {
    aliasFor(native constexpr "Error")
    const prototype: Error = aliasFor(__js_prototype)
  }
  var name: String = aliasFor(__js_name)
  var message: String = aliasFor(__js_message)
  var stack: Nullable[String] = aliasFor(__js_stack)
}
export interface EvalError {
  static {
    aliasFor(native constexpr "EvalError")
    const prototype: EvalError = aliasFor(__js_prototype)
  }
}
export interface RangeError {
  static {
    aliasFor(native constexpr "RangeError")
    const prototype: RangeError = aliasFor(__js_prototype)
  }
}
export interface ReferenceError {
  static {
    aliasFor(native constexpr "ReferenceError")
    const prototype: ReferenceError = aliasFor(__js_prototype)
  }
}
export interface SyntaxError {
  static {
    aliasFor(native constexpr "SyntaxError")
    const prototype: SyntaxError = aliasFor(__js_prototype)
  }
}
export interface TypeError {
  static {
    aliasFor(native constexpr "TypeError")
    const prototype: TypeError = aliasFor(__js_prototype)
  }
}
export interface URIError {
  static {
    aliasFor(native constexpr "URIError")
    const prototype: URIError = aliasFor(__js_prototype)
  }
}
export interface JSON {
  """
  An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.
  """
  static {
    aliasFor(native constexpr "JSON")
  }
}
export interface Array {
  static {
    aliasFor(native constexpr "Array")
    function isArray(arg: Any): Any {
      aliasFor(__js_isArray)
    }
    const prototype: List[Any] = aliasFor(__js_prototype)
  }
}
export interface ArrayBuffer {
  """
  Represents a raw buffer of binary data, which is used to store data for the
  
  different typed arrays. ArrayBuffers cannot be read from or written to directly,
  
  but can be passed to a typed array or DataView Object to interpret the raw
  
  buffer as needed.
  """
  static {
    aliasFor(native constexpr "ArrayBuffer")
    const prototype: ArrayBuffer = aliasFor(__js_prototype)
    function new(byteLength: Number): ArrayBuffer {
      aliasFor(__op_new__)
    }
    function isView(arg: Any): Any {
      aliasFor(__js_isView)
    }
  }
  const byteLength: Number """
  Read-only. The length of the ArrayBuffer (in bytes).
  """ = aliasFor(__js_byteLength)
}
export interface DataView {
  static {
    aliasFor(native constexpr "DataView")
    const prototype: DataView = aliasFor(__js_prototype)
  }
  const buffer: ArrayBuffer = aliasFor(__js_buffer)
  const byteLength: Number = aliasFor(__js_byteLength)
  const byteOffset: Number = aliasFor(__js_byteOffset)
  function getInt8(byteOffset: Number): Number {
    """
    Gets the Int8 value at the specified byte offset from the start of the view. There is
    
    no alignment constraint; multi-byte values may be fetched from any offset.
    
    @param byteOffset The place in the buffer at which the value should be retrieved.
    """
    aliasFor(__js_getInt8)
  }
  function getUint8(byteOffset: Number): Number {
    """
    Gets the Uint8 value at the specified byte offset from the start of the view. There is
    
    no alignment constraint; multi-byte values may be fetched from any offset.
    
    @param byteOffset The place in the buffer at which the value should be retrieved.
    """
    aliasFor(__js_getUint8)
  }
  function setInt8(byteOffset: Number, value: Number): Null {
    """
    Stores an Int8 value at the specified byte offset from the start of the view.
    
    @param byteOffset The place in the buffer at which the value should be set.
    
    @param value The value to set.
    """
    aliasFor(__js_setInt8)
  }
  function setUint8(byteOffset: Number, value: Number): Null {
    """
    Stores an Uint8 value at the specified byte offset from the start of the view.
    
    @param byteOffset The place in the buffer at which the value should be set.
    
    @param value The value to set.
    """
    aliasFor(__js_setUint8)
  }
}
export interface Int8Array {
  """
  A typed array of 8-bit integer values. The contents are initialized to 0. If the requested
  
  number of bytes could not be allocated an exception is raised.
  """
  static {
    aliasFor(native constexpr "Int8Array")
    const prototype: Int8Array = aliasFor(__js_prototype)
    function new(length: Number): Int8Array {
      aliasFor(__op_new__)
    }
    function new(array: Union[List[Number], ArrayBuffer]): Int8Array {
      aliasFor(__op_new__)
    }
    const BYTES_PER_ELEMENT: Number """
    The size in bytes of each element in the array.
    """ = aliasFor(__js_BYTES_PER_ELEMENT)
    function from(arrayLike: List[Number]): Int8Array {
      """
      Creates an array from an array-like or iterable object.
      
      @param arrayLike An array-like or iterable object to convert to an array.
      """
      aliasFor(__js_from)
    }
  }
  const BYTES_PER_ELEMENT: Number """
  The size in bytes of each element in the array.
  """ = aliasFor(__js_BYTES_PER_ELEMENT)
  const buffer: ArrayBuffer """
  The ArrayBuffer instance referenced by the array.
  """ = aliasFor(__js_buffer)
  const byteLength: Number """
  The length in bytes of the array.
  """ = aliasFor(__js_byteLength)
  const byteOffset: Number """
  The offset in bytes of the array.
  """ = aliasFor(__js_byteOffset)
  const length: Number """
  The length of the array.
  """ = aliasFor(__js_length)
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int8Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array. The return value of
    
    the callback function is the accumulated result, and is provided as an argument in the next
    
    call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduce method calls the
    
    callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an argument
    
    instead of an array value.
    """
    aliasFor(__js_reduce)
  }
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int8Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduce)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int8Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array, in descending order.
    
    The return value of the callback function is the accumulated result, and is provided as an
    
    argument in the next call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
    
    the callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an
    
    argument instead of an array value.
    """
    aliasFor(__js_reduceRight)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int8Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduceRight)
  }
  function reverse(): Int8Array {
    """
    Reverses the elements in an Array.
    """
    aliasFor(__js_reverse)
  }
  function toLocaleString(): String {
    """
    Converts a number to a string by using the current locale.
    """
    aliasFor(__js_toLocaleString)
  }
  function toString(): String {
    """
    Returns a string representation of an array.
    """
    aliasFor(__js_toString)
  }
  function valueOf(): Int8Array {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}
export interface Uint8Array {
  """
  A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the
  
  requested number of bytes could not be allocated an exception is raised.
  """
  static {
    aliasFor(native constexpr "Uint8Array")
    const prototype: Uint8Array = aliasFor(__js_prototype)
    function new(length: Number): Uint8Array {
      aliasFor(__op_new__)
    }
    function new(array: Union[List[Number], ArrayBuffer]): Uint8Array {
      aliasFor(__op_new__)
    }
    const BYTES_PER_ELEMENT: Number """
    The size in bytes of each element in the array.
    """ = aliasFor(__js_BYTES_PER_ELEMENT)
    function from(arrayLike: List[Number]): Uint8Array {
      """
      Creates an array from an array-like or iterable object.
      
      @param arrayLike An array-like or iterable object to convert to an array.
      """
      aliasFor(__js_from)
    }
  }
  const BYTES_PER_ELEMENT: Number """
  The size in bytes of each element in the array.
  """ = aliasFor(__js_BYTES_PER_ELEMENT)
  const buffer: ArrayBuffer """
  The ArrayBuffer instance referenced by the array.
  """ = aliasFor(__js_buffer)
  const byteLength: Number """
  The length in bytes of the array.
  """ = aliasFor(__js_byteLength)
  const byteOffset: Number """
  The offset in bytes of the array.
  """ = aliasFor(__js_byteOffset)
  const length: Number """
  The length of the array.
  """ = aliasFor(__js_length)
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint8Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array. The return value of
    
    the callback function is the accumulated result, and is provided as an argument in the next
    
    call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduce method calls the
    
    callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an argument
    
    instead of an array value.
    """
    aliasFor(__js_reduce)
  }
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint8Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduce)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint8Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array, in descending order.
    
    The return value of the callback function is the accumulated result, and is provided as an
    
    argument in the next call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
    
    the callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an
    
    argument instead of an array value.
    """
    aliasFor(__js_reduceRight)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint8Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduceRight)
  }
  function reverse(): Uint8Array {
    """
    Reverses the elements in an Array.
    """
    aliasFor(__js_reverse)
  }
  function toLocaleString(): String {
    """
    Converts a number to a string by using the current locale.
    """
    aliasFor(__js_toLocaleString)
  }
  function toString(): String {
    """
    Returns a string representation of an array.
    """
    aliasFor(__js_toString)
  }
  function valueOf(): Uint8Array {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}
export interface Uint8ClampedArray {
  """
  A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.
  
  If the requested number of bytes could not be allocated an exception is raised.
  """
  static {
    aliasFor(native constexpr "Uint8ClampedArray")
    const prototype: Uint8ClampedArray = aliasFor(__js_prototype)
    function new(length: Number): Uint8ClampedArray {
      aliasFor(__op_new__)
    }
    function new(array: Union[List[Number], ArrayBuffer]): Uint8ClampedArray {
      aliasFor(__op_new__)
    }
    const BYTES_PER_ELEMENT: Number """
    The size in bytes of each element in the array.
    """ = aliasFor(__js_BYTES_PER_ELEMENT)
    function from(arrayLike: List[Number]): Uint8ClampedArray {
      """
      Creates an array from an array-like or iterable object.
      
      @param arrayLike An array-like or iterable object to convert to an array.
      """
      aliasFor(__js_from)
    }
  }
  const BYTES_PER_ELEMENT: Number """
  The size in bytes of each element in the array.
  """ = aliasFor(__js_BYTES_PER_ELEMENT)
  const buffer: ArrayBuffer """
  The ArrayBuffer instance referenced by the array.
  """ = aliasFor(__js_buffer)
  const byteLength: Number """
  The length in bytes of the array.
  """ = aliasFor(__js_byteLength)
  const byteOffset: Number """
  The offset in bytes of the array.
  """ = aliasFor(__js_byteOffset)
  const length: Number """
  The length of the array.
  """ = aliasFor(__js_length)
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint8ClampedArray): Number): Number {
    """
    Calls the specified callback function for all the elements in an array. The return value of
    
    the callback function is the accumulated result, and is provided as an argument in the next
    
    call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduce method calls the
    
    callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an argument
    
    instead of an array value.
    """
    aliasFor(__js_reduce)
  }
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint8ClampedArray): Number, initialValue: Number): Number {
    aliasFor(__js_reduce)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint8ClampedArray): Number): Number {
    """
    Calls the specified callback function for all the elements in an array, in descending order.
    
    The return value of the callback function is the accumulated result, and is provided as an
    
    argument in the next call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
    
    the callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an
    
    argument instead of an array value.
    """
    aliasFor(__js_reduceRight)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint8ClampedArray): Number, initialValue: Number): Number {
    aliasFor(__js_reduceRight)
  }
  function reverse(): Uint8ClampedArray {
    """
    Reverses the elements in an Array.
    """
    aliasFor(__js_reverse)
  }
  function toLocaleString(): String {
    """
    Converts a number to a string by using the current locale.
    """
    aliasFor(__js_toLocaleString)
  }
  function toString(): String {
    """
    Returns a string representation of an array.
    """
    aliasFor(__js_toString)
  }
  function valueOf(): Uint8ClampedArray {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}
export interface Int16Array {
  """
  A typed array of 16-bit signed integer values. The contents are initialized to 0. If the
  
  requested number of bytes could not be allocated an exception is raised.
  """
  static {
    aliasFor(native constexpr "Int16Array")
    const prototype: Int16Array = aliasFor(__js_prototype)
    function new(length: Number): Int16Array {
      aliasFor(__op_new__)
    }
    function new(array: Union[List[Number], ArrayBuffer]): Int16Array {
      aliasFor(__op_new__)
    }
    const BYTES_PER_ELEMENT: Number """
    The size in bytes of each element in the array.
    """ = aliasFor(__js_BYTES_PER_ELEMENT)
    function from(arrayLike: List[Number]): Int16Array {
      """
      Creates an array from an array-like or iterable object.
      
      @param arrayLike An array-like or iterable object to convert to an array.
      """
      aliasFor(__js_from)
    }
  }
  const BYTES_PER_ELEMENT: Number """
  The size in bytes of each element in the array.
  """ = aliasFor(__js_BYTES_PER_ELEMENT)
  const buffer: ArrayBuffer """
  The ArrayBuffer instance referenced by the array.
  """ = aliasFor(__js_buffer)
  const byteLength: Number """
  The length in bytes of the array.
  """ = aliasFor(__js_byteLength)
  const byteOffset: Number """
  The offset in bytes of the array.
  """ = aliasFor(__js_byteOffset)
  const length: Number """
  The length of the array.
  """ = aliasFor(__js_length)
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int16Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array. The return value of
    
    the callback function is the accumulated result, and is provided as an argument in the next
    
    call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduce method calls the
    
    callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an argument
    
    instead of an array value.
    """
    aliasFor(__js_reduce)
  }
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int16Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduce)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int16Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array, in descending order.
    
    The return value of the callback function is the accumulated result, and is provided as an
    
    argument in the next call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
    
    the callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an
    
    argument instead of an array value.
    """
    aliasFor(__js_reduceRight)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int16Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduceRight)
  }
  function reverse(): Int16Array {
    """
    Reverses the elements in an Array.
    """
    aliasFor(__js_reverse)
  }
  function toLocaleString(): String {
    """
    Converts a number to a string by using the current locale.
    """
    aliasFor(__js_toLocaleString)
  }
  function toString(): String {
    """
    Returns a string representation of an array.
    """
    aliasFor(__js_toString)
  }
  function valueOf(): Int16Array {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}
export interface Uint16Array {
  """
  A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the
  
  requested number of bytes could not be allocated an exception is raised.
  """
  static {
    aliasFor(native constexpr "Uint16Array")
    const prototype: Uint16Array = aliasFor(__js_prototype)
    function new(length: Number): Uint16Array {
      aliasFor(__op_new__)
    }
    function new(array: Union[List[Number], ArrayBuffer]): Uint16Array {
      aliasFor(__op_new__)
    }
    const BYTES_PER_ELEMENT: Number """
    The size in bytes of each element in the array.
    """ = aliasFor(__js_BYTES_PER_ELEMENT)
    function from(arrayLike: List[Number]): Uint16Array {
      """
      Creates an array from an array-like or iterable object.
      
      @param arrayLike An array-like or iterable object to convert to an array.
      """
      aliasFor(__js_from)
    }
  }
  const BYTES_PER_ELEMENT: Number """
  The size in bytes of each element in the array.
  """ = aliasFor(__js_BYTES_PER_ELEMENT)
  const buffer: ArrayBuffer """
  The ArrayBuffer instance referenced by the array.
  """ = aliasFor(__js_buffer)
  const byteLength: Number """
  The length in bytes of the array.
  """ = aliasFor(__js_byteLength)
  const byteOffset: Number """
  The offset in bytes of the array.
  """ = aliasFor(__js_byteOffset)
  const length: Number """
  The length of the array.
  """ = aliasFor(__js_length)
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint16Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array. The return value of
    
    the callback function is the accumulated result, and is provided as an argument in the next
    
    call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduce method calls the
    
    callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an argument
    
    instead of an array value.
    """
    aliasFor(__js_reduce)
  }
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint16Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduce)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint16Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array, in descending order.
    
    The return value of the callback function is the accumulated result, and is provided as an
    
    argument in the next call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
    
    the callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an
    
    argument instead of an array value.
    """
    aliasFor(__js_reduceRight)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint16Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduceRight)
  }
  function reverse(): Uint16Array {
    """
    Reverses the elements in an Array.
    """
    aliasFor(__js_reverse)
  }
  function toLocaleString(): String {
    """
    Converts a number to a string by using the current locale.
    """
    aliasFor(__js_toLocaleString)
  }
  function toString(): String {
    """
    Returns a string representation of an array.
    """
    aliasFor(__js_toString)
  }
  function valueOf(): Uint16Array {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}
export interface Int32Array {
  """
  A typed array of 32-bit signed integer values. The contents are initialized to 0. If the
  
  requested number of bytes could not be allocated an exception is raised.
  """
  static {
    aliasFor(native constexpr "Int32Array")
    const prototype: Int32Array = aliasFor(__js_prototype)
    function new(length: Number): Int32Array {
      aliasFor(__op_new__)
    }
    function new(array: Union[List[Number], ArrayBuffer]): Int32Array {
      aliasFor(__op_new__)
    }
    const BYTES_PER_ELEMENT: Number """
    The size in bytes of each element in the array.
    """ = aliasFor(__js_BYTES_PER_ELEMENT)
    function from(arrayLike: List[Number]): Int32Array {
      """
      Creates an array from an array-like or iterable object.
      
      @param arrayLike An array-like or iterable object to convert to an array.
      """
      aliasFor(__js_from)
    }
  }
  const BYTES_PER_ELEMENT: Number """
  The size in bytes of each element in the array.
  """ = aliasFor(__js_BYTES_PER_ELEMENT)
  const buffer: ArrayBuffer """
  The ArrayBuffer instance referenced by the array.
  """ = aliasFor(__js_buffer)
  const byteLength: Number """
  The length in bytes of the array.
  """ = aliasFor(__js_byteLength)
  const byteOffset: Number """
  The offset in bytes of the array.
  """ = aliasFor(__js_byteOffset)
  const length: Number """
  The length of the array.
  """ = aliasFor(__js_length)
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int32Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array. The return value of
    
    the callback function is the accumulated result, and is provided as an argument in the next
    
    call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduce method calls the
    
    callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an argument
    
    instead of an array value.
    """
    aliasFor(__js_reduce)
  }
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int32Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduce)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int32Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array, in descending order.
    
    The return value of the callback function is the accumulated result, and is provided as an
    
    argument in the next call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
    
    the callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an
    
    argument instead of an array value.
    """
    aliasFor(__js_reduceRight)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Int32Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduceRight)
  }
  function reverse(): Int32Array {
    """
    Reverses the elements in an Array.
    """
    aliasFor(__js_reverse)
  }
  function toLocaleString(): String {
    """
    Converts a number to a string by using the current locale.
    """
    aliasFor(__js_toLocaleString)
  }
  function toString(): String {
    """
    Returns a string representation of an array.
    """
    aliasFor(__js_toString)
  }
  function valueOf(): Int32Array {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}
export interface Uint32Array {
  """
  A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the
  
  requested number of bytes could not be allocated an exception is raised.
  """
  static {
    aliasFor(native constexpr "Uint32Array")
    const prototype: Uint32Array = aliasFor(__js_prototype)
    function new(length: Number): Uint32Array {
      aliasFor(__op_new__)
    }
    function new(array: Union[List[Number], ArrayBuffer]): Uint32Array {
      aliasFor(__op_new__)
    }
    const BYTES_PER_ELEMENT: Number """
    The size in bytes of each element in the array.
    """ = aliasFor(__js_BYTES_PER_ELEMENT)
    function from(arrayLike: List[Number]): Uint32Array {
      """
      Creates an array from an array-like or iterable object.
      
      @param arrayLike An array-like or iterable object to convert to an array.
      """
      aliasFor(__js_from)
    }
  }
  const BYTES_PER_ELEMENT: Number """
  The size in bytes of each element in the array.
  """ = aliasFor(__js_BYTES_PER_ELEMENT)
  const buffer: ArrayBuffer """
  The ArrayBuffer instance referenced by the array.
  """ = aliasFor(__js_buffer)
  const byteLength: Number """
  The length in bytes of the array.
  """ = aliasFor(__js_byteLength)
  const byteOffset: Number """
  The offset in bytes of the array.
  """ = aliasFor(__js_byteOffset)
  const length: Number """
  The length of the array.
  """ = aliasFor(__js_length)
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint32Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array. The return value of
    
    the callback function is the accumulated result, and is provided as an argument in the next
    
    call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduce method calls the
    
    callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an argument
    
    instead of an array value.
    """
    aliasFor(__js_reduce)
  }
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint32Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduce)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint32Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array, in descending order.
    
    The return value of the callback function is the accumulated result, and is provided as an
    
    argument in the next call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
    
    the callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an
    
    argument instead of an array value.
    """
    aliasFor(__js_reduceRight)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Uint32Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduceRight)
  }
  function reverse(): Uint32Array {
    """
    Reverses the elements in an Array.
    """
    aliasFor(__js_reverse)
  }
  function toLocaleString(): String {
    """
    Converts a number to a string by using the current locale.
    """
    aliasFor(__js_toLocaleString)
  }
  function toString(): String {
    """
    Returns a string representation of an array.
    """
    aliasFor(__js_toString)
  }
  function valueOf(): Uint32Array {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}
export interface Float32Array {
  """
  A typed array of 32-bit float values. The contents are initialized to 0. If the requested number
  
  of bytes could not be allocated an exception is raised.
  """
  static {
    aliasFor(native constexpr "Float32Array")
    const prototype: Float32Array = aliasFor(__js_prototype)
    function new(length: Number): Float32Array {
      aliasFor(__op_new__)
    }
    function new(array: Union[List[Number], ArrayBuffer]): Float32Array {
      aliasFor(__op_new__)
    }
    const BYTES_PER_ELEMENT: Number """
    The size in bytes of each element in the array.
    """ = aliasFor(__js_BYTES_PER_ELEMENT)
    function from(arrayLike: List[Number]): Float32Array {
      """
      Creates an array from an array-like or iterable object.
      
      @param arrayLike An array-like or iterable object to convert to an array.
      """
      aliasFor(__js_from)
    }
  }
  const BYTES_PER_ELEMENT: Number """
  The size in bytes of each element in the array.
  """ = aliasFor(__js_BYTES_PER_ELEMENT)
  const buffer: ArrayBuffer """
  The ArrayBuffer instance referenced by the array.
  """ = aliasFor(__js_buffer)
  const byteLength: Number """
  The length in bytes of the array.
  """ = aliasFor(__js_byteLength)
  const byteOffset: Number """
  The offset in bytes of the array.
  """ = aliasFor(__js_byteOffset)
  const length: Number """
  The length of the array.
  """ = aliasFor(__js_length)
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Float32Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array. The return value of
    
    the callback function is the accumulated result, and is provided as an argument in the next
    
    call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduce method calls the
    
    callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an argument
    
    instead of an array value.
    """
    aliasFor(__js_reduce)
  }
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Float32Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduce)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Float32Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array, in descending order.
    
    The return value of the callback function is the accumulated result, and is provided as an
    
    argument in the next call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
    
    the callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an
    
    argument instead of an array value.
    """
    aliasFor(__js_reduceRight)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Float32Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduceRight)
  }
  function reverse(): Float32Array {
    """
    Reverses the elements in an Array.
    """
    aliasFor(__js_reverse)
  }
  function toLocaleString(): String {
    """
    Converts a number to a string by using the current locale.
    """
    aliasFor(__js_toLocaleString)
  }
  function toString(): String {
    """
    Returns a string representation of an array.
    """
    aliasFor(__js_toString)
  }
  function valueOf(): Float32Array {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}
export interface Float64Array {
  """
  A typed array of 64-bit float values. The contents are initialized to 0. If the requested
  
  number of bytes could not be allocated an exception is raised.
  """
  static {
    aliasFor(native constexpr "Float64Array")
    const prototype: Float64Array = aliasFor(__js_prototype)
    function new(length: Number): Float64Array {
      aliasFor(__op_new__)
    }
    function new(array: Union[List[Number], ArrayBuffer]): Float64Array {
      aliasFor(__op_new__)
    }
    const BYTES_PER_ELEMENT: Number """
    The size in bytes of each element in the array.
    """ = aliasFor(__js_BYTES_PER_ELEMENT)
    function from(arrayLike: List[Number]): Float64Array {
      """
      Creates an array from an array-like or iterable object.
      
      @param arrayLike An array-like or iterable object to convert to an array.
      """
      aliasFor(__js_from)
    }
  }
  const BYTES_PER_ELEMENT: Number """
  The size in bytes of each element in the array.
  """ = aliasFor(__js_BYTES_PER_ELEMENT)
  const buffer: ArrayBuffer """
  The ArrayBuffer instance referenced by the array.
  """ = aliasFor(__js_buffer)
  const byteLength: Number """
  The length in bytes of the array.
  """ = aliasFor(__js_byteLength)
  const byteOffset: Number """
  The offset in bytes of the array.
  """ = aliasFor(__js_byteOffset)
  const length: Number """
  The length of the array.
  """ = aliasFor(__js_length)
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Float64Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array. The return value of
    
    the callback function is the accumulated result, and is provided as an argument in the next
    
    call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduce method calls the
    
    callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an argument
    
    instead of an array value.
    """
    aliasFor(__js_reduce)
  }
  function reduce(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Float64Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduce)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Float64Array): Number): Number {
    """
    Calls the specified callback function for all the elements in an array, in descending order.
    
    The return value of the callback function is the accumulated result, and is provided as an
    
    argument in the next call to the callback function.
    
    @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
    
    the callbackfn function one time for each element in the array.
    
    @param initialValue If initialValue is specified, it is used as the initial value to start
    
    the accumulation. The first call to the callbackfn function provides this value as an
    
    argument instead of an array value.
    """
    aliasFor(__js_reduceRight)
  }
  function reduceRight(callbackfn: function(previousValue: Number, currentValue: Number, currentIndex: Number, array: Float64Array): Number, initialValue: Number): Number {
    aliasFor(__js_reduceRight)
  }
  function reverse(): Float64Array {
    """
    Reverses the elements in an Array.
    """
    aliasFor(__js_reverse)
  }
  function toLocaleString(): String {
    """
    Converts a number to a string by using the current locale.
    """
    aliasFor(__js_toLocaleString)
  }
  function toString(): String {
    """
    Returns a string representation of an array.
    """
    aliasFor(__js_toString)
  }
  function valueOf(): Float64Array {
    """
    Returns the primitive value of the specified object.
    """
    aliasFor(__js_valueOf)
  }
}

typedef PropertyKey = String | Number

interface PropertyDescriptor {
  "TODO"
}

interface PropertyDescriptorMap {
  "TODO"
}

interface RegExpMatchArray {
  const length: Number = aliasFor(__js_length)

  const index: Number? "The index of the search at which the result was found." = aliasFor(__js_index)

  const input: Number? "A copy of the search string." = aliasFor(__js_input)

  function __getitem__(i: Number): String {
    aliasFor(__op_getitem__)
  }
}

interface RegExpExecArray {
  const length: Number = aliasFor(__js_length)

  const index: Number? "The index of the search at which the result was found." = aliasFor(__js_index)

  const input: Number? "A copy of the search string." = aliasFor(__js_input)

  function __getitem__(i: Number): String {
    aliasFor(__op_getitem__)
  }
}
